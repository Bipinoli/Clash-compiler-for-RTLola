/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire signed [63:0] result_1_0
    , output wire  result_1_1
    , output wire signed [63:0] result_2_0
    , output wire  result_2_1
    , output wire signed [63:0] result_3_0
    , output wire  result_3_1
    );
  wire [260:0] result_4;
  reg  c$app_arg = 1'b0;
  // pipeline2.hs:165:1-116
  reg signed [63:0] out = (64'sd0);
  wire signed [63:0] result_5;
  wire signed [63:0] x;
  wire signed [63:0] y;
  // pipeline2.hs:121:1-91
  reg  aktvOutC = 1'b0;
  // pipeline2.hs:157:1-104
  reg [191:0] out_0 = {64'sd0,   64'sd0,   64'sd0};
  // pipeline2.hs:157:1-104
  wire [191:0] t;
  wire [191:0] result_6;
  wire signed [63:0] x_0;
  // pipeline2.hs:161:1-96
  reg signed [63:0] out_1 = (64'sd0);
  wire signed [63:0] result_7;
  wire signed [63:0] x_1;
  // pipeline2.hs:121:1-91
  reg  pacingC = 1'b0;
  // pipeline2.hs:153:1-96
  reg signed [63:0] out_2 = (64'sd0);
  wire signed [63:0] result_8;
  wire signed [63:0] x_2;
  // pipeline2.hs:121:1-91
  wire signed [63:0] x_3;
  // pipeline2.hs:121:1-91
  wire  pacings;
  wire [67:0] result_9;
  reg [65:0] c$app_arg_0 = {{64'sd0,   1'b0},   1'b0};
  wire [65:0] c$case_alt;
  reg [65:0] c$case_alt_0;
  wire [65:0] c$case_alt_1;
  reg  c$app_arg_1 = 1'b0;
  wire  c$case_alt_2;
  reg  c$case_alt_3;
  reg  c$app_arg_2 = 1'b0;
  wire  c$case_alt_4;
  // pipeline2.hs:36:1-78
  reg [1319:0] buffer = {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
  // pipeline2.hs:36:1-78
  wire [1319:0] c$buffer_case_alt;
  // pipeline2.hs:36:1-78
  wire [1319:0] c$buffer_case_alt_0;
  // pipeline2.hs:36:1-78
  wire [65:0] qData;
  // pipeline2.hs:36:1-78
  reg signed [63:0] cursor = (64'sd0);
  // pipeline2.hs:36:1-78
  wire signed [63:0] c$cursor_case_alt;
  // pipeline2.hs:36:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // pipeline2.hs:36:1-78
  reg signed [63:0] c$cursor_case_alt_1;
  // pipeline2.hs:36:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // pipeline2.hs:36:1-78
  wire  c$cursor_case_scrut;
  // pipeline2.hs:36:1-78
  wire signed [63:0] x_4;
  // pipeline2.hs:36:1-78
  wire signed [63:0] c$cursor_case_alt_3;
  // pipeline2.hs:36:1-78
  wire  pop;
  // pipeline2.hs:36:1-78
  reg signed [63:0] c$cursor_case_alt_4;
  // pipeline2.hs:36:1-78
  wire signed [63:0] c$cursor_case_alt_5;
  // pipeline2.hs:98:1-80
  wire  newX;
  wire [64:0] input0;
  wire signed [63:0] x_projection;
  wire [255:0] t_projection;
  wire [1385:0] c$buffer_case_alt_sel_alt_t_1;
  wire signed [63:0] c$tte_rhs;
  wire [259:0] result;
  wire [64:0] result_0;
  wire [64:0] result_1;
  wire [64:0] result_2;
  wire [64:0] result_3;

  assign input0 = {input0_0,   input0_1};

  assign result_4 = {1'b1,   {{out_2,   pacingC},
                              {$signed(out_0[192-1 -: 64]),   pacingC},
                              {out_1,   aktvOutC},   {out,   c$app_arg}}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= aktvOutC;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_register
    if ( rst) begin
      out <= (64'sd0);
    end else if (en) begin
      out <= result_5;
    end
  end
  // register end

  assign result_5 = aktvOutC ? ((x + y)) : out;

  assign x_projection = $signed(out_0[64-1:0]);

  assign x = x_projection;

  assign y = out_1;

  // delay begin
  always @(posedge clk) begin : aktvOutC_delay
    if (en) begin
      aktvOutC <= pacingC;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_0_register
    if ( rst) begin
      out_0 <= {64'sd0,   64'sd0,   64'sd0};
    end else if (en) begin
      out_0 <= result_6;
    end
  end
  // register end

  assign t_projection = ({(x_0 + 64'sd1),out_0});

  assign t = t_projection[255:64];

  assign result_6 = pacings ? t : out_0;

  assign x_0 = x_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_1_register
    if ( rst) begin
      out_1 <= (64'sd0);
    end else if (en) begin
      out_1 <= result_7;
    end
  end
  // register end

  assign result_7 = pacingC ? ((x_1 + 64'sd1)) : out_1;

  assign x_1 = out_2;

  // delay begin
  always @(posedge clk) begin : pacingC_delay
    if (en) begin
      pacingC <= pacings;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_2_register
    if ( rst) begin
      out_2 <= (64'sd0);
    end else if (en) begin
      out_2 <= result_8;
    end
  end
  // register end

  assign result_8 = pacings ? ((x_2 + 64'sd1)) : out_2;

  assign x_2 = x_3;

  assign x_3 = $signed(result_9[65:2]);

  assign pacings = result_9[0:0];

  assign result_9 = {c$app_arg_2,   c$app_arg_1,
                     c$app_arg_0};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_0_register
    if ( rst) begin
      c$app_arg_0 <= {{64'sd0,   1'b0},   1'b0};
    end else if (en) begin
      c$app_arg_0 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = pop ? c$case_alt_0 : {{64'sd0,
                                             1'b0},   1'b0};

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_0 = {{64'sd0,   1'b0},
                               1'b0};
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  // index begin
  wire [65:0] vecArray [0:20-1];
  genvar i;
  generate
  for (i=0; i < 20; i=i+1) begin : mk_array
    assign vecArray[(20-1)-i] = buffer[i*66+:66];
  end
  endgenerate
  assign c$case_alt_1 = vecArray[c$cursor_case_alt_5];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_1_register
    if ( rst) begin
      c$app_arg_1 <= 1'b0;
    end else if (en) begin
      c$app_arg_1 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = pop ? c$case_alt_3 : 1'b0;

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_3 = 1'b0;
      default : c$case_alt_3 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_2_register
    if ( rst) begin
      c$app_arg_2 <= 1'b0;
    end else if (en) begin
      c$app_arg_2 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = newX ? c$cursor_case_scrut : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = newX ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_1[1385:66] : buffer;

  assign qData = {input0,   newX};

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = newX ? c$cursor_case_alt_0 : c$cursor_case_alt_3;

  assign c$cursor_case_alt_0 = pop ? c$cursor_case_alt_1 : c$cursor_case_alt_2;

  always @(*) begin
    case(x_4)
      64'sd0 : c$cursor_case_alt_1 = 64'sd1;
      default : c$cursor_case_alt_1 = cursor;
    endcase
  end

  assign c$cursor_case_alt_2 = c$cursor_case_scrut ? ((x_4 + 64'sd1)) : cursor;

  assign c$tte_rhs = (x_4 != 64'sd20) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs[0];

  assign x_4 = cursor;

  assign c$cursor_case_alt_3 = pop ? c$cursor_case_alt_4 : cursor;

  assign pop = result_4[260:260];

  always @(*) begin
    case(x_4)
      64'sd0 : c$cursor_case_alt_4 = 64'sd0;
      default : c$cursor_case_alt_4 = c$cursor_case_alt_5;
    endcase
  end

  assign c$cursor_case_alt_5 = (x_4 - 64'sd1);

  assign result = result_4[259:0];

  assign newX = input0[0:0];

  assign result_0 = result[259:195];

  assign result_1 = result[194:130];

  assign result_2 = result[129:65];

  assign result_3 = result[64:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = $signed(result_1[64:1]);

  assign result_1_1 = result_1[0:0];

  assign result_2_0 = $signed(result_2[64:1]);

  assign result_2_1 = result_2[0:0];

  assign result_3_0 = $signed(result_3[64:1]);

  assign result_3_1 = result_3[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire  result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_1
    );
  // sliding_window_and_event_based.hs:125:1-81
  wire  timer2Over;
  // sliding_window_and_event_based.hs:125:1-81
  wire  timer1Over;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  wire signed [63:0] result_5;
  wire signed [63:0] x_0;
  reg signed [63:0] result_6 = (64'sd0);
  wire [64:0] input0;
  wire [132:0] result;
  wire [68:0] result_0;
  wire [64:0] result_0_0;
  wire [1:0] result_0_1;
  wire [1:0] result_0_2;

  assign input0 = {input0_0,   input0_1};

  assign timer2Over = result_6 >= (64'sd2000000);

  assign timer1Over = result_4 >= (64'sd1000000);

  assign result = {{input0,   {timer1Over,
                               timer2Over},   {timer1Over,   timer2Over}},
                   result_4};

  assign result_3 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign result_5 = timer2Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= (64'sd0);
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign result_0 = result[132:64];

  assign result_1 = $signed(result[63:0]);

  assign result_0_0 = result_0[68:4];

  assign result_0_1 = result_0[3:2];

  assign result_0_2 = result_0[1:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = result_0_1[1:1];

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = result_0_2[1:1];

  assign result_0_2_1 = result_0_2[0:0];


endmodule


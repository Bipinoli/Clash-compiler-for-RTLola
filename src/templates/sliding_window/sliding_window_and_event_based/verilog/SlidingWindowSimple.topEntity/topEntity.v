/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_1_0
    , output wire [1:0] result_1_1
    , output wire signed [63:0] result_1_2_0
    , output wire signed [63:0] result_1_2_1
    , output wire signed [63:0] result_1_2_2
    , output wire signed [63:0] result_1_2_3
    , output wire  result_1_3
    , output wire  result_1_4
    , output wire  result_1_5
    , output wire  result_1_6
    , output wire signed [63:0] result_1_7
    , output wire  result_1_8
    , output wire  result_1_9
    , output wire  result_1_10
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [132:0] result_4;
  // sliding_window_and_event_based.hs:150:1-89
  wire  newX;
  // sliding_window_and_event_based.hs:150:1-89
  wire  timer1Over;
  wire [455:0] result_5;
  // sliding_window_and_event_based.hs:235:1-116
  wire  eta;
  // sliding_window_and_event_based.hs:235:1-116
  reg signed [63:0] out = (64'sd0);
  // sliding_window_and_event_based.hs:235:1-116
  wire signed [63:0] t;
  wire signed [63:0] result_6;
  // sliding_window_and_event_based.hs:185:1-156
  wire  pacingB;
  wire  result_7;
  // sliding_window_and_event_based.hs:185:1-156
  wire  pacingA;
  wire  result_8;
  // sliding_window_and_event_based.hs:185:1-156
  wire signed [63:0] x1;
  // sliding_window_and_event_based.hs:185:1-156
  wire signed [63:0] x_0;
  wire  result_9;
  // sliding_window_and_event_based.hs:252:1-140
  wire signed [63:0] y;
  // sliding_window_and_event_based.hs:252:1-140
  wire signed [63:0] x2;
  // sliding_window_and_event_based.hs:252:1-140
  wire signed [63:0] x1_0;
  // sliding_window_and_event_based.hs:252:1-140
  reg [255:0] window = {64'sd0,   64'sd0,   64'sd0,   64'sd0};
  wire [255:0] result_10;
  wire [255:0] result_11;
  // sliding_window_and_event_based.hs:252:1-140
  wire [255:0] c$t_case_alt;
  // sliding_window_and_event_based.hs:252:1-140
  wire [255:0] c$t_case_alt_0;
  // sliding_window_and_event_based.hs:252:1-140
  wire [255:0] updatedWin;
  // sliding_window_and_event_based.hs:252:1-140
  wire  wild2;
  // sliding_window_and_event_based.hs:185:1-156
  wire  slideB;
  // sliding_window_and_event_based.hs:185:1-156
  wire [64:0] hasDataX;
  wire  result_12;
  // sliding_window_and_event_based.hs:183:24-25
  wire signed [63:0] \a# ;
  // sliding_window_and_event_based.hs:185:1-156
  reg [1:0] c$state_app_arg;
  // sliding_window_and_event_based.hs:185:1-156
  reg [1:0] state = 2'd0;
  // sliding_window_and_event_based.hs:185:1-156
  wire [1:0] c$state_case_alt;
  // sliding_window_and_event_based.hs:185:1-156
  wire [67:0] c$eventInfo_app_arg;
  // sliding_window_and_event_based.hs:185:1-156
  reg [67:0] eventInfo = {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}};
  wire [69:0] result_13;
  reg [67:0] c$app_arg = {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}};
  wire [67:0] c$case_alt;
  reg [67:0] c$case_alt_0;
  wire [67:0] c$case_alt_1;
  reg  c$app_arg_0 = 1'b0;
  wire  c$case_alt_2;
  reg  c$case_alt_3;
  reg  c$app_arg_1 = 1'b0;
  wire  c$case_alt_4;
  // sliding_window_and_event_based.hs:81:1-78
  reg [407:0] buffer = {{{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   1'b0,
                                                  {1'b0,   1'b0}},   {{64'sd0,
                                                                       1'b0},
                                                                      1'b0,
                                                                      {1'b0,
                                                                       1'b0}},
 {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   1'b0,
                                                  {1'b0,   1'b0}},   {{64'sd0,
                                                                       1'b0},
                                                                      1'b0,
                                                                      {1'b0,
                                                                       1'b0}}};
  // sliding_window_and_event_based.hs:81:1-78
  wire [407:0] c$buffer_case_alt;
  // sliding_window_and_event_based.hs:81:1-78
  wire [407:0] c$buffer_case_alt_0;
  // sliding_window_and_event_based.hs:81:1-78
  wire [67:0] qData;
  // sliding_window_and_event_based.hs:81:1-78
  reg signed [63:0] cursor = (64'sd0);
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt;
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // sliding_window_and_event_based.hs:81:1-78
  reg signed [63:0] c$cursor_case_alt_1;
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // sliding_window_and_event_based.hs:81:1-78
  wire  c$cursor_case_scrut;
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] x_1;
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_3;
  // sliding_window_and_event_based.hs:81:1-78
  reg signed [63:0] c$cursor_case_alt_4;
  // sliding_window_and_event_based.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_5;
  // sliding_window_and_event_based.hs:276:1-176
  wire  qPopValid;
  // sliding_window_and_event_based.hs:276:1-176
  wire  qPush;
  // sliding_window_and_event_based.hs:276:1-176
  wire  qPop;
  wire [64:0] input0;
  wire signed [63:0] c$tte_rhs;
  wire signed [63:0] c$tte_rhs_0;
  wire signed [63:0] c$tte_rhs_1;
  wire signed [63:0] x1_projection_0;
  wire [319:0] c$t_case_alt_sel_alt_t_0;
  wire [319:0] c$t_case_alt_sel_alt_f_0;
  wire signed [63:0] c$tte_rhs_2;
  wire [475:0] c$buffer_case_alt_sel_alt_t_1;
  wire signed [63:0] c$tte_rhs_3;
  wire [522:0] result;
  wire [129:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [392:0] result_1;
  wire [255:0] result_1_2;

  assign input0 = {input0_0,   input0_1};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {{newX | (timer1Over | (newX | timer1Over)),
                      {input0,   timer1Over,   {newX,
                                                timer1Over}}},   result_3};

  assign newX = input0[0:0];

  assign timer1Over = result_3 >= (64'sd1000000);

  assign result_5 = {result_9,
                     {{(x1 * 64'sd10),   result_8 & pacingA},
                      {out,   result_8 & pacingB}},   {state,
                                                       window,   x_0,   pacingA,   pacingB,
                                                       slideB}};

  assign eta = result_7 & pacingB;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_register
    if ( rst) begin
      out <= (64'sd0);
    end else if (en) begin
      out <= result_6;
    end
  end
  // register end

  wire [255:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  assign t = acc_2_0;

  assign vec = window;

  assign acc_1 = $signed(vec[255:192]);

  assign acc_2 = $signed(vec[191:128]);

  assign acc_3 = $signed(vec[127:64]);

  assign acc_4 = $signed(vec[63:0]);

  wire signed [63:0] x_3;
  wire signed [63:0] y_0;
  wire signed [63:0] c$case_alt_5;
  assign acc_1_0 = c$case_alt_5;

  assign x_3 = acc_1;

  assign y_0 = acc_2;

  assign c$case_alt_5 = (x_3 + y_0);



  wire signed [63:0] x_4;
  wire signed [63:0] y_1;
  wire signed [63:0] c$case_alt_6;
  assign acc_1_1 = c$case_alt_6;

  assign x_4 = acc_3;

  assign y_1 = acc_4;

  assign c$case_alt_6 = (x_4 + y_1);



  wire signed [63:0] x_5;
  wire signed [63:0] y_2;
  wire signed [63:0] c$case_alt_7;
  assign acc_2_0 = c$case_alt_7;

  assign x_5 = acc_1_0;

  assign y_2 = acc_1_1;

  assign c$case_alt_7 = (x_5 + y_2);





  assign result_6 = eta ? t : out;

  assign pacingB = eventInfo[0:0];

  assign c$tte_rhs = (\a#  == 64'sd2) ? 64'sd1 : 64'sd0;

  assign result_7 = c$tte_rhs[0];

  assign pacingA = eventInfo[1:1];

  assign c$tte_rhs_0 = (\a#  == 64'sd3) ? 64'sd1 : 64'sd0;

  assign result_8 = c$tte_rhs_0[0];

  assign x1 = x_0;

  assign x_0 = $signed(hasDataX[64:1]);

  assign c$tte_rhs_1 = (\a#  == 64'sd0) ? 64'sd1 : 64'sd0;

  assign result_9 = c$tte_rhs_1[0];

  assign y = x2;

  assign x2 = $signed(hasDataX[64:1]);

  assign x1_projection_0 = $signed(window[64-1:0]);

  assign x1_0 = x1_projection_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {64'sd0,   64'sd0,   64'sd0,   64'sd0};
    end else if (en) begin
      window <= result_10;
    end
  end
  // register end

  assign result_10 = result_12 ? result_11 : window;

  assign result_11 = slideB ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({updatedWin,64'sd0});

  assign c$t_case_alt_sel_alt_f_0 = ({window,64'sd0});

  assign c$t_case_alt = wild2 ? c$t_case_alt_sel_alt_t_0[255:0] : c$t_case_alt_sel_alt_f_0[255:0];

  assign c$t_case_alt_0 = wild2 ? updatedWin : window;

  // vector replace begin
  genvar i;
  generate
  for (i=0;i<4;i=i+1) begin : vector_replace
    assign updatedWin[(3-i)*64+:64] = (64'sd3) == i ? ((x1_0 + y)) : window[(3-i)*64+:64];
  end
  endgenerate
  // vector replace end

  assign wild2 = hasDataX[0:0];

  assign slideB = eventInfo[2:2];

  assign hasDataX = eventInfo[67:3];

  assign c$tte_rhs_2 = (\a#  == 64'sd1) ? 64'sd1 : 64'sd0;

  assign result_12 = c$tte_rhs_2[0];

  assign \a#  = $unsigned(state);

  always @(*) begin
    case(state)
      2'b00 : c$state_app_arg = c$state_case_alt;
      2'b01 : c$state_app_arg = 2'd2;
      2'b10 : c$state_app_arg = 2'd3;
      default : c$state_app_arg = 2'd0;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : state_register
    if ( rst) begin
      state <= 2'd0;
    end else if (en) begin
      state <= c$state_app_arg;
    end
  end
  // register end

  assign c$state_case_alt = qPopValid ? 2'd1 : 2'd0;

  assign c$eventInfo_app_arg = qPopValid ? result_13[67:0] : eventInfo;

  // register begin
  always @(posedge clk or  posedge  rst) begin : eventInfo_register
    if ( rst) begin
      eventInfo <= {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}};
    end else if (en) begin
      eventInfo <= c$eventInfo_app_arg;
    end
  end
  // register end

  assign result_13 = {c$app_arg_1,   c$app_arg_0,
                      c$app_arg};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_register
    if ( rst) begin
      c$app_arg <= {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPop ? c$case_alt_0 : {{64'sd0,
                                              1'b0},   1'b0,   {1'b0,   1'b0}};

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_0 = {{64'sd0,   1'b0},
                               1'b0,   {1'b0,   1'b0}};
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  // index begin
  wire [67:0] vecArray [0:6-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 6; i_0=i_0+1) begin : mk_array
    assign vecArray[(6-1)-i_0] = buffer[i_0*68+:68];
  end
  endgenerate
  assign c$case_alt_1 = vecArray[c$cursor_case_alt_5];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_0_register
    if ( rst) begin
      c$app_arg_0 <= 1'b0;
    end else if (en) begin
      c$app_arg_0 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = qPop ? c$case_alt_3 : 1'b0;

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_3 = 1'b0;
      default : c$case_alt_3 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_1_register
    if ( rst) begin
      c$app_arg_1 <= 1'b0;
    end else if (en) begin
      c$app_arg_1 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = qPush ? c$cursor_case_scrut : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   1'b0,
                                                    {1'b0,   1'b0}},   {{64'sd0,
                                                                         1'b0},
                                                                        1'b0,
                                                                        {1'b0,
                                                                         1'b0}},
   {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   1'b0,
                                                    {1'b0,   1'b0}},   {{64'sd0,
                                                                         1'b0},
                                                                        1'b0,
                                                                        {1'b0,
                                                                         1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_1[475:68] : buffer;

  assign qData = result_4[131:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_3;

  assign c$cursor_case_alt_0 = qPop ? c$cursor_case_alt_1 : c$cursor_case_alt_2;

  always @(*) begin
    case(x_1)
      64'sd0 : c$cursor_case_alt_1 = 64'sd1;
      default : c$cursor_case_alt_1 = cursor;
    endcase
  end

  assign c$cursor_case_alt_2 = c$cursor_case_scrut ? ((x_1 + 64'sd1)) : cursor;

  assign c$tte_rhs_3 = (x_1 != 64'sd6) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_3[0];

  assign x_1 = cursor;

  assign c$cursor_case_alt_3 = qPop ? c$cursor_case_alt_4 : cursor;

  always @(*) begin
    case(x_1)
      64'sd0 : c$cursor_case_alt_4 = 64'sd0;
      default : c$cursor_case_alt_4 = c$cursor_case_alt_5;
    endcase
  end

  assign c$cursor_case_alt_5 = (x_1 - 64'sd1);

  assign result = {result_5[454:325],
                   {$signed(result_4[63:0]),   result_5[324:323],
                    result_5[322:67],   qPush,   qPop,
                    result_13[69:69],   qPopValid,
                    $signed(result_5[66:3]),   result_5[2:2],
                    result_5[1:1],   result_5[0:0]}};

  assign qPopValid = result_13[68:68];

  assign qPush = result_4[132:132];

  assign qPop = result_5[455:455];

  assign result_0 = result[522:393];

  assign result_1 = result[392:0];

  assign result_0_0 = result_0[129:65];

  assign result_0_1 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_1_0 = $signed(result_1[392:329]);

  assign result_1_1 = result_1[328:327];

  assign result_1_2 = result_1[326:71];

  assign result_1_3 = result_1[70:70];

  assign result_1_4 = result_1[69:69];

  assign result_1_5 = result_1[68:68];

  assign result_1_6 = result_1[67:67];

  assign result_1_7 = $signed(result_1[66:3]);

  assign result_1_8 = result_1[2:2];

  assign result_1_9 = result_1[1:1];

  assign result_1_10 = result_1[0:0];

  assign result_1_2_0 = $signed(result_1_2[255:192]);

  assign result_1_2_1 = $signed(result_1_2[191:128]);

  assign result_1_2_2 = $signed(result_1_2[127:64]);

  assign result_1_2_3 = $signed(result_1_2[63:0]);


endmodule


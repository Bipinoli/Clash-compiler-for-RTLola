/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [31:0] a

      // Outputs
    , output wire signed [31:0] result_0
    , output wire signed [31:0] result_1
    , output wire signed [31:0] result_2
    , output wire signed [31:0] result_3
    );
  // offset_hold_aggretate/offset_hold_aggregate.hs:7:1-73
  wire  b;
  wire  result_8;
  // offset_hold_aggretate/offset_hold_aggregate.hs:14:5-74
  wire  b_0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:14:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_9;
  reg signed [63:0] result_10 = 64'sd0;
  reg  result_11 = 1'b0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  reg signed [31:0] cur = 32'sd0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  reg signed [31:0] past1 = 32'sd0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  reg signed [31:0] past2 = 32'sd0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  reg signed [31:0] past3 = 32'sd0;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  reg signed [31:0] past4 = 32'sd0;
  wire [159:0] result_12;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  wire signed [31:0] c$past4_app_arg;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  wire signed [31:0] c$past3_app_arg;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  wire signed [31:0] c$past2_app_arg;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  wire signed [31:0] c$past1_app_arg;
  // offset_hold_aggretate/offset_hold_aggregate.hs:34:1-120
  wire signed [31:0] c$cur_app_arg;
  reg signed [31:0] result_13 = 32'sd10;
  // offset_hold_aggretate/offset_hold_aggregate.hs:7:1-73
  wire  b_1;
  wire  result_14;
  // offset_hold_aggretate/offset_hold_aggregate.hs:14:5-74
  wire  b_2;
  // offset_hold_aggretate/offset_hold_aggregate.hs:14:5-74
  wire signed [63:0] t_0;
  wire signed [63:0] result_15;
  reg signed [63:0] result_16 = 64'sd0;
  reg  result_17 = 1'b0;
  wire signed [31:0] result_18;
  // offset_hold_aggretate/offset_hold_aggregate.hs:54:1-120
  wire signed [31:0] x1;
  // offset_hold_aggretate/offset_hold_aggregate.hs:54:1-120
  wire signed [31:0] x2;
  // offset_hold_aggretate/offset_hold_aggregate.hs:54:1-120
  wire signed [31:0] x3;
  // offset_hold_aggretate/offset_hold_aggregate.hs:54:1-120
  wire signed [31:0] x4;
  // offset_hold_aggretate/offset_hold_aggregate.hs:54:1-120
  wire signed [31:0] x5;
  reg signed [31:0] result_19 = 32'sd0;
  wire [127:0] result;

  assign b = result_10 < 64'sd5000;

  assign result_8 = b ? 1'b1 : 1'b0;

  assign b_0 = result_10 < 64'sd9999;

  assign t = result_10 + 64'sd1;

  assign result_9 = b_0 ? t : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= 64'sd0;
    end else if (en) begin
      result_10 <= result_9;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_11_register
    if ( rst) begin
      result_11 <= 1'b0;
    end else if (en) begin
      result_11 <= result_8;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : cur_register
    if ( rst) begin
      cur <= 32'sd0;
    end else if (en) begin
      cur <= c$cur_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past1_register
    if ( rst) begin
      past1 <= 32'sd0;
    end else if (en) begin
      past1 <= c$past1_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past2_register
    if ( rst) begin
      past2 <= 32'sd0;
    end else if (en) begin
      past2 <= c$past2_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past3_register
    if ( rst) begin
      past3 <= 32'sd0;
    end else if (en) begin
      past3 <= c$past3_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past4_register
    if ( rst) begin
      past4 <= 32'sd0;
    end else if (en) begin
      past4 <= c$past4_app_arg;
    end
  end
  // register end

  assign result_12 = {cur,   past1,   past2,
                      past3,   past4};

  assign c$past4_app_arg = result_11 ? past3 : past4;

  assign c$past3_app_arg = result_11 ? past2 : past3;

  assign c$past2_app_arg = result_11 ? past1 : past2;

  assign c$past1_app_arg = result_11 ? cur : past1;

  assign c$cur_app_arg = result_11 ? a : cur;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_13_register
    if ( rst) begin
      result_13 <= 32'sd10;
    end else if (en) begin
      result_13 <= $signed(result_12[95:64]);
    end
  end
  // register end

  assign b_1 = result_16 < 64'sd10000;

  assign result_14 = b_1 ? 1'b1 : 1'b0;

  assign b_2 = result_16 < 64'sd19999;

  assign t_0 = result_16 + 64'sd1;

  assign result_15 = b_2 ? t_0 : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= 64'sd0;
    end else if (en) begin
      result_16 <= result_15;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_17_register
    if ( rst) begin
      result_17 <= 1'b0;
    end else if (en) begin
      result_17 <= result_14;
    end
  end
  // register end

  assign result_18 = result_17 ? ((((x1 + x2) + x3) + x4) + x5) : result_19;

  assign x1 = $signed(result_12[159:128]);

  assign x2 = $signed(result_12[127:96]);

  assign x3 = $signed(result_12[95:64]);

  assign x4 = $signed(result_12[63:32]);

  assign x5 = $signed(result_12[31:0]);

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= 32'sd0;
    end else if (en) begin
      result_19 <= result_18;
    end
  end
  // register end

  assign result = {a,
                   $signed(result_12[159:128]),   result_13,
                   result_19};

  assign result_0 = $signed(result[127:96]);

  assign result_1 = $signed(result[95:64]);

  assign result_2 = $signed(result[63:32]);

  assign result_3 = $signed(result[31:0]);


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [31:0] a

      // Outputs
    , output wire signed [31:0] result_0
    , output wire signed [31:0] result_1
    , output wire signed [31:0] result_2
    , output wire signed [31:0] result_3
    );
  wire signed [31:0] result_8;
  reg signed [31:0] result_9 = 32'sd10;
  // diff_freqs_simple.hs:11:1-73
  wire  b;
  wire  result_10;
  // diff_freqs_simple.hs:18:5-74
  wire  b_0;
  // diff_freqs_simple.hs:18:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_11;
  reg signed [63:0] result_12 = 64'sd0;
  reg  result_13 = 1'b0;
  wire signed [31:0] result_14;
  reg signed [31:0] result_15 = 32'sd10;
  // diff_freqs_simple.hs:11:1-73
  wire  b_1;
  wire  result_16;
  // diff_freqs_simple.hs:18:5-74
  wire  b_2;
  // diff_freqs_simple.hs:18:5-74
  wire signed [63:0] t_0;
  wire signed [63:0] result_17;
  reg signed [63:0] result_18 = 64'sd0;
  reg  result_19 = 1'b0;
  wire [127:0] result;

  assign result = {a,   result_9,   result_15,
                   result_9 + result_15};

  assign result_8 = result_13 ? a : result_9;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= 32'sd10;
    end else if (en) begin
      result_9 <= result_8;
    end
  end
  // register end

  assign b = result_12 == 64'sd9999;

  assign result_10 = b ? 1'b1 : 1'b0;

  assign b_0 = result_12 < 64'sd9999;

  assign t = result_12 + 64'sd1;

  assign result_11 = b_0 ? t : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= 64'sd0;
    end else if (en) begin
      result_12 <= result_11;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_13_register
    if ( rst) begin
      result_13 <= 1'b0;
    end else if (en) begin
      result_13 <= result_10;
    end
  end
  // register end

  assign result_14 = result_19 ? a : result_15;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= 32'sd10;
    end else if (en) begin
      result_15 <= result_14;
    end
  end
  // register end

  assign b_1 = result_18 == 64'sd19999;

  assign result_16 = b_1 ? 1'b1 : 1'b0;

  assign b_2 = result_18 < 64'sd19999;

  assign t_0 = result_18 + 64'sd1;

  assign result_17 = b_2 ? t_0 : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_18_register
    if ( rst) begin
      result_18 <= 64'sd0;
    end else if (en) begin
      result_18 <= result_17;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= 1'b0;
    end else if (en) begin
      result_19 <= result_16;
    end
  end
  // register end

  assign result_0 = $signed(result[127:96]);

  assign result_1 = $signed(result[95:64]);

  assign result_2 = $signed(result[63:32]);

  assign result_3 = $signed(result[31:0]);


endmodule


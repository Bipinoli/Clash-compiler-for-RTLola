/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [31:0] x
    , input  newX

      // Outputs
    , output wire signed [31:0] result_0
    , output wire signed [31:0] result_1
    , output wire signed [31:0] result_2_0
    , output wire signed [31:0] result_2_1
    );
  wire [36:0] result_4;
  reg  result_5 = 1'b0;
  reg  result_6 = 1'b0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:141:1-116
  wire  c$ds_app_arg;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:111:1-68
  reg signed [63:0] state = 64'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:111:1-68
  wire  b;
  wire signed [63:0] result_7;
  wire signed [63:0] x_0;
  reg  result_8 = 1'b1;
  wire  result_9;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:141:1-116
  wire [35:0] c$ds_app_arg_0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:67:1-88
  reg [172:0] c$ds_app_arg_1 = {{{32'sd0,   1'b0,   1'b0,   1'b0,   1'b0},   {32'sd0,   1'b0,   1'b0,   1'b0,
                                               1'b0},   {32'sd0,   1'b0,
                                                         1'b0,   1'b0,
                                                         1'b0}},   64'sd0,
 1'b1};
  wire [37:0] result_10;
  wire [210:0] result_11;
  wire [35:0] c$case_alt;
  wire [35:0] c$case_alt_0;
  wire [35:0] c$case_alt_1;
  wire  c$case_scrut;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire  newIsEmpty;
  wire [107:0] c$case_alt_2;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [107:0] memory;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt_0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt_1;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt_2;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt_3;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire  c$ds_case_scrut;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire [65:0] c$ds_case_alt_4;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire  c$ds_case_scrut_0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  reg [65:0] c$ds_case_alt_5;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  reg  c$ds_case_alt_6;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:44:1-6
  wire signed [63:0] x_1;
  wire [35:0] result_12;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:104:1-94
  wire signed [31:0] t;
  wire signed [31:0] result_13;
  reg signed [31:0] result_14 = 32'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:92:1-110
  wire signed [31:0] eta1;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:92:1-110
  reg signed [31:0] cur = 32'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:92:1-110
  reg signed [31:0] past1 = 32'sd0;
  wire [63:0] result_15;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:92:1-110
  wire signed [31:0] c$past1_app_arg;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:92:1-110
  wire signed [31:0] c$cur_app_arg;
  wire signed [31:0] result_16;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:98:1-121
  wire signed [31:0] t_0;
  reg signed [31:0] result_17 = 32'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:141:1-116
  wire  pushToQ;
  wire signed [63:0] c$tte_rhs;
  wire [143:0] c$case_alt_sel_alt_t_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [127:0] result;
  wire [63:0] result_2_2;

  assign result_4 = {newX,   x,   newX,   newX,
                     result_6,   result_5};

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= 1'b0;
    end else if (en) begin
      result_5 <= result_6;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= 1'b0;
    end else if (en) begin
      result_6 <= newX;
    end
  end
  // register end

  assign c$ds_app_arg = pushToQ ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : state_register
    if ( rst) begin
      state <= 64'sd0;
    end else if (en) begin
      state <= result_7;
    end
  end
  // register end

  assign b = state == 64'sd3;

  assign result_7 = b ? 64'sd0 : (x_0 + 64'sd1);

  assign x_0 = state;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= 1'b1;
    end else if (en) begin
      result_8 <= (result_7 == 64'sd0);
    end
  end
  // register end

  assign result_9 = result_8 ? 1'b1 : 1'b0;

  assign c$ds_app_arg_0 = pushToQ ? {$signed(result_4[35:4]),
                                     result_4[3:3],   result_4[2:2],
                                     result_4[1:1],   result_4[0:0]} : {32'sd0,
                                                                        1'b0,   1'b0,   1'b0,   1'b0};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_1_register
    if ( rst) begin
      c$ds_app_arg_1 <= {{{32'sd0,   1'b0,   1'b0,   1'b0,   1'b0},   {32'sd0,   1'b0,   1'b0,   1'b0,
                                                 1'b0},   {32'sd0,   1'b0,
                                                           1'b0,   1'b0,
                                                           1'b0}},   64'sd0,
   1'b1};
    end else if (en) begin
      c$ds_app_arg_1 <= result_11[210:38];
    end
  end
  // register end

  assign result_10 = result_11[37:0];

  assign result_11 = {{c$case_alt_2,
                       $signed(c$ds_case_alt[65:2]),   newIsEmpty},
                      {newIsEmpty,   c$ds_case_alt[0:0],
                       c$case_alt}};

  assign c$case_alt = result_9 ? c$case_alt_0 : c$ds_app_arg_0;

  assign c$case_alt_0 = c$case_scrut ? c$case_alt_1 : (memory[108-1 -: 36]);

  // index begin
  wire [35:0] vecArray [0:3-1];
  genvar i;
  generate
  for (i=0; i < 3; i=i+1) begin : mk_array
    assign vecArray[(3-1)-i] = memory[i*36+:36];
  end
  endgenerate
  assign c$case_alt_1 = vecArray[(x_1 - 64'sd1)];
  // index end

  assign c$tte_rhs = (x_1 > 64'sd0) ? 64'sd1 : 64'sd0;

  assign c$case_scrut = c$tte_rhs[0];

  assign newIsEmpty = c$ds_case_alt[1:1];

  assign c$case_alt_sel_alt_t_2 = ({c$ds_app_arg_0,memory});

  assign c$case_alt_2 = c$ds_app_arg ? c$case_alt_sel_alt_t_2[143:36] : memory;

  assign memory = c$ds_app_arg_1[172:65];

  assign c$ds_case_alt = c$ds_app_arg ? c$ds_case_alt_0 : c$ds_case_alt_1;

  assign c$ds_case_alt_0 = result_9 ? c$ds_case_alt_2 : c$ds_case_alt_3;

  assign c$ds_case_alt_1 = result_9 ? c$ds_case_alt_4 : {$signed(c$ds_app_arg_1[64:1]),
                                                         c$ds_app_arg_1[0:0],   1'b0};

  assign c$ds_case_alt_2 = c$ds_case_scrut_0 ? {x_1 + 64'sd1,
                                                1'b0,
                                                1'b0} : {$signed(c$ds_app_arg_1[64:1]),
                                                         1'b0,   1'b1};

  assign c$ds_case_alt_3 = c$ds_case_scrut ? {$signed(c$ds_app_arg_1[64:1]),
                                              1'b0,   1'b0} : {x_1 + 64'sd1,   1'b0,   1'b0};

  assign c$tte_rhs_0 = (x_1 == 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$ds_case_scrut = c$tte_rhs_0[0];

  assign c$ds_case_alt_4 = c$ds_case_scrut_0 ? {$signed(c$ds_app_arg_1[64:1]),
                                                1'b1,   1'b0} : c$ds_case_alt_5;

  assign c$ds_case_scrut_0 = c$ds_case_alt_6 | c$ds_app_arg_1[0:0];

  always @(*) begin
    case(x_1)
      64'sd1 : c$ds_case_alt_5 = {64'sd0,   1'b1,
                                  1'b1};
      default : c$ds_case_alt_5 = {x_1 - 64'sd1,
                                   1'b0,   1'b1};
    endcase
  end

  always @(*) begin
    case(x_1)
      64'sd0 : c$ds_case_alt_6 = 1'b1;
      default : c$ds_case_alt_6 = 1'b0;
    endcase
  end

  assign x_1 = $signed(c$ds_app_arg_1[64:1]);

  assign result_12 = result_10[36:36] ? result_10[35:0] : {32'sd0,
                                                           1'b0,   1'b0,   1'b0,   1'b0};

  assign t = result_17 + 32'sd1;

  assign result_13 = result_12[1:1] ? t : result_14;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_14_register
    if ( rst) begin
      result_14 <= 32'sd0;
    end else if (en) begin
      result_14 <= result_13;
    end
  end
  // register end

  assign eta1 = result_14 + 32'sd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cur_register
    if ( rst) begin
      cur <= 32'sd0;
    end else if (en) begin
      cur <= c$cur_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past1_register
    if ( rst) begin
      past1 <= 32'sd0;
    end else if (en) begin
      past1 <= c$past1_app_arg;
    end
  end
  // register end

  assign result_15 = {cur,   past1};

  assign c$past1_app_arg = result_12[0:0] ? cur : past1;

  assign c$cur_app_arg = result_12[0:0] ? eta1 : cur;

  assign result_16 = result_12[2:2] ? t_0 : result_17;

  assign t_0 = $signed(result_12[35:4]) + $signed(result_15[31:0]);

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_17_register
    if ( rst) begin
      result_17 <= 32'sd0;
    end else if (en) begin
      result_17 <= result_16;
    end
  end
  // register end

  assign result = {result_17,   result_14,
                   result_15};

  assign pushToQ = result_4[36:36];

  assign result_0 = $signed(result[127:96]);

  assign result_1 = $signed(result[95:64]);

  assign result_2_2 = result[63:0];

  assign result_2_0 = $signed(result_2_2[63:32]);

  assign result_2_1 = $signed(result_2_2[31:0]);


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [31:0] x1
    , input signed [31:0] x2
    , input signed [31:0] x3
    , input  hasX1
    , input  hasX2
    , input  hasX3

      // Outputs
    , output wire signed [31:0] result_0
    , output wire signed [31:0] result_1
    , output wire signed [31:0] result_2
    , output wire signed [31:0] result_3
    , output wire signed [31:0] result_4
    , output wire signed [31:0] result_5
    , output wire signed [31:0] result_6
    , output wire signed [31:0] result_7
    , output wire signed [31:0] result_8
    , output wire signed [31:0] result_9
    , output wire signed [31:0] result_10
    , output wire signed [31:0] result_11
    );
  wire signed [31:0] result_24;
  reg signed [31:0] result_25 = 32'sd0;
  // pacings/pacings.hs:7:1-73
  wire  b;
  wire  result_26;
  // pacings/pacings.hs:14:5-74
  wire  b_0;
  // pacings/pacings.hs:14:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_27;
  reg signed [63:0] result_28 = 64'sd0;
  reg  result_29 = 1'b0;
  wire signed [31:0] result_30;
  reg signed [31:0] result_31 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_0;
  wire signed [31:0] result_32;
  reg signed [31:0] result_33 = 32'sd0;
  // pacings/pacings.hs:130:1-9
  reg signed [31:0] holdA = -32'sd1;
  reg signed [31:0] c$app_arg = -32'sd1;
  // pacings/pacings.hs:7:1-73
  wire  b_1;
  wire  result_34;
  // pacings/pacings.hs:14:5-74
  wire  b_2;
  // pacings/pacings.hs:14:5-74
  wire signed [63:0] t_1;
  wire signed [63:0] result_35;
  reg signed [63:0] result_36 = 64'sd0;
  reg  result_37 = 1'b0;
  // pacings/pacings.hs:70:1-113
  wire  eta;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_2;
  wire signed [31:0] result_38;
  reg signed [31:0] result_39 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire  eta_0;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_3;
  wire signed [31:0] result_40;
  reg signed [31:0] result_41 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_4;
  wire signed [31:0] result_42;
  reg signed [31:0] result_43 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_5;
  wire signed [31:0] result_44;
  reg signed [31:0] result_45 = 32'sd0;
  // pacings/pacings.hs:130:1-9
  reg signed [31:0] c$a_app_arg = 32'sd0;
  // pacings/pacings.hs:130:1-9
  reg signed [31:0] c$a_app_arg_0 = 32'sd0;
  // pacings/pacings.hs:130:1-9
  wire  c$a_app_arg_1;
  // pacings/pacings.hs:70:1-113
  wire  eta_1;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_6;
  wire signed [31:0] result_46;
  reg signed [31:0] result_47 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_7;
  wire signed [31:0] result_48;
  reg signed [31:0] result_49 = 32'sd0;
  // pacings/pacings.hs:70:1-113
  wire  eta_2;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_8;
  wire signed [31:0] result_50;
  reg signed [31:0] result_51 = 32'sd0;
  // pacings/pacings.hs:56:1-116
  reg signed [31:0] cur = -32'sd1;
  // pacings/pacings.hs:56:1-116
  reg signed [31:0] past1 = -32'sd1;
  // pacings/pacings.hs:56:1-116
  reg signed [31:0] past2 = -32'sd1;
  wire [95:0] result_52;
  // pacings/pacings.hs:56:1-116
  wire signed [31:0] c$past2_app_arg;
  // pacings/pacings.hs:56:1-116
  wire signed [31:0] c$past1_app_arg;
  // pacings/pacings.hs:56:1-116
  wire signed [31:0] c$cur_app_arg;
  wire signed [31:0] result_53;
  // pacings/pacings.hs:70:1-113
  wire signed [31:0] t_9;
  wire signed [31:0] result_54;
  reg signed [31:0] result_55 = 32'sd0;
  // pacings/pacings.hs:130:1-9
  reg signed [31:0] holdBx2 = -32'sd1;
  // pacings/pacings.hs:130:1-9
  reg signed [31:0] holdBx1 = -32'sd1;
  wire [383:0] result;

  assign result = {result_45,   result_47,
                   result_49,   result_51,   result_55,
                   result_43,   result_41,   result_39,
                   result_33,   result_31,   result_53,
                   result_25};

  assign result_24 = result_29 ? result_53 : result_25;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= 32'sd0;
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign b = result_28 < 64'sd10000;

  assign result_26 = b ? 1'b1 : 1'b0;

  assign b_0 = result_28 < 64'sd19999;

  assign t = result_28 + 64'sd1;

  assign result_27 = b_0 ? t : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_28_register
    if ( rst) begin
      result_28 <= 64'sd0;
    end else if (en) begin
      result_28 <= result_27;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= 1'b0;
    end else if (en) begin
      result_29 <= result_26;
    end
  end
  // register end

  assign result_30 = result_37 ? holdA : result_31;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_31_register
    if ( rst) begin
      result_31 <= 32'sd0;
    end else if (en) begin
      result_31 <= result_30;
    end
  end
  // register end

  assign t_0 = holdA + c$app_arg;

  assign result_32 = result_37 ? t_0 : result_33;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_33_register
    if ( rst) begin
      result_33 <= 32'sd0;
    end else if (en) begin
      result_33 <= result_32;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : holdA_register
    if ( rst) begin
      holdA <= -32'sd1;
    end else if (en) begin
      holdA <= result_45;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_register
    if ( rst) begin
      c$app_arg <= -32'sd1;
    end else if (en) begin
      c$app_arg <= result_47;
    end
  end
  // register end

  assign b_1 = result_36 < 64'sd5000;

  assign result_34 = b_1 ? 1'b1 : 1'b0;

  assign b_2 = result_36 < 64'sd9999;

  assign t_1 = result_36 + 64'sd1;

  assign result_35 = b_2 ? t_1 : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_36_register
    if ( rst) begin
      result_36 <= 64'sd0;
    end else if (en) begin
      result_36 <= result_35;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_37_register
    if ( rst) begin
      result_37 <= 1'b0;
    end else if (en) begin
      result_37 <= result_34;
    end
  end
  // register end

  assign eta = hasX1 & (hasX2 & hasX3);

  assign t_2 = result_45 + result_49;

  assign result_38 = eta ? t_2 : result_39;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_39_register
    if ( rst) begin
      result_39 <= 32'sd0;
    end else if (en) begin
      result_39 <= result_38;
    end
  end
  // register end

  assign eta_0 = hasX1 | c$a_app_arg_1;

  assign t_3 = result_47 + result_55;

  assign result_40 = eta_0 ? t_3 : result_41;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_41_register
    if ( rst) begin
      result_41 <= 32'sd0;
    end else if (en) begin
      result_41 <= result_40;
    end
  end
  // register end

  assign t_4 = result_51 + result_55;

  assign result_42 = hasX1 ? t_4 : result_43;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_43_register
    if ( rst) begin
      result_43 <= 32'sd0;
    end else if (en) begin
      result_43 <= result_42;
    end
  end
  // register end

  assign t_5 = c$a_app_arg_0 + c$a_app_arg;

  assign result_44 = c$a_app_arg_1 ? t_5 : result_45;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_45_register
    if ( rst) begin
      result_45 <= 32'sd0;
    end else if (en) begin
      result_45 <= result_44;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$a_app_arg_register
    if ( rst) begin
      c$a_app_arg <= 32'sd0;
    end else if (en) begin
      c$a_app_arg <= x2;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$a_app_arg_0_register
    if ( rst) begin
      c$a_app_arg_0 <= 32'sd0;
    end else if (en) begin
      c$a_app_arg_0 <= x1;
    end
  end
  // register end

  assign c$a_app_arg_1 = hasX1 & hasX2;

  assign eta_1 = hasX1 | hasX2;

  assign t_6 = holdBx1 + holdBx2;

  assign result_46 = eta_1 ? t_6 : result_47;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_47_register
    if ( rst) begin
      result_47 <= 32'sd0;
    end else if (en) begin
      result_47 <= result_46;
    end
  end
  // register end

  assign t_7 = holdBx1 + holdBx2;

  assign result_48 = hasX3 ? t_7 : result_49;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_49_register
    if ( rst) begin
      result_49 <= 32'sd0;
    end else if (en) begin
      result_49 <= result_48;
    end
  end
  // register end

  assign eta_2 = hasX1 | (hasX2 | hasX3);

  assign t_8 = holdBx1 + holdBx2;

  assign result_50 = eta_2 ? t_8 : result_51;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_51_register
    if ( rst) begin
      result_51 <= 32'sd0;
    end else if (en) begin
      result_51 <= result_50;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : cur_register
    if ( rst) begin
      cur <= -32'sd1;
    end else if (en) begin
      cur <= c$cur_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past1_register
    if ( rst) begin
      past1 <= -32'sd1;
    end else if (en) begin
      past1 <= c$past1_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past2_register
    if ( rst) begin
      past2 <= -32'sd1;
    end else if (en) begin
      past2 <= c$past2_app_arg;
    end
  end
  // register end

  assign result_52 = {cur,   past1,   past2};

  assign c$past2_app_arg = hasX1 ? past1 : past2;

  assign c$past1_app_arg = hasX1 ? cur : past1;

  assign c$cur_app_arg = hasX1 ? result_55 : cur;

  assign result_53 = $signed(result_52[31:0]);

  assign t_9 = holdBx1 + holdBx2;

  assign result_54 = hasX1 ? t_9 : result_55;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_55_register
    if ( rst) begin
      result_55 <= 32'sd0;
    end else if (en) begin
      result_55 <= result_54;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : holdBx2_register
    if ( rst) begin
      holdBx2 <= -32'sd1;
    end else if (en) begin
      holdBx2 <= x2;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : holdBx1_register
    if ( rst) begin
      holdBx1 <= -32'sd1;
    end else if (en) begin
      holdBx1 <= x1;
    end
  end
  // register end

  assign result_0 = $signed(result[383:352]);

  assign result_1 = $signed(result[351:320]);

  assign result_2 = $signed(result[319:288]);

  assign result_3 = $signed(result[287:256]);

  assign result_4 = $signed(result[255:224]);

  assign result_5 = $signed(result[223:192]);

  assign result_6 = $signed(result[191:160]);

  assign result_7 = $signed(result[159:128]);

  assign result_8 = $signed(result[127:96]);

  assign result_9 = $signed(result[95:64]);

  assign result_10 = $signed(result[63:32]);

  assign result_11 = $signed(result[31:0]);


endmodule


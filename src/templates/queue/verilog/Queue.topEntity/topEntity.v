/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  eta // clock
    , input wire  eta1 // reset
    , input wire  eta2 // enable
    , input wire  eta_0
    , input wire  eta_1
    , input wire signed [63:0] eta_2

      // Outputs
    , output wire  result_0
    , output wire  result_1
    , output wire signed [63:0] result_2
    , output wire signed [63:0] result_3_0_0
    , output wire signed [63:0] result_3_0_1
    , output wire signed [63:0] result_3_0_2
    , output wire signed [63:0] result_3_0_3
    , output wire signed [63:0] result_3_0_4
    , output wire signed [63:0] result_3_1
    );
  // queue.hs:31:1-78
  wire signed [63:0] out;
  // queue.hs:31:1-78
  reg signed [63:0] c$out_case_alt;
  // queue.hs:31:1-78
  wire signed [63:0] c$out_case_alt_0;
  // queue.hs:31:1-78
  wire  out_0;
  // queue.hs:31:1-78
  reg  c$out_case_alt_1;
  // queue.hs:31:1-78
  wire  out_1;
  // queue.hs:31:1-78
  wire [319:0] out_2;
  // queue.hs:31:1-78
  wire [319:0] c$out_case_alt_2;
  // queue.hs:31:1-78
  reg [319:0] \buf  = {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0};
  // queue.hs:31:1-78
  wire signed [63:0] qData;
  // queue.hs:31:1-78
  wire  c$out_case_scrut;
  // queue.hs:31:1-78
  wire signed [63:0] x;
  // queue.hs:31:1-78
  wire signed [63:0] out_3;
  // queue.hs:31:1-78
  wire  push;
  // queue.hs:31:1-78
  wire signed [63:0] c$out_case_alt_3;
  // queue.hs:31:1-78
  wire signed [63:0] c$out_case_alt_4;
  // queue.hs:31:1-78
  wire  pop;
  // queue.hs:31:1-78
  reg signed [63:0] c$out_case_alt_5;
  // queue.hs:31:1-78
  wire signed [63:0] x_0;
  // queue.hs:31:1-78
  reg signed [63:0] cur = (64'sd0);
  wire [65:0] eta_3;
  wire [383:0] c$out_case_alt_sel_alt_t_0;
  wire signed [63:0] c$tte_rhs;
  wire [449:0] result;
  wire [383:0] result_3_2;
  wire [319:0] result_3_0;

  assign eta_3 = {eta_0,   eta_1,   eta_2};

  assign result = {out_1,   out_0,   out,
                   {out_2,   out_3}};

  assign out = pop ? c$out_case_alt : (64'sd0);

  always @(*) begin
    case(x)
      64'sd0 : c$out_case_alt = 64'sd0;
      default : c$out_case_alt = c$out_case_alt_0;
    endcase
  end

  // index begin
  wire signed [63:0] vecArray [0:5-1];
  genvar i;
  generate
  for (i=0; i < 5; i=i+1) begin : mk_array
    assign vecArray[(5-1)-i] = out_2[i*64+:64];
  end
  endgenerate
  assign c$out_case_alt_0 = vecArray[((x - 64'sd1))];
  // index end

  assign out_0 = pop ? c$out_case_alt_1 : 1'b0;

  always @(*) begin
    case(x)
      64'sd0 : c$out_case_alt_1 = 1'b0;
      default : c$out_case_alt_1 = 1'b1;
    endcase
  end

  assign out_1 = pop ? c$out_case_scrut : 1'b0;

  assign out_2 = push ? c$out_case_alt_2 : \buf ;

  assign c$out_case_alt_sel_alt_t_0 = ({qData,\buf });

  assign c$out_case_alt_2 = c$out_case_scrut ? c$out_case_alt_sel_alt_t_0[383:64] : \buf ;

  // register begin
  always @(posedge eta or  posedge  eta1) begin : buf_register
    if ( eta1) begin
      \buf  <= {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0};
    end else if (eta2) begin
      \buf  <= out_2;
    end
  end
  // register end

  assign qData = $signed(eta_3[63:0]);

  assign c$tte_rhs = (x != 64'sd5) ? 64'sd1 : 64'sd0;

  assign c$out_case_scrut = c$tte_rhs[0];

  assign x = out_3;

  assign out_3 = push ? c$out_case_alt_3 : c$out_case_alt_4;

  assign push = eta_3[65:65];

  assign c$out_case_alt_3 = pop ? cur : ((x_0 + 64'sd1));

  assign c$out_case_alt_4 = pop ? c$out_case_alt_5 : cur;

  assign pop = eta_3[64:64];

  always @(*) begin
    case(x_0)
      64'sd0 : c$out_case_alt_5 = 64'sd0;
      default : c$out_case_alt_5 = (x_0 - 64'sd1);
    endcase
  end

  assign x_0 = cur;

  // register begin
  always @(posedge eta or  posedge  eta1) begin : cur_register
    if ( eta1) begin
      cur <= (64'sd0);
    end else if (eta2) begin
      cur <= out_3;
    end
  end
  // register end

  assign result_0 = result[449:449];

  assign result_1 = result[448:448];

  assign result_2 = $signed(result[447:384]);

  assign result_3_2 = result[383:0];

  assign result_3_0 = result_3_2[383:64];

  assign result_3_1 = $signed(result_3_2[63:0]);

  assign result_3_0_0 = $signed(result_3_0[319:256]);

  assign result_3_0_1 = $signed(result_3_0[255:192]);

  assign result_3_0_2 = $signed(result_3_0[191:128]);

  assign result_3_0_3 = $signed(result_3_0[127:64]);

  assign result_3_0_4 = $signed(result_3_0[63:0]);


endmodule


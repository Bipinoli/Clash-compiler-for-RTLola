/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire [2:0] result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    , output wire signed [63:0] result_1_5
    , output wire  result_1_6
    );
  wire [66:0] result_2;
  // not_pipeline.hs:128:1-82
  wire  newX;
  wire [263:0] result_3;
  // not_pipeline.hs:145:1-118
  wire  outAktvABC;
  wire  result_4;
  wire  result_5;
  // not_pipeline.hs:198:1-98
  wire  eta;
  // not_pipeline.hs:198:1-98
  reg signed [63:0] out = (64'sd0);
  wire signed [63:0] result_6;
  // not_pipeline.hs:198:1-98
  wire signed [63:0] x;
  // not_pipeline.hs:190:1-126
  wire  eta_0;
  // not_pipeline.hs:190:1-126
  reg signed [63:0] out_0 = (64'sd0);
  wire signed [63:0] result_7;
  // not_pipeline.hs:190:1-126
  wire signed [63:0] x_0;
  // not_pipeline.hs:190:1-126
  wire signed [63:0] y;
  // not_pipeline.hs:145:1-118
  wire signed [63:0] x_1;
  wire  result_8;
  // not_pipeline.hs:206:1-106
  wire  eta_1;
  wire [127:0] result_9;
  // not_pipeline.hs:206:1-106
  reg [127:0] out_1 = {64'sd0,   64'sd0};
  // not_pipeline.hs:206:1-106
  wire signed [63:0] x_2;
  // not_pipeline.hs:206:1-106
  wire [127:0] t;
  wire  result_10;
  // not_pipeline.hs:145:1-118
  wire  pacingABC;
  wire  result_11;
  // not_pipeline.hs:143:24-25
  wire signed [63:0] \a# ;
  // not_pipeline.hs:145:1-118
  reg [2:0] c$state_app_arg;
  // not_pipeline.hs:145:1-118
  reg [2:0] state = 3'd0;
  // not_pipeline.hs:145:1-118
  wire [2:0] c$state_case_alt;
  // not_pipeline.hs:145:1-118
  wire [65:0] c$eventInfo_app_arg;
  // not_pipeline.hs:145:1-118
  reg [65:0] eventInfo = {{64'sd0,   1'b0},   1'b0};
  wire [67:0] result_12;
  reg [65:0] c$app_arg = {{64'sd0,   1'b0},   1'b0};
  wire [65:0] c$case_alt;
  reg [65:0] c$case_alt_0;
  wire [65:0] c$case_alt_1;
  reg  c$app_arg_0 = 1'b0;
  wire  c$case_alt_2;
  reg  c$case_alt_3;
  reg  c$app_arg_1 = 1'b0;
  wire  c$case_alt_4;
  // not_pipeline.hs:60:1-78
  reg [395:0] buffer = {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0}};
  // not_pipeline.hs:60:1-78
  wire [395:0] c$buffer_case_alt;
  // not_pipeline.hs:60:1-78
  wire [395:0] c$buffer_case_alt_0;
  // not_pipeline.hs:60:1-78
  wire [65:0] qData;
  // not_pipeline.hs:60:1-78
  reg signed [63:0] cursor = (64'sd0);
  // not_pipeline.hs:60:1-78
  wire signed [63:0] c$cursor_case_alt;
  // not_pipeline.hs:60:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // not_pipeline.hs:60:1-78
  reg signed [63:0] c$cursor_case_alt_1;
  // not_pipeline.hs:60:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // not_pipeline.hs:60:1-78
  wire  c$cursor_case_scrut;
  // not_pipeline.hs:60:1-78
  wire signed [63:0] x_3;
  // not_pipeline.hs:60:1-78
  wire signed [63:0] c$cursor_case_alt_3;
  // not_pipeline.hs:60:1-78
  reg signed [63:0] c$cursor_case_alt_4;
  // not_pipeline.hs:60:1-78
  wire signed [63:0] c$cursor_case_alt_5;
  // not_pipeline.hs:219:1-133
  wire  qPopValid;
  // not_pipeline.hs:219:1-133
  wire  qPush;
  // not_pipeline.hs:219:1-133
  wire  qPop;
  wire [64:0] input0;
  wire signed [63:0] c$tte_rhs;
  wire signed [63:0] c$tte_rhs_0;
  wire signed [63:0] y_projection;
  wire signed [63:0] c$tte_rhs_1;
  wire [191:0] t_projection;
  wire signed [63:0] c$tte_rhs_2;
  wire signed [63:0] c$tte_rhs_3;
  wire [461:0] c$buffer_case_alt_sel_alt_t_1;
  wire signed [63:0] c$tte_rhs_4;
  wire [266:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [71:0] result_1;

  assign input0 = {input0_0,   input0_1};

  assign result_2 = {newX | newX,   {input0,
                                     newX}};

  assign newX = input0[0:0];

  assign result_3 = {result_4,   {{out_0,
                                   outAktvABC},   {out,   outAktvABC},
                                  {$signed(out_1[64-1:0]),   outAktvABC}},
                     {state,   x_1,   pacingABC}};

  assign outAktvABC = result_5 & pacingABC;

  assign c$tte_rhs = (\a#  == 64'sd0) ? 64'sd1 : 64'sd0;

  assign result_4 = c$tte_rhs[0];

  assign c$tte_rhs_0 = (\a#  == 64'sd5) ? 64'sd1 : 64'sd0;

  assign result_5 = c$tte_rhs_0[0];

  assign eta = result_11 & pacingABC;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_register
    if ( rst) begin
      out <= (64'sd0);
    end else if (en) begin
      out <= result_6;
    end
  end
  // register end

  assign result_6 = eta ? ((x + 64'sd1)) : out;

  assign x = out_0;

  assign eta_0 = result_8 & pacingABC;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_0_register
    if ( rst) begin
      out_0 <= (64'sd0);
    end else if (en) begin
      out_0 <= result_7;
    end
  end
  // register end

  assign result_7 = eta_0 ? ((x_0 + y)) : out_0;

  assign x_0 = x_1;

  assign y_projection = $signed(out_1[128-1 -: 64]);

  assign y = y_projection;

  assign x_1 = $signed(eventInfo[65:2]);

  assign c$tte_rhs_1 = (\a#  == 64'sd2) ? 64'sd1 : 64'sd0;

  assign result_8 = c$tte_rhs_1[0];

  assign eta_1 = result_10 & pacingABC;

  assign result_9 = eta_1 ? t : out_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_1_register
    if ( rst) begin
      out_1 <= {64'sd0,   64'sd0};
    end else if (en) begin
      out_1 <= result_9;
    end
  end
  // register end

  assign x_2 = out;

  assign t_projection = ({out_1,(x_2 + 64'sd1)});

  assign t = t_projection[127:0];

  assign c$tte_rhs_2 = (\a#  == 64'sd4) ? 64'sd1 : 64'sd0;

  assign result_10 = c$tte_rhs_2[0];

  assign pacingABC = eventInfo[0:0];

  assign c$tte_rhs_3 = (\a#  == 64'sd3) ? 64'sd1 : 64'sd0;

  assign result_11 = c$tte_rhs_3[0];

  assign \a#  = $unsigned(state);

  always @(*) begin
    case(state)
      3'b000 : c$state_app_arg = 3'd1;
      3'b001 : c$state_app_arg = c$state_case_alt;
      3'b010 : c$state_app_arg = 3'd3;
      3'b011 : c$state_app_arg = 3'd4;
      3'b100 : c$state_app_arg = 3'd5;
      default : c$state_app_arg = 3'd0;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : state_register
    if ( rst) begin
      state <= 3'd0;
    end else if (en) begin
      state <= c$state_app_arg;
    end
  end
  // register end

  assign c$state_case_alt = qPopValid ? 3'd2 : 3'd0;

  assign c$eventInfo_app_arg = qPopValid ? result_12[65:0] : eventInfo;

  // register begin
  always @(posedge clk or  posedge  rst) begin : eventInfo_register
    if ( rst) begin
      eventInfo <= {{64'sd0,   1'b0},   1'b0};
    end else if (en) begin
      eventInfo <= c$eventInfo_app_arg;
    end
  end
  // register end

  assign result_12 = {c$app_arg_1,   c$app_arg_0,
                      c$app_arg};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_register
    if ( rst) begin
      c$app_arg <= {{64'sd0,   1'b0},   1'b0};
    end else if (en) begin
      c$app_arg <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPop ? c$case_alt_0 : {{64'sd0,
                                              1'b0},   1'b0};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_0 = {{64'sd0,   1'b0},
                               1'b0};
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  // index begin
  wire [65:0] vecArray [0:6-1];
  genvar i;
  generate
  for (i=0; i < 6; i=i+1) begin : mk_array
    assign vecArray[(6-1)-i] = buffer[i*66+:66];
  end
  endgenerate
  assign c$case_alt_1 = vecArray[c$cursor_case_alt_5];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_0_register
    if ( rst) begin
      c$app_arg_0 <= 1'b0;
    end else if (en) begin
      c$app_arg_0 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = qPop ? c$case_alt_3 : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_3 = 1'b0;
      default : c$case_alt_3 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_1_register
    if ( rst) begin
      c$app_arg_1 <= 1'b0;
    end else if (en) begin
      c$app_arg_1 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = qPush ? c$cursor_case_scrut : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_1[461:66] : buffer;

  assign qData = result_2[65:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_3;

  assign c$cursor_case_alt_0 = qPop ? c$cursor_case_alt_1 : c$cursor_case_alt_2;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_1 = 64'sd1;
      default : c$cursor_case_alt_1 = cursor;
    endcase
  end

  assign c$cursor_case_alt_2 = c$cursor_case_scrut ? ((x_3 + 64'sd1)) : cursor;

  assign c$tte_rhs_4 = (x_3 != 64'sd6) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_4[0];

  assign x_3 = cursor;

  assign c$cursor_case_alt_3 = qPop ? c$cursor_case_alt_4 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_4 = 64'sd0;
      default : c$cursor_case_alt_4 = c$cursor_case_alt_5;
    endcase
  end

  assign c$cursor_case_alt_5 = (x_3 - 64'sd1);

  assign result = {result_3[262:68],
                   {result_3[67:65],   qPush,   qPop,
                    result_12[67:67],   qPopValid,
                    $signed(result_3[64:1]),   result_3[0:0]}};

  assign qPopValid = result_12[66:66];

  assign qPush = result_2[66:66];

  assign qPop = result_3[263:263];

  assign result_0 = result[266:72];

  assign result_1 = result[71:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[71:69];

  assign result_1_1 = result_1[68:68];

  assign result_1_2 = result_1[67:67];

  assign result_1_3 = result_1[66:66];

  assign result_1_4 = result_1[65:65];

  assign result_1_5 = $signed(result_1[64:1]);

  assign result_1_6 = result_1[0:0];


endmodule


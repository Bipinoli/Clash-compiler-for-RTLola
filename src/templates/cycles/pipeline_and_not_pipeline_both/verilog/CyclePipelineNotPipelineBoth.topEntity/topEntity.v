/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_1_0
    , output wire signed [63:0] result_1_1
    );
  wire [66:0] result_2;
  // pipeline_and_not_pipeline_both.hs:137:1-82
  wire  newX;
  wire [322:0] result_3;
  reg  c$app_arg = 1'b0;
  // pipeline_and_not_pipeline_both.hs:184:1-124
  reg signed [63:0] out = (64'sd0);
  wire signed [63:0] result_4;
  // pipeline_and_not_pipeline_both.hs:184:1-124
  wire signed [63:0] x;
  // pipeline_and_not_pipeline_both.hs:184:1-124
  wire signed [63:0] y;
  wire [127:0] result_5;
  // pipeline_and_not_pipeline_both.hs:198:1-104
  reg [127:0] out_0 = {64'sd0,   64'sd0};
  // pipeline_and_not_pipeline_both.hs:198:1-104
  wire signed [63:0] x_0;
  // pipeline_and_not_pipeline_both.hs:198:1-104
  wire [127:0] t;
  // pipeline_and_not_pipeline_both.hs:151:1-98
  reg  c$evalF_app_arg = 1'b0;
  // pipeline_and_not_pipeline_both.hs:191:1-96
  reg signed [63:0] out_1 = (64'sd0);
  wire signed [63:0] result_6;
  // pipeline_and_not_pipeline_both.hs:191:1-96
  wire signed [63:0] x_1;
  // pipeline_and_not_pipeline_both.hs:151:1-98
  reg  pacingE = 1'b0;
  // pipeline_and_not_pipeline_both.hs:151:1-98
  wire  pacingDEF;
  wire [64:0] input0;
  wire signed [63:0] y_projection;
  wire [191:0] t_projection;
  wire [322:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [127:0] result_1;

  assign input0 = {input0_0,   input0_1};

  assign result_2 = {newX | newX,   {input0,
                                     newX}};

  assign newX = input0[0:0];

  assign result_3 = {{{out,   pacingE},   {out_1,
                                           c$evalF_app_arg},   {$signed(out_0[64-1:0]),
                                                                c$app_arg}},   out_0};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$evalF_app_arg;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_register
    if ( rst) begin
      out <= (64'sd0);
    end else if (en) begin
      out <= result_4;
    end
  end
  // register end

  assign result_4 = pacingDEF ? ((x + y)) : out;

  assign x = $signed(result_2[65:2]);

  assign y_projection = $signed(out_0[128-1 -: 64]);

  assign y = y_projection;

  assign result_5 = c$evalF_app_arg ? t : out_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_0_register
    if ( rst) begin
      out_0 <= {64'sd0,   64'sd0};
    end else if (en) begin
      out_0 <= result_5;
    end
  end
  // register end

  assign x_0 = out_1;

  assign t_projection = ({out_0,(x_0 + 64'sd1)});

  assign t = t_projection[127:0];

  // delay begin
  always @(posedge clk) begin : c$evalF_app_arg_delay
    if (en) begin
      c$evalF_app_arg <= pacingE;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_1_register
    if ( rst) begin
      out_1 <= (64'sd0);
    end else if (en) begin
      out_1 <= result_6;
    end
  end
  // register end

  assign result_6 = pacingE ? ((x_1 + 64'sd1)) : out_1;

  assign x_1 = out;

  // delay begin
  always @(posedge clk) begin : pacingE_delay
    if (en) begin
      pacingE <= pacingDEF;
    end
  end
  // delay end

  assign pacingDEF = result_2[0:0];

  assign result = {result_3[322:128],
                   result_3[127:0]};

  assign result_0 = result[322:128];

  assign result_1 = result[127:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = $signed(result_1[127:64]);

  assign result_1_1 = $signed(result_1[63:0]);


endmodule


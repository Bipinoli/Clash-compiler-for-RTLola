/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [31:0] a

      // Outputs
    , output wire  result_0
    , output wire signed [31:0] result_1
    , output wire signed [31:0] result_2
    , output wire signed [31:0] result_3
    , output wire signed [31:0] result_4
    );
  // diff_freq_simple/diff_freqs_simple.hs:41:1-127
  wire  b;
  wire signed [31:0] result_10;
  reg signed [31:0] result_11 = 32'sd10;
  // diff_freq_simple/diff_freqs_simple.hs:11:1-73
  wire  b_0;
  wire  result_12;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire  b_1;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_13;
  reg signed [63:0] result_14 = 64'sd0;
  reg  result_15 = 1'b0;
  // diff_freq_simple/diff_freqs_simple.hs:41:1-127
  wire  b_2;
  wire signed [31:0] result_16;
  reg signed [31:0] result_17 = 32'sd10;
  // diff_freq_simple/diff_freqs_simple.hs:11:1-73
  wire  b_3;
  wire  result_18;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire  b_4;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire signed [63:0] t_0;
  wire signed [63:0] result_19;
  reg signed [63:0] result_20 = 64'sd0;
  reg  result_21 = 1'b0;
  // diff_freq_simple/diff_freqs_simple.hs:11:1-73
  wire  b_5;
  wire  result_22;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire  b_6;
  // diff_freq_simple/diff_freqs_simple.hs:18:5-74
  wire signed [63:0] t_1;
  wire signed [63:0] result_23;
  reg signed [63:0] result_24 = 64'sd0;
  reg  result_25 = 1'b0;
  wire [128:0] result;

  assign result = {result_25,   a,   result_11,
                   result_17,   result_11 + result_17};

  assign b = result_25 & result_15;

  assign result_10 = b ? a : result_11;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_11_register
    if ( rst) begin
      result_11 <= 32'sd10;
    end else if (en) begin
      result_11 <= result_10;
    end
  end
  // register end

  assign b_0 = result_14 < 64'sd5000;

  assign result_12 = b_0 ? 1'b1 : 1'b0;

  assign b_1 = result_14 < 64'sd9999;

  assign t = result_14 + 64'sd1;

  assign result_13 = b_1 ? t : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_14_register
    if ( rst) begin
      result_14 <= 64'sd0;
    end else if (en) begin
      result_14 <= result_13;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= 1'b0;
    end else if (en) begin
      result_15 <= result_12;
    end
  end
  // register end

  assign b_2 = result_25 & result_21;

  assign result_16 = b_2 ? a : result_17;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_17_register
    if ( rst) begin
      result_17 <= 32'sd10;
    end else if (en) begin
      result_17 <= result_16;
    end
  end
  // register end

  assign b_3 = result_20 < 64'sd10000;

  assign result_18 = b_3 ? 1'b1 : 1'b0;

  assign b_4 = result_20 < 64'sd19999;

  assign t_0 = result_20 + 64'sd1;

  assign result_19 = b_4 ? t_0 : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_20_register
    if ( rst) begin
      result_20 <= 64'sd0;
    end else if (en) begin
      result_20 <= result_19;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= 1'b0;
    end else if (en) begin
      result_21 <= result_18;
    end
  end
  // register end

  assign b_5 = result_24 < 64'sd5;

  assign result_22 = b_5 ? 1'b1 : 1'b0;

  assign b_6 = result_24 < 64'sd9;

  assign t_1 = result_24 + 64'sd1;

  assign result_23 = b_6 ? t_1 : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_24_register
    if ( rst) begin
      result_24 <= 64'sd0;
    end else if (en) begin
      result_24 <= result_23;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= 1'b0;
    end else if (en) begin
      result_25 <= result_22;
    end
  end
  // register end

  assign result_0 = result[128:128];

  assign result_1 = $signed(result[127:96]);

  assign result_2 = $signed(result[95:64]);

  assign result_3 = $signed(result[63:32]);

  assign result_4 = $signed(result[31:0]);


endmodule


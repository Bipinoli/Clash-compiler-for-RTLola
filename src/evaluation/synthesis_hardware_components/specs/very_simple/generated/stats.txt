
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `synth.ys' --

1. Executing GHDL.
Importing module topEntity.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \topEntity

2.1.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~22 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 19 unused cells and 158 unused wires.
<suppressed ~30 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    New ctrl vector for $pmux cell \258: $auto$ghdl.cc:806:import_module$42
    New ctrl vector for $pmux cell \306: $auto$ghdl.cc:806:import_module$49
    New ctrl vector for $pmux cell \380: $auto$ghdl.cc:806:import_module$62
    New ctrl vector for $pmux cell \463: $auto$ghdl.cc:806:import_module$77
    New ctrl vector for $pmux cell \768: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \772: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \878: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \92: $auto$ghdl.cc:806:import_module$10
  Optimizing cells in module \topEntity.
Performed a total of 8 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~5 debug messages>

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.7.14. Rerunning OPT passes. (Maybe there is more to do..)

2.7.15. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.7.16. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.7.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.7.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.7.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.7.20. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 53 bits (of 64) from port B of cell topEntity.\29 ($add).
Removed top 43 bits (of 64) from port B of cell topEntity.\44 ($ge).
Removed top 5 bits (of 8) from port B of cell topEntity.\152 ($eq).
Removed top 62 bits (of 64) from port B of cell topEntity.\517 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\552 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\685 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\687 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\700 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\702 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\715 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\717 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\730 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\732 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\745 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\747 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\880 ($sub).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== topEntity ===

   Number of wires:                370
   Number of wire bits:          12334
   Number of public wires:         315
   Number of public wire bits:   10979
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                175
     $add                            9
     $adff                          14
     $dff                           33
     $eq                            17
     $ge                             1
     $logic_not                      1
     $mux                           92
     $or                             1
     $sub                            7

2.13. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

3. Printing statistics.

=== topEntity ===

   Number of wires:                370
   Number of wire bits:          12334
   Number of public wires:         315
   Number of public wire bits:   10979
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                175
     $add                            9
     $adff                          14
     $dff                           33
     $eq                            17
     $ge                             1
     $logic_not                      1
     $mux                           92
     $or                             1
     $sub                            7

End of script. Logfile hash: 488e09c822, CPU: user 0.66s system 0.01s, MEM: 28.83 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 35% 6x opt_clean (0 sec), 22% 1x ghdl (0 sec), ...

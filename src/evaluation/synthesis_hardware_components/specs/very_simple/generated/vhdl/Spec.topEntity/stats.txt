
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `ghdl --latches --std=08 --work=work topEntity; synth -top topEntity; stat' --

1. Executing GHDL.
Importing module topEntity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \topEntity

2.1.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~22 debug messages>

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 19 unused cells and 158 unused wires.
<suppressed ~30 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    New ctrl vector for $pmux cell \258: $auto$ghdl.cc:806:import_module$42
    New ctrl vector for $pmux cell \306: $auto$ghdl.cc:806:import_module$49
    New ctrl vector for $pmux cell \380: $auto$ghdl.cc:806:import_module$62
    New ctrl vector for $pmux cell \463: $auto$ghdl.cc:806:import_module$77
    New ctrl vector for $pmux cell \768: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \772: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \878: $auto$ghdl.cc:806:import_module$139
    New ctrl vector for $pmux cell \92: $auto$ghdl.cc:806:import_module$10
  Optimizing cells in module \topEntity.
Performed a total of 8 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~5 debug messages>

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.20. Executing OPT_DFF pass (perform DFF optimizations).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \937 ($adff) from module topEntity (D = \\c$cursor_case_alt_2\, Q = \\c$cursor_case_alt_0\).
Adding EN signal on \935 ($adff) from module topEntity (D = { \timer0over \inputs_1 \inputs_1 \inputs_1 \inputs_1 \inputs_1 \inputs_0 \buffer [139:70] }, Q = \buffer).
Adding EN signal on \929 ($adff) from module topEntity (D = \\c$case_alt\, Q = \\c$app_arg_11\).
Adding EN signal on \927 ($adff) from module topEntity (D = \result_44, Q = \t_7).
Adding EN signal on \925 ($adff) from module topEntity (D = \result_42, Q = \t_6).
Adding EN signal on \923 ($adff) from module topEntity (D = \result_40, Q = \t_5).
Adding EN signal on \921 ($adff) from module topEntity (D = \result_38, Q = \t_4).
Adding EN signal on \919 ($adff) from module topEntity (D = \result_36, Q = \t_3).
Adding EN signal on \917 ($dff) from module topEntity (D = \\c$app_arg_11\ [63:0], Q = \\c$input0Win_app_arg\).
Adding EN signal on \915 ($adff) from module topEntity (D = { \\c$input0Win_app_arg\ \t_7 }, Q = \result_30).
Adding EN signal on \913 ($adff) from module topEntity (D = { \result_27 [71:0] \t_2 [71:8] \iteratei_10.r_block_62.\c$bb_res_res_30\ [15:8] }, Q = \result_27).
Adding EN signal on \911 ($adff) from module topEntity (D = { \result_24 [71:0] \t_1 [71:8] \iteratei_10.r_block_62.\c$bb_res_res_30\ [23:16] }, Q = \result_24).
Adding EN signal on \901 ($adff) from module topEntity (D = { \t_0 [71:8] \iteratei_9.r_block_61.\c$bb_res_res_29\ [31:24] }, Q = \result_15).
Adding EN signal on \899 ($adff) from module topEntity (D = { \result_11 [71:0] \\c$ds1_case_alt\ \iteratei_10.r_block_62.\c$bb_res_res_30\ [39:32] }, Q = \result_11).
Adding EN signal on \895 ($adff) from module topEntity (D = \result_4, Q = \result_5).
Adding EN signal on \671 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_10.r_block_62.\c$bb_res_res_30\).
Adding EN signal on \657 ($dff) from module topEntity (D = \iteratei_9.iteratei_ho1_0_res_9, Q = \iteratei_9.r_block_61.\c$bb_res_res_29\).
Adding EN signal on \649 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_9.iteratei_ho1_0_res_9).
Adding EN signal on \635 ($dff) from module topEntity (D = \iteratei_8.iteratei_ho1_1_res_7, Q = \iteratei_8.r_block_59.\c$bb_res_res_27\).
Adding EN signal on \627 ($dff) from module topEntity (D = \iteratei_8.iteratei_ho1_0_res_8, Q = \iteratei_8.iteratei_ho1_1_res_7).
Adding EN signal on \619 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_8.iteratei_ho1_0_res_8).
Adding EN signal on \607 ($dff) from module topEntity (D = \\c$app_arg_11\ [65], Q = \b_0).
Adding EN signal on \580 ($dff) from module topEntity (D = \iteratei_6.iteratei_ho1_0_res_6, Q = \iteratei_6.r_block_55.\c$bb_res_res_23\).
Adding EN signal on \572 ($dff) from module topEntity (D = \\c$app_arg_11\ [66], Q = \iteratei_6.iteratei_ho1_0_res_6).
Adding EN signal on \539 ($dff) from module topEntity (D = \iteratei_5.iteratei_ho1_0_res_5, Q = \iteratei_5.r_block_53.\c$bb_res_res_21\).
Adding EN signal on \531 ($dff) from module topEntity (D = \\c$app_arg_11\ [67], Q = \iteratei_5.iteratei_ho1_0_res_5).
Adding EN signal on \503 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_2_res_3, Q = \iteratei_4.r_block_51.\c$bb_res_res_19\).
Adding EN signal on \495 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_1_res_4, Q = \iteratei_4.iteratei_ho1_2_res_3).
Adding EN signal on \487 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_0_res_4, Q = \iteratei_4.iteratei_ho1_1_res_4).
Adding EN signal on \479 ($dff) from module topEntity (D = \\c$app_arg_11\ [66], Q = \iteratei_4.iteratei_ho1_0_res_4).
Adding EN signal on \420 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_2_res_2, Q = \iteratei_3.r_block_47.\c$bb_res_res_15\).
Adding EN signal on \412 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_1_res_3, Q = \iteratei_3.iteratei_ho1_2_res_2).
Adding EN signal on \404 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_0_res_3, Q = \iteratei_3.iteratei_ho1_1_res_3).
Adding EN signal on \396 ($dff) from module topEntity (D = \\c$app_arg_11\ [67], Q = \iteratei_3.iteratei_ho1_0_res_3).
Adding EN signal on \338 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_1_res_2, Q = \iteratei_2.r_block_43.\c$bb_res_res_11\).
Adding EN signal on \330 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_0_res_2, Q = \iteratei_2.iteratei_ho1_1_res_2).
Adding EN signal on \322 ($dff) from module topEntity (D = \\c$app_arg_11\ [68], Q = \iteratei_2.iteratei_ho1_0_res_2).
Adding EN signal on \204 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_2_res_0, Q = \iteratei_1.r_block_40.\c$bb_res_res_8\).
Adding EN signal on \196 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_1_res_1, Q = \iteratei_1.iteratei_ho1_2_res_0).
Adding EN signal on \188 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_0_res_1, Q = \iteratei_1.iteratei_ho1_1_res_1).
Adding EN signal on \180 ($dff) from module topEntity (D = \\c$app_arg_11\ [68], Q = \iteratei_1.iteratei_ho1_0_res_1).
Adding EN signal on \170 ($dff) from module topEntity (D = \iteratei_0.iteratei_ho1_0_res_0, Q = \b).
Adding EN signal on \162 ($dff) from module topEntity (D = \\c$app_arg_11\ [69], Q = \iteratei_0.iteratei_ho1_0_res_0).
Adding EN signal on \132 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_2_res, Q = \iteratei.r_block_34.\c$bb_res_res_2\).
Adding EN signal on \124 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_1_res, Q = \iteratei.iteratei_ho1_2_res).
Adding EN signal on \116 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_0_res, Q = \iteratei.iteratei_ho1_1_res).
Adding EN signal on \108 ($dff) from module topEntity (D = \\c$app_arg_11\ [69], Q = \iteratei.iteratei_ho1_0_res).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 59 unused cells and 59 unused wires.
<suppressed ~72 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 53 bits (of 64) from port B of cell topEntity.\29 ($add).
Removed top 43 bits (of 64) from port B of cell topEntity.\44 ($ge).
Removed top 5 bits (of 8) from port B of cell topEntity.\152 ($eq).
Removed top 62 bits (of 64) from port B of cell topEntity.\517 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\552 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\685 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\687 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\700 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\702 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\715 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\717 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\730 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\732 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\745 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\747 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\880 ($sub).

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module topEntity:
  creating $macc model for \217 ($add).
  creating $macc model for \249 ($sub).
  creating $macc model for \29 ($add).
  creating $macc model for \297 ($sub).
  creating $macc model for \371 ($sub).
  creating $macc model for \454 ($sub).
  creating $macc model for \517 ($add).
  creating $macc model for \552 ($add).
  creating $macc model for \687 ($add).
  creating $macc model for \702 ($add).
  creating $macc model for \717 ($add).
  creating $macc model for \732 ($add).
  creating $macc model for \747 ($add).
  creating $macc model for \776 ($sub).
  creating $macc model for \83 ($sub).
  creating $macc model for \880 ($sub).
  creating $alu model for $macc \880.
  creating $alu model for $macc \83.
  creating $alu model for $macc \776.
  creating $alu model for $macc \747.
  creating $alu model for $macc \732.
  creating $alu model for $macc \717.
  creating $alu model for $macc \702.
  creating $alu model for $macc \687.
  creating $alu model for $macc \552.
  creating $alu model for $macc \517.
  creating $alu model for $macc \454.
  creating $alu model for $macc \371.
  creating $alu model for $macc \297.
  creating $alu model for $macc \29.
  creating $alu model for $macc \249.
  creating $alu model for $macc \217.
  creating $alu model for \44 ($ge): new $alu
  creating $alu cell for \44: $auto$alumacc.cc:485:replace_alu$285
  creating $alu cell for \217: $auto$alumacc.cc:485:replace_alu$296
  creating $alu cell for \249: $auto$alumacc.cc:485:replace_alu$299
  creating $alu cell for \29: $auto$alumacc.cc:485:replace_alu$302
  creating $alu cell for \297: $auto$alumacc.cc:485:replace_alu$305
  creating $alu cell for \371: $auto$alumacc.cc:485:replace_alu$308
  creating $alu cell for \454: $auto$alumacc.cc:485:replace_alu$311
  creating $alu cell for \517: $auto$alumacc.cc:485:replace_alu$314
  creating $alu cell for \552: $auto$alumacc.cc:485:replace_alu$317
  creating $alu cell for \687: $auto$alumacc.cc:485:replace_alu$320
  creating $alu cell for \702: $auto$alumacc.cc:485:replace_alu$323
  creating $alu cell for \717: $auto$alumacc.cc:485:replace_alu$326
  creating $alu cell for \732: $auto$alumacc.cc:485:replace_alu$329
  creating $alu cell for \747: $auto$alumacc.cc:485:replace_alu$332
  creating $alu cell for \776: $auto$alumacc.cc:485:replace_alu$335
  creating $alu cell for \83: $auto$alumacc.cc:485:replace_alu$338
  creating $alu cell for \880: $auto$alumacc.cc:485:replace_alu$341
  created 17 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~34 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$251 ($adffe) from module topEntity (D = \result_4 [3:0], Q = \result_5 [3:0]).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 6 unused cells and 30 unused wires.
<suppressed ~7 debug messages>

2.17.5. Rerunning OPT passes. (Removed registers in this run.)

2.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~1 debug messages>

2.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.8. Executing OPT_DFF pass (perform DFF optimizations).

2.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.17.10. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    Consolidated identical input bits for $mux cell \27:
      Old ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 4'x }, B=64'0000000000000000000000000000000000000000000000000000011111010000, Y=\result_4
      New ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 1'x }, B=61'0000000000000000000000000000000000000000000000000000011111010, Y={ \result_4 [63:4] \result_4 [0] }
      New connections: \result_4 [3:1] = { \result_4 [0] \result_4 [0] \result_4 [0] }
  Optimizing cells in module \topEntity.
Performed a total of 1 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.18. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$54969db7f41ab9ffc93887c2d8e2d7f68e10b42f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$89e6018118041664448800cd912a3b31e5316ca7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$9cfaa5b7a62bd2391802c1be28bdae97aa527b15\_90_alu for cells of type $alu.
Using template $paramod$be099e65a2916bc2f93589bb8b12d430dab57b0e\_90_alu for cells of type $alu.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2917 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~2473 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~792 debug messages>
Removed a total of 264 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 480 unused cells and 1286 unused wires.
<suppressed ~495 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\topEntity' to `<abc-temp-dir>/input.blif'..
Replacing 6 occurrences of constant undef bits with constant zero bits
Extracted 3108 gates and 4024 wires to a netlist network with 913 inputs and 681 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      270
ABC RESULTS:               MUX cells:      518
ABC RESULTS:             ORNOT cells:       75
ABC RESULTS:               NOR cells:      236
ABC RESULTS:              XNOR cells:       77
ABC RESULTS:                OR cells:      350
ABC RESULTS:              NAND cells:      160
ABC RESULTS:            ANDNOT cells:      820
ABC RESULTS:               AND cells:      173
ABC RESULTS:               XOR cells:      414
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:     2430
ABC RESULTS:           input signals:      913
ABC RESULTS:          output signals:      681
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2065 ($_DFFE_PP0P_) from module topEntity.

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 1 unused cells and 2380 unused wires.
<suppressed ~38 debug messages>

2.23.5. Rerunning OPT passes. (Removed registers in this run.)

2.23.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.23.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.23.8. Executing OPT_DFF pass (perform DFF optimizations).

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.23.10. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \topEntity

2.24.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.25. Printing statistics.

=== topEntity ===

   Number of wires:               2640
   Number of wire bits:          11774
   Number of public wires:         253
   Number of public wire bits:    9387
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4132
     $_ANDNOT_                     819
     $_AND_                        172
     $_DFFE_PP0P_                  911
     $_DFFE_PP1P_                   11
     $_DFFE_PP_                    152
     $_MUX_                        518
     $_NAND_                       160
     $_NOR_                        204
     $_NOT_                        270
     $_ORNOT_                       75
     $_OR_                         349
     $_XNOR_                        77
     $_XOR_                        414

2.26. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

3. Printing statistics.

=== topEntity ===

   Number of wires:               2640
   Number of wire bits:          11774
   Number of public wires:         253
   Number of public wire bits:    9387
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4132
     $_ANDNOT_                     819
     $_AND_                        172
     $_DFFE_PP0P_                  911
     $_DFFE_PP1P_                   11
     $_DFFE_PP_                    152
     $_MUX_                        518
     $_NAND_                       160
     $_NOR_                        204
     $_NOT_                        270
     $_ORNOT_                       75
     $_OR_                         349
     $_XNOR_                        77
     $_XOR_                        414

End of script. Logfile hash: b165ecb9cd, CPU: user 2.70s system 0.12s, MEM: 52.73 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 23% 25x opt_clean (0 sec), 20% 29x opt_expr (0 sec), ...


 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `
ghdl --latches --std=08 --work=work implementation; 
synth -top implementation; 
stat;
' --

1. Executing GHDL.
Importing module implementation.
Importing module clock_pre_processing.
Importing module input_pre_processing.
Importing module monitor.
Importing module high_level_controller.
Importing module queue.
Importing module low_level_controller.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:     \input_pre_processing
Used module:     \clock_pre_processing

2.1.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:     \input_pre_processing
Used module:     \clock_pre_processing
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module implementation.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
Optimizing module implementation.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Removed 1 unused cells and 103 unused wires.
<suppressed ~5 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module clock_pre_processing...
Checking module implementation...
Checking module input_pre_processing...
Checking module monitor...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \149 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$35, Q = \tclk_count).
Adding EN signal on \147 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$31, Q = \eclk_count).
Adding EN signal on \145 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$41, Q = \tclk_reg).
Adding EN signal on \144 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$40, Q = \eclk_reg).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
<suppressed ~2 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.8.16. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$135 ($ne).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$128 ($ne).
Removed top 28 bits (of 32) from port B of cell clock_pre_processing.\100 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\102 ($add).
Removed top 30 bits (of 32) from port B of cell clock_pre_processing.\108 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\110 ($add).
Removed top 29 bits (of 32) from port B of cell clock_pre_processing.\116 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\120 ($eq).

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module clock_pre_processing:
  creating $macc model for \102 ($add).
  creating $macc model for \110 ($add).
  creating $alu model for $macc \110.
  creating $alu model for $macc \102.
  creating $alu cell for \102: $auto$alumacc.cc:485:replace_alu$138
  creating $alu cell for \110: $auto$alumacc.cc:485:replace_alu$141
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module implementation:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module input_pre_processing:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module monitor:
  created 0 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.14.9. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 1 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.17.5. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
<suppressed ~1 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 1 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \monitor.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.19.18. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~570 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
<suppressed ~562 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~189 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 63 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..
Removed 68 unused cells and 250 unused wires.
<suppressed ~69 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\clock_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 386 wires to a netlist network with 65 inputs and 67 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:       40
ABC RESULTS:                OR cells:       95
ABC RESULTS:             ORNOT cells:       26
ABC RESULTS:               XOR cells:       49
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:        internal signals:      254
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       67
Removing temp directory.

2.22.2. Extracting gate netlist of module `\implementation' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.3. Extracting gate netlist of module `\input_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.4. Extracting gate netlist of module `\monitor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_pre_processing.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module monitor.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\monitor'.
Removed a total of 0 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \monitor..
Removed 0 unused cells and 152 unused wires.
<suppressed ~1 debug messages>

2.23.5. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor

2.24.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor
Removed 0 unused modules.

2.25. Printing statistics.

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== implementation ===

   Number of wires:                 59
   Number of wire bits:           2516
   Number of public wires:          59
   Number of public wire bits:    2516
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 20
   Number of wire bits:            587
   Number of public wires:          20
   Number of public wire bits:     587
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                195
     $_DFF_PP0_                    195

=== monitor ===

   Number of wires:                 94
   Number of wire bits:           3307
   Number of public wires:          93
   Number of public wire bits:    3306
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                963
     $_DFF_NP0_                    960
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

   Number of wires:                497
   Number of wire bits:           6796
   Number of public wires:         182
   Number of public wire bits:    6481
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1539
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_NP0_                    960
     $_DFF_PP0_                    196
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49
     high_level_controller           1
     low_level_controller            1
     queue                           1

2.26. Executing CHECK pass (checking for obvious problems).
Checking module clock_pre_processing...
Checking module implementation...
Checking module input_pre_processing...
Checking module monitor...
Found and reported 0 problems.

3. Printing statistics.

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== implementation ===

   Number of wires:                 59
   Number of wire bits:           2516
   Number of public wires:          59
   Number of public wire bits:    2516
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 20
   Number of wire bits:            587
   Number of public wires:          20
   Number of public wire bits:     587
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                195
     $_DFF_PP0_                    195

=== monitor ===

   Number of wires:                 94
   Number of wire bits:           3307
   Number of public wires:          93
   Number of public wire bits:    3306
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                963
     $_DFF_NP0_                    960
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

   Number of wires:                497
   Number of wire bits:           6796
   Number of public wires:         182
   Number of public wire bits:    6481
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1539
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_NP0_                    960
     $_DFF_PP0_                    196
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49
     high_level_controller           1
     low_level_controller            1
     queue                           1

End of script. Logfile hash: af2419e93f, CPU: user 0.82s system 0.04s, MEM: 32.32 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 21% 16x opt_clean (0 sec), 19% 1x ghdl (0 sec), ...

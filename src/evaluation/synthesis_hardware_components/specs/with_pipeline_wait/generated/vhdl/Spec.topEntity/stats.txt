
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `
ghdl --latches --std=08 --work=work topEntity;
synth -top topEntity;
stat;
' --

1. Executing GHDL.
Importing module topEntity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \topEntity

2.1.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~9 debug messages>

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 9 unused cells and 143 unused wires.
<suppressed ~16 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux \645.
Removed 1 multiplexer ports.
<suppressed ~65 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    New ctrl vector for $pmux cell \622: $auto$ghdl.cc:806:import_module$137
    New ctrl vector for $pmux cell \626: $auto$ghdl.cc:806:import_module$137
    New ctrl vector for $pmux cell \651: $auto$ghdl.cc:806:import_module$137
    New ctrl vector for $pmux cell \732: $auto$ghdl.cc:806:import_module$137
  Optimizing cells in module \topEntity.
Performed a total of 4 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \94 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_3_res, Q = \iteratei.r_block_42.\c$bb_res_res_3\).
Adding EN signal on \86 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_2_res, Q = \iteratei.iteratei_ho1_3_res).
Adding EN signal on \783 ($adff) from module topEntity (D = \\c$cursor_case_alt\, Q = \cursor).
Adding EN signal on \781 ($adff) from module topEntity (D = \\c$buffer_case_alt_0\, Q = \buffer).
Adding EN signal on \78 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_1_res, Q = \iteratei.iteratei_ho1_2_res).
Adding EN signal on \777 ($adff) from module topEntity (D = \\c$case_alt_5\, Q = \\c$app_arg_13\).
Adding EN signal on \775 ($adff) from module topEntity (D = \\c$case_alt\, Q = \\c$app_arg_12\).
Adding EN signal on \773 ($adff) from module topEntity (D = \result_42, Q = \towait).
Adding EN signal on \771 ($adff) from module topEntity (D = \result_40, Q = \t_6).
Adding EN signal on \769 ($adff) from module topEntity (D = \result_38, Q = \t_5).
Adding EN signal on \767 ($adff) from module topEntity (D = \result_36, Q = \t_4).
Adding EN signal on \765 ($adff) from module topEntity (D = \result_34, Q = \t_3).
Adding EN signal on \763 ($adff) from module topEntity (D = \result_32, Q = \t_2).
Adding EN signal on \761 ($dff) from module topEntity (D = \\c$app_arg_12\ [63:0], Q = \\c$ds_app_arg\).
Adding EN signal on \759 ($adff) from module topEntity (D = { \\c$ds_app_arg\ \t_6 }, Q = \result_24).
Adding EN signal on \757 ($adff) from module topEntity (D = { \t_1 [71:8] \iteratei_9.r_block_75.\c$bb_res_res_36\ [23:16] }, Q = \result_20).
Adding EN signal on \755 ($adff) from module topEntity (D = { \t_0 [71:8] \iteratei_8.r_block_73.\c$bb_res_res_34\ [31:24] }, Q = \result_18).
Adding EN signal on \753 ($adff) from module topEntity (D = { \t [71:8] \iteratei_10.r_block_76.\c$bb_res_res_37\ [15:8] }, Q = \result_16).
Adding EN signal on \751 ($adff) from module topEntity (D = { \\c$ds2_case_alt\ \iteratei_9.r_block_75.\c$bb_res_res_36\ [39:32] }, Q = \result_10).
Adding EN signal on \749 ($adff) from module topEntity (D = \result_4, Q = \result_5).
Adding EN signal on \70 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_0_res, Q = \iteratei.iteratei_ho1_1_res).
Adding EN signal on \62 ($dff) from module topEntity (D = \\c$app_arg_12\ [69], Q = \iteratei.iteratei_ho1_0_res).
Adding EN signal on \504 ($dff) from module topEntity (D = { \t_2 \t_3 \t_4 \t_5 \t_6 }, Q = \iteratei_10.r_block_76.\c$bb_res_res_37\).
Adding EN signal on \490 ($dff) from module topEntity (D = \iteratei_9.iteratei_ho1_0_res_9, Q = \iteratei_9.r_block_75.\c$bb_res_res_36\).
Adding EN signal on \482 ($dff) from module topEntity (D = { \t_2 \t_3 \t_4 \t_5 \t_6 }, Q = \iteratei_9.iteratei_ho1_0_res_9).
Adding EN signal on \468 ($dff) from module topEntity (D = \iteratei_8.iteratei_ho1_1_res_7, Q = \iteratei_8.r_block_73.\c$bb_res_res_34\).
Adding EN signal on \460 ($dff) from module topEntity (D = \iteratei_8.iteratei_ho1_0_res_8, Q = \iteratei_8.iteratei_ho1_1_res_7).
Adding EN signal on \452 ($dff) from module topEntity (D = { \t_2 \t_3 \t_4 \t_5 \t_6 }, Q = \iteratei_8.iteratei_ho1_0_res_8).
Adding EN signal on \440 ($dff) from module topEntity (D = \iteratei_7.iteratei_ho1_1_res_6, Q = \iteratei_7.r_block_70.\c$bb_res_res_31\).
Adding EN signal on \432 ($dff) from module topEntity (D = \iteratei_7.iteratei_ho1_0_res_7, Q = \iteratei_7.iteratei_ho1_1_res_6).
Adding EN signal on \424 ($dff) from module topEntity (D = \\c$app_arg_12\ [67], Q = \iteratei_7.iteratei_ho1_0_res_7).
Adding EN signal on \414 ($dff) from module topEntity (D = \iteratei_6.iteratei_ho1_0_res_6, Q = \iteratei_6.r_block_67.\c$bb_res_res_28\).
Adding EN signal on \406 ($dff) from module topEntity (D = \\c$app_arg_12\ [66], Q = \iteratei_6.iteratei_ho1_0_res_6).
Adding EN signal on \395 ($dff) from module topEntity (D = \\c$app_arg_12\ [65], Q = \b_0).
Adding EN signal on \354 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_2_res_4, Q = \iteratei_4.r_block_64.\c$bb_res_res_25\).
Adding EN signal on \346 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_1_res_4, Q = \iteratei_4.iteratei_ho1_2_res_4).
Adding EN signal on \338 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_0_res_4, Q = \iteratei_4.iteratei_ho1_1_res_4).
Adding EN signal on \330 ($dff) from module topEntity (D = \\c$app_arg_12\ [68], Q = \iteratei_4.iteratei_ho1_0_res_4).
Adding EN signal on \266 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_3_res_2, Q = \iteratei_3.r_block_60.\c$bb_res_res_21\).
Adding EN signal on \258 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_2_res_3, Q = \iteratei_3.iteratei_ho1_3_res_2).
Adding EN signal on \250 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_1_res_3, Q = \iteratei_3.iteratei_ho1_2_res_3).
Adding EN signal on \242 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_0_res_3, Q = \iteratei_3.iteratei_ho1_1_res_3).
Adding EN signal on \234 ($dff) from module topEntity (D = \\c$app_arg_12\ [66], Q = \iteratei_3.iteratei_ho1_0_res_3).
Adding EN signal on \222 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_3_res_1, Q = \iteratei_2.r_block_55.\c$bb_res_res_16\).
Adding EN signal on \214 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_2_res_2, Q = \iteratei_2.iteratei_ho1_3_res_1).
Adding EN signal on \206 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_1_res_2, Q = \iteratei_2.iteratei_ho1_2_res_2).
Adding EN signal on \198 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_0_res_2, Q = \iteratei_2.iteratei_ho1_1_res_2).
Adding EN signal on \190 ($dff) from module topEntity (D = \\c$app_arg_12\ [67], Q = \iteratei_2.iteratei_ho1_0_res_2).
Adding EN signal on \178 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_3_res_0, Q = \iteratei_1.r_block_50.\c$bb_res_res_11\).
Adding EN signal on \170 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_2_res_1, Q = \iteratei_1.iteratei_ho1_3_res_0).
Adding EN signal on \162 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_1_res_1, Q = \iteratei_1.iteratei_ho1_2_res_1).
Adding EN signal on \154 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_0_res_1, Q = \iteratei_1.iteratei_ho1_1_res_1).
Adding EN signal on \146 ($dff) from module topEntity (D = \\c$app_arg_12\ [68], Q = \iteratei_1.iteratei_ho1_0_res_1).
Adding EN signal on \136 ($dff) from module topEntity (D = \iteratei_0.iteratei_ho1_1_res_0, Q = \b).
Adding EN signal on \128 ($dff) from module topEntity (D = \iteratei_0.iteratei_ho1_0_res_0, Q = \iteratei_0.iteratei_ho1_1_res_0).
Adding EN signal on \120 ($dff) from module topEntity (D = \\c$app_arg_12\ [69], Q = \iteratei_0.iteratei_ho1_0_res_0).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 67 unused cells and 67 unused wires.
<suppressed ~79 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~3 debug messages>

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 53 bits (of 64) from port B of cell topEntity.\30 ($add).
Removed top 43 bits (of 64) from port B of cell topEntity.\45 ($ge).
Removed top 6 bits (of 8) from port B of cell topEntity.\110 ($eq).
Removed top 63 bits (of 64) from port B of cell topEntity.\299 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\316 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\359 ($gt).
Removed top 6 bits (of 8) from port B of cell topEntity.\362 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\364 ($sub).
Removed top 8 bits (of 40) from FF cell topEntity.$auto$ff.cc:266:slice$272 ($dffe).
Removed top 6 bits (of 8) from port B of cell topEntity.\518 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\520 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\533 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\535 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\548 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\550 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\563 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\565 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\578 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\580 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\598 ($gt).
Removed top 63 bits (of 64) from port B of cell topEntity.\600 ($sub).
Removed top 63 bits (of 64) from port B of cell topEntity.\711 ($add).
Removed top 61 bits (of 64) from port B of cell topEntity.\724 ($eq).
Removed top 63 bits (of 64) from mux cell topEntity.\725 ($mux).
Removed top 2 bits (of 3) from port B of cell topEntity.$auto$opt_dff.cc:195:make_patterns_logic$217 ($ne).
Removed top 63 bits (of 64) from port B of cell topEntity.\734 ($sub).
Removed top 63 bits (of 64) from wire topEntity.\\c$cursor_app_arg\.
Removed top 8 bits (of 40) from wire topEntity.iteratei_8.iteratei_ho1_2_res_6.
Removed top 8 bits (of 40) from wire topEntity.result_28.

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module topEntity:
  creating $macc model for \282 ($add).
  creating $macc model for \299 ($add).
  creating $macc model for \30 ($add).
  creating $macc model for \316 ($add).
  creating $macc model for \362 ($add).
  creating $macc model for \364 ($sub).
  creating $macc model for \520 ($add).
  creating $macc model for \535 ($add).
  creating $macc model for \550 ($add).
  creating $macc model for \565 ($add).
  creating $macc model for \580 ($add).
  creating $macc model for \600 ($sub).
  creating $macc model for \630 ($sub).
  creating $macc model for \711 ($add).
  creating $macc model for \734 ($sub).
  creating $alu model for $macc \734.
  creating $alu model for $macc \711.
  creating $alu model for $macc \630.
  creating $alu model for $macc \600.
  creating $alu model for $macc \580.
  creating $alu model for $macc \565.
  creating $alu model for $macc \550.
  creating $alu model for $macc \535.
  creating $alu model for $macc \520.
  creating $alu model for $macc \364.
  creating $alu model for $macc \362.
  creating $alu model for $macc \316.
  creating $alu model for $macc \30.
  creating $alu model for $macc \299.
  creating $alu model for $macc \282.
  creating $alu model for \359 ($gt): new $alu
  creating $alu model for \45 ($ge): new $alu
  creating $alu model for \598 ($gt): new $alu
  creating $alu cell for \598: $auto$alumacc.cc:485:replace_alu$309
  creating $alu cell for \45: $auto$alumacc.cc:485:replace_alu$316
  creating $alu cell for \359: $auto$alumacc.cc:485:replace_alu$327
  creating $alu cell for \282: $auto$alumacc.cc:485:replace_alu$332
  creating $alu cell for \299: $auto$alumacc.cc:485:replace_alu$335
  creating $alu cell for \30: $auto$alumacc.cc:485:replace_alu$338
  creating $alu cell for \316: $auto$alumacc.cc:485:replace_alu$341
  creating $alu cell for \362: $auto$alumacc.cc:485:replace_alu$344
  creating $alu cell for \364: $auto$alumacc.cc:485:replace_alu$347
  creating $alu cell for \520: $auto$alumacc.cc:485:replace_alu$350
  creating $alu cell for \535: $auto$alumacc.cc:485:replace_alu$353
  creating $alu cell for \550: $auto$alumacc.cc:485:replace_alu$356
  creating $alu cell for \565: $auto$alumacc.cc:485:replace_alu$359
  creating $alu cell for \580: $auto$alumacc.cc:485:replace_alu$362
  creating $alu cell for \600: $auto$alumacc.cc:485:replace_alu$365
  creating $alu cell for \630: $auto$alumacc.cc:485:replace_alu$368
  creating $alu cell for \711: $auto$alumacc.cc:485:replace_alu$371
  creating $alu cell for \734: $auto$alumacc.cc:485:replace_alu$374
  created 18 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~1 debug messages>

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 1 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~29 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$266 ($adffe) from module topEntity (D = \result_4 [3:0], Q = \result_5 [3:0]).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 3 unused cells and 10 unused wires.
<suppressed ~4 debug messages>

2.17.5. Rerunning OPT passes. (Removed registers in this run.)

2.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~1 debug messages>

2.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.8. Executing OPT_DFF pass (perform DFF optimizations).

2.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.17.10. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    Consolidated identical input bits for $mux cell \28:
      Old ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 4'x }, B=64'0000000000000000000000000000000000000000000000000000011111010000, Y=\result_4
      New ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 1'x }, B=61'0000000000000000000000000000000000000000000000000000011111010, Y={ \result_4 [63:4] \result_4 [0] }
      New connections: \result_4 [3:1] = { \result_4 [0] \result_4 [0] \result_4 [0] }
    Consolidated identical input bits for $mux cell \360:
      Old ports: A=\\c$app_arg_5\, B={ $auto$ghdl.cc:806:import_module$78 [7:1] \\c$app_arg_5\ [0] }, Y=\result_22
      New ports: A=\\c$app_arg_5\ [7:1], B=$auto$ghdl.cc:806:import_module$78 [7:1], Y=\result_22 [7:1]
      New connections: \result_22 [0] = \\c$app_arg_5\ [0]
  Optimizing cells in module \topEntity.
Performed a total of 2 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.18. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$c66b509f0dbff04a70da2bd22d8e6a343f873dbd\_90_alu for cells of type $alu.
Using template $paramod$9cfaa5b7a62bd2391802c1be28bdae97aa527b15\_90_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$54969db7f41ab9ffc93887c2d8e2d7f68e10b42f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$89e6018118041664448800cd912a3b31e5316ca7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~3959 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~3914 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~1407 debug messages>
Removed a total of 469 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 664 unused cells and 1993 unused wires.
<suppressed ~678 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\topEntity' to `<abc-temp-dir>/input.blif'..
Replacing 1 occurrences of constant undef bits with constant zero bits
Extracted 3679 gates and 4560 wires to a netlist network with 878 inputs and 555 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      401
ABC RESULTS:               AND cells:      132
ABC RESULTS:               NOT cells:      379
ABC RESULTS:                OR cells:      394
ABC RESULTS:             ORNOT cells:      112
ABC RESULTS:              NAND cells:      229
ABC RESULTS:               NOR cells:      296
ABC RESULTS:            ANDNOT cells:     1057
ABC RESULTS:               XOR cells:      447
ABC RESULTS:              XNOR cells:      129
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:     3127
ABC RESULTS:           input signals:      878
ABC RESULTS:          output signals:      555
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~136 debug messages>

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~153 debug messages>
Removed a total of 51 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2330 ($_DFFE_PP0P_) from module topEntity.

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 2 unused cells and 2530 unused wires.
<suppressed ~33 debug messages>

2.23.5. Rerunning OPT passes. (Removed registers in this run.)

2.23.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.23.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.23.8. Executing OPT_DFF pass (perform DFF optimizations).

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.23.10. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \topEntity

2.24.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.25. Printing statistics.

=== topEntity ===

   Number of wires:               3193
   Number of wire bits:           9985
   Number of public wires:         214
   Number of public wire bits:    7006
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4572
     $_ANDNOT_                    1056
     $_AND_                        131
     $_DFFE_PP0P_                  891
     $_DFFE_PP1P_                   12
     $_DFFE_PP_                    146
     $_MUX_                        401
     $_NAND_                       229
     $_NOR_                        247
     $_NOT_                        378
     $_ORNOT_                      112
     $_OR_                         393
     $_XNOR_                       129
     $_XOR_                        447

2.26. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

3. Printing statistics.

=== topEntity ===

   Number of wires:               3193
   Number of wire bits:           9985
   Number of public wires:         214
   Number of public wire bits:    7006
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4572
     $_ANDNOT_                    1056
     $_AND_                        131
     $_DFFE_PP0P_                  891
     $_DFFE_PP1P_                   12
     $_DFFE_PP_                    146
     $_MUX_                        401
     $_NAND_                       229
     $_NOR_                        247
     $_NOT_                        378
     $_ORNOT_                      112
     $_OR_                         393
     $_XNOR_                       129
     $_XOR_                        447

End of script. Logfile hash: bc9cb1c9a1, CPU: user 2.61s system 0.03s, MEM: 58.63 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 23% 28x opt_expr (0 sec), 21% 24x opt_clean (0 sec), ...

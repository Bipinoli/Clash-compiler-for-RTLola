
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `
ghdl --latches --std=08 --work=work topEntity;
synth -top topEntity;
stat;
' --

1. Executing GHDL.
Importing module topEntity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \topEntity

2.1.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~18 debug messages>

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 9 unused cells and 202 unused wires.
<suppressed ~16 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux \1052.
Removed 1 multiplexer ports.
<suppressed ~75 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    New ctrl vector for $pmux cell \1029: $auto$ghdl.cc:806:import_module$200
    New ctrl vector for $pmux cell \1033: $auto$ghdl.cc:806:import_module$200
    New ctrl vector for $pmux cell \1058: $auto$ghdl.cc:806:import_module$200
    New ctrl vector for $pmux cell \1139: $auto$ghdl.cc:806:import_module$200
    New ctrl vector for $pmux cell \226: $auto$ghdl.cc:806:import_module$41
    New ctrl vector for $pmux cell \322: $auto$ghdl.cc:806:import_module$58
    New ctrl vector for $pmux cell \415: $auto$ghdl.cc:806:import_module$75
    New ctrl vector for $pmux cell \503: $auto$ghdl.cc:806:import_module$94
    New ctrl vector for $pmux cell \564: $auto$ghdl.cc:806:import_module$103
    New ctrl vector for $pmux cell \612: $auto$ghdl.cc:806:import_module$110
    New ctrl vector for $pmux cell \683: $auto$ghdl.cc:806:import_module$125
    New ctrl vector for $pmux cell \751: $auto$ghdl.cc:806:import_module$138
    New ctrl vector for $pmux cell \804: $auto$ghdl.cc:806:import_module$149
  Optimizing cells in module \topEntity.
Performed a total of 13 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~9 debug messages>

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~74 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 9 unused cells and 9 unused wires.
<suppressed ~10 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~74 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.20. Executing OPT_DFF pass (perform DFF optimizations).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~74 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \911 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_10.r_block_58.\c$bb_res_res_28\).
Adding EN signal on \897 ($dff) from module topEntity (D = \iteratei_9.iteratei_ho1_1_res_6, Q = \iteratei_9.r_block_57.\c$bb_res_res_27\).
Adding EN signal on \889 ($dff) from module topEntity (D = \iteratei_9.iteratei_ho1_0_res_9, Q = \iteratei_9.iteratei_ho1_1_res_6).
Adding EN signal on \881 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_9.iteratei_ho1_0_res_9).
Adding EN signal on \869 ($dff) from module topEntity (D = \\c$app_arg_16\ [65], Q = \b_0).
Adding EN signal on \86 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_2_res, Q = \iteratei.r_block_32.\c$bb_res_res_2\).
Adding EN signal on \837 ($dff) from module topEntity (D = \\c$app_arg_16\ [67], Q = \iteratei_7.r_block_53.\c$bb_res_res_23\).
Adding EN signal on \827 ($dff) from module topEntity (D = \\c$app_arg_16\ [66], Q = \iteratei_6.r_block_52.\c$bb_res_res_22\).
Adding EN signal on \78 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_1_res, Q = \iteratei.iteratei_ho1_2_res).
Adding EN signal on \70 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_0_res, Q = \iteratei.iteratei_ho1_1_res).
Adding EN signal on \636 ($dff) from module topEntity (D = \iteratei_5.iteratei_ho1_0_res_5, Q = \iteratei_5.r_block_51.\c$bb_res_res_21\).
Adding EN signal on \628 ($dff) from module topEntity (D = \\c$app_arg_16\ [68], Q = \iteratei_5.iteratei_ho1_0_res_5).
Adding EN signal on \62 ($dff) from module topEntity (D = \\c$app_arg_16\ [69], Q = \iteratei.iteratei_ho1_0_res).
Adding EN signal on \362 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_2_res_3, Q = \iteratei_4.r_block_49.\c$bb_res_res_19\).
Adding EN signal on \354 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_1_res_4, Q = \iteratei_4.iteratei_ho1_2_res_3).
Adding EN signal on \346 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_0_res_4, Q = \iteratei_4.iteratei_ho1_1_res_4).
Adding EN signal on \338 ($dff) from module topEntity (D = \\c$app_arg_16\ [66], Q = \iteratei_4.iteratei_ho1_0_res_4).
Adding EN signal on \266 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_2_res_2, Q = \iteratei_3.r_block_45.\c$bb_res_res_15\).
Adding EN signal on \258 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_1_res_3, Q = \iteratei_3.iteratei_ho1_2_res_2).
Adding EN signal on \250 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_0_res_3, Q = \iteratei_3.iteratei_ho1_1_res_3).
Adding EN signal on \242 ($dff) from module topEntity (D = \\c$app_arg_16\ [67], Q = \iteratei_3.iteratei_ho1_0_res_3).
Adding EN signal on \183 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_2_res_1, Q = \iteratei_2.r_block_41.\c$bb_res_res_11\).
Adding EN signal on \175 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_1_res_2, Q = \iteratei_2.iteratei_ho1_2_res_1).
Adding EN signal on \167 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_0_res_2, Q = \iteratei_2.iteratei_ho1_1_res_2).
Adding EN signal on \159 ($dff) from module topEntity (D = \\c$app_arg_16\ [68], Q = \iteratei_2.iteratei_ho1_0_res_2).
Adding EN signal on \149 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_1_res_1, Q = \b).
Adding EN signal on \141 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_0_res_1, Q = \iteratei_1.iteratei_ho1_1_res_1).
Adding EN signal on \133 ($dff) from module topEntity (D = \\c$app_arg_16\ [69], Q = \iteratei_1.iteratei_ho1_0_res_1).
Adding EN signal on \121 ($dff) from module topEntity (D = \iteratei_0.iteratei_ho1_0_res_0, Q = \iteratei_0.r_block_34.\c$bb_res_res_4\).
Adding EN signal on \1208 ($adff) from module topEntity (D = \\c$cursor_case_alt\, Q = \cursor).
Adding EN signal on \1206 ($adff) from module topEntity (D = \\c$buffer_case_alt_0\, Q = \buffer).
Adding EN signal on \1202 ($adff) from module topEntity (D = \\c$case_alt_5\, Q = \\c$app_arg_17\).
Adding EN signal on \1200 ($adff) from module topEntity (D = \\c$case_alt\, Q = \\c$app_arg_16\).
Adding EN signal on \1198 ($adff) from module topEntity (D = \result_55, Q = \towait).
Adding EN signal on \1196 ($adff) from module topEntity (D = \result_53, Q = \t_7).
Adding EN signal on \1194 ($adff) from module topEntity (D = \result_51, Q = \t_6).
Adding EN signal on \1192 ($adff) from module topEntity (D = \result_49, Q = \t_5).
Adding EN signal on \1190 ($adff) from module topEntity (D = \result_47, Q = \t_4).
Adding EN signal on \1188 ($adff) from module topEntity (D = \result_45, Q = \t_3).
Adding EN signal on \1186 ($dff) from module topEntity (D = \\c$app_arg_16\ [63:0], Q = \\c$input0Win_app_arg\).
Adding EN signal on \1184 ($adff) from module topEntity (D = { \result_40 [71:0] \\c$input0Win_app_arg\ \t_7 }, Q = \result_40).
Adding EN signal on \1178 ($adff) from module topEntity (D = { \result_32 [71:0] \t_1 [71:8] \t_5 }, Q = \result_32).
Adding EN signal on \1168 ($adff) from module topEntity (D = { \t_0 [71:8] \iteratei_10.r_block_58.\c$bb_res_res_28\ [31:24] }, Q = \result_23).
Adding EN signal on \1166 ($adff) from module topEntity (D = { \result_21 [143:0] \t [71:8] \t_6 }, Q = \result_21).
Adding EN signal on \1158 ($adff) from module topEntity (D = { \\c$ds2_case_alt\ \iteratei_0.r_block_34.\c$bb_res_res_4\ [39:32] }, Q = \result_10).
Adding EN signal on \1156 ($adff) from module topEntity (D = \result_4, Q = \result_5).
Adding EN signal on \113 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_0.iteratei_ho1_0_res_0).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 58 unused cells and 58 unused wires.
<suppressed ~70 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~3 debug messages>

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell topEntity.$auto$opt_dff.cc:195:make_patterns_logic$315 ($ne).
Removed top 53 bits (of 64) from port B of cell topEntity.\30 ($add).
Removed top 43 bits (of 64) from port B of cell topEntity.\45 ($ge).
Removed top 5 bits (of 8) from port B of cell topEntity.\101 ($eq).
Removed top 6 bits (of 8) from port B of cell topEntity.\417 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\420 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\422 ($sub).
Removed top 7 bits (of 8) from port B of cell topEntity.\640 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\643 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\645 ($sub).
Removed top 7 bits (of 8) from port B of cell topEntity.\685 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\688 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\690 ($sub).
Removed top 6 bits (of 8) from port B of cell topEntity.\753 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\756 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\758 ($sub).
Removed top 7 bits (of 8) from port B of cell topEntity.\806 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\809 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\811 ($sub).
Removed top 16 bits (of 40) from FF cell topEntity.$auto$ff.cc:266:slice$283 ($dffe).
Removed top 5 bits (of 8) from port B of cell topEntity.\925 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\927 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\940 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\942 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\955 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\957 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\970 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\972 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\985 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\987 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\1005 ($gt).
Removed top 63 bits (of 64) from port B of cell topEntity.\1007 ($sub).
Removed top 63 bits (of 64) from port B of cell topEntity.\1118 ($add).
Removed top 62 bits (of 64) from port B of cell topEntity.\1131 ($eq).
Removed top 63 bits (of 64) from mux cell topEntity.\1132 ($mux).
Removed top 63 bits (of 64) from port B of cell topEntity.\1141 ($sub).
Removed top 63 bits (of 64) from wire topEntity.\\c$cursor_app_arg\.
Removed top 16 bits (of 40) from wire topEntity.iteratei_9.iteratei_ho1_2_res_4.
Removed top 16 bits (of 40) from wire topEntity.result_42.

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module topEntity:
  creating $macc model for \1007 ($sub).
  creating $macc model for \1037 ($sub).
  creating $macc model for \1118 ($add).
  creating $macc model for \1141 ($sub).
  creating $macc model for \217 ($sub).
  creating $macc model for \30 ($add).
  creating $macc model for \313 ($sub).
  creating $macc model for \406 ($sub).
  creating $macc model for \420 ($add).
  creating $macc model for \422 ($sub).
  creating $macc model for \439 ($add).
  creating $macc model for \446 ($add).
  creating $macc model for \461 ($add).
  creating $macc model for \463 ($add).
  creating $macc model for \494 ($sub).
  creating $macc model for \555 ($sub).
  creating $macc model for \603 ($sub).
  creating $macc model for \643 ($add).
  creating $macc model for \645 ($sub).
  creating $macc model for \674 ($sub).
  creating $macc model for \688 ($add).
  creating $macc model for \690 ($sub).
  creating $macc model for \707 ($add).
  creating $macc model for \742 ($sub).
  creating $macc model for \756 ($add).
  creating $macc model for \758 ($sub).
  creating $macc model for \795 ($sub).
  creating $macc model for \809 ($add).
  creating $macc model for \811 ($sub).
  creating $macc model for \927 ($add).
  creating $macc model for \942 ($add).
  creating $macc model for \957 ($add).
  creating $macc model for \972 ($add).
  creating $macc model for \987 ($add).
  merging $macc model for \463 into \461.
  merging $macc model for \446 into \439.
  creating $alu model for $macc \957.
  creating $alu model for $macc \942.
  creating $alu model for $macc \927.
  creating $alu model for $macc \811.
  creating $alu model for $macc \809.
  creating $alu model for $macc \795.
  creating $alu model for $macc \758.
  creating $alu model for $macc \756.
  creating $alu model for $macc \742.
  creating $alu model for $macc \707.
  creating $alu model for $macc \690.
  creating $alu model for $macc \688.
  creating $alu model for $macc \674.
  creating $alu model for $macc \645.
  creating $alu model for $macc \643.
  creating $alu model for $macc \603.
  creating $alu model for $macc \555.
  creating $alu model for $macc \494.
  creating $alu model for $macc \972.
  creating $alu model for $macc \987.
  creating $alu model for $macc \422.
  creating $alu model for $macc \420.
  creating $alu model for $macc \406.
  creating $alu model for $macc \313.
  creating $alu model for $macc \30.
  creating $alu model for $macc \217.
  creating $alu model for $macc \1141.
  creating $alu model for $macc \1118.
  creating $alu model for $macc \1037.
  creating $alu model for $macc \1007.
  creating $macc cell for \461: $auto$alumacc.cc:365:replace_macc$368
  creating $macc cell for \439: $auto$alumacc.cc:365:replace_macc$369
  creating $alu model for \1005 ($gt): new $alu
  creating $alu model for \417 ($gt): new $alu
  creating $alu model for \45 ($ge): new $alu
  creating $alu model for \640 ($gt): new $alu
  creating $alu model for \685 ($gt): new $alu
  creating $alu model for \753 ($gt): new $alu
  creating $alu model for \806 ($gt): new $alu
  creating $alu cell for \753: $auto$alumacc.cc:485:replace_alu$377
  creating $alu cell for \45: $auto$alumacc.cc:485:replace_alu$382
  creating $alu cell for \417: $auto$alumacc.cc:485:replace_alu$393
  creating $alu cell for \1005: $auto$alumacc.cc:485:replace_alu$398
  creating $alu cell for \1007: $auto$alumacc.cc:485:replace_alu$405
  creating $alu cell for \1037: $auto$alumacc.cc:485:replace_alu$408
  creating $alu cell for \1118: $auto$alumacc.cc:485:replace_alu$411
  creating $alu cell for \1141: $auto$alumacc.cc:485:replace_alu$414
  creating $alu cell for \217: $auto$alumacc.cc:485:replace_alu$417
  creating $alu cell for \30: $auto$alumacc.cc:485:replace_alu$420
  creating $alu cell for \313: $auto$alumacc.cc:485:replace_alu$423
  creating $alu cell for \406: $auto$alumacc.cc:485:replace_alu$426
  creating $alu cell for \420: $auto$alumacc.cc:485:replace_alu$429
  creating $alu cell for \422: $auto$alumacc.cc:485:replace_alu$432
  creating $alu cell for \806: $auto$alumacc.cc:485:replace_alu$435
  creating $alu cell for \987: $auto$alumacc.cc:485:replace_alu$440
  creating $alu cell for \972: $auto$alumacc.cc:485:replace_alu$443
  creating $alu cell for \494: $auto$alumacc.cc:485:replace_alu$446
  creating $alu cell for \555: $auto$alumacc.cc:485:replace_alu$449
  creating $alu cell for \603: $auto$alumacc.cc:485:replace_alu$452
  creating $alu cell for \643: $auto$alumacc.cc:485:replace_alu$455
  creating $alu cell for \645: $auto$alumacc.cc:485:replace_alu$458
  creating $alu cell for \674: $auto$alumacc.cc:485:replace_alu$461
  creating $alu cell for \688: $auto$alumacc.cc:485:replace_alu$464
  creating $alu cell for \690: $auto$alumacc.cc:485:replace_alu$467
  creating $alu cell for \707: $auto$alumacc.cc:485:replace_alu$470
  creating $alu cell for \742: $auto$alumacc.cc:485:replace_alu$473
  creating $alu cell for \756: $auto$alumacc.cc:485:replace_alu$476
  creating $alu cell for \758: $auto$alumacc.cc:485:replace_alu$479
  creating $alu cell for \795: $auto$alumacc.cc:485:replace_alu$482
  creating $alu cell for \809: $auto$alumacc.cc:485:replace_alu$485
  creating $alu cell for \811: $auto$alumacc.cc:485:replace_alu$488
  creating $alu cell for \927: $auto$alumacc.cc:485:replace_alu$491
  creating $alu cell for \640: $auto$alumacc.cc:485:replace_alu$494
  creating $alu cell for \942: $auto$alumacc.cc:485:replace_alu$499
  creating $alu cell for \685: $auto$alumacc.cc:485:replace_alu$502
  creating $alu cell for \957: $auto$alumacc.cc:485:replace_alu$507
  created 37 $alu and 2 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~5 debug messages>

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 7 unused cells and 16 unused wires.
<suppressed ~17 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~69 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$363 ($adffe) from module topEntity (D = \result_4 [3:0], Q = \result_5 [3:0]).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 11 unused cells and 39 unused wires.
<suppressed ~12 debug messages>

2.17.5. Rerunning OPT passes. (Removed registers in this run.)

2.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~1 debug messages>

2.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.8. Executing OPT_DFF pass (perform DFF optimizations).

2.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.17.10. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    Consolidated identical input bits for $mux cell \28:
      Old ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 4'x }, B=64'0000000000000000000000000000000000000000000000000000011111010000, Y=\result_4
      New ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 1'x }, B=61'0000000000000000000000000000000000000000000000000000011111010, Y={ \result_4 [63:4] \result_4 [0] }
      New connections: \result_4 [3:1] = { \result_4 [0] \result_4 [0] \result_4 [0] }
    Consolidated identical input bits for $mux cell \418:
      Old ports: A=\\c$app_arg_5\, B={ $auto$ghdl.cc:806:import_module$79 [7:2] \\c$app_arg_5\ [1:0] }, Y=\result_19
      New ports: A=\\c$app_arg_5\ [7:2], B=$auto$ghdl.cc:806:import_module$79 [7:2], Y=\result_19 [7:2]
      New connections: \result_19 [1:0] = \\c$app_arg_5\ [1:0]
    Consolidated identical input bits for $mux cell \641:
      Old ports: A=\\c$app_arg_7\, B={ $auto$ghdl.cc:806:import_module$118 [7:2] \\c$app_arg_7\ [1:0] }, Y=\result_28
      New ports: A=\\c$app_arg_7\ [7:2], B=$auto$ghdl.cc:806:import_module$118 [7:2], Y=\result_28 [7:2]
      New connections: \result_28 [1:0] = \\c$app_arg_7\ [1:0]
    Consolidated identical input bits for $mux cell \686:
      Old ports: A=\\c$app_arg_8\, B={ $auto$ghdl.cc:806:import_module$129 [7:2] \\c$app_arg_8\ [1:0] }, Y=\result_30
      New ports: A=\\c$app_arg_8\ [7:2], B=$auto$ghdl.cc:806:import_module$129 [7:2], Y=\result_30 [7:2]
      New connections: \result_30 [1:0] = \\c$app_arg_8\ [1:0]
    Consolidated identical input bits for $mux cell \754:
      Old ports: A={ \\c$app_arg_9\ [7:1] \t_7 [0] }, B={ $auto$ghdl.cc:806:import_module$142 [7:2] \\c$app_arg_9\ [1] \t_7 [0] }, Y=\result_34
      New ports: A=\\c$app_arg_9\ [7:2], B=$auto$ghdl.cc:806:import_module$142 [7:2], Y=\result_34 [7:2]
      New connections: \result_34 [1:0] = { \\c$app_arg_9\ [1] \t_7 [0] }
    Consolidated identical input bits for $mux cell \807:
      Old ports: A=\\c$app_arg_10\, B={ $auto$ghdl.cc:806:import_module$153 [7:2] \\c$app_arg_10\ [1:0] }, Y=\result_36
      New ports: A=\\c$app_arg_10\ [7:2], B=$auto$ghdl.cc:806:import_module$153 [7:2], Y=\result_36 [7:2]
      New connections: \result_36 [1:0] = \\c$app_arg_10\ [1:0]
  Optimizing cells in module \topEntity.
Performed a total of 6 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.18. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \x_4 (64 bits, unsigned)
  add \y_2 (64 bits, unsigned)
  add \y_1 (64 bits, unsigned)
Using template $paramod$9cfaa5b7a62bd2391802c1be28bdae97aa527b15\_90_alu for cells of type $alu.
Using template $paramod$a950948e19702336540a1f557d0a91306bdb9188\_90_alu for cells of type $alu.
Using template $paramod$65af072f6065f0ed27ad80c8089003dcba6e1c40\_90_alu for cells of type $alu.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$c66b509f0dbff04a70da2bd22d8e6a343f873dbd\_90_alu for cells of type $alu.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
  add \x_1 (64 bits, unsigned)
  add \y_0 (64 bits, unsigned)
  add \y (64 bits, unsigned)
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$89e6018118041664448800cd912a3b31e5316ca7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$54969db7f41ab9ffc93887c2d8e2d7f68e10b42f\_90_alu for cells of type $alu.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000001000000 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
No more expansions possible.
<suppressed ~4773 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~3562 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~1653 debug messages>
Removed a total of 551 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 873 unused cells and 2306 unused wires.
<suppressed ~896 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\topEntity' to `<abc-temp-dir>/input.blif'..
Replacing 13 occurrences of constant undef bits with constant zero bits
Extracted 6491 gates and 7600 wires to a netlist network with 1106 inputs and 681 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      145
ABC RESULTS:               AND cells:      165
ABC RESULTS:               NOT cells:      848
ABC RESULTS:                OR cells:      871
ABC RESULTS:               MUX cells:     1122
ABC RESULTS:             ORNOT cells:      253
ABC RESULTS:              XNOR cells:      416
ABC RESULTS:               NOR cells:      770
ABC RESULTS:            ANDNOT cells:     1455
ABC RESULTS:               XOR cells:      734
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:     5813
ABC RESULTS:           input signals:     1106
ABC RESULTS:          output signals:      681
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~87 debug messages>

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~177 debug messages>
Removed a total of 59 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$684 ($_DFFE_PP0P_) from module topEntity.

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 6 unused cells and 3453 unused wires.
<suppressed ~96 debug messages>

2.23.5. Rerunning OPT passes. (Removed registers in this run.)

2.23.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.23.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.23.8. Executing OPT_DFF pass (perform DFF optimizations).

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.23.10. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \topEntity

2.24.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.25. Printing statistics.

=== topEntity ===

   Number of wires:               6338
   Number of wire bits:          17955
   Number of public wires:         296
   Number of public wire bits:   11913
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7975
     $_ANDNOT_                    1454
     $_AND_                        163
     $_DFFE_PP0P_                 1105
     $_DFFE_PP1P_                   20
     $_DFFE_PP_                    136
     $_MUX_                       1122
     $_NAND_                       145
     $_NOR_                        715
     $_NOT_                        843
     $_ORNOT_                      253
     $_OR_                         870
     $_XNOR_                       416
     $_XOR_                        733

2.26. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

3. Printing statistics.

=== topEntity ===

   Number of wires:               6338
   Number of wire bits:          17955
   Number of public wires:         296
   Number of public wire bits:   11913
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7975
     $_ANDNOT_                    1454
     $_AND_                        163
     $_DFFE_PP0P_                 1105
     $_DFFE_PP1P_                   20
     $_DFFE_PP_                    136
     $_MUX_                       1122
     $_NAND_                       145
     $_NOR_                        715
     $_NOT_                        843
     $_ORNOT_                      253
     $_OR_                         870
     $_XNOR_                       416
     $_XOR_                        733

End of script. Logfile hash: 518e1db046, CPU: user 4.50s system 0.08s, MEM: 73.46 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 23% 33x opt_expr (1 sec), 23% 27x opt_clean (1 sec), ...

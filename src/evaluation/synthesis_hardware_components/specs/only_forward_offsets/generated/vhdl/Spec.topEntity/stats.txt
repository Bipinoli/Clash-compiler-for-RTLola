
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `
ghdl --latches --std=08 --work=work topEntity;
synth -top topEntity;
stat;
' --

1. Executing GHDL.
Importing module topEntity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \topEntity

2.1.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~25 debug messages>

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 19 unused cells and 183 unused wires.
<suppressed ~30 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    New ctrl vector for $pmux cell \167: $auto$ghdl.cc:806:import_module$25
    New ctrl vector for $pmux cell \241: $auto$ghdl.cc:806:import_module$38
    New ctrl vector for $pmux cell \328: $auto$ghdl.cc:806:import_module$53
    New ctrl vector for $pmux cell \425: $auto$ghdl.cc:806:import_module$69
    New ctrl vector for $pmux cell \478: $auto$ghdl.cc:806:import_module$80
    New ctrl vector for $pmux cell \556: $auto$ghdl.cc:806:import_module$95
    New ctrl vector for $pmux cell \621: $auto$ghdl.cc:806:import_module$108
    New ctrl vector for $pmux cell \700: $auto$ghdl.cc:806:import_module$123
    New ctrl vector for $pmux cell \872: $auto$ghdl.cc:806:import_module$161
    New ctrl vector for $pmux cell \876: $auto$ghdl.cc:806:import_module$161
    New ctrl vector for $pmux cell \982: $auto$ghdl.cc:806:import_module$161
  Optimizing cells in module \topEntity.
Performed a total of 11 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~8 debug messages>

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.6.20. Executing OPT_DFF pass (perform DFF optimizations).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \999 ($adff) from module topEntity (D = \result_4, Q = \result_5).
Adding EN signal on \775 ($dff) from module topEntity (D = \iteratei_9.iteratei_ho1_0_res_9, Q = \iteratei_9.r_block_40.\c$bb_res_res_19\).
Adding EN signal on \767 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_9.iteratei_ho1_0_res_9).
Adding EN signal on \76 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_1_res, Q = \iteratei.r_block_22.\c$bb_res_res_1\).
Adding EN signal on \755 ($dff) from module topEntity (D = \\c$app_arg_15\ [65], Q = \b_0).
Adding EN signal on \723 ($dff) from module topEntity (D = \\c$app_arg_15\ [66], Q = \iteratei_7.r_block_37.\c$bb_res_res_16\).
Adding EN signal on \68 ($dff) from module topEntity (D = \iteratei.iteratei_ho1_0_res, Q = \iteratei.iteratei_ho1_1_res).
Adding EN signal on \644 ($dff) from module topEntity (D = \\c$app_arg_15\ [67], Q = \iteratei_6.r_block_36.\c$bb_res_res_15\).
Adding EN signal on \60 ($dff) from module topEntity (D = \\c$app_arg_15\ [69], Q = \iteratei.iteratei_ho1_0_res).
Adding EN signal on \501 ($dff) from module topEntity (D = \\c$app_arg_15\ [68], Q = \iteratei_5.r_block_35.\c$bb_res_res_14\).
Adding EN signal on \360 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_1_res_3, Q = \iteratei_4.r_block_34.\c$bb_res_res_13\).
Adding EN signal on \352 ($dff) from module topEntity (D = \iteratei_4.iteratei_ho1_0_res_4, Q = \iteratei_4.iteratei_ho1_1_res_3).
Adding EN signal on \344 ($dff) from module topEntity (D = \\c$app_arg_15\ [66], Q = \iteratei_4.iteratei_ho1_0_res_4).
Adding EN signal on \273 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_1_res_2, Q = \iteratei_3.r_block_31.\c$bb_res_res_10\).
Adding EN signal on \265 ($dff) from module topEntity (D = \iteratei_3.iteratei_ho1_0_res_3, Q = \iteratei_3.iteratei_ho1_1_res_2).
Adding EN signal on \257 ($dff) from module topEntity (D = \\c$app_arg_15\ [67], Q = \iteratei_3.iteratei_ho1_0_res_3).
Adding EN signal on \199 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_1_res_1, Q = \iteratei_2.r_block_28.\c$bb_res_res_7\).
Adding EN signal on \191 ($dff) from module topEntity (D = \iteratei_2.iteratei_ho1_0_res_2, Q = \iteratei_2.iteratei_ho1_1_res_1).
Adding EN signal on \183 ($dff) from module topEntity (D = \\c$app_arg_15\ [68], Q = \iteratei_2.iteratei_ho1_0_res_2).
Adding EN signal on \125 ($dff) from module topEntity (D = \iteratei_1.iteratei_ho1_0_res_1, Q = \b).
Adding EN signal on \117 ($dff) from module topEntity (D = \\c$app_arg_15\ [69], Q = \iteratei_1.iteratei_ho1_0_res_1).
Adding EN signal on \105 ($dff) from module topEntity (D = { \t_3 \t_4 \t_5 \t_6 \t_7 }, Q = \iteratei_0.r_block_23.\c$bb_res_res_2\).
Adding EN signal on \1047 ($adff) from module topEntity (D = \\c$cursor_case_alt_2\, Q = \\c$cursor_case_alt_0\).
Adding EN signal on \1045 ($adff) from module topEntity (D = { \timer0over \inputs_1 \inputs_1 \inputs_1 \inputs_1 \inputs_1 \inputs_0 \buffer [139:70] }, Q = \buffer).
Adding EN signal on \1039 ($adff) from module topEntity (D = \\c$case_alt\, Q = \\c$app_arg_15\).
Adding EN signal on \1037 ($adff) from module topEntity (D = \result_51, Q = \t_7).
Adding EN signal on \1035 ($adff) from module topEntity (D = \result_49, Q = \t_6).
Adding EN signal on \1033 ($adff) from module topEntity (D = \result_47, Q = \t_5).
Adding EN signal on \1031 ($adff) from module topEntity (D = \result_45, Q = \t_4).
Adding EN signal on \1029 ($adff) from module topEntity (D = \result_43, Q = \t_3).
Adding EN signal on \1027 ($dff) from module topEntity (D = \\c$app_arg_15\ [63:0], Q = \\c$input0Win_app_arg\).
Adding EN signal on \1025 ($adff) from module topEntity (D = { \result_39 [71:0] \\c$input0Win_app_arg\ \t_7 }, Q = \result_39).
Adding EN signal on \1021 ($adff) from module topEntity (D = { \result_34 [143:0] \t_1 [71:8] \t_6 }, Q = \result_34).
Adding EN signal on \1015 ($adff) from module topEntity (D = { \result_27 [71:0] \t_0 [71:8] \t_5 }, Q = \result_27).
Adding EN signal on \1009 ($adff) from module topEntity (D = { \result_20 [71:0] \result_21 \t_4 }, Q = \result_20).
Adding EN signal on \1001 ($adff) from module topEntity (D = { \\c$ds1_case_alt\ \iteratei_0.r_block_23.\c$bb_res_res_2\ [39:32] }, Q = \result_10).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 48 unused cells and 48 unused wires.
<suppressed ~61 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 53 bits (of 64) from port B of cell topEntity.\29 ($add).
Removed top 43 bits (of 64) from port B of cell topEntity.\44 ($ge).
Removed top 5 bits (of 8) from port B of cell topEntity.\90 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\427 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\430 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\432 ($sub).
Removed top 7 bits (of 8) from port B of cell topEntity.\480 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\483 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\485 ($sub).
Removed top 6 bits (of 8) from port B of cell topEntity.\558 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\561 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\563 ($sub).
Removed top 6 bits (of 8) from port B of cell topEntity.\623 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\626 ($add).
Removed top 6 bits (of 8) from port B of cell topEntity.\628 ($sub).
Removed top 63 bits (of 64) from port B of cell topEntity.\656 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\702 ($gt).
Removed top 5 bits (of 8) from port B of cell topEntity.\705 ($add).
Removed top 7 bits (of 8) from port B of cell topEntity.\707 ($sub).
Removed top 5 bits (of 8) from port B of cell topEntity.\789 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\791 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\804 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\806 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\819 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\821 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\834 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\836 ($add).
Removed top 5 bits (of 8) from port B of cell topEntity.\849 ($eq).
Removed top 7 bits (of 8) from port B of cell topEntity.\851 ($add).
Removed top 63 bits (of 64) from port B of cell topEntity.\984 ($sub).
Removed top 8 bits (of 40) from FF cell topEntity.$auto$ff.cc:266:slice$240 ($dffe).
Removed top 8 bits (of 40) from wire topEntity.iteratei_9.iteratei_ho1_1_res_4.
Removed top 8 bits (of 40) from wire topEntity.result_41.

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module topEntity:
  creating $macc model for \158 ($sub).
  creating $macc model for \232 ($sub).
  creating $macc model for \29 ($add).
  creating $macc model for \319 ($sub).
  creating $macc model for \417 ($sub).
  creating $macc model for \430 ($add).
  creating $macc model for \432 ($sub).
  creating $macc model for \469 ($sub).
  creating $macc model for \483 ($add).
  creating $macc model for \485 ($sub).
  creating $macc model for \512 ($add).
  creating $macc model for \547 ($sub).
  creating $macc model for \561 ($add).
  creating $macc model for \563 ($sub).
  creating $macc model for \612 ($sub).
  creating $macc model for \626 ($add).
  creating $macc model for \628 ($sub).
  creating $macc model for \656 ($add).
  creating $macc model for \691 ($sub).
  creating $macc model for \705 ($add).
  creating $macc model for \707 ($sub).
  creating $macc model for \791 ($add).
  creating $macc model for \806 ($add).
  creating $macc model for \821 ($add).
  creating $macc model for \836 ($add).
  creating $macc model for \851 ($add).
  creating $macc model for \880 ($sub).
  creating $macc model for \984 ($sub).
  creating $alu model for $macc \984.
  creating $alu model for $macc \880.
  creating $alu model for $macc \851.
  creating $alu model for $macc \836.
  creating $alu model for $macc \821.
  creating $alu model for $macc \806.
  creating $alu model for $macc \791.
  creating $alu model for $macc \707.
  creating $alu model for $macc \705.
  creating $alu model for $macc \691.
  creating $alu model for $macc \656.
  creating $alu model for $macc \628.
  creating $alu model for $macc \626.
  creating $alu model for $macc \612.
  creating $alu model for $macc \563.
  creating $alu model for $macc \561.
  creating $alu model for $macc \547.
  creating $alu model for $macc \512.
  creating $alu model for $macc \485.
  creating $alu model for $macc \483.
  creating $alu model for $macc \469.
  creating $alu model for $macc \432.
  creating $alu model for $macc \430.
  creating $alu model for $macc \417.
  creating $alu model for $macc \319.
  creating $alu model for $macc \29.
  creating $alu model for $macc \232.
  creating $alu model for $macc \158.
  creating $alu model for \427 ($gt): new $alu
  creating $alu model for \44 ($ge): new $alu
  creating $alu model for \480 ($gt): new $alu
  creating $alu model for \558 ($gt): new $alu
  creating $alu model for \623 ($gt): new $alu
  creating $alu model for \702 ($gt): new $alu
  creating $alu cell for \623: $auto$alumacc.cc:485:replace_alu$309
  creating $alu cell for \558: $auto$alumacc.cc:485:replace_alu$314
  creating $alu cell for \44: $auto$alumacc.cc:485:replace_alu$319
  creating $alu cell for \158: $auto$alumacc.cc:485:replace_alu$330
  creating $alu cell for \232: $auto$alumacc.cc:485:replace_alu$333
  creating $alu cell for \29: $auto$alumacc.cc:485:replace_alu$336
  creating $alu cell for \319: $auto$alumacc.cc:485:replace_alu$339
  creating $alu cell for \417: $auto$alumacc.cc:485:replace_alu$342
  creating $alu cell for \430: $auto$alumacc.cc:485:replace_alu$345
  creating $alu cell for \432: $auto$alumacc.cc:485:replace_alu$348
  creating $alu cell for \469: $auto$alumacc.cc:485:replace_alu$351
  creating $alu cell for \483: $auto$alumacc.cc:485:replace_alu$354
  creating $alu cell for \485: $auto$alumacc.cc:485:replace_alu$357
  creating $alu cell for \512: $auto$alumacc.cc:485:replace_alu$360
  creating $alu cell for \547: $auto$alumacc.cc:485:replace_alu$363
  creating $alu cell for \561: $auto$alumacc.cc:485:replace_alu$366
  creating $alu cell for \563: $auto$alumacc.cc:485:replace_alu$369
  creating $alu cell for \612: $auto$alumacc.cc:485:replace_alu$372
  creating $alu cell for \626: $auto$alumacc.cc:485:replace_alu$375
  creating $alu cell for \628: $auto$alumacc.cc:485:replace_alu$378
  creating $alu cell for \656: $auto$alumacc.cc:485:replace_alu$381
  creating $alu cell for \691: $auto$alumacc.cc:485:replace_alu$384
  creating $alu cell for \705: $auto$alumacc.cc:485:replace_alu$387
  creating $alu cell for \707: $auto$alumacc.cc:485:replace_alu$390
  creating $alu cell for \791: $auto$alumacc.cc:485:replace_alu$393
  creating $alu cell for \806: $auto$alumacc.cc:485:replace_alu$396
  creating $alu cell for \480: $auto$alumacc.cc:485:replace_alu$399
  creating $alu cell for \821: $auto$alumacc.cc:485:replace_alu$404
  creating $alu cell for \427: $auto$alumacc.cc:485:replace_alu$407
  creating $alu cell for \836: $auto$alumacc.cc:485:replace_alu$412
  creating $alu cell for \702: $auto$alumacc.cc:485:replace_alu$415
  creating $alu cell for \851: $auto$alumacc.cc:485:replace_alu$420
  creating $alu cell for \880: $auto$alumacc.cc:485:replace_alu$423
  creating $alu cell for \984: $auto$alumacc.cc:485:replace_alu$426
  created 34 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~5 debug messages>

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 5 unused cells and 11 unused wires.
<suppressed ~11 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~49 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$239 ($adffe) from module topEntity (D = \result_4 [3:0], Q = \result_5 [3:0]).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 10 unused cells and 36 unused wires.
<suppressed ~11 debug messages>

2.17.5. Rerunning OPT passes. (Removed registers in this run.)

2.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~1 debug messages>

2.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.17.8. Executing OPT_DFF pass (perform DFF optimizations).

2.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.17.10. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
    Consolidated identical input bits for $mux cell \27:
      Old ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 4'x }, B=64'0000000000000000000000000000000000000000000000000000011111010000, Y=\result_4
      New ports: A={ $auto$ghdl.cc:806:import_module$2 [63:4] 1'x }, B=61'0000000000000000000000000000000000000000000000000000011111010, Y={ \result_4 [63:4] \result_4 [0] }
      New connections: \result_4 [3:1] = { \result_4 [0] \result_4 [0] \result_4 [0] }
    Consolidated identical input bits for $mux cell \428:
      Old ports: A=\\c$app_arg_5\, B={ $auto$ghdl.cc:806:import_module$73 [7:2] \\c$app_arg_5\ [1:0] }, Y=\result_22
      New ports: A=\\c$app_arg_5\ [7:2], B=$auto$ghdl.cc:806:import_module$73 [7:2], Y=\result_22 [7:2]
      New connections: \result_22 [1:0] = \\c$app_arg_5\ [1:0]
    Consolidated identical input bits for $mux cell \481:
      Old ports: A=\\c$app_arg_6\, B={ $auto$ghdl.cc:806:import_module$84 [7:2] \\c$app_arg_6\ [1:0] }, Y=\result_24
      New ports: A=\\c$app_arg_6\ [7:2], B=$auto$ghdl.cc:806:import_module$84 [7:2], Y=\result_24 [7:2]
      New connections: \result_24 [1:0] = \\c$app_arg_6\ [1:0]
    Consolidated identical input bits for $mux cell \559:
      Old ports: A={ \\c$app_arg_8\ [7:1] \t_7 [0] }, B={ $auto$ghdl.cc:806:import_module$99 [7:2] \\c$app_arg_8\ [1] \t_7 [0] }, Y=\result_29
      New ports: A=\\c$app_arg_8\ [7:2], B=$auto$ghdl.cc:806:import_module$99 [7:2], Y=\result_29 [7:2]
      New connections: \result_29 [1:0] = { \\c$app_arg_8\ [1] \t_7 [0] }
    Consolidated identical input bits for $mux cell \624:
      Old ports: A=\\c$app_arg_9\, B={ $auto$ghdl.cc:806:import_module$112 [7:2] \\c$app_arg_9\ [1:0] }, Y=\result_31
      New ports: A=\\c$app_arg_9\ [7:2], B=$auto$ghdl.cc:806:import_module$112 [7:2], Y=\result_31 [7:2]
      New connections: \result_31 [1:0] = \\c$app_arg_9\ [1:0]
    Consolidated identical input bits for $mux cell \703:
      Old ports: A=\\c$app_arg_11\, B={ $auto$ghdl.cc:806:import_module$127 [7:2] \\c$app_arg_11\ [1:0] }, Y=\result_36
      New ports: A=\\c$app_arg_11\ [7:2], B=$auto$ghdl.cc:806:import_module$127 [7:2], Y=\result_36 [7:2]
      New connections: \result_36 [1:0] = \\c$app_arg_11\ [1:0]
  Optimizing cells in module \topEntity.
Performed a total of 6 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \topEntity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \topEntity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.19.18. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$9cfaa5b7a62bd2391802c1be28bdae97aa527b15\_90_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$89e6018118041664448800cd912a3b31e5316ca7\_90_alu for cells of type $alu.
Using template $paramod$65af072f6065f0ed27ad80c8089003dcba6e1c40\_90_alu for cells of type $alu.
Using template $paramod$a950948e19702336540a1f557d0a91306bdb9188\_90_alu for cells of type $alu.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$54969db7f41ab9ffc93887c2d8e2d7f68e10b42f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
No more expansions possible.
<suppressed ~3448 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~2629 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~906 debug messages>
Removed a total of 302 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 611 unused cells and 1791 unused wires.
<suppressed ~631 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\topEntity' to `<abc-temp-dir>/input.blif'..
Replacing 12 occurrences of constant undef bits with constant zero bits
Extracted 3833 gates and 4866 wires to a netlist network with 1030 inputs and 678 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      540
ABC RESULTS:             ORNOT cells:       86
ABC RESULTS:               NOR cells:      265
ABC RESULTS:              XNOR cells:       83
ABC RESULTS:                OR cells:      390
ABC RESULTS:              NAND cells:      120
ABC RESULTS:               MUX cells:      991
ABC RESULTS:            ANDNOT cells:      947
ABC RESULTS:               AND cells:      130
ABC RESULTS:               XOR cells:      470
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:     3158
ABC RESULTS:           input signals:     1030
ABC RESULTS:          output signals:      678
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.
<suppressed ~21 debug messages>

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
<suppressed ~132 debug messages>
Removed a total of 44 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$562 ($_DFFE_PP0P_) from module topEntity.

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..
Removed 6 unused cells and 2614 unused wires.
<suppressed ~69 debug messages>

2.23.5. Rerunning OPT passes. (Removed registers in this run.)

2.23.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module topEntity.

2.23.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\topEntity'.
Removed a total of 0 cells.

2.23.8. Executing OPT_DFF pass (perform DFF optimizations).

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topEntity..

2.23.10. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \topEntity

2.24.2. Analyzing design hierarchy..
Top module:  \topEntity
Removed 0 unused modules.

2.25. Printing statistics.

=== topEntity ===

   Number of wires:               3570
   Number of wire bits:          14490
   Number of public wires:         269
   Number of public wire bits:   11189
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5156
     $_ANDNOT_                     946
     $_AND_                        128
     $_DFFE_PP0P_                 1044
     $_DFFE_PP1P_                   22
     $_DFFE_PP_                    118
     $_MUX_                        991
     $_NAND_                       120
     $_NOR_                        225
     $_NOT_                        535
     $_ORNOT_                       86
     $_OR_                         389
     $_XNOR_                        83
     $_XOR_                        469

2.26. Executing CHECK pass (checking for obvious problems).
Checking module topEntity...
Found and reported 0 problems.

3. Printing statistics.

=== topEntity ===

   Number of wires:               3570
   Number of wire bits:          14490
   Number of public wires:         269
   Number of public wire bits:   11189
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5156
     $_ANDNOT_                     946
     $_AND_                        128
     $_DFFE_PP0P_                 1044
     $_DFFE_PP1P_                   22
     $_DFFE_PP_                    118
     $_MUX_                        991
     $_NAND_                       120
     $_NOR_                        225
     $_NOT_                        535
     $_ORNOT_                       86
     $_OR_                         389
     $_XNOR_                        83
     $_XOR_                        469

End of script. Logfile hash: ca6e5c6885, CPU: user 3.08s system 0.08s, MEM: 60.26 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 25% 27x opt_clean (0 sec), 22% 33x opt_expr (0 sec), ...

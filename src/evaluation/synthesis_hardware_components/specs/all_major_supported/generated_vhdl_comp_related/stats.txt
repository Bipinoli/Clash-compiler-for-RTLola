
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `
ghdl --latches --std=08 --work=work implementation; 
synth -top implementation; 
stat;
' --

1. Executing GHDL.
Importing module implementation.
Importing module clock_pre_processing.
Importing module input_pre_processing.
Importing module monitor.
Importing module high_level_controller.
Importing module queue.
Importing module low_level_controller.
Importing module extinterface.
Importing module check_new_input.
Importing module event_delay.
Importing module time_unit.
Importing module scheduler.
Importing module hlqinterface.
Importing module evaluator.
Importing module x_input_stream_entity.
Importing module a_output_stream_entity.
Importing module b_output_stream_entity.
Importing module c_output_stream_entity.
Importing module d_output_stream_entity.
Importing module b_sum_0_sliding_window_entity.
Importing module c_count_1_sliding_window_entity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \c_count_1_sliding_window_entity
Used module:                 \b_sum_0_sliding_window_entity
Used module:                 \d_output_stream_entity
Used module:                 \c_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \a_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Used module:         \high_level_controller
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:             \event_delay
Used module:             \check_new_input
Used module:             \extinterface
Used module:     \input_pre_processing
Used module:     \clock_pre_processing

2.1.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \c_count_1_sliding_window_entity
Used module:                 \b_sum_0_sliding_window_entity
Used module:                 \d_output_stream_entity
Used module:                 \c_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \a_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Used module:         \high_level_controller
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:             \event_delay
Used module:             \check_new_input
Used module:             \extinterface
Used module:     \input_pre_processing
Used module:     \clock_pre_processing
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module c_count_1_sliding_window_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module d_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module a_output_stream_entity.
Optimizing module x_input_stream_entity.
<suppressed ~1 debug messages>
Optimizing module evaluator.
<suppressed ~20 debug messages>
Optimizing module hlqinterface.
<suppressed ~3 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module event_delay.
Optimizing module check_new_input.
Optimizing module extinterface.
Optimizing module low_level_controller.
<suppressed ~1 debug messages>
Optimizing module queue.
<suppressed ~21 debug messages>
Optimizing module high_level_controller.
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module implementation.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module c_count_1_sliding_window_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module d_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module a_output_stream_entity.
Optimizing module x_input_stream_entity.
Optimizing module evaluator.
Optimizing module hlqinterface.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module event_delay.
Optimizing module check_new_input.
Optimizing module extinterface.
Optimizing module low_level_controller.
Optimizing module queue.
Optimizing module high_level_controller.
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
Optimizing module implementation.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \x_input_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Removed 6 unused cells and 217 unused wires.
<suppressed ~27 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module a_output_stream_entity...
Checking module b_output_stream_entity...
Checking module b_sum_0_sliding_window_entity...
Checking module c_count_1_sliding_window_entity...
Checking module c_output_stream_entity...
Checking module check_new_input...
Checking module clock_pre_processing...
Checking module d_output_stream_entity...
Checking module evaluator...
Checking module event_delay...
Checking module extinterface...
Checking module high_level_controller...
Checking module hlqinterface...
Checking module implementation...
Checking module input_pre_processing...
Checking module low_level_controller...
Checking module monitor...
Checking module queue...
Checking module scheduler...
Checking module time_unit...
Checking module x_input_stream_entity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
<suppressed ~48 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~57 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 35 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell \824: \push_event_in -> 1'1
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
<suppressed ~18 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~21 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 13 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 3 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 4 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 5 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 6 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 7 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 8 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 9 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 10 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 11 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 12 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 13 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 14 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 15 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 16 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 17 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 18 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 19 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 20 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 21 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 22 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 23 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 24 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 25 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 26 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 27 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 28 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 29 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 30 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 31 on \328 ($adff) from module high_level_controller.
Setting constant 0-bit at position 0 on \1013 ($dlatch) from module hlqinterface.
Setting constant 1-bit at position 1 on \1013 ($dlatch) from module hlqinterface.
Setting constant 1-bit at position 0 on \1014 ($dlatch) from module hlqinterface.
Setting constant 1-bit at position 1 on \1014 ($dlatch) from module hlqinterface.
Setting constant 0-bit at position 2 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 3 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 4 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 5 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 6 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 7 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 8 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 9 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 10 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 11 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 12 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 13 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 14 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 15 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 16 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 17 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 18 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 19 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 20 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 21 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 22 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 23 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 24 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 25 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 26 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 27 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 28 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 29 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 30 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 31 on \1005 ($adff) from module hlqinterface.
Setting constant 0-bit at position 0 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 1 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 2 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 3 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 4 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 5 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 6 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 7 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 8 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 9 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 10 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 11 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 12 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 13 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 14 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 15 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 16 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 17 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 18 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 19 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 20 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 21 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 22 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 23 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 24 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 25 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 26 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 27 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 28 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 29 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 30 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 31 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 32 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 33 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 34 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 35 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 36 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 37 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 38 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 39 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 40 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 41 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 42 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 43 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 44 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 45 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 46 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 47 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 48 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 49 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 50 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 51 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 52 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 53 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 54 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 55 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 56 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 57 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 58 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 59 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 60 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 61 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 62 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 63 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 64 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 65 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 66 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 67 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 68 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 69 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 70 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 71 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 72 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 73 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 74 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 75 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 76 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 77 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 78 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 79 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 80 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 81 on \896 ($dlatch) from module scheduler.
Setting constant 1-bit at position 82 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 83 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 84 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 85 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 86 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 87 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 88 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 89 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 90 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 91 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 92 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 93 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 94 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 95 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 96 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 97 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 98 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 99 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 100 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 101 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 102 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 103 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 104 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 105 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 106 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 107 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 108 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 109 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 110 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 111 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 112 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 113 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 114 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 115 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 116 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 117 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 118 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 119 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 120 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 121 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 122 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 123 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 124 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 125 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 126 on \896 ($dlatch) from module scheduler.
Setting constant 0-bit at position 127 on \896 ($dlatch) from module scheduler.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 46 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
<suppressed ~1 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
<suppressed ~1 debug messages>
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~117 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 3 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~116 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.6.20. Executing OPT_DFF pass (perform DFF optimizations).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register low_level_controller.current_state.

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\current_state' from module `\low_level_controller'.
  found $adff cell for state register: \775
  root of input selection tree: $auto$ghdl.cc:806:import_module$261
  found reset state: 0 (from async reset)
  found ctrl input: $auto$ghdl.cc:806:import_module$248
  found ctrl input: $auto$ghdl.cc:806:import_module$249
  found ctrl input: $auto$ghdl.cc:806:import_module$251
  found ctrl input: \data_available
  found state code: 1
  found state code: 2
  found ctrl output: $auto$ghdl.cc:806:import_module$247
  found ctrl output: $auto$ghdl.cc:806:import_module$249
  found ctrl output: $auto$ghdl.cc:806:import_module$250
  ctrl inputs: { $auto$ghdl.cc:806:import_module$251 $auto$ghdl.cc:806:import_module$248 \data_available }
  ctrl outputs: { $auto$ghdl.cc:806:import_module$261 $auto$ghdl.cc:806:import_module$250 $auto$ghdl.cc:806:import_module$249 $auto$ghdl.cc:806:import_module$247 }
  transition:          0 3'00- ->          0 35'00000000000000000000000000000000001
  transition:          0 3'100 ->          0 35'00000000000000000000000000000000001
  transition:          0 3'101 ->          1 35'00000000000000000000000000000001001
  transition:          0 3'-1- ->          1 35'00000000000000000000000000000001001
  transition:          2 3'00- ->          2 35'00000000000000000000000000000010100
  transition:          2 3'100 ->          0 35'00000000000000000000000000000000100
  transition:          2 3'101 ->          1 35'00000000000000000000000000000001100
  transition:          2 3'-1- ->          1 35'00000000000000000000000000000001100
  transition:          1 3'-0- ->          2 35'00000000000000000000000000000010010
  transition:          1 3'-1- ->          1 35'00000000000000000000000000000001010

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\current_state$893' from module `\low_level_controller'.

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\current_state$893' from module `\low_level_controller'.
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [0].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [1].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [2].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [3].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [4].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [5].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [6].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [7].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [8].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [9].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [10].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [11].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [12].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [13].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [14].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [15].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [16].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [17].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [18].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [19].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [20].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [21].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [22].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [23].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [24].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [25].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [26].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [27].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [28].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [29].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [30].
  Removing unused output signal $auto$ghdl.cc:806:import_module$261 [31].

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\current_state$893' from module `\low_level_controller' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> --1
  00000000000000000000000000000010 -> -1-
  00000000000000000000000000000001 -> 1--

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\current_state$893' from module `low_level_controller':
-------------------------------------

  Information on FSM $fsm$\current_state$893 (\current_state):

  Number of input signals:    3
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \data_available
    1: $auto$ghdl.cc:806:import_module$248
    2: $auto$ghdl.cc:806:import_module$251

  Output signals:
    0: $auto$ghdl.cc:806:import_module$247
    1: $auto$ghdl.cc:806:import_module$249
    2: $auto$ghdl.cc:806:import_module$250

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 3'100   ->     0 3'001
      1:     0 3'00-   ->     0 3'001
      2:     0 3'101   ->     2 3'001
      3:     0 3'-1-   ->     2 3'001
      4:     1 3'100   ->     0 3'100
      5:     1 3'00-   ->     1 3'100
      6:     1 3'101   ->     2 3'100
      7:     1 3'-1-   ->     2 3'100
      8:     2 3'-0-   ->     1 3'010
      9:     2 3'-1-   ->     2 3'010

-------------------------------------

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\current_state$893' from module `\low_level_controller'.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~4 debug messages>
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 2 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~115 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \1523 ($adff) from module a_output_stream_entity (D = \data_valid [1:0], Q = \data_valid [2:1]).
Adding EN signal on \1523 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$517, Q = \data_valid [0]).
Adding EN signal on \1522 ($adff) from module a_output_stream_entity (D = \data [127:0], Q = \data [191:64]).
Adding EN signal on \1522 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$515, Q = \data [63:0]).
Adding EN signal on \1521 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$510, Q = \eval_done).
Adding EN signal on \1520 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$513, Q = \pe_done).
Adding EN signal on \1700 ($adff) from module b_output_stream_entity (D = \data_valid [0], Q = \data_valid [1]).
Adding EN signal on \1700 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$545, Q = \data_valid [0]).
Adding EN signal on \1699 ($adff) from module b_output_stream_entity (D = \data [63:0], Q = \data [127:64]).
Adding EN signal on \1699 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$543, Q = \data [63:0]).
Adding EN signal on \1698 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$538, Q = \eval_done).
Adding EN signal on \1697 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$541, Q = \pe_done).
Adding EN signal on \2280 ($adff) from module b_sum_0_sliding_window_entity (D = \sum_buckets [6335:0], Q = \sum_buckets [6399:64]).
Adding EN signal on \2280 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$736, Q = \sum_buckets [63:0]).
Adding EN signal on \2277 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$723, Q = \request_done).
Adding EN signal on \2276 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$727, Q = \upd_done).
Adding EN signal on \2275 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$733, Q = \evict_done).
Adding EN signal on \2274 ($adff) from module b_sum_0_sliding_window_entity (D = 1'1, Q = \sw_data_valid).
Adding EN signal on \2273 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$710, Q = \sw_data).
Adding EN signal on \2272 ($adff) from module b_sum_0_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$604, Q = \last_ts_before_upd).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$1014 ($adffe) from module b_sum_0_sliding_window_entity.
Adding EN signal on \2595 ($adff) from module c_count_1_sliding_window_entity (D = \count_buckets [6335:0], Q = \count_buckets [6399:64]).
Adding EN signal on \2595 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$881, Q = \count_buckets [63:0]).
Adding EN signal on \2592 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$868, Q = \request_done).
Adding EN signal on \2591 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$872, Q = \upd_done).
Adding EN signal on \2590 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$878, Q = \evict_done).
Adding EN signal on \2589 ($adff) from module c_count_1_sliding_window_entity (D = 1'1, Q = \sw_data_valid).
Adding EN signal on \2588 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$855, Q = \sw_data).
Adding EN signal on \2587 ($adff) from module c_count_1_sliding_window_entity (D = $auto$ghdl.cc:806:import_module$749, Q = \last_ts_before_upd).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$1068 ($adffe) from module c_count_1_sliding_window_entity.
Adding EN signal on \1807 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$569, Q = \data_valid).
Adding EN signal on \1806 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$568, Q = \data).
Adding EN signal on \1805 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$563, Q = \eval_done).
Adding EN signal on \1804 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$566, Q = \pe_done).
Adding EN signal on \107 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$24, Q = \tclk_count).
Adding EN signal on \105 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$20, Q = \eclk_count).
Adding EN signal on \103 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$30, Q = \tclk_reg).
Adding EN signal on \102 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$29, Q = \eclk_reg).
Adding EN signal on \1968 ($adff) from module d_output_stream_entity (D = $auto$ghdl.cc:806:import_module$596, Q = \data_valid).
Adding EN signal on \1967 ($adff) from module d_output_stream_entity (D = $auto$ghdl.cc:806:import_module$595, Q = \data).
Adding EN signal on \1966 ($adff) from module d_output_stream_entity (D = $auto$ghdl.cc:806:import_module$590, Q = \eval_done).
Adding EN signal on \1965 ($adff) from module d_output_stream_entity (D = $auto$ghdl.cc:806:import_module$593, Q = \pe_done).
Adding EN signal on \1342 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$387, Q = \valid_reg).
Adding EN signal on \1340 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$449, Q = \evaluator_done).
Adding EN signal on \1337 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$465, Q = \c_count_1_request).
Adding EN signal on \1336 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$464, Q = \c_count_1_upd).
Adding EN signal on \1335 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$463, Q = \c_count_1_evict).
Adding EN signal on \1334 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$462, Q = \b_sum_0_request).
Adding EN signal on \1333 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$461, Q = \b_sum_0_upd).
Adding EN signal on \1332 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$460, Q = \b_sum_0_evict).
Adding EN signal on \1331 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$459, Q = \d_eval).
Adding EN signal on \1330 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$458, Q = \d_pe).
Adding EN signal on \1329 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$457, Q = \c_eval).
Adding EN signal on \1328 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$456, Q = \c_pe).
Adding EN signal on \1327 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$455, Q = \b_eval).
Adding EN signal on \1326 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$454, Q = \b_pe).
Adding EN signal on \1325 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$453, Q = \a_eval).
Adding EN signal on \1324 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$452, Q = \a_pe).
Adding EN signal on \1323 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$451, Q = \x_upd).
Adding EN signal on \1017 ($adff) from module hlqinterface (D = $auto$ghdl.cc:806:import_module$318, Q = \time_to_queue).
Adding EN signal on \1016 ($adff) from module hlqinterface (D = { 31'0000000000000000000000000000000 $auto$ghdl.cc:806:import_module$300 [0] }, Q = \last_deadline_id).
Adding EN signal on \1007 ($adff) from module hlqinterface (D = \x_data_in, Q = \x_data_push).
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$1191 ($adffe) from module hlqinterface.
Adding EN signal on \776 ($adff) from module low_level_controller (D = $auto$ghdl.cc:806:import_module$262, Q = \pop_data).
Adding EN signal on \774 ($adff) from module low_level_controller (D = $auto$ghdl.cc:806:import_module$260, Q = \input_clk).
Adding EN signal on \665 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$189, Q = \pop_done).
Adding EN signal on \664 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$188, Q = \push_done).
Adding EN signal on \662 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$162, Q = \size).
Adding EN signal on \660 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$161, Q = \av).
Adding EN signal on \658 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$179, Q = \d_en).
Adding EN signal on \656 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$178, Q = \d_en_reg).
Adding EN signal on \654 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$177, Q = \c_en).
Adding EN signal on \652 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$176, Q = \c_en_reg).
Adding EN signal on \650 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$175, Q = \b_en).
Adding EN signal on \648 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$174, Q = \b_en_reg).
Adding EN signal on \646 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$173, Q = \a_en).
Adding EN signal on \644 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$172, Q = \a_en_reg).
Adding EN signal on \642 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$171, Q = \x_en).
Adding EN signal on \640 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$170, Q = \x_data).
Adding EN signal on \638 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$169, Q = \x_en_reg).
Adding EN signal on \636 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$168, Q = \x_data_reg).
Adding EN signal on \634 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$167, Q = \time_data).
Adding EN signal on \632 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$166, Q = \time_data_reg).
Adding EN signal on \630 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$146, Q = \is_full).
Adding EN signal on \901 ($adff) from module scheduler (D = \time_of_next_deadline, Q = \time_last_deadline).
Adding EN signal on \895 ($adff) from module scheduler (D = $auto$ghdl.cc:806:import_module$285, Q = \time_of_next_deadline).
Adding EN signal on \1378 ($adff) from module x_input_stream_entity (D = { \data_valid [0] 1'1 }, Q = \data_valid).
Adding EN signal on \1376 ($adff) from module x_input_stream_entity (D = { \data [63:0] \data_in }, Q = \data).
Adding EN signal on \1374 ($adff) from module x_input_stream_entity (D = $auto$ghdl.cc:806:import_module$491, Q = \done).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 68 unused cells and 77 unused wires.
<suppressed ~81 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~4 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~4 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~2 debug messages>
Optimizing module d_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
<suppressed ~1 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~2 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~19 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~94 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
<suppressed ~18 debug messages>
Finding identical cells in module `\c_count_1_sliding_window_entity'.
<suppressed ~18 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\evaluator'.
<suppressed ~48 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~159 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 89 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 88 unused wires.
<suppressed ~8 debug messages>

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell b_sum_0_sliding_window_entity.$auto$opt_dff.cc:195:make_patterns_logic$982 ($ne).
Removed top 44 bits (of 64) from port B of cell b_sum_0_sliding_window_entity.\1981 ($add).
Removed top 6336 bits (of 6400) from mux cell b_sum_0_sliding_window_entity.\1996 ($mux).
Removed top 6336 bits (of 6400) from wire b_sum_0_sliding_window_entity.$auto$ghdl.cc:806:import_module$606.
Removed top 1 bits (of 2) from port B of cell c_count_1_sliding_window_entity.$auto$opt_dff.cc:195:make_patterns_logic$1036 ($ne).
Removed top 45 bits (of 64) from port B of cell c_count_1_sliding_window_entity.\2295 ($add).
Removed top 6336 bits (of 6400) from mux cell c_count_1_sliding_window_entity.\2310 ($mux).
Removed top 63 bits (of 64) from port B of cell c_count_1_sliding_window_entity.\2316 ($add).
Removed top 6336 bits (of 6400) from wire c_count_1_sliding_window_entity.$auto$ghdl.cc:806:import_module$751.
Removed top 28 bits (of 32) from port B of cell clock_pre_processing.\58 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\60 ($add).
Removed top 30 bits (of 32) from port B of cell clock_pre_processing.\66 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\68 ($add).
Removed top 29 bits (of 32) from port B of cell clock_pre_processing.\74 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\78 ($eq).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$1116 ($ne).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$1109 ($ne).
Removed top 60 bits (of 64) from port B of cell d_output_stream_entity.\1835 ($lt).
Removed top 59 bits (of 64) from port B of cell d_output_stream_entity.\1852 ($gt).
Removed top 1 bits (of 2) from port B of cell evaluator.$auto$opt_dff.cc:195:make_patterns_logic$1145 ($ne).
Removed top 30 bits (of 32) from port A of cell high_level_controller.\309 ($add).
Removed top 31 bits (of 32) from port B of cell high_level_controller.\309 ($add).
Removed top 30 bits (of 32) from port Y of cell high_level_controller.\309 ($add).
Removed top 30 bits (of 32) from wire high_level_controller.$auto$ghdl.cc:806:import_module$91.
Removed top 30 bits (of 32) from wire high_level_controller.hlc_clk_count.
Removed top 30 bits (of 32) from port A of cell hlqinterface.\921 ($add).
Removed top 31 bits (of 32) from port B of cell hlqinterface.\921 ($add).
Removed top 30 bits (of 32) from port Y of cell hlqinterface.\921 ($add).
Removed top 31 bits (of 32) from port A of cell hlqinterface.\928 ($add).
Removed top 31 bits (of 32) from port B of cell hlqinterface.\928 ($add).
Removed top 31 bits (of 32) from port Y of cell hlqinterface.\928 ($add).
Removed top 30 bits (of 32) from wire hlqinterface.$auto$ghdl.cc:806:import_module$297.
Removed top 30 bits (of 32) from wire hlqinterface.clock_state_machine.
Removed top 31 bits (of 32) from wire hlqinterface.last_deadline_id.
Removed top 31 bits (of 32) from port B of cell queue.\351 ($gt).
Removed top 29 bits (of 32) from port B of cell queue.\354 ($lt).
Removed top 31 bits (of 32) from port B of cell queue.\371 ($sub).
Removed top 31 bits (of 32) from port B of cell queue.\425 ($add).
Removed top 31 bits (of 32) from port B of cell queue.\428 ($eq).
Removed top 30 bits (of 32) from port B of cell queue.\480 ($gt).
Removed top 45 bits (of 64) from port B of cell scheduler.\868 ($add).
Removed top 58 bits (of 64) from port B of cell time_unit.\851 ($add).
Removed top 1 bits (of 2) from port B of cell x_input_stream_entity.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module a_output_stream_entity:
  creating $macc model for \1418 ($add).
  creating $alu model for $macc \1418.
  creating $alu cell for \1418: $auto$alumacc.cc:485:replace_alu$1373
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module b_output_stream_entity:
  creating $macc model for \1560 ($add).
  creating $macc model for \1561 ($add).
  creating $macc model for \1568 ($add).
  merging $macc model for \1560 into \1568.
  creating $alu model for $macc \1561.
  creating $macc cell for \1568: $auto$alumacc.cc:365:replace_macc$1376
  creating $alu cell for \1561: $auto$alumacc.cc:485:replace_alu$1377
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module b_sum_0_sliding_window_entity:
  creating $macc model for \1981 ($add).
  creating $macc model for \2001 ($add).
  creating $macc model for \2006 ($add).
  creating $macc model for \2008 ($add).
  creating $macc model for \2010 ($add).
  creating $macc model for \2012 ($add).
  creating $macc model for \2014 ($add).
  creating $macc model for \2016 ($add).
  creating $macc model for \2018 ($add).
  creating $macc model for \2020 ($add).
  creating $macc model for \2022 ($add).
  creating $macc model for \2024 ($add).
  creating $macc model for \2026 ($add).
  creating $macc model for \2028 ($add).
  creating $macc model for \2030 ($add).
  creating $macc model for \2032 ($add).
  creating $macc model for \2034 ($add).
  creating $macc model for \2036 ($add).
  creating $macc model for \2038 ($add).
  creating $macc model for \2040 ($add).
  creating $macc model for \2042 ($add).
  creating $macc model for \2044 ($add).
  creating $macc model for \2046 ($add).
  creating $macc model for \2048 ($add).
  creating $macc model for \2050 ($add).
  creating $macc model for \2052 ($add).
  creating $macc model for \2054 ($add).
  creating $macc model for \2056 ($add).
  creating $macc model for \2058 ($add).
  creating $macc model for \2060 ($add).
  creating $macc model for \2062 ($add).
  creating $macc model for \2064 ($add).
  creating $macc model for \2066 ($add).
  creating $macc model for \2068 ($add).
  creating $macc model for \2070 ($add).
  creating $macc model for \2072 ($add).
  creating $macc model for \2074 ($add).
  creating $macc model for \2076 ($add).
  creating $macc model for \2078 ($add).
  creating $macc model for \2080 ($add).
  creating $macc model for \2082 ($add).
  creating $macc model for \2084 ($add).
  creating $macc model for \2086 ($add).
  creating $macc model for \2088 ($add).
  creating $macc model for \2090 ($add).
  creating $macc model for \2092 ($add).
  creating $macc model for \2094 ($add).
  creating $macc model for \2096 ($add).
  creating $macc model for \2098 ($add).
  creating $macc model for \2100 ($add).
  creating $macc model for \2102 ($add).
  creating $macc model for \2104 ($add).
  creating $macc model for \2106 ($add).
  creating $macc model for \2108 ($add).
  creating $macc model for \2110 ($add).
  creating $macc model for \2112 ($add).
  creating $macc model for \2114 ($add).
  creating $macc model for \2116 ($add).
  creating $macc model for \2118 ($add).
  creating $macc model for \2120 ($add).
  creating $macc model for \2122 ($add).
  creating $macc model for \2124 ($add).
  creating $macc model for \2126 ($add).
  creating $macc model for \2128 ($add).
  creating $macc model for \2130 ($add).
  creating $macc model for \2132 ($add).
  creating $macc model for \2134 ($add).
  creating $macc model for \2136 ($add).
  creating $macc model for \2138 ($add).
  creating $macc model for \2140 ($add).
  creating $macc model for \2142 ($add).
  creating $macc model for \2144 ($add).
  creating $macc model for \2146 ($add).
  creating $macc model for \2148 ($add).
  creating $macc model for \2150 ($add).
  creating $macc model for \2152 ($add).
  creating $macc model for \2154 ($add).
  creating $macc model for \2156 ($add).
  creating $macc model for \2158 ($add).
  creating $macc model for \2160 ($add).
  creating $macc model for \2162 ($add).
  creating $macc model for \2164 ($add).
  creating $macc model for \2166 ($add).
  creating $macc model for \2168 ($add).
  creating $macc model for \2170 ($add).
  creating $macc model for \2172 ($add).
  creating $macc model for \2174 ($add).
  creating $macc model for \2176 ($add).
  creating $macc model for \2178 ($add).
  creating $macc model for \2180 ($add).
  creating $macc model for \2182 ($add).
  creating $macc model for \2184 ($add).
  creating $macc model for \2186 ($add).
  creating $macc model for \2188 ($add).
  creating $macc model for \2190 ($add).
  creating $macc model for \2192 ($add).
  creating $macc model for \2194 ($add).
  creating $macc model for \2196 ($add).
  creating $macc model for \2198 ($add).
  creating $macc model for \2200 ($add).
  creating $macc model for \2202 ($add).
  merging $macc model for \2200 into \2202.
  merging $macc model for \2198 into \2202.
  merging $macc model for \2196 into \2202.
  merging $macc model for \2194 into \2202.
  merging $macc model for \2192 into \2202.
  merging $macc model for \2190 into \2202.
  merging $macc model for \2188 into \2202.
  merging $macc model for \2186 into \2202.
  merging $macc model for \2184 into \2202.
  merging $macc model for \2182 into \2202.
  merging $macc model for \2180 into \2202.
  merging $macc model for \2178 into \2202.
  merging $macc model for \2176 into \2202.
  merging $macc model for \2174 into \2202.
  merging $macc model for \2172 into \2202.
  merging $macc model for \2170 into \2202.
  merging $macc model for \2168 into \2202.
  merging $macc model for \2166 into \2202.
  merging $macc model for \2164 into \2202.
  merging $macc model for \2162 into \2202.
  merging $macc model for \2160 into \2202.
  merging $macc model for \2158 into \2202.
  merging $macc model for \2156 into \2202.
  merging $macc model for \2154 into \2202.
  merging $macc model for \2152 into \2202.
  merging $macc model for \2150 into \2202.
  merging $macc model for \2148 into \2202.
  merging $macc model for \2146 into \2202.
  merging $macc model for \2144 into \2202.
  merging $macc model for \2142 into \2202.
  merging $macc model for \2140 into \2202.
  merging $macc model for \2138 into \2202.
  merging $macc model for \2136 into \2202.
  merging $macc model for \2134 into \2202.
  merging $macc model for \2132 into \2202.
  merging $macc model for \2130 into \2202.
  merging $macc model for \2128 into \2202.
  merging $macc model for \2126 into \2202.
  merging $macc model for \2124 into \2202.
  merging $macc model for \2122 into \2202.
  merging $macc model for \2120 into \2202.
  merging $macc model for \2118 into \2202.
  merging $macc model for \2116 into \2202.
  merging $macc model for \2114 into \2202.
  merging $macc model for \2112 into \2202.
  merging $macc model for \2110 into \2202.
  merging $macc model for \2108 into \2202.
  merging $macc model for \2106 into \2202.
  merging $macc model for \2104 into \2202.
  merging $macc model for \2102 into \2202.
  merging $macc model for \2100 into \2202.
  merging $macc model for \2098 into \2202.
  merging $macc model for \2096 into \2202.
  merging $macc model for \2094 into \2202.
  merging $macc model for \2092 into \2202.
  merging $macc model for \2090 into \2202.
  merging $macc model for \2088 into \2202.
  merging $macc model for \2086 into \2202.
  merging $macc model for \2084 into \2202.
  merging $macc model for \2082 into \2202.
  merging $macc model for \2080 into \2202.
  merging $macc model for \2078 into \2202.
  merging $macc model for \2076 into \2202.
  merging $macc model for \2074 into \2202.
  merging $macc model for \2072 into \2202.
  merging $macc model for \2070 into \2202.
  merging $macc model for \2068 into \2202.
  merging $macc model for \2066 into \2202.
  merging $macc model for \2064 into \2202.
  merging $macc model for \2062 into \2202.
  merging $macc model for \2060 into \2202.
  merging $macc model for \2058 into \2202.
  merging $macc model for \2056 into \2202.
  merging $macc model for \2054 into \2202.
  merging $macc model for \2052 into \2202.
  merging $macc model for \2050 into \2202.
  merging $macc model for \2048 into \2202.
  merging $macc model for \2046 into \2202.
  merging $macc model for \2044 into \2202.
  merging $macc model for \2042 into \2202.
  merging $macc model for \2040 into \2202.
  merging $macc model for \2038 into \2202.
  merging $macc model for \2036 into \2202.
  merging $macc model for \2034 into \2202.
  merging $macc model for \2032 into \2202.
  merging $macc model for \2030 into \2202.
  merging $macc model for \2028 into \2202.
  merging $macc model for \2026 into \2202.
  merging $macc model for \2024 into \2202.
  merging $macc model for \2022 into \2202.
  merging $macc model for \2020 into \2202.
  merging $macc model for \2018 into \2202.
  merging $macc model for \2016 into \2202.
  merging $macc model for \2014 into \2202.
  merging $macc model for \2012 into \2202.
  merging $macc model for \2010 into \2202.
  merging $macc model for \2008 into \2202.
  merging $macc model for \2006 into \2202.
  creating $alu model for $macc \2001.
  creating $alu model for $macc \1981.
  creating $macc cell for \2202: $auto$alumacc.cc:365:replace_macc$1380
  creating $alu model for \1979 ($gt): new $alu
  creating $alu cell for \1979: $auto$alumacc.cc:485:replace_alu$1382
  creating $alu cell for \1981: $auto$alumacc.cc:485:replace_alu$1387
  creating $alu cell for \2001: $auto$alumacc.cc:485:replace_alu$1390
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module c_count_1_sliding_window_entity:
  creating $macc model for \2295 ($add).
  creating $macc model for \2316 ($add).
  creating $macc model for \2321 ($add).
  creating $macc model for \2323 ($add).
  creating $macc model for \2325 ($add).
  creating $macc model for \2327 ($add).
  creating $macc model for \2329 ($add).
  creating $macc model for \2331 ($add).
  creating $macc model for \2333 ($add).
  creating $macc model for \2335 ($add).
  creating $macc model for \2337 ($add).
  creating $macc model for \2339 ($add).
  creating $macc model for \2341 ($add).
  creating $macc model for \2343 ($add).
  creating $macc model for \2345 ($add).
  creating $macc model for \2347 ($add).
  creating $macc model for \2349 ($add).
  creating $macc model for \2351 ($add).
  creating $macc model for \2353 ($add).
  creating $macc model for \2355 ($add).
  creating $macc model for \2357 ($add).
  creating $macc model for \2359 ($add).
  creating $macc model for \2361 ($add).
  creating $macc model for \2363 ($add).
  creating $macc model for \2365 ($add).
  creating $macc model for \2367 ($add).
  creating $macc model for \2369 ($add).
  creating $macc model for \2371 ($add).
  creating $macc model for \2373 ($add).
  creating $macc model for \2375 ($add).
  creating $macc model for \2377 ($add).
  creating $macc model for \2379 ($add).
  creating $macc model for \2381 ($add).
  creating $macc model for \2383 ($add).
  creating $macc model for \2385 ($add).
  creating $macc model for \2387 ($add).
  creating $macc model for \2389 ($add).
  creating $macc model for \2391 ($add).
  creating $macc model for \2393 ($add).
  creating $macc model for \2395 ($add).
  creating $macc model for \2397 ($add).
  creating $macc model for \2399 ($add).
  creating $macc model for \2401 ($add).
  creating $macc model for \2403 ($add).
  creating $macc model for \2405 ($add).
  creating $macc model for \2407 ($add).
  creating $macc model for \2409 ($add).
  creating $macc model for \2411 ($add).
  creating $macc model for \2413 ($add).
  creating $macc model for \2415 ($add).
  creating $macc model for \2417 ($add).
  creating $macc model for \2419 ($add).
  creating $macc model for \2421 ($add).
  creating $macc model for \2423 ($add).
  creating $macc model for \2425 ($add).
  creating $macc model for \2427 ($add).
  creating $macc model for \2429 ($add).
  creating $macc model for \2431 ($add).
  creating $macc model for \2433 ($add).
  creating $macc model for \2435 ($add).
  creating $macc model for \2437 ($add).
  creating $macc model for \2439 ($add).
  creating $macc model for \2441 ($add).
  creating $macc model for \2443 ($add).
  creating $macc model for \2445 ($add).
  creating $macc model for \2447 ($add).
  creating $macc model for \2449 ($add).
  creating $macc model for \2451 ($add).
  creating $macc model for \2453 ($add).
  creating $macc model for \2455 ($add).
  creating $macc model for \2457 ($add).
  creating $macc model for \2459 ($add).
  creating $macc model for \2461 ($add).
  creating $macc model for \2463 ($add).
  creating $macc model for \2465 ($add).
  creating $macc model for \2467 ($add).
  creating $macc model for \2469 ($add).
  creating $macc model for \2471 ($add).
  creating $macc model for \2473 ($add).
  creating $macc model for \2475 ($add).
  creating $macc model for \2477 ($add).
  creating $macc model for \2479 ($add).
  creating $macc model for \2481 ($add).
  creating $macc model for \2483 ($add).
  creating $macc model for \2485 ($add).
  creating $macc model for \2487 ($add).
  creating $macc model for \2489 ($add).
  creating $macc model for \2491 ($add).
  creating $macc model for \2493 ($add).
  creating $macc model for \2495 ($add).
  creating $macc model for \2497 ($add).
  creating $macc model for \2499 ($add).
  creating $macc model for \2501 ($add).
  creating $macc model for \2503 ($add).
  creating $macc model for \2505 ($add).
  creating $macc model for \2507 ($add).
  creating $macc model for \2509 ($add).
  creating $macc model for \2511 ($add).
  creating $macc model for \2513 ($add).
  creating $macc model for \2515 ($add).
  creating $macc model for \2517 ($add).
  merging $macc model for \2515 into \2517.
  merging $macc model for \2513 into \2517.
  merging $macc model for \2511 into \2517.
  merging $macc model for \2509 into \2517.
  merging $macc model for \2507 into \2517.
  merging $macc model for \2505 into \2517.
  merging $macc model for \2503 into \2517.
  merging $macc model for \2501 into \2517.
  merging $macc model for \2499 into \2517.
  merging $macc model for \2497 into \2517.
  merging $macc model for \2495 into \2517.
  merging $macc model for \2493 into \2517.
  merging $macc model for \2491 into \2517.
  merging $macc model for \2489 into \2517.
  merging $macc model for \2487 into \2517.
  merging $macc model for \2485 into \2517.
  merging $macc model for \2483 into \2517.
  merging $macc model for \2481 into \2517.
  merging $macc model for \2479 into \2517.
  merging $macc model for \2477 into \2517.
  merging $macc model for \2475 into \2517.
  merging $macc model for \2473 into \2517.
  merging $macc model for \2471 into \2517.
  merging $macc model for \2469 into \2517.
  merging $macc model for \2467 into \2517.
  merging $macc model for \2465 into \2517.
  merging $macc model for \2463 into \2517.
  merging $macc model for \2461 into \2517.
  merging $macc model for \2459 into \2517.
  merging $macc model for \2457 into \2517.
  merging $macc model for \2455 into \2517.
  merging $macc model for \2453 into \2517.
  merging $macc model for \2451 into \2517.
  merging $macc model for \2449 into \2517.
  merging $macc model for \2447 into \2517.
  merging $macc model for \2445 into \2517.
  merging $macc model for \2443 into \2517.
  merging $macc model for \2441 into \2517.
  merging $macc model for \2439 into \2517.
  merging $macc model for \2437 into \2517.
  merging $macc model for \2435 into \2517.
  merging $macc model for \2433 into \2517.
  merging $macc model for \2431 into \2517.
  merging $macc model for \2429 into \2517.
  merging $macc model for \2427 into \2517.
  merging $macc model for \2425 into \2517.
  merging $macc model for \2423 into \2517.
  merging $macc model for \2421 into \2517.
  merging $macc model for \2419 into \2517.
  merging $macc model for \2417 into \2517.
  merging $macc model for \2415 into \2517.
  merging $macc model for \2413 into \2517.
  merging $macc model for \2411 into \2517.
  merging $macc model for \2409 into \2517.
  merging $macc model for \2407 into \2517.
  merging $macc model for \2405 into \2517.
  merging $macc model for \2403 into \2517.
  merging $macc model for \2401 into \2517.
  merging $macc model for \2399 into \2517.
  merging $macc model for \2397 into \2517.
  merging $macc model for \2395 into \2517.
  merging $macc model for \2393 into \2517.
  merging $macc model for \2391 into \2517.
  merging $macc model for \2389 into \2517.
  merging $macc model for \2387 into \2517.
  merging $macc model for \2385 into \2517.
  merging $macc model for \2383 into \2517.
  merging $macc model for \2381 into \2517.
  merging $macc model for \2379 into \2517.
  merging $macc model for \2377 into \2517.
  merging $macc model for \2375 into \2517.
  merging $macc model for \2373 into \2517.
  merging $macc model for \2371 into \2517.
  merging $macc model for \2369 into \2517.
  merging $macc model for \2367 into \2517.
  merging $macc model for \2365 into \2517.
  merging $macc model for \2363 into \2517.
  merging $macc model for \2361 into \2517.
  merging $macc model for \2359 into \2517.
  merging $macc model for \2357 into \2517.
  merging $macc model for \2355 into \2517.
  merging $macc model for \2353 into \2517.
  merging $macc model for \2351 into \2517.
  merging $macc model for \2349 into \2517.
  merging $macc model for \2347 into \2517.
  merging $macc model for \2345 into \2517.
  merging $macc model for \2343 into \2517.
  merging $macc model for \2341 into \2517.
  merging $macc model for \2339 into \2517.
  merging $macc model for \2337 into \2517.
  merging $macc model for \2335 into \2517.
  merging $macc model for \2333 into \2517.
  merging $macc model for \2331 into \2517.
  merging $macc model for \2329 into \2517.
  merging $macc model for \2327 into \2517.
  merging $macc model for \2325 into \2517.
  merging $macc model for \2323 into \2517.
  merging $macc model for \2321 into \2517.
  creating $alu model for $macc \2316.
  creating $alu model for $macc \2295.
  creating $macc cell for \2517: $auto$alumacc.cc:365:replace_macc$1393
  creating $alu model for \2293 ($gt): new $alu
  creating $alu cell for \2293: $auto$alumacc.cc:485:replace_alu$1395
  creating $alu cell for \2295: $auto$alumacc.cc:485:replace_alu$1400
  creating $alu cell for \2316: $auto$alumacc.cc:485:replace_alu$1403
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module c_output_stream_entity:
  creating $macc model for \1729 ($add).
  creating $alu model for $macc \1729.
  creating $alu cell for \1729: $auto$alumacc.cc:485:replace_alu$1406
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module check_new_input:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clock_pre_processing:
  creating $macc model for \60 ($add).
  creating $macc model for \68 ($add).
  creating $alu model for $macc \68.
  creating $alu model for $macc \60.
  creating $alu cell for \60: $auto$alumacc.cc:485:replace_alu$1409
  creating $alu cell for \68: $auto$alumacc.cc:485:replace_alu$1412
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module d_output_stream_entity:
  creating $alu model for \1835 ($lt): new $alu
  creating $alu model for \1852 ($gt): new $alu
  creating $alu cell for \1852: $auto$alumacc.cc:485:replace_alu$1417
  creating $alu cell for \1835: $auto$alumacc.cc:485:replace_alu$1424
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module evaluator:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module event_delay:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module extinterface:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module high_level_controller:
  creating $macc model for \309 ($add).
  creating $alu model for $macc \309.
  creating $alu cell for \309: $auto$alumacc.cc:485:replace_alu$1435
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module hlqinterface:
  creating $macc model for \921 ($add).
  creating $macc model for \928 ($add).
  creating $alu model for $macc \928.
  creating $alu model for $macc \921.
  creating $alu cell for \921: $auto$alumacc.cc:485:replace_alu$1438
  creating $alu cell for \928: $auto$alumacc.cc:485:replace_alu$1441
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module implementation:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module input_pre_processing:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module low_level_controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module monitor:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module queue:
  creating $macc model for \371 ($sub).
  creating $macc model for \425 ($add).
  creating $alu model for $macc \425.
  creating $alu model for $macc \371.
  creating $alu model for \351 ($gt): new $alu
  creating $alu model for \354 ($lt): new $alu
  creating $alu model for \480 ($gt): new $alu
  creating $alu cell for \480: $auto$alumacc.cc:485:replace_alu$1447
  creating $alu cell for \354: $auto$alumacc.cc:485:replace_alu$1454
  creating $alu cell for \351: $auto$alumacc.cc:485:replace_alu$1467
  creating $alu cell for \371: $auto$alumacc.cc:485:replace_alu$1474
  creating $alu cell for \425: $auto$alumacc.cc:485:replace_alu$1477
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module scheduler:
  creating $macc model for \868 ($add).
  creating $alu model for $macc \868.
  creating $alu model for \864 ($ge): new $alu
  creating $alu cell for \864: $auto$alumacc.cc:485:replace_alu$1481
  creating $alu cell for \868: $auto$alumacc.cc:485:replace_alu$1490
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module time_unit:
  creating $macc model for \851 ($add).
  creating $alu model for $macc \851.
  creating $alu cell for \851: $auto$alumacc.cc:485:replace_alu$1493
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module x_input_stream_entity:
  created 0 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~2 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~2 debug messages>
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 198 unused cells and 206 unused wires.
<suppressed ~204 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~11 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~11 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module check_new_input.
<suppressed ~1 debug messages>
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module d_output_stream_entity.
<suppressed ~11 debug messages>
Optimizing module evaluator.
<suppressed ~31 debug messages>
Optimizing module event_delay.
<suppressed ~2 debug messages>
Optimizing module extinterface.
Optimizing module high_level_controller.
<suppressed ~1 debug messages>
Optimizing module hlqinterface.
<suppressed ~8 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~5 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~49 debug messages>
Optimizing module scheduler.
<suppressed ~2 debug messages>
Optimizing module time_unit.
<suppressed ~1 debug messages>
Optimizing module x_input_stream_entity.
<suppressed ~3 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~3 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 2 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 5 unused cells and 127 unused wires.
<suppressed ~21 debug messages>

2.17.5. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~1 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~1 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~1 debug messages>
Optimizing module d_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~1 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~2 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\d_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~3 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 6 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1028 ($adffe) from module b_sum_0_sliding_window_entity (D = \last_ts_before_upd [5:0], Q = \last_ts_before_upd [5:0]).
Handling D = Q on $auto$ff.cc:266:slice$1506 ($adffe) from module b_sum_0_sliding_window_entity (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1506 ($dlatch) from module b_sum_0_sliding_window_entity.
Adding EN signal on $auto$ff.cc:266:slice$1082 ($adffe) from module c_count_1_sliding_window_entity (D = \last_ts_before_upd [4:0], Q = \last_ts_before_upd [4:0]).
Handling D = Q on $auto$ff.cc:266:slice$1512 ($adffe) from module c_count_1_sliding_window_entity (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1512 ($dlatch) from module c_count_1_sliding_window_entity.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1512 ($dlatch) from module c_count_1_sliding_window_entity.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1512 ($dlatch) from module c_count_1_sliding_window_entity.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1512 ($dlatch) from module c_count_1_sliding_window_entity.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1512 ($dlatch) from module c_count_1_sliding_window_entity.
Adding EN signal on $auto$ff.cc:266:slice$1360 ($adffe) from module scheduler (D = \time_of_next_deadline [4:0], Q = \time_of_next_deadline [4:0]).
Handling D = Q on $auto$ff.cc:266:slice$1518 ($adffe) from module scheduler (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1518 ($dlatch) from module scheduler.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1518 ($dlatch) from module scheduler.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1518 ($dlatch) from module scheduler.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1518 ($dlatch) from module scheduler.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1518 ($dlatch) from module scheduler.
Adding EN signal on \856 ($adff) from module time_unit (D = \sys_time [2:0], Q = \sys_time [2:0]).
Handling D = Q on $auto$ff.cc:266:slice$1524 ($adffe) from module time_unit (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1524 ($dlatch) from module time_unit.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1524 ($dlatch) from module time_unit.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1524 ($dlatch) from module time_unit.

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 7 unused cells and 15 unused wires.
<suppressed ~17 debug messages>

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1359 ($adffe) from module scheduler.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1359 ($adffe) from module scheduler.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1359 ($adffe) from module scheduler.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1359 ($adffe) from module scheduler.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1359 ($adffe) from module scheduler.

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.18. Rerunning OPT passes. (Maybe there is more to do..)

2.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_sum_0_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_count_1_sliding_window_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \d_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \b_sum_0_sliding_window_entity.
  Optimizing cells in module \c_count_1_sliding_window_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \d_output_stream_entity.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
Finding identical cells in module `\c_count_1_sliding_window_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.22. Executing OPT_SHARE pass.

2.19.23. Executing OPT_DFF pass (perform DFF optimizations).

2.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
Optimizing module c_count_1_sliding_window_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.26. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$9372bd4570ba4a5b302416ad52cf0b982084fec5\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod$f75a7d2be2182e574d28d1acaf264499bd5c8efb\_90_alu for cells of type $alu.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod$06a9a25e193457b564e50ab7b7ad40e176246e9c\_90_alu for cells of type $alu.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$7b00947614a4c48e09c066dca449366ddfa907a5\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$19e2580c9084a01134cf124dfa77fb4500b707f9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod$998cf7bc9d7210191f713bc4d6d4662cd93b2388\_90_alu for cells of type $alu.
Using template $paramod$00819ee312535487c5f9630c77090a19bd4c925f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using extmapper maccmap for cells of type $macc.
  add \count_buckets [63:0] (64 bits, unsigned)
  add \count_buckets [6399:6336] (64 bits, unsigned)
  add \count_buckets [6335:6272] (64 bits, unsigned)
  add \count_buckets [6271:6208] (64 bits, unsigned)
  add \count_buckets [6207:6144] (64 bits, unsigned)
  add \count_buckets [6143:6080] (64 bits, unsigned)
  add \count_buckets [6079:6016] (64 bits, unsigned)
  add \count_buckets [6015:5952] (64 bits, unsigned)
  add \count_buckets [5951:5888] (64 bits, unsigned)
  add \count_buckets [5887:5824] (64 bits, unsigned)
  add \count_buckets [5823:5760] (64 bits, unsigned)
  add \count_buckets [5759:5696] (64 bits, unsigned)
  add \count_buckets [5695:5632] (64 bits, unsigned)
  add \count_buckets [5631:5568] (64 bits, unsigned)
  add \count_buckets [5567:5504] (64 bits, unsigned)
  add \count_buckets [5503:5440] (64 bits, unsigned)
  add \count_buckets [5439:5376] (64 bits, unsigned)
  add \count_buckets [5375:5312] (64 bits, unsigned)
  add \count_buckets [5311:5248] (64 bits, unsigned)
  add \count_buckets [5247:5184] (64 bits, unsigned)
  add \count_buckets [5183:5120] (64 bits, unsigned)
  add \count_buckets [5119:5056] (64 bits, unsigned)
  add \count_buckets [5055:4992] (64 bits, unsigned)
  add \count_buckets [4991:4928] (64 bits, unsigned)
  add \count_buckets [4927:4864] (64 bits, unsigned)
  add \count_buckets [4863:4800] (64 bits, unsigned)
  add \count_buckets [4799:4736] (64 bits, unsigned)
  add \count_buckets [4735:4672] (64 bits, unsigned)
  add \count_buckets [4671:4608] (64 bits, unsigned)
  add \count_buckets [4607:4544] (64 bits, unsigned)
  add \count_buckets [4543:4480] (64 bits, unsigned)
  add \count_buckets [4479:4416] (64 bits, unsigned)
  add \count_buckets [4415:4352] (64 bits, unsigned)
  add \count_buckets [4351:4288] (64 bits, unsigned)
  add \count_buckets [4287:4224] (64 bits, unsigned)
  add \count_buckets [4223:4160] (64 bits, unsigned)
  add \count_buckets [4159:4096] (64 bits, unsigned)
  add \count_buckets [4095:4032] (64 bits, unsigned)
  add \count_buckets [4031:3968] (64 bits, unsigned)
  add \count_buckets [3967:3904] (64 bits, unsigned)
  add \count_buckets [3903:3840] (64 bits, unsigned)
  add \count_buckets [3839:3776] (64 bits, unsigned)
  add \count_buckets [3775:3712] (64 bits, unsigned)
  add \count_buckets [3711:3648] (64 bits, unsigned)
  add \count_buckets [3647:3584] (64 bits, unsigned)
  add \count_buckets [3583:3520] (64 bits, unsigned)
  add \count_buckets [3519:3456] (64 bits, unsigned)
  add \count_buckets [3455:3392] (64 bits, unsigned)
  add \count_buckets [3391:3328] (64 bits, unsigned)
  add \count_buckets [3327:3264] (64 bits, unsigned)
  add \count_buckets [3263:3200] (64 bits, unsigned)
  add \count_buckets [3199:3136] (64 bits, unsigned)
  add \count_buckets [3135:3072] (64 bits, unsigned)
  add \count_buckets [3071:3008] (64 bits, unsigned)
  add \count_buckets [3007:2944] (64 bits, unsigned)
  add \count_buckets [2943:2880] (64 bits, unsigned)
  add \count_buckets [2879:2816] (64 bits, unsigned)
  add \count_buckets [2815:2752] (64 bits, unsigned)
  add \count_buckets [2751:2688] (64 bits, unsigned)
  add \count_buckets [2687:2624] (64 bits, unsigned)
  add \count_buckets [2623:2560] (64 bits, unsigned)
  add \count_buckets [2559:2496] (64 bits, unsigned)
  add \count_buckets [2495:2432] (64 bits, unsigned)
  add \count_buckets [2431:2368] (64 bits, unsigned)
  add \count_buckets [2367:2304] (64 bits, unsigned)
  add \count_buckets [2303:2240] (64 bits, unsigned)
  add \count_buckets [2239:2176] (64 bits, unsigned)
  add \count_buckets [2175:2112] (64 bits, unsigned)
  add \count_buckets [2111:2048] (64 bits, unsigned)
  add \count_buckets [2047:1984] (64 bits, unsigned)
  add \count_buckets [1983:1920] (64 bits, unsigned)
  add \count_buckets [1919:1856] (64 bits, unsigned)
  add \count_buckets [1855:1792] (64 bits, unsigned)
  add \count_buckets [1791:1728] (64 bits, unsigned)
  add \count_buckets [1727:1664] (64 bits, unsigned)
  add \count_buckets [1663:1600] (64 bits, unsigned)
  add \count_buckets [1599:1536] (64 bits, unsigned)
  add \count_buckets [1535:1472] (64 bits, unsigned)
  add \count_buckets [1471:1408] (64 bits, unsigned)
  add \count_buckets [1407:1344] (64 bits, unsigned)
  add \count_buckets [1343:1280] (64 bits, unsigned)
  add \count_buckets [1279:1216] (64 bits, unsigned)
  add \count_buckets [1215:1152] (64 bits, unsigned)
  add \count_buckets [1151:1088] (64 bits, unsigned)
  add \count_buckets [1087:1024] (64 bits, unsigned)
  add \count_buckets [1023:960] (64 bits, unsigned)
  add \count_buckets [959:896] (64 bits, unsigned)
  add \count_buckets [895:832] (64 bits, unsigned)
  add \count_buckets [831:768] (64 bits, unsigned)
  add \count_buckets [767:704] (64 bits, unsigned)
  add \count_buckets [703:640] (64 bits, unsigned)
  add \count_buckets [639:576] (64 bits, unsigned)
  add \count_buckets [575:512] (64 bits, unsigned)
  add \count_buckets [511:448] (64 bits, unsigned)
  add \count_buckets [447:384] (64 bits, unsigned)
  add \count_buckets [383:320] (64 bits, unsigned)
  add \count_buckets [319:256] (64 bits, unsigned)
  add \count_buckets [255:192] (64 bits, unsigned)
  add \count_buckets [191:128] (64 bits, unsigned)
  add \count_buckets [127:64] (64 bits, unsigned)
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000001000000 for cells of type $fa.
  add \sum_buckets [63:0] (64 bits, unsigned)
  add \sum_buckets [6399:6336] (64 bits, unsigned)
  add \sum_buckets [6335:6272] (64 bits, unsigned)
  add \sum_buckets [6271:6208] (64 bits, unsigned)
  add \sum_buckets [6207:6144] (64 bits, unsigned)
  add \sum_buckets [6143:6080] (64 bits, unsigned)
  add \sum_buckets [6079:6016] (64 bits, unsigned)
  add \sum_buckets [6015:5952] (64 bits, unsigned)
  add \sum_buckets [5951:5888] (64 bits, unsigned)
  add \sum_buckets [5887:5824] (64 bits, unsigned)
  add \sum_buckets [5823:5760] (64 bits, unsigned)
  add \sum_buckets [5759:5696] (64 bits, unsigned)
  add \sum_buckets [5695:5632] (64 bits, unsigned)
  add \sum_buckets [5631:5568] (64 bits, unsigned)
  add \sum_buckets [5567:5504] (64 bits, unsigned)
  add \sum_buckets [5503:5440] (64 bits, unsigned)
  add \sum_buckets [5439:5376] (64 bits, unsigned)
  add \sum_buckets [5375:5312] (64 bits, unsigned)
  add \sum_buckets [5311:5248] (64 bits, unsigned)
  add \sum_buckets [5247:5184] (64 bits, unsigned)
  add \sum_buckets [5183:5120] (64 bits, unsigned)
  add \sum_buckets [5119:5056] (64 bits, unsigned)
  add \sum_buckets [5055:4992] (64 bits, unsigned)
  add \sum_buckets [4991:4928] (64 bits, unsigned)
  add \sum_buckets [4927:4864] (64 bits, unsigned)
  add \sum_buckets [4863:4800] (64 bits, unsigned)
  add \sum_buckets [4799:4736] (64 bits, unsigned)
  add \sum_buckets [4735:4672] (64 bits, unsigned)
  add \sum_buckets [4671:4608] (64 bits, unsigned)
  add \sum_buckets [4607:4544] (64 bits, unsigned)
  add \sum_buckets [4543:4480] (64 bits, unsigned)
  add \sum_buckets [4479:4416] (64 bits, unsigned)
  add \sum_buckets [4415:4352] (64 bits, unsigned)
  add \sum_buckets [4351:4288] (64 bits, unsigned)
  add \sum_buckets [4287:4224] (64 bits, unsigned)
  add \sum_buckets [4223:4160] (64 bits, unsigned)
  add \sum_buckets [4159:4096] (64 bits, unsigned)
  add \sum_buckets [4095:4032] (64 bits, unsigned)
  add \sum_buckets [4031:3968] (64 bits, unsigned)
  add \sum_buckets [3967:3904] (64 bits, unsigned)
  add \sum_buckets [3903:3840] (64 bits, unsigned)
  add \sum_buckets [3839:3776] (64 bits, unsigned)
  add \sum_buckets [3775:3712] (64 bits, unsigned)
  add \sum_buckets [3711:3648] (64 bits, unsigned)
  add \sum_buckets [3647:3584] (64 bits, unsigned)
  add \sum_buckets [3583:3520] (64 bits, unsigned)
  add \sum_buckets [3519:3456] (64 bits, unsigned)
  add \sum_buckets [3455:3392] (64 bits, unsigned)
  add \sum_buckets [3391:3328] (64 bits, unsigned)
  add \sum_buckets [3327:3264] (64 bits, unsigned)
  add \sum_buckets [3263:3200] (64 bits, unsigned)
  add \sum_buckets [3199:3136] (64 bits, unsigned)
  add \sum_buckets [3135:3072] (64 bits, unsigned)
  add \sum_buckets [3071:3008] (64 bits, unsigned)
  add \sum_buckets [3007:2944] (64 bits, unsigned)
  add \sum_buckets [2943:2880] (64 bits, unsigned)
  add \sum_buckets [2879:2816] (64 bits, unsigned)
  add \sum_buckets [2815:2752] (64 bits, unsigned)
  add \sum_buckets [2751:2688] (64 bits, unsigned)
  add \sum_buckets [2687:2624] (64 bits, unsigned)
  add \sum_buckets [2623:2560] (64 bits, unsigned)
  add \sum_buckets [2559:2496] (64 bits, unsigned)
  add \sum_buckets [2495:2432] (64 bits, unsigned)
  add \sum_buckets [2431:2368] (64 bits, unsigned)
  add \sum_buckets [2367:2304] (64 bits, unsigned)
  add \sum_buckets [2303:2240] (64 bits, unsigned)
  add \sum_buckets [2239:2176] (64 bits, unsigned)
  add \sum_buckets [2175:2112] (64 bits, unsigned)
  add \sum_buckets [2111:2048] (64 bits, unsigned)
  add \sum_buckets [2047:1984] (64 bits, unsigned)
  add \sum_buckets [1983:1920] (64 bits, unsigned)
  add \sum_buckets [1919:1856] (64 bits, unsigned)
  add \sum_buckets [1855:1792] (64 bits, unsigned)
  add \sum_buckets [1791:1728] (64 bits, unsigned)
  add \sum_buckets [1727:1664] (64 bits, unsigned)
  add \sum_buckets [1663:1600] (64 bits, unsigned)
  add \sum_buckets [1599:1536] (64 bits, unsigned)
  add \sum_buckets [1535:1472] (64 bits, unsigned)
  add \sum_buckets [1471:1408] (64 bits, unsigned)
  add \sum_buckets [1407:1344] (64 bits, unsigned)
  add \sum_buckets [1343:1280] (64 bits, unsigned)
  add \sum_buckets [1279:1216] (64 bits, unsigned)
  add \sum_buckets [1215:1152] (64 bits, unsigned)
  add \sum_buckets [1151:1088] (64 bits, unsigned)
  add \sum_buckets [1087:1024] (64 bits, unsigned)
  add \sum_buckets [1023:960] (64 bits, unsigned)
  add \sum_buckets [959:896] (64 bits, unsigned)
  add \sum_buckets [895:832] (64 bits, unsigned)
  add \sum_buckets [831:768] (64 bits, unsigned)
  add \sum_buckets [767:704] (64 bits, unsigned)
  add \sum_buckets [703:640] (64 bits, unsigned)
  add \sum_buckets [639:576] (64 bits, unsigned)
  add \sum_buckets [575:512] (64 bits, unsigned)
  add \sum_buckets [511:448] (64 bits, unsigned)
  add \sum_buckets [447:384] (64 bits, unsigned)
  add \sum_buckets [383:320] (64 bits, unsigned)
  add \sum_buckets [319:256] (64 bits, unsigned)
  add \sum_buckets [255:192] (64 bits, unsigned)
  add \sum_buckets [191:128] (64 bits, unsigned)
  add \sum_buckets [127:64] (64 bits, unsigned)
Using template $paramod$ff0c8531893c6f71e99c541a875e17bac19baae9\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
  add \a_0 (64 bits, unsigned)
  add $auto$ghdl.cc:806:import_module$530 (64 bits, unsigned)
  add $auto$ghdl.cc:806:import_module$527 (64 bits, unsigned)
No more expansions possible.
<suppressed ~9434 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~70 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~144 debug messages>
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~926 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~1230 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~70 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~562 debug messages>
Optimizing module d_output_stream_entity.
<suppressed ~722 debug messages>
Optimizing module evaluator.
<suppressed ~4 debug messages>
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
<suppressed ~13 debug messages>
Optimizing module hlqinterface.
<suppressed ~20 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~6 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~1029 debug messages>
Optimizing module scheduler.
<suppressed ~406 debug messages>
Optimizing module time_unit.
<suppressed ~346 debug messages>
Optimizing module x_input_stream_entity.
<suppressed ~2 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
<suppressed ~45 debug messages>
Finding identical cells in module `\c_count_1_sliding_window_entity'.
<suppressed ~51 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~189 debug messages>
Finding identical cells in module `\d_output_stream_entity'.
<suppressed ~177 debug messages>
Finding identical cells in module `\evaluator'.
<suppressed ~3 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
<suppressed ~9 debug messages>
Finding identical cells in module `\hlqinterface'.
<suppressed ~12 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~645 debug messages>
Finding identical cells in module `\scheduler'.
<suppressed ~201 debug messages>
Finding identical cells in module `\time_unit'.
<suppressed ~6 debug messages>
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 451 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 2443 unused cells and 5028 unused wires.
<suppressed ~2458 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\a_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 677 gates and 812 wires to a netlist network with 134 inputs and 70 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        1
ABC RESULTS:               NOT cells:       27
ABC RESULTS:              XNOR cells:       46
ABC RESULTS:             ORNOT cells:       38
ABC RESULTS:                OR cells:      107
ABC RESULTS:               NOR cells:       32
ABC RESULTS:               AND cells:      121
ABC RESULTS:              NAND cells:       54
ABC RESULTS:               XOR cells:       81
ABC RESULTS:            ANDNOT cells:      191
ABC RESULTS:        internal signals:      608
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.2. Extracting gate netlist of module `\b_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 1459 gates and 1722 wires to a netlist network with 262 inputs and 70 outputs.

2.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.2.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:       52
ABC RESULTS:               NOT cells:      174
ABC RESULTS:               NOR cells:      116
ABC RESULTS:               AND cells:      100
ABC RESULTS:              XNOR cells:      162
ABC RESULTS:               MUX cells:       65
ABC RESULTS:              NAND cells:      105
ABC RESULTS:                OR cells:      205
ABC RESULTS:               XOR cells:      218
ABC RESULTS:            ANDNOT cells:      430
ABC RESULTS:        internal signals:     1390
ABC RESULTS:           input signals:      262
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.3. Extracting gate netlist of module `\b_sum_0_sliding_window_entity' to `<abc-temp-dir>/input.blif'..
Extracted 32278 gates and 38871 wires to a netlist network with 6592 inputs and 195 outputs.

2.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.3.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        3
ABC RESULTS:             ORNOT cells:       99
ABC RESULTS:               NOT cells:       68
ABC RESULTS:               AND cells:      127
ABC RESULTS:              XNOR cells:     2960
ABC RESULTS:              NAND cells:     2082
ABC RESULTS:                OR cells:     4240
ABC RESULTS:               NOR cells:      583
ABC RESULTS:            ANDNOT cells:    12274
ABC RESULTS:               XOR cells:     9819
ABC RESULTS:        internal signals:    32084
ABC RESULTS:           input signals:     6592
ABC RESULTS:          output signals:      195
Removing temp directory.

2.22.4. Extracting gate netlist of module `\c_count_1_sliding_window_entity' to `<abc-temp-dir>/input.blif'..
Extracted 31992 gates and 38522 wires to a netlist network with 6529 inputs and 196 outputs.

2.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.4.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       72
ABC RESULTS:               NOT cells:       38
ABC RESULTS:               AND cells:       95
ABC RESULTS:              XNOR cells:     2926
ABC RESULTS:              NAND cells:     2112
ABC RESULTS:                OR cells:     4177
ABC RESULTS:               NOR cells:      497
ABC RESULTS:            ANDNOT cells:    12228
ABC RESULTS:               XOR cells:     9791
ABC RESULTS:        internal signals:    31797
ABC RESULTS:           input signals:     6529
ABC RESULTS:          output signals:      196
Removing temp directory.

2.22.5. Extracting gate netlist of module `\c_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 613 gates and 747 wires to a netlist network with 133 inputs and 70 outputs.

2.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.5.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               NOT cells:       57
ABC RESULTS:             ORNOT cells:       41
ABC RESULTS:                OR cells:       89
ABC RESULTS:               NOR cells:       31
ABC RESULTS:               AND cells:       88
ABC RESULTS:              NAND cells:       34
ABC RESULTS:               XOR cells:      116
ABC RESULTS:            ANDNOT cells:      196
ABC RESULTS:        internal signals:      544
ABC RESULTS:           input signals:      133
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.6. Extracting gate netlist of module `\check_new_input' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

2.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

2.22.7. Extracting gate netlist of module `\clock_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 386 wires to a netlist network with 65 inputs and 67 outputs.

2.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.7.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:       40
ABC RESULTS:                OR cells:       95
ABC RESULTS:             ORNOT cells:       26
ABC RESULTS:               XOR cells:       49
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:        internal signals:      254
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       67
Removing temp directory.

2.22.8. Extracting gate netlist of module `\d_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 338 gates and 468 wires to a netlist network with 129 inputs and 7 outputs.

2.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.8.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:       60
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:               XOR cells:        1
ABC RESULTS:                OR cells:      115
ABC RESULTS:               NOR cells:        7
ABC RESULTS:        internal signals:      332
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:        7
Removing temp directory.

2.22.9. Extracting gate netlist of module `\evaluator' to `<abc-temp-dir>/input.blif'..
Extracted 72 gates and 99 wires to a netlist network with 26 inputs and 19 outputs.

2.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               AND cells:        8
ABC RESULTS:              NAND cells:        9
ABC RESULTS:                OR cells:       11
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:       54
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       19
Removing temp directory.

2.22.10. Extracting gate netlist of module `\event_delay' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 260 wires to a netlist network with 130 inputs and 129 outputs.

2.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      129
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

2.22.11. Extracting gate netlist of module `\extinterface' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.12. Extracting gate netlist of module `\high_level_controller' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 7 wires to a netlist network with 2 inputs and 3 outputs.

2.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.12.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

2.22.13. Extracting gate netlist of module `\hlqinterface' to `<abc-temp-dir>/input.blif'..
Extracted 80 gates and 215 wires to a netlist network with 134 inputs and 72 outputs.

2.22.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.13.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               MUX cells:       64
ABC RESULTS:               NOT cells:        3
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       72
Removing temp directory.

2.22.14. Extracting gate netlist of module `\implementation' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.15. Extracting gate netlist of module `\input_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.16. Extracting gate netlist of module `\low_level_controller' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 35 wires to a netlist network with 5 inputs and 7 outputs.

2.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:                OR cells:       10
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        5
ABC RESULTS:          output signals:        7
Removing temp directory.

2.22.17. Extracting gate netlist of module `\monitor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.18. Extracting gate netlist of module `\queue' to `<abc-temp-dir>/input.blif'..
Extracted 572 gates and 875 wires to a netlist network with 303 inputs and 173 outputs.

2.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               AND cells:       15
ABC RESULTS:               XOR cells:       62
ABC RESULTS:               MUX cells:      164
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       41
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:            ANDNOT cells:       83
ABC RESULTS:                OR cells:       60
ABC RESULTS:        internal signals:      399
ABC RESULTS:           input signals:      303
ABC RESULTS:          output signals:      173
Removing temp directory.

2.22.19. Extracting gate netlist of module `\scheduler' to `<abc-temp-dir>/input.blif'..
Extracted 553 gates and 676 wires to a netlist network with 123 inputs and 60 outputs.

2.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.19.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        3
ABC RESULTS:             ORNOT cells:       73
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:                OR cells:       68
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               AND cells:       10
ABC RESULTS:              NAND cells:       25
ABC RESULTS:            ANDNOT cells:      175
ABC RESULTS:               XOR cells:       83
ABC RESULTS:        internal signals:      493
ABC RESULTS:           input signals:      123
ABC RESULTS:          output signals:       60
Removing temp directory.

2.22.20. Extracting gate netlist of module `\time_unit' to `<abc-temp-dir>/input.blif'..
Extracted 175 gates and 236 wires to a netlist network with 61 inputs and 61 outputs.

2.22.20.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.20.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               AND cells:        5
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:       21
ABC RESULTS:              NAND cells:       29
ABC RESULTS:                OR cells:       43
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:               XOR cells:       39
ABC RESULTS:        internal signals:      114
ABC RESULTS:           input signals:       61
ABC RESULTS:          output signals:       61
Removing temp directory.

2.22.21. Extracting gate netlist of module `\x_input_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 6 wires to a netlist network with 2 inputs and 2 outputs.

2.22.21.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.21.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~65 debug messages>
Optimizing module b_output_stream_entity.
Optimizing module b_sum_0_sliding_window_entity.
<suppressed ~2 debug messages>
Optimizing module c_count_1_sliding_window_entity.
<suppressed ~2 debug messages>
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module d_output_stream_entity.
<suppressed ~2 debug messages>
Optimizing module evaluator.
<suppressed ~6 debug messages>
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
<suppressed ~1 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
<suppressed ~19 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\b_sum_0_sliding_window_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\c_count_1_sliding_window_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\d_output_stream_entity'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~21 debug messages>
Finding identical cells in module `\scheduler'.
<suppressed ~3 debug messages>
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 12 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \b_sum_0_sliding_window_entity..
Finding unused cells or wires in module \c_count_1_sliding_window_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \d_output_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 3 unused cells and 18933 unused wires.
<suppressed ~20 debug messages>

2.23.5. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor
Used module:         \high_level_controller
Used module:             \check_new_input
Used module:             \event_delay
Used module:             \extinterface
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \a_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \b_sum_0_sliding_window_entity
Used module:                 \c_count_1_sliding_window_entity
Used module:                 \c_output_stream_entity
Used module:                 \d_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue

2.24.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor
Used module:         \high_level_controller
Used module:             \check_new_input
Used module:             \event_delay
Used module:             \extinterface
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \a_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \b_sum_0_sliding_window_entity
Used module:                 \c_count_1_sliding_window_entity
Used module:                 \c_output_stream_entity
Used module:                 \d_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Removed 0 unused modules.

2.25. Printing statistics.

=== a_output_stream_entity ===

   Number of wires:                713
   Number of wire bits:           1225
   Number of public wires:          16
   Number of public wire bits:     528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                894
     $_ANDNOT_                     191
     $_AND_                        121
     $_DFFE_PP0N_                   65
     $_DFFE_PP0P_                  132
     $_MUX_                          1
     $_NAND_                        54
     $_NOR_                         32
     $_NOT_                         26
     $_ORNOT_                       38
     $_OR_                         107
     $_XNOR_                        46
     $_XOR_                         81

=== b_output_stream_entity ===

   Number of wires:               1647
   Number of wire bits:           2155
   Number of public wires:          20
   Number of public wire bits:     528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1759
     $_ANDNOT_                     430
     $_AND_                        100
     $_DFFE_PP0P_                  132
     $_MUX_                         65
     $_NAND_                       105
     $_NOR_                        116
     $_NOT_                        174
     $_ORNOT_                       52
     $_OR_                         205
     $_XNOR_                       162
     $_XOR_                        218

=== b_sum_0_sliding_window_entity ===

   Number of wires:              32157
   Number of wire bits:          39300
   Number of public wires:          19
   Number of public wire bits:    6733
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38778
     $_ANDNOT_                   12274
     $_AND_                        127
     $_DFFE_PP0P_                 6525
     $_MUX_                          2
     $_NAND_                      2082
     $_NOR_                        583
     $_NOT_                         68
     $_ORNOT_                       99
     $_OR_                        4239
     $_XNOR_                      2960
     $_XOR_                       9819

=== c_count_1_sliding_window_entity ===

   Number of wires:              31839
   Number of wire bits:          38984
   Number of public wires:          19
   Number of public wire bits:    6733
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38462
     $_ANDNOT_                   12228
     $_AND_                         95
     $_DFFE_PP0P_                 6526
     $_MUX_                          1
     $_NAND_                      2112
     $_NOR_                        497
     $_NOT_                         38
     $_ORNOT_                       72
     $_OR_                        4176
     $_XNOR_                      2926
     $_XOR_                       9791

=== c_output_stream_entity ===

   Number of wires:                680
   Number of wire bits:            932
   Number of public wires:          16
   Number of public wire bits:     268
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                731
     $_ANDNOT_                     196
     $_AND_                         88
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NAND_                        34
     $_NOR_                         31
     $_NOT_                         57
     $_ORNOT_                       41
     $_OR_                          89
     $_XNOR_                        11
     $_XOR_                        116

=== check_new_input ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PP0_                      2

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== d_output_stream_entity ===

   Number of wires:                219
   Number of wire bits:            345
   Number of public wires:          16
   Number of public wire bits:     142
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                207
     $_ANDNOT_                      13
     $_AND_                         60
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                    2
     $_MUX_                          1
     $_NAND_                         2
     $_NOR_                          7
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                         115
     $_XOR_                          1

=== evaluator ===

   Number of wires:                163
   Number of wire bits:           1683
   Number of public wires:          98
   Number of public wire bits:    1618
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $_ANDNOT_                      32
     $_AND_                          8
     $_DFFE_PP0N_                    6
     $_DFFE_PP0P_                    9
     $_DFFE_PP1P_                    1
     $_DFF_PP1_                      1
     $_NAND_                         9
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          11
     a_output_stream_entity          1
     b_output_stream_entity          1
     b_sum_0_sliding_window_entity      1
     c_count_1_sliding_window_entity      1
     c_output_stream_entity          1
     d_output_stream_entity          1
     x_input_stream_entity           1

=== event_delay ===

   Number of wires:                143
   Number of wire bits:            521
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     $_AND_                        129
     $_DFF_PP0_                    130

=== extinterface ===

   Number of wires:                 11
   Number of wire bits:            389
   Number of public wires:          11
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_DFF_PP0_                    129

=== high_level_controller ===

   Number of wires:                 50
   Number of wire bits:           1124
   Number of public wires:          46
   Number of public wire bits:    1055
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_NOT_                          1
     $_XOR_                          1
     check_new_input                 1
     event_delay                     1
     extinterface                    1
     hlqinterface                    1
     scheduler                       1
     time_unit                       1

=== hlqinterface ===

   Number of wires:                105
   Number of wire bits:            551
   Number of public wires:          28
   Number of public wire bits:     472
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                212
     $_ANDNOT_                       3
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  128
     $_DFF_PP0_                      6
     $_MUX_                         64
     $_NAND_                         1
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           1
     $_XOR_                          1

=== implementation ===

   Number of wires:                 35
   Number of wire bits:           1043
   Number of public wires:          35
   Number of public wire bits:    1043
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 14
   Number of wire bits:            392
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_DFF_PP0_                    130

=== low_level_controller ===

   Number of wires:                 48
   Number of wire bits:            554
   Number of public wires:          26
   Number of public wire bits:     532
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       6
     $_AND_                          1
     $_DFFE_PP0P_                    2
     $_DFF_PP0_                      2
     $_DFF_PP1_                      1
     $_NAND_                         1
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          10
     evaluator                       1

=== monitor ===

   Number of wires:                 69
   Number of wire bits:           1707
   Number of public wires:          68
   Number of public wire bits:    1706
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_DFF_NP0_                    321
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== queue ===

   Number of wires:                501
   Number of wire bits:           1169
   Number of public wires:          40
   Number of public wire bits:     708
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                897
     $_ANDNOT_                      83
     $_AND_                         14
     $_DFFE_PP0P_                  435
     $_DFF_PP0_                      1
     $_MUX_                        164
     $_NAND_                        18
     $_NOR_                         35
     $_NOT_                          7
     $_ORNOT_                       18
     $_OR_                          60
     $_XOR_                         62

=== scheduler ===

   Number of wires:                430
   Number of wire bits:            925
   Number of public wires:           9
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                597
     $_ANDNOT_                     175
     $_AND_                         10
     $_DFFE_PP0P_                  111
     $_DFFE_PP1P_                    7
     $_DFF_PP0_                      1
     $_NAND_                        25
     $_NOR_                          8
     $_NOT_                          3
     $_ORNOT_                       73
     $_OR_                          67
     $_XNOR_                        34
     $_XOR_                         83

=== time_unit ===

   Number of wires:                122
   Number of wire bits:            368
   Number of public wires:           4
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                      33
     $_AND_                          5
     $_DFF_PP0_                     61
     $_NAND_                        29
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          43
     $_XNOR_                        21
     $_XOR_                         39

=== x_input_stream_entity ===

   Number of wires:                 12
   Number of wire bits:            331
   Number of public wires:          10
   Number of public wire bits:     329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_ANDNOT_                       1
     $_DFFE_PP0P_                  131
     $_NAND_                         1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1
       high_level_controller         1
         check_new_input             1
         event_delay                 1
         extinterface                1
         hlqinterface                1
         scheduler                   1
         time_unit                   1
       low_level_controller          1
         evaluator                   1
           a_output_stream_entity      1
           b_output_stream_entity      1
           b_sum_0_sliding_window_entity      1
           c_count_1_sliding_window_entity      1
           c_output_stream_entity      1
           d_output_stream_entity      1
           x_input_stream_entity      1
       queue                         1

   Number of wires:              69289
   Number of wire bits:          94091
   Number of public wires:         525
   Number of public wire bits:   24164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              84245
     $_ANDNOT_                   25747
     $_AND_                        761
     $_DFFE_PP0N_                  134
     $_DFFE_PP0P_                14202
     $_DFFE_PP1N_                    4
     $_DFFE_PP1P_                    8
     $_DFF_NP0_                    321
     $_DFF_PP0_                    466
     $_DFF_PP1_                      2
     $_MUX_                        301
     $_NAND_                      4513
     $_NOR_                       1315
     $_NOT_                        384
     $_ORNOT_                      436
     $_OR_                        9218
     $_XNOR_                      6172
     $_XOR_                      20261

2.26. Executing CHECK pass (checking for obvious problems).
Checking module a_output_stream_entity...
Checking module b_output_stream_entity...
Checking module b_sum_0_sliding_window_entity...
Checking module c_count_1_sliding_window_entity...
Checking module c_output_stream_entity...
Checking module check_new_input...
Checking module clock_pre_processing...
Checking module d_output_stream_entity...
Checking module evaluator...
Checking module event_delay...
Checking module extinterface...
Checking module high_level_controller...
Checking module hlqinterface...
Checking module implementation...
Checking module input_pre_processing...
Checking module low_level_controller...
Checking module monitor...
Checking module queue...
Checking module scheduler...
Checking module time_unit...
Checking module x_input_stream_entity...
Found and reported 0 problems.

3. Printing statistics.

=== a_output_stream_entity ===

   Number of wires:                713
   Number of wire bits:           1225
   Number of public wires:          16
   Number of public wire bits:     528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                894
     $_ANDNOT_                     191
     $_AND_                        121
     $_DFFE_PP0N_                   65
     $_DFFE_PP0P_                  132
     $_MUX_                          1
     $_NAND_                        54
     $_NOR_                         32
     $_NOT_                         26
     $_ORNOT_                       38
     $_OR_                         107
     $_XNOR_                        46
     $_XOR_                         81

=== b_output_stream_entity ===

   Number of wires:               1647
   Number of wire bits:           2155
   Number of public wires:          20
   Number of public wire bits:     528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1759
     $_ANDNOT_                     430
     $_AND_                        100
     $_DFFE_PP0P_                  132
     $_MUX_                         65
     $_NAND_                       105
     $_NOR_                        116
     $_NOT_                        174
     $_ORNOT_                       52
     $_OR_                         205
     $_XNOR_                       162
     $_XOR_                        218

=== b_sum_0_sliding_window_entity ===

   Number of wires:              32157
   Number of wire bits:          39300
   Number of public wires:          19
   Number of public wire bits:    6733
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38778
     $_ANDNOT_                   12274
     $_AND_                        127
     $_DFFE_PP0P_                 6525
     $_MUX_                          2
     $_NAND_                      2082
     $_NOR_                        583
     $_NOT_                         68
     $_ORNOT_                       99
     $_OR_                        4239
     $_XNOR_                      2960
     $_XOR_                       9819

=== c_count_1_sliding_window_entity ===

   Number of wires:              31839
   Number of wire bits:          38984
   Number of public wires:          19
   Number of public wire bits:    6733
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38462
     $_ANDNOT_                   12228
     $_AND_                         95
     $_DFFE_PP0P_                 6526
     $_MUX_                          1
     $_NAND_                      2112
     $_NOR_                        497
     $_NOT_                         38
     $_ORNOT_                       72
     $_OR_                        4176
     $_XNOR_                      2926
     $_XOR_                       9791

=== c_output_stream_entity ===

   Number of wires:                680
   Number of wire bits:            932
   Number of public wires:          16
   Number of public wire bits:     268
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                731
     $_ANDNOT_                     196
     $_AND_                         88
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NAND_                        34
     $_NOR_                         31
     $_NOT_                         57
     $_ORNOT_                       41
     $_OR_                          89
     $_XNOR_                        11
     $_XOR_                        116

=== check_new_input ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PP0_                      2

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== d_output_stream_entity ===

   Number of wires:                219
   Number of wire bits:            345
   Number of public wires:          16
   Number of public wire bits:     142
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                207
     $_ANDNOT_                      13
     $_AND_                         60
     $_DFFE_PP0N_                    2
     $_DFFE_PP0P_                    2
     $_MUX_                          1
     $_NAND_                         2
     $_NOR_                          7
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                         115
     $_XOR_                          1

=== evaluator ===

   Number of wires:                163
   Number of wire bits:           1683
   Number of public wires:          98
   Number of public wire bits:    1618
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $_ANDNOT_                      32
     $_AND_                          8
     $_DFFE_PP0N_                    6
     $_DFFE_PP0P_                    9
     $_DFFE_PP1P_                    1
     $_DFF_PP1_                      1
     $_NAND_                         9
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          11
     a_output_stream_entity          1
     b_output_stream_entity          1
     b_sum_0_sliding_window_entity      1
     c_count_1_sliding_window_entity      1
     c_output_stream_entity          1
     d_output_stream_entity          1
     x_input_stream_entity           1

=== event_delay ===

   Number of wires:                143
   Number of wire bits:            521
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     $_AND_                        129
     $_DFF_PP0_                    130

=== extinterface ===

   Number of wires:                 11
   Number of wire bits:            389
   Number of public wires:          11
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_DFF_PP0_                    129

=== high_level_controller ===

   Number of wires:                 50
   Number of wire bits:           1124
   Number of public wires:          46
   Number of public wire bits:    1055
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_NOT_                          1
     $_XOR_                          1
     check_new_input                 1
     event_delay                     1
     extinterface                    1
     hlqinterface                    1
     scheduler                       1
     time_unit                       1

=== hlqinterface ===

   Number of wires:                105
   Number of wire bits:            551
   Number of public wires:          28
   Number of public wire bits:     472
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                212
     $_ANDNOT_                       3
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                  128
     $_DFF_PP0_                      6
     $_MUX_                         64
     $_NAND_                         1
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           1
     $_XOR_                          1

=== implementation ===

   Number of wires:                 35
   Number of wire bits:           1043
   Number of public wires:          35
   Number of public wire bits:    1043
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 14
   Number of wire bits:            392
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_DFF_PP0_                    130

=== low_level_controller ===

   Number of wires:                 48
   Number of wire bits:            554
   Number of public wires:          26
   Number of public wire bits:     532
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       6
     $_AND_                          1
     $_DFFE_PP0P_                    2
     $_DFF_PP0_                      2
     $_DFF_PP1_                      1
     $_NAND_                         1
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          10
     evaluator                       1

=== monitor ===

   Number of wires:                 69
   Number of wire bits:           1707
   Number of public wires:          68
   Number of public wire bits:    1706
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_DFF_NP0_                    321
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== queue ===

   Number of wires:                501
   Number of wire bits:           1169
   Number of public wires:          40
   Number of public wire bits:     708
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                897
     $_ANDNOT_                      83
     $_AND_                         14
     $_DFFE_PP0P_                  435
     $_DFF_PP0_                      1
     $_MUX_                        164
     $_NAND_                        18
     $_NOR_                         35
     $_NOT_                          7
     $_ORNOT_                       18
     $_OR_                          60
     $_XOR_                         62

=== scheduler ===

   Number of wires:                430
   Number of wire bits:            925
   Number of public wires:           9
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                597
     $_ANDNOT_                     175
     $_AND_                         10
     $_DFFE_PP0P_                  111
     $_DFFE_PP1P_                    7
     $_DFF_PP0_                      1
     $_NAND_                        25
     $_NOR_                          8
     $_NOT_                          3
     $_ORNOT_                       73
     $_OR_                          67
     $_XNOR_                        34
     $_XOR_                         83

=== time_unit ===

   Number of wires:                122
   Number of wire bits:            368
   Number of public wires:           4
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                      33
     $_AND_                          5
     $_DFF_PP0_                     61
     $_NAND_                        29
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          43
     $_XNOR_                        21
     $_XOR_                         39

=== x_input_stream_entity ===

   Number of wires:                 12
   Number of wire bits:            331
   Number of public wires:          10
   Number of public wire bits:     329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_ANDNOT_                       1
     $_DFFE_PP0P_                  131
     $_NAND_                         1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1
       high_level_controller         1
         check_new_input             1
         event_delay                 1
         extinterface                1
         hlqinterface                1
         scheduler                   1
         time_unit                   1
       low_level_controller          1
         evaluator                   1
           a_output_stream_entity      1
           b_output_stream_entity      1
           b_sum_0_sliding_window_entity      1
           c_count_1_sliding_window_entity      1
           c_output_stream_entity      1
           d_output_stream_entity      1
           x_input_stream_entity      1
       queue                         1

   Number of wires:              69289
   Number of wire bits:          94091
   Number of public wires:         525
   Number of public wire bits:   24164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              84245
     $_ANDNOT_                   25747
     $_AND_                        761
     $_DFFE_PP0N_                  134
     $_DFFE_PP0P_                14202
     $_DFFE_PP1N_                    4
     $_DFFE_PP1P_                    8
     $_DFF_NP0_                    321
     $_DFF_PP0_                    466
     $_DFF_PP1_                      2
     $_MUX_                        301
     $_NAND_                      4513
     $_NOR_                       1315
     $_NOT_                        384
     $_ORNOT_                      436
     $_OR_                        9218
     $_XNOR_                      6172
     $_XOR_                      20261

End of script. Logfile hash: 80ae540cf5, CPU: user 24.77s system 0.38s, MEM: 254.03 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 28% 1x abc (8 sec), 22% 38x opt_expr (7 sec), ...

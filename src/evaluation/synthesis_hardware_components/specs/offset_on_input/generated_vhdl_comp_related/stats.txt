
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Running command `ghdl --latches --std=08 --work=work implementation; synth -top implementation; stat' --

1. Executing GHDL.
Importing module implementation.
Importing module clock_pre_processing.
Importing module input_pre_processing.
Importing module monitor.
Importing module high_level_controller.
Importing module queue.
Importing module low_level_controller.
Importing module extinterface.
Importing module check_new_input.
Importing module event_delay.
Importing module time_unit.
Importing module scheduler.
Importing module hlqinterface.
Importing module evaluator.
Importing module x_input_stream_entity.
Importing module a_output_stream_entity.
Importing module b_output_stream_entity.
Importing module c_output_stream_entity.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \c_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \a_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Used module:         \high_level_controller
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:             \event_delay
Used module:             \check_new_input
Used module:             \extinterface
Used module:     \input_pre_processing
Used module:     \clock_pre_processing

2.1.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \monitor
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \c_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \a_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Used module:         \high_level_controller
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:             \event_delay
Used module:             \check_new_input
Used module:             \extinterface
Used module:     \input_pre_processing
Used module:     \clock_pre_processing
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module c_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module a_output_stream_entity.
Optimizing module x_input_stream_entity.
<suppressed ~1 debug messages>
Optimizing module evaluator.
<suppressed ~12 debug messages>
Optimizing module hlqinterface.
<suppressed ~3 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module event_delay.
Optimizing module check_new_input.
Optimizing module extinterface.
Optimizing module low_level_controller.
<suppressed ~1 debug messages>
Optimizing module queue.
<suppressed ~19 debug messages>
Optimizing module high_level_controller.
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module implementation.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module c_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module a_output_stream_entity.
Optimizing module x_input_stream_entity.
Optimizing module evaluator.
Optimizing module hlqinterface.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module event_delay.
Optimizing module check_new_input.
Optimizing module extinterface.
Optimizing module low_level_controller.
Optimizing module queue.
Optimizing module high_level_controller.
Optimizing module monitor.
Optimizing module input_pre_processing.
Optimizing module clock_pre_processing.
Optimizing module implementation.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \x_input_stream_entity..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \implementation..
Removed 6 unused cells and 164 unused wires.
<suppressed ~24 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module a_output_stream_entity...
Checking module b_output_stream_entity...
Checking module c_output_stream_entity...
Checking module check_new_input...
Checking module clock_pre_processing...
Checking module evaluator...
Checking module event_delay...
Checking module extinterface...
Checking module high_level_controller...
Checking module hlqinterface...
Checking module implementation...
Checking module input_pre_processing...
Checking module low_level_controller...
Checking module monitor...
Checking module queue...
Checking module scheduler...
Checking module time_unit...
Checking module x_input_stream_entity...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
<suppressed ~9 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~51 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 20 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell \760: \push_event_in -> 1'1
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
<suppressed ~18 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~18 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 12 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 3 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 4 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 5 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 6 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 7 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 8 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 9 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 10 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 11 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 12 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 13 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 14 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 15 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 16 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 17 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 18 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 19 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 20 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 21 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 22 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 23 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 24 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 25 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 26 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 27 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 28 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 29 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 30 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 31 on \306 ($adff) from module high_level_controller.
Setting constant 0-bit at position 2 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 3 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 4 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 5 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 6 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 7 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 8 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 9 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 10 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 11 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 12 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 13 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 14 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 15 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 16 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 17 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 18 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 19 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 20 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 21 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 22 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 23 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 24 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 25 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 26 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 27 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 28 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 29 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 30 on \915 ($adff) from module hlqinterface.
Setting constant 0-bit at position 31 on \915 ($adff) from module hlqinterface.
Setting constant 1-bit at position 0 on \922 ($dlatch) from module hlqinterface.
Setting constant 0-bit at position 0 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 1 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 2 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 3 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 4 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 5 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 6 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 7 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 8 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 9 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 10 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 11 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 12 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 13 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 14 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 15 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 16 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 17 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 18 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 19 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 20 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 21 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 22 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 23 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 24 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 25 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 26 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 27 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 28 on \827 ($dlatch) from module scheduler.
Setting constant 1-bit at position 29 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 30 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 31 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 32 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 33 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 34 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 35 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 36 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 37 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 38 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 39 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 40 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 41 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 42 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 43 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 44 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 45 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 46 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 47 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 48 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 49 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 50 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 51 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 52 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 53 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 54 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 55 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 56 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 57 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 58 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 59 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 60 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 61 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 62 on \827 ($dlatch) from module scheduler.
Setting constant 0-bit at position 63 on \827 ($dlatch) from module scheduler.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 30 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register low_level_controller.current_state.

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\current_state' from module `\low_level_controller'.
  found $adff cell for state register: \711
  root of input selection tree: $auto$ghdl.cc:806:import_module$241
  found reset state: 0 (from async reset)
  found ctrl input: $auto$ghdl.cc:806:import_module$228
  found ctrl input: $auto$ghdl.cc:806:import_module$229
  found ctrl input: $auto$ghdl.cc:806:import_module$231
  found ctrl input: \data_available
  found state code: 1
  found state code: 2
  found ctrl output: $auto$ghdl.cc:806:import_module$227
  found ctrl output: $auto$ghdl.cc:806:import_module$229
  found ctrl output: $auto$ghdl.cc:806:import_module$230
  ctrl inputs: { $auto$ghdl.cc:806:import_module$231 $auto$ghdl.cc:806:import_module$228 \data_available }
  ctrl outputs: { $auto$ghdl.cc:806:import_module$241 $auto$ghdl.cc:806:import_module$230 $auto$ghdl.cc:806:import_module$229 $auto$ghdl.cc:806:import_module$227 }
  transition:          0 3'00- ->          0 35'00000000000000000000000000000000001
  transition:          0 3'100 ->          0 35'00000000000000000000000000000000001
  transition:          0 3'101 ->          1 35'00000000000000000000000000000001001
  transition:          0 3'-1- ->          1 35'00000000000000000000000000000001001
  transition:          2 3'00- ->          2 35'00000000000000000000000000000010100
  transition:          2 3'100 ->          0 35'00000000000000000000000000000000100
  transition:          2 3'101 ->          1 35'00000000000000000000000000000001100
  transition:          2 3'-1- ->          1 35'00000000000000000000000000000001100
  transition:          1 3'-0- ->          2 35'00000000000000000000000000000010010
  transition:          1 3'-1- ->          1 35'00000000000000000000000000000001010

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\current_state$453' from module `\low_level_controller'.

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\current_state$453' from module `\low_level_controller'.
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [0].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [1].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [2].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [3].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [4].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [5].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [6].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [7].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [8].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [9].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [10].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [11].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [12].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [13].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [14].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [15].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [16].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [17].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [18].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [19].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [20].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [21].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [22].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [23].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [24].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [25].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [26].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [27].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [28].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [29].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [30].
  Removing unused output signal $auto$ghdl.cc:806:import_module$241 [31].

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\current_state$453' from module `\low_level_controller' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000000000000000000000000000000 -> --1
  00000000000000000000000000000010 -> -1-
  00000000000000000000000000000001 -> 1--

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\current_state$453' from module `low_level_controller':
-------------------------------------

  Information on FSM $fsm$\current_state$453 (\current_state):

  Number of input signals:    3
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \data_available
    1: $auto$ghdl.cc:806:import_module$228
    2: $auto$ghdl.cc:806:import_module$231

  Output signals:
    0: $auto$ghdl.cc:806:import_module$227
    1: $auto$ghdl.cc:806:import_module$229
    2: $auto$ghdl.cc:806:import_module$230

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 3'100   ->     0 3'001
      1:     0 3'00-   ->     0 3'001
      2:     0 3'101   ->     2 3'001
      3:     0 3'-1-   ->     2 3'001
      4:     1 3'100   ->     0 3'100
      5:     1 3'00-   ->     1 3'100
      6:     1 3'101   ->     2 3'100
      7:     1 3'-1-   ->     2 3'100
      8:     2 3'-0-   ->     1 3'010
      9:     2 3'-1-   ->     2 3'010

-------------------------------------

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\current_state$453' from module `\low_level_controller'.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~4 debug messages>
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 2 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \1219 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$402, Q = \data_valid).
Adding EN signal on \1218 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$401, Q = \data).
Adding EN signal on \1217 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$396, Q = \eval_done).
Adding EN signal on \1216 ($adff) from module a_output_stream_entity (D = $auto$ghdl.cc:806:import_module$399, Q = \pe_done).
Adding EN signal on \1309 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$424, Q = \data_valid).
Adding EN signal on \1308 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$423, Q = \data).
Adding EN signal on \1307 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$418, Q = \eval_done).
Adding EN signal on \1306 ($adff) from module b_output_stream_entity (D = $auto$ghdl.cc:806:import_module$421, Q = \pe_done).
Adding EN signal on \1399 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$446, Q = \data_valid).
Adding EN signal on \1398 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$445, Q = \data).
Adding EN signal on \1397 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$440, Q = \eval_done).
Adding EN signal on \1396 ($adff) from module c_output_stream_entity (D = $auto$ghdl.cc:806:import_module$443, Q = \pe_done).
Adding EN signal on \99 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$29, Q = \tclk_reg).
Adding EN signal on \98 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$28, Q = \eclk_reg).
Adding EN signal on \103 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$23, Q = \tclk_count).
Adding EN signal on \101 ($adff) from module clock_pre_processing (D = $auto$ghdl.cc:806:import_module$19, Q = \eclk_count).
Adding EN signal on \1093 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$323, Q = \valid_reg).
Adding EN signal on \1091 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$353, Q = \evaluator_done).
Adding EN signal on \1088 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$361, Q = \c_eval).
Adding EN signal on \1087 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$360, Q = \c_pe).
Adding EN signal on \1086 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$359, Q = \b_eval).
Adding EN signal on \1085 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$358, Q = \b_pe).
Adding EN signal on \1084 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$357, Q = \a_eval).
Adding EN signal on \1083 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$356, Q = \a_pe).
Adding EN signal on \1082 ($adff) from module evaluator (D = $auto$ghdl.cc:806:import_module$355, Q = \x_upd).
Adding EN signal on \925 ($adff) from module hlqinterface (D = $auto$ghdl.cc:806:import_module$292, Q = \time_to_queue).
Adding EN signal on \917 ($adff) from module hlqinterface (D = \x_data_in, Q = \x_data_push).
Adding EN signal on \712 ($adff) from module low_level_controller (D = $auto$ghdl.cc:806:import_module$242, Q = \pop_data).
Adding EN signal on \710 ($adff) from module low_level_controller (D = $auto$ghdl.cc:806:import_module$240, Q = \input_clk).
Adding EN signal on \611 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$176, Q = \pop_done).
Adding EN signal on \610 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$175, Q = \push_done).
Adding EN signal on \608 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$151, Q = \size).
Adding EN signal on \606 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$150, Q = \av).
Adding EN signal on \604 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$166, Q = \c_en).
Adding EN signal on \602 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$165, Q = \c_en_reg).
Adding EN signal on \600 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$164, Q = \b_en).
Adding EN signal on \598 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$163, Q = \b_en_reg).
Adding EN signal on \596 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$162, Q = \a_en).
Adding EN signal on \594 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$161, Q = \a_en_reg).
Adding EN signal on \592 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$160, Q = \x_en).
Adding EN signal on \590 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$159, Q = \x_data).
Adding EN signal on \588 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$158, Q = \x_en_reg).
Adding EN signal on \586 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$157, Q = \x_data_reg).
Adding EN signal on \584 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$156, Q = \time_data).
Adding EN signal on \582 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$155, Q = \time_data_reg).
Adding EN signal on \580 ($adff) from module queue (D = $auto$ghdl.cc:806:import_module$137, Q = \is_full).
Adding EN signal on \832 ($adff) from module scheduler (D = \time_of_next_deadline, Q = \time_last_deadline).
Adding EN signal on \826 ($adff) from module scheduler (D = $auto$ghdl.cc:806:import_module$265, Q = \time_of_next_deadline).
Adding EN signal on \1129 ($adff) from module x_input_stream_entity (D = { \data_valid [0] 1'1 }, Q = \data_valid).
Adding EN signal on \1127 ($adff) from module x_input_stream_entity (D = { \data [63:0] \data_in }, Q = \data).
Adding EN signal on \1125 ($adff) from module x_input_stream_entity (D = $auto$ghdl.cc:806:import_module$379, Q = \done).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 32 unused cells and 41 unused wires.
<suppressed ~42 debug messages>

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~4 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~2 debug messages>
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
<suppressed ~1 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~2 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~17 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.9. Rerunning OPT passes. (Maybe there is more to do..)

2.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~62 debug messages>

2.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~6 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
<suppressed ~15 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~138 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 57 cells.

2.8.13. Executing OPT_DFF pass (perform DFF optimizations).

2.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 57 unused wires.
<suppressed ~5 debug messages>

2.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.16. Rerunning OPT passes. (Maybe there is more to do..)

2.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.8.20. Executing OPT_DFF pass (perform DFF optimizations).

2.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.8.23. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$555 ($ne).
Removed top 1 bits (of 2) from port B of cell clock_pre_processing.$auto$opt_dff.cc:195:make_patterns_logic$562 ($ne).
Removed top 28 bits (of 32) from port B of cell clock_pre_processing.\54 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\56 ($add).
Removed top 30 bits (of 32) from port B of cell clock_pre_processing.\62 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\64 ($add).
Removed top 29 bits (of 32) from port B of cell clock_pre_processing.\70 ($eq).
Removed top 31 bits (of 32) from port B of cell clock_pre_processing.\74 ($eq).
Removed top 1 bits (of 2) from port B of cell evaluator.$auto$opt_dff.cc:195:make_patterns_logic$573 ($ne).
Removed top 30 bits (of 32) from port A of cell high_level_controller.\287 ($add).
Removed top 31 bits (of 32) from port B of cell high_level_controller.\287 ($add).
Removed top 30 bits (of 32) from port Y of cell high_level_controller.\287 ($add).
Removed top 30 bits (of 32) from wire high_level_controller.$auto$ghdl.cc:806:import_module$85.
Removed top 30 bits (of 32) from wire high_level_controller.hlc_clk_count.
Removed top 30 bits (of 32) from port A of cell hlqinterface.\844 ($add).
Removed top 31 bits (of 32) from port B of cell hlqinterface.\844 ($add).
Removed top 30 bits (of 32) from port Y of cell hlqinterface.\844 ($add).
Removed top 30 bits (of 32) from wire hlqinterface.$auto$ghdl.cc:806:import_module$273.
Removed top 30 bits (of 32) from wire hlqinterface.clock_state_machine.
Removed top 20 bits (of 64) from wire hlqinterface.time_to_queue.
Removed top 4 bits (of 64) from wire hlqinterface.x_data_push.
Removed top 31 bits (of 32) from port B of cell queue.\328 ($gt).
Removed top 29 bits (of 32) from port B of cell queue.\331 ($lt).
Removed top 31 bits (of 32) from port B of cell queue.\346 ($sub).
Removed top 31 bits (of 32) from port B of cell queue.\393 ($add).
Removed top 31 bits (of 32) from port B of cell queue.\396 ($eq).
Removed top 30 bits (of 32) from port B of cell queue.\443 ($gt).
Removed top 34 bits (of 64) from port B of cell scheduler.\799 ($add).
Removed top 58 bits (of 64) from port B of cell time_unit.\787 ($add).
Removed top 1 bits (of 2) from port B of cell x_input_stream_entity.$auto$opt_dff.cc:195:make_patterns_logic$751 ($ne).

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module a_output_stream_entity:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module b_output_stream_entity:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module c_output_stream_entity:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module check_new_input:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clock_pre_processing:
  creating $macc model for \56 ($add).
  creating $macc model for \64 ($add).
  creating $alu model for $macc \64.
  creating $alu model for $macc \56.
  creating $alu cell for \56: $auto$alumacc.cc:485:replace_alu$758
  creating $alu cell for \64: $auto$alumacc.cc:485:replace_alu$761
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module evaluator:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module event_delay:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module extinterface:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module high_level_controller:
  creating $macc model for \287 ($add).
  creating $alu model for $macc \287.
  creating $alu cell for \287: $auto$alumacc.cc:485:replace_alu$764
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module hlqinterface:
  creating $macc model for \844 ($add).
  creating $alu model for $macc \844.
  creating $alu cell for \844: $auto$alumacc.cc:485:replace_alu$767
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module implementation:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module input_pre_processing:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module low_level_controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module monitor:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module queue:
  creating $macc model for \346 ($sub).
  creating $macc model for \393 ($add).
  creating $alu model for $macc \393.
  creating $alu model for $macc \346.
  creating $alu model for \328 ($gt): new $alu
  creating $alu model for \331 ($lt): new $alu
  creating $alu model for \443 ($gt): new $alu
  creating $alu cell for \443: $auto$alumacc.cc:485:replace_alu$773
  creating $alu cell for \331: $auto$alumacc.cc:485:replace_alu$780
  creating $alu cell for \328: $auto$alumacc.cc:485:replace_alu$793
  creating $alu cell for \346: $auto$alumacc.cc:485:replace_alu$800
  creating $alu cell for \393: $auto$alumacc.cc:485:replace_alu$803
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module scheduler:
  creating $macc model for \799 ($add).
  creating $alu model for $macc \799.
  creating $alu model for \798 ($ge): new $alu
  creating $alu cell for \798: $auto$alumacc.cc:485:replace_alu$807
  creating $alu cell for \799: $auto$alumacc.cc:485:replace_alu$816
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module time_unit:
  creating $macc model for \787 ($add).
  creating $alu model for $macc \787.
  creating $alu cell for \787: $auto$alumacc.cc:485:replace_alu$819
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module x_input_stream_entity:
  created 0 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~8 debug messages>
Optimizing module check_new_input.
<suppressed ~1 debug messages>
Optimizing module clock_pre_processing.
<suppressed ~4 debug messages>
Optimizing module evaluator.
<suppressed ~16 debug messages>
Optimizing module event_delay.
<suppressed ~2 debug messages>
Optimizing module extinterface.
Optimizing module high_level_controller.
<suppressed ~1 debug messages>
Optimizing module hlqinterface.
<suppressed ~6 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~5 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~44 debug messages>
Optimizing module scheduler.
<suppressed ~2 debug messages>
Optimizing module time_unit.
<suppressed ~1 debug messages>
Optimizing module x_input_stream_entity.
<suppressed ~3 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~3 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 2 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 1 unused cells and 86 unused wires.
<suppressed ~14 debug messages>

2.17.5. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~1 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~1 debug messages>
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~1 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~2 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~3 debug messages>
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~3 debug messages>
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 5 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$746 ($adffe) from module scheduler (D = \time_of_next_deadline [8:0], Q = \time_of_next_deadline [8:0]).
Handling D = Q on $auto$ff.cc:266:slice$824 ($adffe) from module scheduler (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$824 ($dlatch) from module scheduler.
Adding EN signal on \792 ($adff) from module time_unit (D = \sys_time [2:0], Q = \sys_time [2:0]).
Handling D = Q on $auto$ff.cc:266:slice$830 ($adffe) from module time_unit (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$830 ($dlatch) from module time_unit.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$830 ($dlatch) from module time_unit.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$830 ($dlatch) from module time_unit.

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 3 unused cells and 8 unused wires.
<suppressed ~10 debug messages>

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.10. Rerunning OPT passes. (Maybe there is more to do..)

2.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.14. Executing OPT_SHARE pass.

2.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$745 ($adffe) from module scheduler.

2.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.18. Rerunning OPT passes. (Maybe there is more to do..)

2.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \b_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \c_output_stream_entity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \check_new_input..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clock_pre_processing..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \evaluator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \event_delay..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extinterface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \high_level_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hlqinterface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \implementation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \input_pre_processing..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \low_level_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \monitor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \queue..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \scheduler..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \time_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \x_input_stream_entity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a_output_stream_entity.
  Optimizing cells in module \b_output_stream_entity.
  Optimizing cells in module \c_output_stream_entity.
  Optimizing cells in module \check_new_input.
  Optimizing cells in module \clock_pre_processing.
  Optimizing cells in module \evaluator.
  Optimizing cells in module \event_delay.
  Optimizing cells in module \extinterface.
  Optimizing cells in module \high_level_controller.
  Optimizing cells in module \hlqinterface.
  Optimizing cells in module \implementation.
  Optimizing cells in module \input_pre_processing.
  Optimizing cells in module \low_level_controller.
  Optimizing cells in module \monitor.
  Optimizing cells in module \queue.
  Optimizing cells in module \scheduler.
  Optimizing cells in module \time_unit.
  Optimizing cells in module \x_input_stream_entity.
Performed a total of 0 changes.

2.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
Finding identical cells in module `\scheduler'.
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 0 cells.

2.19.22. Executing OPT_SHARE pass.

2.19.23. Executing OPT_DFF pass (perform DFF optimizations).

2.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..

2.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.19.26. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$9372bd4570ba4a5b302416ad52cf0b982084fec5\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$6f1400be92fe82b5a3c39c13d4e97a3e8d92c37b\_90_alu for cells of type $alu.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$7b00947614a4c48e09c066dca449366ddfa907a5\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$19e2580c9084a01134cf124dfa77fb4500b707f9\_90_alu for cells of type $alu.
Using template $paramod$06a9a25e193457b564e50ab7b7ad40e176246e9c\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
No more expansions possible.
<suppressed ~3300 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
<suppressed ~2 debug messages>
Optimizing module b_output_stream_entity.
<suppressed ~2 debug messages>
Optimizing module c_output_stream_entity.
<suppressed ~2 debug messages>
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
<suppressed ~562 debug messages>
Optimizing module evaluator.
<suppressed ~4 debug messages>
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
<suppressed ~13 debug messages>
Optimizing module hlqinterface.
<suppressed ~13 debug messages>
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
<suppressed ~6 debug messages>
Optimizing module monitor.
Optimizing module queue.
<suppressed ~1028 debug messages>
Optimizing module scheduler.
<suppressed ~376 debug messages>
Optimizing module time_unit.
<suppressed ~346 debug messages>
Optimizing module x_input_stream_entity.
<suppressed ~2 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\b_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\c_output_stream_entity'.
<suppressed ~3 debug messages>
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
<suppressed ~189 debug messages>
Finding identical cells in module `\evaluator'.
<suppressed ~3 debug messages>
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
<suppressed ~9 debug messages>
Finding identical cells in module `\hlqinterface'.
<suppressed ~9 debug messages>
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~645 debug messages>
Finding identical cells in module `\scheduler'.
<suppressed ~222 debug messages>
Finding identical cells in module `\time_unit'.
<suppressed ~6 debug messages>
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 366 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 515 unused cells and 1456 unused wires.
<suppressed ~527 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\a_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 214 wires to a netlist network with 69 inputs and 70 outputs.

2.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:       62
ABC RESULTS:            ANDNOT cells:       68
ABC RESULTS:        internal signals:       75
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.2. Extracting gate netlist of module `\b_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 214 wires to a netlist network with 69 inputs and 70 outputs.

2.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.2.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:       61
ABC RESULTS:            ANDNOT cells:       68
ABC RESULTS:        internal signals:       75
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.3. Extracting gate netlist of module `\c_output_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 214 wires to a netlist network with 69 inputs and 70 outputs.

2.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.3.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:       62
ABC RESULTS:            ANDNOT cells:       68
ABC RESULTS:        internal signals:       75
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.4. Extracting gate netlist of module `\check_new_input' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

2.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

2.22.5. Extracting gate netlist of module `\clock_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 386 wires to a netlist network with 65 inputs and 67 outputs.

2.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.5.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:       40
ABC RESULTS:                OR cells:       95
ABC RESULTS:             ORNOT cells:       26
ABC RESULTS:               XOR cells:       49
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:        internal signals:      254
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       67
Removing temp directory.

2.22.6. Extracting gate netlist of module `\evaluator' to `<abc-temp-dir>/input.blif'..
Extracted 37 gates and 54 wires to a netlist network with 16 inputs and 13 outputs.

2.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.6.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:               AND cells:        5
ABC RESULTS:              NAND cells:        5
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:            ANDNOT cells:       15
ABC RESULTS:        internal signals:       25
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       13
Removing temp directory.

2.22.7. Extracting gate netlist of module `\event_delay' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 260 wires to a netlist network with 130 inputs and 129 outputs.

2.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      129
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:      129
Removing temp directory.

2.22.8. Extracting gate netlist of module `\extinterface' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.9. Extracting gate netlist of module `\high_level_controller' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 7 wires to a netlist network with 2 inputs and 3 outputs.

2.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

2.22.10. Extracting gate netlist of module `\hlqinterface' to `<abc-temp-dir>/input.blif'..
Extracted 78 gates and 212 wires to a netlist network with 133 inputs and 70 outputs.

2.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.10.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               MUX cells:       64
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:      133
ABC RESULTS:          output signals:       70
Removing temp directory.

2.22.11. Extracting gate netlist of module `\implementation' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.12. Extracting gate netlist of module `\input_pre_processing' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.13. Extracting gate netlist of module `\low_level_controller' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 35 wires to a netlist network with 5 inputs and 7 outputs.

2.22.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.13.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        5
ABC RESULTS:          output signals:        7
Removing temp directory.

2.22.14. Extracting gate netlist of module `\monitor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.15. Extracting gate netlist of module `\queue' to `<abc-temp-dir>/input.blif'..
Extracted 571 gates and 872 wires to a netlist network with 301 inputs and 172 outputs.

2.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.15.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               AND cells:       12
ABC RESULTS:               XOR cells:       62
ABC RESULTS:               MUX cells:      163
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       42
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:            ANDNOT cells:       83
ABC RESULTS:                OR cells:       63
ABC RESULTS:        internal signals:      399
ABC RESULTS:           input signals:      301
ABC RESULTS:          output signals:      172
Removing temp directory.

2.22.16. Extracting gate netlist of module `\scheduler' to `<abc-temp-dir>/input.blif'..
Extracted 555 gates and 674 wires to a netlist network with 119 inputs and 56 outputs.

2.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.16.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:             ORNOT cells:       62
ABC RESULTS:               NOR cells:        5
ABC RESULTS:              XNOR cells:       63
ABC RESULTS:                OR cells:       64
ABC RESULTS:               AND cells:       20
ABC RESULTS:              NAND cells:       32
ABC RESULTS:            ANDNOT cells:      175
ABC RESULTS:               XOR cells:       46
ABC RESULTS:        internal signals:      499
ABC RESULTS:           input signals:      119
ABC RESULTS:          output signals:       56
Removing temp directory.

2.22.17. Extracting gate netlist of module `\time_unit' to `<abc-temp-dir>/input.blif'..
Extracted 175 gates and 236 wires to a netlist network with 61 inputs and 61 outputs.

2.22.17.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.17.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               AND cells:        5
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:       21
ABC RESULTS:              NAND cells:       29
ABC RESULTS:                OR cells:       43
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:               XOR cells:       39
ABC RESULTS:        internal signals:      114
ABC RESULTS:           input signals:       61
ABC RESULTS:          output signals:       61
Removing temp directory.

2.22.18. Extracting gate netlist of module `\x_input_stream_entity' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 6 wires to a netlist network with 2 inputs and 2 outputs.

2.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.18.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a_output_stream_entity.
Optimizing module b_output_stream_entity.
Optimizing module c_output_stream_entity.
Optimizing module check_new_input.
Optimizing module clock_pre_processing.
Optimizing module evaluator.
<suppressed ~4 debug messages>
Optimizing module event_delay.
Optimizing module extinterface.
Optimizing module high_level_controller.
Optimizing module hlqinterface.
Optimizing module implementation.
Optimizing module input_pre_processing.
Optimizing module low_level_controller.
Optimizing module monitor.
Optimizing module queue.
<suppressed ~19 debug messages>
Optimizing module scheduler.
Optimizing module time_unit.
Optimizing module x_input_stream_entity.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a_output_stream_entity'.
Finding identical cells in module `\b_output_stream_entity'.
Finding identical cells in module `\c_output_stream_entity'.
Finding identical cells in module `\check_new_input'.
Finding identical cells in module `\clock_pre_processing'.
Finding identical cells in module `\evaluator'.
Finding identical cells in module `\event_delay'.
Finding identical cells in module `\extinterface'.
Finding identical cells in module `\high_level_controller'.
Finding identical cells in module `\hlqinterface'.
Finding identical cells in module `\implementation'.
Finding identical cells in module `\input_pre_processing'.
Finding identical cells in module `\low_level_controller'.
Finding identical cells in module `\monitor'.
Finding identical cells in module `\queue'.
<suppressed ~18 debug messages>
Finding identical cells in module `\scheduler'.
<suppressed ~9 debug messages>
Finding identical cells in module `\time_unit'.
Finding identical cells in module `\x_input_stream_entity'.
Removed a total of 9 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a_output_stream_entity..
Finding unused cells or wires in module \b_output_stream_entity..
Finding unused cells or wires in module \c_output_stream_entity..
Finding unused cells or wires in module \check_new_input..
Finding unused cells or wires in module \clock_pre_processing..
Finding unused cells or wires in module \evaluator..
Finding unused cells or wires in module \event_delay..
Finding unused cells or wires in module \extinterface..
Finding unused cells or wires in module \high_level_controller..
Finding unused cells or wires in module \hlqinterface..
Finding unused cells or wires in module \implementation..
Finding unused cells or wires in module \input_pre_processing..
Finding unused cells or wires in module \low_level_controller..
Finding unused cells or wires in module \monitor..
Finding unused cells or wires in module \queue..
Finding unused cells or wires in module \scheduler..
Finding unused cells or wires in module \time_unit..
Finding unused cells or wires in module \x_input_stream_entity..
Removed 1 unused cells and 1852 unused wires.
<suppressed ~15 debug messages>

2.23.5. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor
Used module:         \high_level_controller
Used module:             \check_new_input
Used module:             \event_delay
Used module:             \extinterface
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \a_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \c_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue

2.24.2. Analyzing design hierarchy..
Top module:  \implementation
Used module:     \clock_pre_processing
Used module:     \input_pre_processing
Used module:     \monitor
Used module:         \high_level_controller
Used module:             \check_new_input
Used module:             \event_delay
Used module:             \extinterface
Used module:             \hlqinterface
Used module:             \scheduler
Used module:             \time_unit
Used module:         \low_level_controller
Used module:             \evaluator
Used module:                 \a_output_stream_entity
Used module:                 \b_output_stream_entity
Used module:                 \c_output_stream_entity
Used module:                 \x_input_stream_entity
Used module:         \queue
Removed 0 unused modules.

2.25. Printing statistics.

=== a_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         62
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           2

=== b_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         61
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                           2

=== c_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         62
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           2

=== check_new_input ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PP0_                      2

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== evaluator ===

   Number of wires:                 86
   Number of wire bits:           1033
   Number of public wires:          56
   Number of public wire bits:    1003
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      15
     $_AND_                          5
     $_DFFE_PP0N_                    4
     $_DFFE_PP0P_                    4
     $_DFFE_PP1P_                    1
     $_DFF_PP1_                      1
     $_NAND_                         5
     $_ORNOT_                        3
     $_OR_                           2
     a_output_stream_entity          1
     b_output_stream_entity          1
     c_output_stream_entity          1
     x_input_stream_entity           1

=== event_delay ===

   Number of wires:                143
   Number of wire bits:            521
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     $_AND_                        129
     $_DFF_PP0_                    130

=== extinterface ===

   Number of wires:                 11
   Number of wire bits:            389
   Number of public wires:          11
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_DFF_PP0_                    129

=== high_level_controller ===

   Number of wires:                 48
   Number of wire bits:           1122
   Number of public wires:          44
   Number of public wire bits:    1053
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_NOT_                          1
     $_XOR_                          1
     check_new_input                 1
     event_delay                     1
     extinterface                    1
     hlqinterface                    1
     scheduler                       1
     time_unit                       1

=== hlqinterface ===

   Number of wires:                 99
   Number of wire bits:            519
   Number of public wires:          24
   Number of public wire bits:     442
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                208
     $_ANDNOT_                       2
     $_DFFE_PP0P_                  128
     $_DFF_PP0_                      5
     $_MUX_                         64
     $_NAND_                         1
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                           1
     $_XOR_                          1

=== implementation ===

   Number of wires:                 33
   Number of wire bits:           1041
   Number of public wires:          33
   Number of public wire bits:    1041
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 14
   Number of wire bits:            392
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_DFF_PP0_                    130

=== low_level_controller ===

   Number of wires:                 46
   Number of wire bits:            552
   Number of public wires:          23
   Number of public wire bits:     529
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       6
     $_AND_                          2
     $_DFFE_PP0P_                    2
     $_DFF_PP0_                      2
     $_DFF_PP1_                      1
     $_NAND_                         1
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                          11
     evaluator                       1

=== monitor ===

   Number of wires:                 61
   Number of wire bits:           1699
   Number of public wires:          60
   Number of public wire bits:    1698
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                323
     $_DFF_NP0_                    320
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== queue ===

   Number of wires:                498
   Number of wire bits:           1165
   Number of public wires:          36
   Number of public wire bits:     703
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                895
     $_ANDNOT_                      83
     $_AND_                         11
     $_DFFE_PP0P_                  432
     $_DFF_PP0_                      1
     $_MUX_                        163
     $_NAND_                        18
     $_NOR_                         37
     $_NOT_                          7
     $_ORNOT_                       18
     $_OR_                          63
     $_XOR_                         62

=== scheduler ===

   Number of wires:                424
   Number of wire bits:            847
   Number of public wires:           9
   Number of public wire bits:     324
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                579
     $_ANDNOT_                     175
     $_AND_                         20
     $_DFFE_PP0P_                   97
     $_DFFE_PP1P_                   13
     $_DFF_PP0_                      1
     $_NAND_                        32
     $_NOR_                          5
     $_NOT_                          4
     $_ORNOT_                       62
     $_OR_                          61
     $_XNOR_                        63
     $_XOR_                         46

=== time_unit ===

   Number of wires:                122
   Number of wire bits:            368
   Number of public wires:           4
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                      33
     $_AND_                          5
     $_DFF_PP0_                     61
     $_NAND_                        29
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          43
     $_XNOR_                        21
     $_XOR_                         39

=== x_input_stream_entity ===

   Number of wires:                 12
   Number of wire bits:            331
   Number of public wires:          10
   Number of public wire bits:     329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_ANDNOT_                       1
     $_DFFE_PP0P_                  131
     $_NAND_                         1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1
       high_level_controller         1
         check_new_input             1
         event_delay                 1
         extinterface                1
         hlqinterface                1
         scheduler                   1
         time_unit                   1
       low_level_controller          1
         evaluator                   1
           a_output_stream_entity      1
           b_output_stream_entity      1
           c_output_stream_entity      1
           x_input_stream_entity      1
       queue                         1

   Number of wires:               2384
   Number of wire bits:          11395
   Number of public wires:         396
   Number of public wire bits:    9112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3963
     $_ANDNOT_                     601
     $_AND_                        360
     $_DFFE_PP0N_                   64
     $_DFFE_PP0P_                  997
     $_DFFE_PP1N_                    4
     $_DFFE_PP1P_                   14
     $_DFF_NP0_                    320
     $_DFF_PP0_                    465
     $_DFF_PP1_                      2
     $_MUX_                        232
     $_NAND_                       127
     $_NOR_                         54
     $_NOT_                         22
     $_ORNOT_                      125
     $_OR_                         282
     $_XNOR_                        96
     $_XOR_                        198

2.26. Executing CHECK pass (checking for obvious problems).
Checking module a_output_stream_entity...
Checking module b_output_stream_entity...
Checking module c_output_stream_entity...
Checking module check_new_input...
Checking module clock_pre_processing...
Checking module evaluator...
Checking module event_delay...
Checking module extinterface...
Checking module high_level_controller...
Checking module hlqinterface...
Checking module implementation...
Checking module input_pre_processing...
Checking module low_level_controller...
Checking module monitor...
Checking module queue...
Checking module scheduler...
Checking module time_unit...
Checking module x_input_stream_entity...
Found and reported 0 problems.

3. Printing statistics.

=== a_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         62
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           2

=== b_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         61
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                           2

=== c_output_stream_entity ===

   Number of wires:                152
   Number of wire bits:            341
   Number of public wires:          14
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                205
     $_ANDNOT_                      68
     $_AND_                         62
     $_DFFE_PP0P_                   67
     $_MUX_                          1
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           2

=== check_new_input ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PP0_                      2

=== clock_pre_processing ===

   Number of wires:                324
   Number of wire bits:            386
   Number of public wires:          10
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                381
     $_ANDNOT_                      81
     $_AND_                          2
     $_DFFE_PP0N_                   60
     $_DFFE_PP0P_                    2
     $_DFFE_PP1N_                    4
     $_DFF_PP0_                      1
     $_MUX_                          2
     $_NAND_                        40
     $_NOR_                          4
     $_NOT_                          3
     $_ORNOT_                       26
     $_OR_                          95
     $_XNOR_                        12
     $_XOR_                         49

=== evaluator ===

   Number of wires:                 86
   Number of wire bits:           1033
   Number of public wires:          56
   Number of public wire bits:    1003
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      15
     $_AND_                          5
     $_DFFE_PP0N_                    4
     $_DFFE_PP0P_                    4
     $_DFFE_PP1P_                    1
     $_DFF_PP1_                      1
     $_NAND_                         5
     $_ORNOT_                        3
     $_OR_                           2
     a_output_stream_entity          1
     b_output_stream_entity          1
     c_output_stream_entity          1
     x_input_stream_entity           1

=== event_delay ===

   Number of wires:                143
   Number of wire bits:            521
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     $_AND_                        129
     $_DFF_PP0_                    130

=== extinterface ===

   Number of wires:                 11
   Number of wire bits:            389
   Number of public wires:          11
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_DFF_PP0_                    129

=== high_level_controller ===

   Number of wires:                 48
   Number of wire bits:           1122
   Number of public wires:          44
   Number of public wire bits:    1053
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_AND_                          1
     $_DFF_PP0_                      3
     $_NOT_                          1
     $_XOR_                          1
     check_new_input                 1
     event_delay                     1
     extinterface                    1
     hlqinterface                    1
     scheduler                       1
     time_unit                       1

=== hlqinterface ===

   Number of wires:                 99
   Number of wire bits:            519
   Number of public wires:          24
   Number of public wire bits:     442
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                208
     $_ANDNOT_                       2
     $_DFFE_PP0P_                  128
     $_DFF_PP0_                      5
     $_MUX_                         64
     $_NAND_                         1
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                           1
     $_XOR_                          1

=== implementation ===

   Number of wires:                 33
   Number of wire bits:           1041
   Number of public wires:          33
   Number of public wire bits:    1041
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1

=== input_pre_processing ===

   Number of wires:                 14
   Number of wire bits:            392
   Number of public wires:          14
   Number of public wire bits:     392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_DFF_PP0_                    130

=== low_level_controller ===

   Number of wires:                 46
   Number of wire bits:            552
   Number of public wires:          23
   Number of public wire bits:     529
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       6
     $_AND_                          2
     $_DFFE_PP0P_                    2
     $_DFF_PP0_                      2
     $_DFF_PP1_                      1
     $_NAND_                         1
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                          11
     evaluator                       1

=== monitor ===

   Number of wires:                 61
   Number of wire bits:           1699
   Number of public wires:          60
   Number of public wire bits:    1698
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                323
     $_DFF_NP0_                    320
     high_level_controller           1
     low_level_controller            1
     queue                           1

=== queue ===

   Number of wires:                498
   Number of wire bits:           1165
   Number of public wires:          36
   Number of public wire bits:     703
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                895
     $_ANDNOT_                      83
     $_AND_                         11
     $_DFFE_PP0P_                  432
     $_DFF_PP0_                      1
     $_MUX_                        163
     $_NAND_                        18
     $_NOR_                         37
     $_NOT_                          7
     $_ORNOT_                       18
     $_OR_                          63
     $_XOR_                         62

=== scheduler ===

   Number of wires:                424
   Number of wire bits:            847
   Number of public wires:           9
   Number of public wire bits:     324
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                579
     $_ANDNOT_                     175
     $_AND_                         20
     $_DFFE_PP0P_                   97
     $_DFFE_PP1P_                   13
     $_DFF_PP0_                      1
     $_NAND_                        32
     $_NOR_                          5
     $_NOT_                          4
     $_ORNOT_                       62
     $_OR_                          61
     $_XNOR_                        63
     $_XOR_                         46

=== time_unit ===

   Number of wires:                122
   Number of wire bits:            368
   Number of public wires:           4
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                      33
     $_AND_                          5
     $_DFF_PP0_                     61
     $_NAND_                        29
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          43
     $_XNOR_                        21
     $_XOR_                         39

=== x_input_stream_entity ===

   Number of wires:                 12
   Number of wire bits:            331
   Number of public wires:          10
   Number of public wire bits:     329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_ANDNOT_                       1
     $_DFFE_PP0P_                  131
     $_NAND_                         1

=== design hierarchy ===

   implementation                    1
     clock_pre_processing            1
     input_pre_processing            1
     monitor                         1
       high_level_controller         1
         check_new_input             1
         event_delay                 1
         extinterface                1
         hlqinterface                1
         scheduler                   1
         time_unit                   1
       low_level_controller          1
         evaluator                   1
           a_output_stream_entity      1
           b_output_stream_entity      1
           c_output_stream_entity      1
           x_input_stream_entity      1
       queue                         1

   Number of wires:               2384
   Number of wire bits:          11395
   Number of public wires:         396
   Number of public wire bits:    9112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3963
     $_ANDNOT_                     601
     $_AND_                        360
     $_DFFE_PP0N_                   64
     $_DFFE_PP0P_                  997
     $_DFFE_PP1N_                    4
     $_DFFE_PP1P_                   14
     $_DFF_NP0_                    320
     $_DFF_PP0_                    465
     $_DFF_PP1_                      2
     $_MUX_                        232
     $_NAND_                       127
     $_NOR_                         54
     $_NOT_                         22
     $_ORNOT_                      125
     $_OR_                         282
     $_XNOR_                        96
     $_XOR_                        198

End of script. Logfile hash: 7a27f58e8e, CPU: user 4.00s system 0.15s, MEM: 48.37 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 24% 1x abc (1 sec), 16% 31x opt_expr (0 sec), ...

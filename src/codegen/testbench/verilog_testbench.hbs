`timescale 1us/1ns
module testbench;
    reg clk;
    reg rst;
    reg en;

    
    {{#each inputs}}
    reg {{this.datatype}} input_{{@index}};
    reg new_input_{{@index}};
    {{/each}}

    {{#each outputs}}
    wire {{this.datatype}} output_{{@index}};
    wire output_{{@index}}_aktv;
    {{/each}}

    {{#if debug}}
    wire signed [7:0] llc_tag;
    wire q_push;
    wire q_pop;
    wire q_push_valid;
    wire q_pop_valid;

    {{#each outputs}}
    wire pacing_{{@index}};
    {{/each}}
    {{#each sliding_windows}}
    wire slide_{{@index}};
    {{/each}}
    {{/if}}

    topEntity monitor (
                        clk, rst, en
                        {{#each inputs}}
                        ,input_{{@index}}, new_input_{{@index}}
                        {{/each}}
                        {{#each outputs}}
                        ,output_{{@index}}, output_{{@index}}_aktv
                        {{/each}}
                        {{#if debug}}
                        ,llc_tag, q_push, q_pop, q_push_valid, q_pop_valid
                            {{#each outputs}}
                        ,pacing_{{@index}}
                            {{/each}}
                            {{#each sliding_windows}}
                        ,slide_{{@index}}
                            {{/each}}
                        {{/if}}
                       );

    always begin
        #1 clk = ~clk;
    end

    always @(posedge clk) begin
        if ({{#each outputs}}output_{{@index}}_aktv == 1'b1{{#unless @last}} || {{/unless}}{{/each}}) begin
            $display("Time %0t: Active outputs: ({{#each outputs}}%b{{#unless @last}}, {{/unless}}{{/each}}), Outputs: ({{#each outputs}}%0d{{#unless @last}}, {{/unless}}{{/each}})", $time, {{#each outputs}}output_{{@index}}_aktv, {{/each}}{{#each outputs}}output_{{@index}}{{#unless @last}}, {{/unless}}{{/each}});
        end
    end

    initial begin
        #0; // important to make sure that assignments happens before evaluation to avoid undefined values in the beginning
        clk = 1;
        rst = 1;
        en = 1;
        {{#each this.inputs}}
        new_input_{{@index}} = 0;
        {{/each}}

        #2;
        rst = 0;
        
        $printtimescale(testbench);
        $dumpvars(0, testbench);

        {{#each trace_data}}
        #{{this.time}};
        @(posedge clk);
            {{#each this.inputs}}
        new_input_{{@index}} = {{this.new_input}};
        input_{{@index}} = {{this.input_value}};
            {{/each}}
        @(posedge clk);
            {{#each this.inputs}}
        new_input_{{@index}} = 0;
        input_{{@index}} = 0;
            {{/each}}

        {{/each}}

        #40;
        $finish; 
    end

endmodule


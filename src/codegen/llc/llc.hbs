type Tag = Unsigned 8
-- maxTag must be at least the size of the sliding window to avoid duplicate tags in the window
maxTag = {{max_tag}} :: Tag
invalidTag = maxTag + 1

getOffset :: KnownNat n => Vec n (Tag, a) -> Tag -> Tag -> a -> (Tag, a)
getOffset win tag offset dflt = out
    where 
        offsetTag = if tag > offset then tag - offset else tag - offset + maxTag
        out = case findIndex (\(t, _) -> t == offsetTag) win of
            Just i -> let (_, v) = win !! i in (tag, v)
            Nothing -> (tag, dflt) 

getMatchingTag :: KnownNat n => Vec n (Tag, a) -> Tag -> a -> (Tag, a)
getMatchingTag win tag dflt = out
    where 
        out = case findIndex (\(t, _) -> t == tag) win of
            Just i -> let (_, v) = win !! i in (tag, v)
            Nothing -> (tag, dflt)



llc :: HiddenClockResetEnable dom => Signal dom (Bool, Event) -> Signal dom (Bool, Outputs)
llc event = bundle (toPop, outputs)
    where 
        (isValidEvent, poppedEvent) = unbundle event

        {{#if has_pipeline_wait}}
        isPipelineReady = pipelineReady startNewPipeline
        startNewPipeline = mux (isPipelineReady .&&. isValidEvent) (pure True) (pure False)
        toPop = isPipelineReady .&&. not <$> startNewPipeline
        {{else}}
        toPop = pure True
        {{/if}}

        {{#if has_sliding_window}}
        (inputs, slides, pacings) = unbundle poppedEvent
        {{else}}
        (inputs, pacings) = unbundle poppedEvent
        {{/if}}

        tag = genTag ({{#each outputs}}p{{@index}}{{#unless @last}} .||. {{/unless}}{{/each}})

        {{#if (gt (len outputs) 1)}}
        outputs = bundle ({{#each outputs}}output{{this.idx}}{{#unless @last}}, {{/unless}}{{/each}})
        {{else}}
        outputs = output0
        {{/if}}

        {{#each outputs}}
        output{{this.idx}} = bundle (out{{this.idx}}, aktvOut{{this.idx}})
        {{/each}}

        {{#each outputs}}
        out{{this.idx}} = outputStream{{this.idx}} enOut{{this.idx}} {{#each this.deps}}out{{../idx}}Data{{@index}} {{/each}}
        {{#each this.deps}}
        {{#if (or this.is_sync_access this.is_sliding_window_access)}}
        {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getMatchingTag <$> {{this.source}} <*> out{{../idx}}Tag <*> (pure {{this.default_value}})
        {{else}}
        out{{../idx}}Data{{@index}} = {{this.source}}
        {{/if}}
        {{/if}}
        {{#if this.is_offset_access}}
        out{{../idx}}Data{{@index}} = getOffset <$> {{this.source}} <*> out{{../idx}}Tag <*> (pure {{this.offset}}) <*> (pure {{this.default_value}})
        {{/if}}
        {{/each}}

        {{/each}}









{{#if has_pipeline_wait}}
pipelineReady :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Bool
pipelineReady rst = toWait .==. pure 0 
    where 
        waitTime = pure {{pipeline_wait}} :: Signal dom Int
        toWait = register (0 :: Int) next
        next = mux rst waitTime (mux (toWait .>. pure 0) (toWait - 1) toWait)
{{/if}}



{{{streams}}}
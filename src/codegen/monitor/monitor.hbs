{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}

module {{spec_name}} where

import Clash.Prelude

---------------------------------------------------------------

{{{spec}}}

---------------------------------------------------------------

-- Evaluation Order
--------------------
{{{eval_order}}}

-- Memory Window
-----------------
{{{required_memory}}}

-- Pipeline Visualization
--------------------------

{{{pipeline_visualization}}}

-- Nicknames
-------------
{{#each stream_names}}
-- {{{this}}}
{{/each}}

---------------------------------------------------------------

{{{data_types}}}

---------------------------------------------------------------

type QMemSize = {{queue_size}}

type QData = Event
type QMem = Vec QMemSize QData
type QCursor = Int
type QPush = Bool
type QPop = Bool
type QPushValid = Bool
type QPopValid = Bool

type QState = (QMem, QCursor)
type QInput = (QPush, QPop, QData)
type QOutput = (QPushValid, QPopValid, QData)

queue :: HiddenClockResetEnable dom 
    => Signal dom QInput 
    -> Signal dom QOutput
queue input = output
    where 
        output = bundle (pushValid, popValid, outData)
        state = bundle (buffer, cursor)
        buffer = register (repeat nullEvent :: QMem) nextBufferSignal
        cursor = register 0 nextCursorSignal
        pushValid = register False nextPushValidSignal
        popValid = register False nextPopValidSignal
        outData = register nullEvent nextOutDataSignal

        nextBufferSignal = nextBuffer  
                            <$> buffer 
                            <*> bundle (input, cursor)
        nextCursorSignal = nextCursor 
                            <$> cursor 
                            <*> bundle (input, buffer)
        nextOutDataSignal = nextOutData 
                            <$> bundle (input, cursor, buffer)
        nextPushValidSignal = nextPushValid 
                            <$> bundle (input, cursor, buffer)
        nextPopValidSignal = nextPopValid <$> bundle (input, cursor)
        
        nextBuffer :: QMem -> (QInput, QCursor) -> QMem
        nextBuffer buf ((push, pop, qData), cur) = out
            where 
                out = case (push, pop) of
                    (True, True) -> qData +>> buf 
                    (True, False) -> if cur == length buf 
                                    then buf else qData +>> buf
                    (False, _) -> buf

        nextCursor :: QCursor -> (QInput, QMem) -> QCursor
        nextCursor cur ((push, pop, _), buf) = out
            where 
                out = case (push, pop) of
                    (True, False) -> if cur == length buf 
                                    then cur else cur + 1
                    (False, True) -> if cur == 0 then 0 else cur - 1
                    (_, _) -> cur

        nextOutData :: (QInput, QCursor, QMem) -> QData
        nextOutData ((push, pop, qData), cur, buf) = out
            where 
                out = case (push, pop) of
                    (True, True) -> if cur == 0 
                                    then qData else buf !! (cur - 1)
                    (False, True) -> if cur == 0 
                                    then nullEvent else buf !! (cur - 1)
                    (_, _) -> nullEvent

        nextPushValid :: (QInput, QCursor, QMem) -> QPush
        nextPushValid ((push, pop, _), cur, buf) = out
            where 
                out = case (push, pop) of
                    (True, True) -> True
                    (True, False) -> cur /= length buf
                    (False, _) -> False

        nextPopValid :: (QInput, QCursor) -> QPop
        nextPopValid ((push, pop, _), cur) = out
            where 
                out = case (push, pop) of
                    (True, True) -> True
                    (False, True) -> cur /= 0
                    (_, False) -> False


---------------------------------------------------------------

{{{hlc}}}

---------------------------------------------------------------

{{{llc}}}

---------------------------------------------------------------

{{#if debug}}
    {{#if has_sliding_window}}
monitor :: HiddenClockResetEnable dom 
    => {{#if has_input}}Signal dom Inputs 
    -> {{/if}}Signal dom (Outputs, (QPush, QPop, QPushValid, QPopValid, Slides, DebugEnables))
    {{else}}
monitor :: HiddenClockResetEnable dom 
    => {{#if has_input}}Signal dom Inputs 
    -> {{/if}} Signal dom (Outputs, (QPush, QPop, QPushValid, QPopValid, DebugEnables))
    {{/if}}
monitor {{#if has_input}}inputs {{/if}}= bundle (outputs, debugSignals)
{{else}}
monitor :: HiddenClockResetEnable dom 
    => {{#if has_input}}Signal dom Inputs 
    -> {{/if}}Signal dom Outputs
monitor {{#if has_input}}inputs {{/if}}= outputs
{{/if}}
    where 
        (newEvent, event) = unbundle (hlc{{#if has_input}} inputs{{/if}})

        (qPushValid, qPopValid, qPopData) = 
            unbundle (queue (bundle (qPush, qPop, qInptData)))
        qPush = newEvent
        qPop = toPop
        qInptData = event

        {{#if debug}}
        (llcOutput, llcDebug) = unbundle (llc (bundle (qPopValid, qPopData)))
        (toPop, outputs) = unbundle llcOutput

        {{#if has_sliding_window}}
        (llcSlides, debugEnables) = unbundle llcDebug
        debugSignals = bundle (qPush, qPop, qPushValid, qPopValid, llcSlides, debugEnables)
        {{else}}
        debugEnables = llcDebug
        debugSignals = bundle (qPush, qPop, qPushValid, qPopValid, debugEnables)
        {{/if}}
        {{else}}
        (toPop, outputs) = unbundle (llc (bundle (qPopValid, qPopData)))
        {{/if}}


---------------------------------------------------------------

{{#if debug}}
    {{#if has_sliding_window}}
topEntity :: Clock TestDomain 
    -> Reset TestDomain 
    -> Enable TestDomain 
    -> {{#if has_input}}Signal TestDomain Inputs 
    -> {{/if}}Signal TestDomain (Outputs, (QPush, QPop, QPushValid, QPopValid, Slides, DebugEnables))
    {{else}}
topEntity :: Clock TestDomain 
    -> Reset TestDomain 
    -> Enable TestDomain -> {{#if has_input}}Signal TestDomain Inputs 
    -> {{/if}}Signal TestDomain (Outputs, (QPush, QPop, QPushValid, QPopValid, DebugEnables))
    {{/if}}
{{else}}
topEntity :: Clock TestDomain 
    -> Reset TestDomain 
    -> Enable TestDomain 
    -> {{#if has_input}}Signal TestDomain Inputs 
    -> {{/if}}Signal TestDomain Outputs
{{/if}}
topEntity clk rst en {{#if has_input}}inputs {{/if}}= 
    exposeClockResetEnable (monitor {{#if has_input}}inputs{{/if}}) clk rst en

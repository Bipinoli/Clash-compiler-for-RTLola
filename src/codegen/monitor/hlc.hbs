{{#if has_periodic_pacing}}
systemClockPeriodNs :: Int
systemClockPeriodNs = fromInteger (snatToInteger $ clockPeriod @System)
{{/if}}


hlc :: HiddenClockResetEnable dom => Signal dom Inputs -> Signal dom (Bool, Event)
hlc inputs = out
    where 
        out = bundle (newEvent, event)
        newEvent = {{new_event_condition}}
        {{#if has_sliding_window}}
        event = bundle (inputs, slides, pacings)
        {{else}}
        event = bundle (inputs, pacings)
        {{/if}}

        {{#if has_sliding_window}}
        slides = {{bundled_slides}}
        {{/if}}
        pacings = {{bundled_pacings}}

        {{#each unbundled_inputs}}
        {{{this}}}
        {{/each}}

        {{#each pacings}}
        {{{this}}}
        {{/each}}

        {{#each slides}}
        {{{this}}}
        {{/each}}

        {{#each periods}}
        timer{{@index}}Over = timer{{@index}} .>=. period{{@index}}InNs
        timer{{@index}} = timer timer{{@index}}Over
        period{{@index}}InNs = {{this}}
        {{/each}}

{{#if has_periodic_pacing}}
        timer :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Int
        timer reset = register 0 (mux reset (pure deltaTime) nextTime)
            where 
                nextTime = timer reset + pure deltaTime
                deltaTime = systemClockPeriodNs
{{/if}}

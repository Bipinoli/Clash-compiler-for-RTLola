-- Clock domain with 2 microseconds period (500 kHz)
-- It has been arbitrarily chosen for both monitor and the verilog testbench simulation
createDomain vSystem{vName="TestDomain", vPeriod=2000} -- period in nanoseconds

{{#if has_periodic_pacing}}
systemClockPeriodNs :: Int
systemClockPeriodNs = fromInteger (snatToInteger $ clockPeriod @TestDomain)
{{/if}}


hlc :: HiddenClockResetEnable dom => {{#if has_input}}Signal dom Inputs -> {{/if}}Signal dom (Bool, Event)
hlc {{#if has_input}}inputs {{/if}}= out
    where 
        out = bundle (newEvent, event)
        newEvent = {{new_event_condition}}

        {{#if (and (not has_input) (not has_sliding_window))}}
        event = (pacings)
        {{else}}
        event = bundle ({{#if has_input}}inputs, {{/if}}{{#if has_sliding_window}}slides, {{/if}}pacings)
        {{/if}}

        {{#if has_sliding_window}}
        slides = Slides <$> {{#each slides}}s{{@index}}{{#unless @last}} <*> {{/unless}}{{/each}}
        {{/if}}
        pacings = Pacings <$> {{#each pacings}}p{{@index}}{{#unless @last}} <*> {{/unless}}{{/each}}

        {{#each inputs}}
        hasInput{{this.index}} = ((.valid). (.input{{this.index}})) <$> inputs
        {{/each}}

        {{#each pacings}}
        {{{this}}}
        {{/each}}

        {{#each slides}}
        {{{this}}}
        {{/each}}

        {{#each periods}}
        timer{{@index}}Over = timer{{@index}} .>=. period{{@index}}InNs
        timer{{@index}} = timer timer{{@index}}Over
        period{{@index}}InNs = {{this}}
        {{/each}}

{{#if has_periodic_pacing}}
        timer :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Int
        timer reset = register 0 (mux reset (pure deltaTime) nextTime)
            where 
                nextTime = timer reset + pure deltaTime
                deltaTime = systemClockPeriodNs
{{/if}}

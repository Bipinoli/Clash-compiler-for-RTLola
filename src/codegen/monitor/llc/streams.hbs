
{{#each input_streams}}
{{#if (gt this.memory 1)}}
input{{@index}}Window :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Tag -> Signal dom {{this.data_type}} -> Signal dom (Vec {{this.memory}} (Tag, {{this.data_type}}))
input{{@index}}Window en tag val = result
    where result = register (repeat (invalidTag, {{this.default_value}})) (mux en ((<<+) <$> result <*> (bundle (tag, val))) result)
{{else}}
input{{@index}}Window :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Tag -> Signal dom {{this.data_type}} -> Signal dom (Tag, {{this.data_type}})
input{{@index}}Window en tag val = result
    where result = register (invalidTag, {{this.default_value}}) (mux en (bundle (tag, val)) result)
{{/if}}


{{/each}}

{{#each output_streams}}
{{#if (gt this.memory 1) }}
outputStream{{@index}} :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Tag -> {{#each this.input_types}}Signal dom (Tag, {{this}}){{#unless @last}} -> {{/unless}}{{/each}} -> Signal dom (Vec {{this.memory}} (Tag, {{this.output_type}}))
{{else}}
outputStream{{@index}} :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Tag -> {{#each this.input_types}}Signal dom (Tag, {{this}}){{#unless @last}} -> {{/unless}}{{/each}} -> Signal dom (Tag, {{this.output_type}})
{{/if}}
outputStream{{@index}} en tag {{#each this.inputs}}{{this}}WithTag {{/each}}= result
    where
        {{#if (gt this.memory 1)}}
        result = register (repeat (invalidTag, {{this.default_value}})) (mux en next result)
        next = (<<+) <$> result <*> nextValWithTag
        {{else}}
        result = register (invalidTag, {{this.default_value}}) (mux en nextValWithTag result)
        {{/if}}
        nextValWithTag = bundle (tag, nextVal)
        nextVal = {{{this.expression}}}
        {{#each this.inputs}}
        (_, {{this}}) = unbundle {{this}}WithTag
        {{/each}}
        {{#if this.is_sliding_window_based}}
        {{#each this.sliding_window_inputs}}
        merge{{this.window_idx}} :: Vec {{this.window_size}} {{this.data_type}} -> {{this.data_type}}
        merge{{this.window_idx}} win = fold windowBucketFunc{{this.window_idx}} win
        {{/each}}
        {{/if}}


{{/each}}

{{#if has_sliding_window}}
{{#each bucket_functions}}
windowBucketFunc{{@index}} :: {{this.data_type}} -> {{this.data_type}} -> {{this.data_type}}
windowBucketFunc{{@index}} acc item = {{this.expression}}

{{/each}}
{{/if}}

{{#if has_sliding_window}}
{{#each sliding_windows}}
{{#if (gt this.memory 1)}}
slidingWindow{{@index}} :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Bool -> Signal dom (Tag, ({{this.data_type}}, Bool)) -> Signal dom (Vec {{this.memory}} (Tag, (Vec {{this.window_size}} {{this.data_type}}))) 
{{else}}
slidingWindow{{@index}} :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Bool -> Signal dom (Tag, ({{this.data_type}}, Bool)) -> Signal dom (Tag, (Vec {{this.window_size}} {{this.data_type}})) 
{{/if}}
slidingWindow{{@index}} en slide hasInputWithTag = window
    where
        {{#if (gt this.memory 1)}}
        window = register (repeat (invalidTag, dflt)) (mux en next window)
        next = (<<+) <$> next <*> bundle (tag, nextVal)
        nextVal = nextWindow <$> (snd <$> (last <$> window)) <*> slide <*> hasInput
        {{else}}
        window = register (invalidTag, dflt) (mux en next window)
        next = bundle (tag, nextWindow <$> (snd <$> window) <*> slide <*> hasInput)
        {{/if}}
        dflt = repeat {{this.default_value}} :: Vec {{this.window_size}} {{this.data_type}}
        (tag, hasInput) = unbundle hasInputWithTag

        nextWindow :: Vec {{this.window_size}} {{this.data_type}} -> Bool -> ({{this.data_type}}, Bool) -> Vec {{this.window_size}} {{this.data_type}}
        nextWindow win toSlide inpt = out
            where
                (dta, hasData) = inpt
                out = case (toSlide, hasData) of
                    (False, False) -> win
                    (False, True) -> lastBucketUpdated
                    (True, False) -> win <<+ {{this.default_value}}
                    (True, True) -> win <<+ dta
                lastBucketUpdated = replace lastIndx (windowBucketFunc{{@index}} (last win) dta) win
                lastIndx = length win - 1       


{{/each}}
{{/if}}
-- To avoid duplidate tags in a window 
-- maxTag must be at least the size of the maximum window 
-- Also to avoid having to do modulo operations 
-- maxTag must be at least as big as the largest offset
maxTag = {{max_tag}} :: Tag
invalidTag = maxTag + 1

getOffset :: KnownNat n => Vec n (Tag, a) -> Tag -> Tag -> a -> a
getOffset win tag offset dflt = out
    where 
        offsetTag = earlierTag tag offset
        out = case findIndex (\(t, _) -> t == offsetTag) win of
            Just i -> let (_, v) = win !! i in v
            Nothing -> dflt

getMatchingTag :: KnownNat n => Vec n (Tag, a) -> Tag -> a -> a
getMatchingTag win tag dflt = out
    where 
        out = case findIndex (\(t, _) -> t == tag) win of
            Just i -> let (_, v) = win !! i in v
            Nothing -> dflt

getOffsetFromNonVec :: (Tag, a) -> Tag -> Tag -> a -> a
getOffsetFromNonVec (winTag, winData) tag offset dflt = out
    where 
        offsetTag = earlierTag tag offset
        out = if offsetTag == winTag then winData else dflt

getMatchingTagFromNonVec :: (Tag, a) -> Tag -> a -> a
getMatchingTagFromNonVec (tag, dta) tagToMatch dflt = 
    if tag == tagToMatch then dta else dflt

getLatestValue :: KnownNat n => Vec (n + 1) (Tag, a) -> a -> a
getLatestValue win dflt =
    let (tag, dta) = last win
    in if tag == invalidTag then dflt else dta

getLatestValueFromNonVec :: (Tag, a) -> a -> a
getLatestValueFromNonVec (tag, dta) dflt = 
    if tag == invalidTag then dflt else dta

earlierTag :: Tag -> Tag -> Tag
earlierTag curTag cyclesBefore = 
    if curTag > cyclesBefore 
    then curTag - cyclesBefore 
    else curTag - cyclesBefore + maxTag

delayFor :: forall dom n a . 
    (HiddenClockResetEnable dom, KnownNat n, NFDataX a)
    => SNat n
    -> a
    -> Signal dom a
    -> Signal dom a
delayFor n initVal sig = last delayedVec
    where
        delayedVec :: Vec (n + 1) (Signal dom a)
        delayedVec = iterateI (delay initVal) sig
    

{{#if debug}}
    {{#if has_sliding_window}}
llc :: HiddenClockResetEnable dom 
    => Signal dom (Bool, Event) 
    -> Signal dom ((Bool, Outputs), (Slides, DebugEnables))
    {{else}}
llc :: HiddenClockResetEnable dom 
    => Signal dom (Bool, Event) 
    -> Signal dom ((Bool, Outputs), (DebugEnables))
    {{/if}}
llc event = bundle (bundle (toPop, outputs), debugSignals)
{{else}}
llc :: HiddenClockResetEnable dom 
    => Signal dom (Bool, Event) 
    -> Signal dom (Bool, Outputs)
llc event = bundle (toPop, outputs)
{{/if}}
    where 
        (isValidEvent, poppedEvent) = unbundle event

        {{#if has_pipeline_wait}}
        isPipelineReady = pipelineReady startNewPipeline
        startNewPipeline = mux (isPipelineReady .&&. isValidEvent) 
                            (pure True) (pure False)
        toPop = isPipelineReady .&&. not <$> startNewPipeline
        {{else}}
        toPop = pure True
        {{/if}}

        {{#if (and (not has_sliding_window) (not has_input))}}
        pacings = poppedEvent
        {{else}}
        ({{#if has_input}}inputs, {{/if}}{{#if has_sliding_window}}slides, {{/if}}pacings) = unbundle poppedEvent
        {{/if}}

        {{#each inputs}}
        input{{@index}} = (.input{{@index}}) <$> inputs
        {{/each}}

        {{#if has_sliding_window}}
        {{#each sliding_windows}}
        slide{{@index}} = (.slide{{@index}}) <$> slides
        {{/each}}
        {{/if}}

        {{#each inputs}}
        pIn{{@index}} = (.pacingIn{{@index}}) <$> pacings
        {{/each}}
        {{#each outputs}}
        pOut{{@index}} = (.pacingOut{{@index}}) <$> pacings
        {{/each}}
        
        {{#each tags}}
        {{{this}}}
        {{/each}}

        -- tag generation takes 1 cycle so we need to delay the input
        {{#each inputs}}
        input{{@index}}Data = delay {{this.default_value}} (((.value). (.input{{@index}})) <$> inputs)
        {{/each}}

        -- delayed tags to be used in different levels 
        tagsDefault = Tags {{#each all_tags_names}}
                nullT {{/each}}
        curTags = Tags 
                <$> {{#each all_tags_names}}{{this}}{{#unless @last}} 
                <*> {{/unless}}{{/each}}
        {{#each cur_tags_levels}}
        curTagsLevel{{this.level}} = {{this.delayed_tags}}
        {{/each}}
        nullT = invalidTag

        {{#each enables}}
        {{{this}}}
        {{/each}}

        {{#each output_phase_enables}}
        {{{this}}}
        {{/each}}

        -- Evaluation of input windows: level 0
        {{#each inputs}}
        input{{@index}}Win = input{{@index}}Window enIn{{@index}} tIn{{@index}} input{{@index}}Data
        {{/each}}

        {{#each outputs}}
        -- Evaluation of output {{@index}}: level {{this.level}}
        {{#if (gt this.level 0)}}
        out{{this.idx}} = outputStream{{this.idx}} enOut{{this.idx}} 
            ((.output{{this.idx}}) <$> curTagsLevel{{this.level}}) {{#each this.deps}}
            out{{../idx}}Data{{@index}} {{/each}}
        {{else}}
        out{{this.idx}} = outputStream{{this.idx}} enOut{{this.idx}} 
            tOut{{this.idx}} {{#each this.deps}}
            out{{../idx}}Data{{@index}} {{/each}}
        {{/if}}

        {{~#each this.deps}}
        {{#replace
            (array "<default_expr>") 
            (array (eval "out{{../idx}}Data{{@index}}Dflt"))
        }}

        {{~#if this.is_sync_access}}
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getMatchingTag 
            <$> {{this.source_name}} 
            <*> {{{this.source_tag}}} 
            <*> {{{this.default_value}}}
            {{else}}
        out{{../idx}}Data{{@index}} = getMatchingTagFromNonVec 
            <$> {{this.source_name}} 
            <*> {{{this.source_tag}}} 
            <*> {{{this.default_value}}}
            {{/if}}
        {{/if}}

        {{~#if this.is_sliding_window_access}}
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getMatchingTag 
            <$> {{this.source_name}} 
            <*> {{{this.source_tag}}} 
            <*> {{{this.default_value}}}
            {{else}}
        (_, out{{../idx}}Data{{@index}}) = unbundle {{this.source_name}}
            {{/if}}
        {{/if}}

        {{~#if this.is_offset_access}} 
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getOffset         
            <$> {{this.source_name}} 
            <*> {{{this.source_tag}}} 
            <*> (pure {{this.offset}}) 
            <*> {{{this.default_value}}}
            {{else}}
        out{{../idx}}Data{{@index}} = getOffsetFromNonVec 
            <$> {{this.source_name}} 
            <*> {{{this.source_tag}}} 
            <*> (pure {{this.offset}}) 
            <*> {{{this.default_value}}}
            {{/if}}
        {{/if}}

        {{~#if this.is_hold_access}} 
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getLatestValue 
            <$> {{this.source_name}} 
            <*> {{{this.default_value}}}
            {{else}}
        out{{../idx}}Data{{@index}} = getLatestValueFromNonVec 
            <$> {{this.source_name}} 
            <*> {{{this.default_value}}}
            {{/if}}
        {{/if}}

        {{~#if has_default_expr}}
            {{#replace
                (array "<name>" "<level>") 
                (array (eval "out{{../idx}}Data{{@index}}Dflt") (eval "{{../level}}"))
            }}
                {{#each default_expr_statements}}
        {{{this}}}
                {{/each}}
            {{/replace}}
        {{/if}}

        {{~/replace}}
        {{/each}}

        {{/each}}
        {{#each sliding_windows}}
        -- Evaluation of sliding window {{@index}}: level {{this.level}}
        sw{{this.idx}} = slidingWindow{{this.idx}} enSw{{this.idx}} sld{{this.idx}} 
            {{{this.tag}}} sw{{this.idx}}Data
        {{#if this.input_memory_more_than_one}}
        sw{{this.idx}}Data = getMatchingTag 
            <$> {{this.input_data}} 
            <*> {{{this.source_tag}}} 
            <*> (pure {{this.input_data_default}})
        {{else}}
        (_, sw{{this.idx}}Data) = unbundle {{this.input_data}}
        {{/if}}

        {{/each}}
        -- Outputing all results: level {{output_level}}
        {{#each outputs}}
        output{{this.idx}} = Valid{{this.ty}} <$> output{{this.idx}}Data <*> output{{this.idx}}Aktv
        {{#if this.memory_more_than_one}}
        output{{this.idx}}Data = getMatchingTag 
            <$> out{{this.idx}} 
            <*> ((.output{{this.idx}}) 
            <$> curTagsLevel{{../output_level}}) 
            <*> (pure {{this.default_value}})
        {{else}}
        (_, output{{this.idx}}Data) = unbundle out{{this.idx}}
        {{/if}}
        {{/each}}

        outputs = Outputs 
            <$> {{#each outputs}}output{{this.idx}}{{#unless @last}} 
            <*> {{/unless}}{{/each}}

        {{#if debug}}
            {{#if has_sliding_window}}
        debugSignals = bundle (slides, debugEnables)
            {{else}}
        debugSignals = debugEnables
            {{/if}}
        debugEnables = DebugEnables <$>
                            {{#each inputs}}
                            (getPacing <$> enIn{{@index}}) <*>
                            {{/each}}
                            {{#each outputs}}
                            (getPacing <$> enOut{{@index}}){{#unless @last}} <*>{{/unless}}
                            {{/each}}
        {{/if}}

        genTag :: HiddenClockResetEnable dom 
            => Signal dom Bool 
            -> Signal dom Tag
        genTag en = t
            where 
                t = register 1 (mux en next_t t)
                next_t = mux (t .==. (pure maxTag)) (pure 1) (t + 1)


{{#if has_pipeline_wait}}
pipelineReady :: HiddenClockResetEnable dom 
    => Signal dom Bool 
    -> Signal dom Bool
pipelineReady rst = toWait .==. pure 0 
    where 
        waitTime = pure {{pipeline_wait}} :: Signal dom Int
        toWait = register (0 :: Int) next
        next = mux rst waitTime 
                (mux (toWait .>. pure 0) (toWait - 1) toWait)
{{/if}}


{{{streams}}}

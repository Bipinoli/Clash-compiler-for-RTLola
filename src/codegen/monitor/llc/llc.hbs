type Tag = Unsigned 8
-- maxTag must be at least the size of the maximum window to avoid duplicate tags in the window
-- also to avoid having to do modulo operations maxTag must be at least as big as the largest offset
maxTag = {{max_tag}} :: Tag
invalidTag = maxTag + 1

getOffset :: KnownNat n => Vec n (Tag, a) -> Tag -> Tag -> a -> (Tag, a)
getOffset win tag offset dflt = out
    where 
        offsetTag = earlierTag tag offset
        out = case findIndex (\(t, _) -> t == offsetTag) win of
            Just i -> let (_, v) = win !! i in (tag, v)
            Nothing -> (tag, dflt) 

getMatchingTag :: KnownNat n => Vec n (Tag, a) -> Tag -> a -> (Tag, a)
getMatchingTag win tag dflt = out
    where 
        out = case findIndex (\(t, _) -> t == tag) win of
            Just i -> let (_, v) = win !! i in (tag, v)
            Nothing -> (tag, dflt)

getOffsetFromNonVec :: (Tag, a) -> Tag -> Tag -> a -> (Tag, a)
getOffsetFromNonVec (winTag, winData) tag offset dflt = out
    where 
        offsetTag = earlierTag tag offset
        out = if offsetTag == winTag then (tag, winData) else (tag, dflt)

getMatchingTagFromNonVec :: (Tag, a) -> Tag -> a -> (Tag, a)
getMatchingTagFromNonVec (tag, dta) tagToMatch dflt = if tag == tagToMatch then (tag, dta) else (tagToMatch, dflt)

earlierTag :: Tag -> Tag -> Tag
earlierTag curTag cyclesBefore = if curTag > cyclesBefore then curTag - cyclesBefore else curTag - cyclesBefore + maxTag
     

{{#if debug}}
    {{#if has_sliding_window}}
llc :: HiddenClockResetEnable dom => Signal dom (Bool, Event) -> Signal dom ((Bool, Outputs), ({{pacings_type}}, {{slides_type}}))
    {{else}}
llc :: HiddenClockResetEnable dom => Signal dom (Bool, Event) -> Signal dom ((Bool, Outputs), ({{pacings_type}}))
    {{/if}}
llc event = bundle (bundle (toPop, outputs), debugSignals)
{{else}}
llc :: HiddenClockResetEnable dom => Signal dom (Bool, Event) -> Signal dom (Bool, Outputs)
llc event = bundle (toPop, outputs)
{{/if}}
    where 
        (isValidEvent, poppedEvent) = unbundle event

        {{#if has_pipeline_wait}}
        isPipelineReady = pipelineReady startNewPipeline
        startNewPipeline = mux (isPipelineReady .&&. isValidEvent) (pure True) (pure False)
        toPop = isPipelineReady .&&. not <$> startNewPipeline
        {{else}}
        toPop = pure True
        {{/if}}

        {{#if has_sliding_window}}
        (inputs, slides, pacings) = unbundle poppedEvent
        {{else}}
        (inputs, pacings) = unbundle poppedEvent
        {{/if}}
        {{#if (gt (len inputs) 1)}}
        ({{#each inputs}}input{{@index}}{{#unless @last}}, {{/unless}}{{/each}}) = unbundle inputs
        {{else}}
        input0 = inputs
        {{/if}}
        {{#each inputs}}
        (_, input{{@index}}HasData) = unbundle input{{@index}}
        {{/each}}
        {{#if has_sliding_window}}
            {{#if (gt (len sliding_windows) 1)}}
        ({{#each sliding_windows}}slide{{@index}}{{#unless @last}}, {{/unless}}{{/each}}) = unbundle slides
            {{else}}
        slide0 = slides
            {{/if}}
        {{/if}}
        {{#if (gt (len outputs) 1)}}
        ({{#each outputs}}p{{@index}}{{#unless @last}}, {{/unless}}{{/each}}) = unbundle pacings
        {{else}}
        p0 = pacings
        {{/if}}

        {{#each tags}}
        {{{this}}}
        {{/each}}

        -- tag generation takes 1 cycle so we need to delay the input data
        {{#each inputs}}
        (input{{@index}}Data, _) = unbundle (delay ({{this.default_value}}, False) input{{@index}})
        {{/each}}

        -- delayed tags to be used in different levels 
        tagsDefault = {{all_tags_defaults}}
        curTags = {{all_tags_names}}
        {{#each cur_tags_levels}}
        curTagsLevel{{this.level}} = {{this.delayed_tags}}
        {{/each}}

        {{#each enables}}
        {{{this}}}
        {{/each}}

        {{#each output_phase_enables}}
        {{{this}}}
        {{/each}}

        -- Evaluation of input windows: level 0
        {{#each inputs}}
        input{{@index}}Win = input{{@index}}Window enIn{{@index}} tagIn{{@index}} input{{@index}}Data
        {{/each}}

        {{#each outputs}}
        -- Evaluation of output {{@index}}: level {{this.level}}
        {{#if (gt this.level 0)}}
        {{{this.extracted_tags_of_depending}}}
        out{{this.idx}} = outputStream{{this.idx}} enOut{{this.idx}} out{{this.idx}}Level{{this.level}}TagOut{{this.idx}} {{#each this.deps}}out{{../idx}}Data{{@index}} {{/each}}
        {{else}}
        out{{this.idx}} = outputStream{{this.idx}} enOut{{this.idx}} tagOut{{this.idx}} {{#each this.deps}}out{{../idx}}Data{{@index}} {{/each}}
        {{/if}}

        {{~#each this.deps}}
        {{#replace
            (array "_default_expr_") 
            (array (eval "out{{../idx}}Data{{@index}}Dflt"))
        }}

        {{~#if this.is_sync_access}}
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getMatchingTag <$> {{this.source_name}} <*> {{{this.source_tag}}} <*> {{this.default_value}}
            {{else}}
        out{{../idx}}Data{{@index}} = getMatchingTagFromNonVec <$> {{this.source_name}} <*> {{{this.source_tag}}} <*> {{this.default_value}}
            {{/if}}
        {{/if}}

        {{~#if this.is_sliding_window_access}}
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getMatchingTag <$> {{this.source_name}} <*> {{{this.source_tag}}} <*> {{this.default_value}}
            {{else}}
        out{{../idx}}Data{{@index}} = {{this.source_name}}
            {{/if}}
        {{/if}}

        {{~#if this.is_offset_access}} 
            {{#if this.memory_more_than_one}}
        out{{../idx}}Data{{@index}} = getOffset <$> {{this.source_name}} <*> {{{this.source_tag}}} <*> (pure {{this.offset}}) <*> {{this.default_value}}
            {{else}}
        out{{../idx}}Data{{@index}} = getOffsetFromNonVec <$> {{this.source_name}} <*> {{{this.source_tag}}} <*> (pure {{this.offset}}) <*> {{this.default_value}}
            {{/if}}
        {{/if}}

        {{~#if has_default_expr}}
            {{#replace
                (array "_name_" "_tagprefix_") 
                (array (eval "out{{../idx}}Data{{@index}}Dflt") (eval "out{{../idx}}Level{{../level}}Tag"))
            }}
                {{#each default_expr_statements}}
        {{{this}}}
                {{/each}}
            {{/replace}}
        {{/if}}

        {{~/replace}}
        {{/each}}

        {{/each}}
        {{#each sliding_windows}}
        -- Evaluation of sliding window {{@index}}: level {{this.level}}
        {{#if (gt this.level 0)}}
        {{{this.extracted_tags_of_depending}}}
        {{/if}}
        sw{{this.idx}} = slidingWindow{{this.idx}} enSw{{this.idx}} sld{{this.idx}} (bundle ({{this.tag}}, sw{{this.idx}}Data))
        sw{{this.idx}}Data = bundle (sw{{this.idx}}DataVal, sw{{this.idx}}DataPacing)
        {{#if this.input_memory_more_than_one}}
        (_, sw{{this.idx}}DataVal) = unbundle (getMatchingTag <$> {{this.input_data}} <*> {{{this.source_tag}}} <*> (pure {{this.input_data_default}}))
        {{else}}
        (_, sw{{this.idx}}DataVal) = unbundle {{this.input_data}}
        {{/if}}

        {{/each}}
        -- Outputing all results: level {{output_level}}
        {{{extracted_tags_for_outputs}}}
        {{#each outputs}}
        output{{this.idx}} = bundle (output{{this.idx}}Data, output{{this.idx}}Aktv)
        {{#if this.memory_more_than_one}}
        (_, output{{this.idx}}Data) = unbundle (getMatchingTag <$> out{{this.idx}} <*> level{{../output_level}}TagOut{{@index}} <*> (pure {{this.default_value}}))
        {{else}}
        (_, output{{this.idx}}Data) = unbundle out{{this.idx}}
        {{/if}}
        {{/each}}

        {{#if (gt (len outputs) 1)}}
        outputs = bundle ({{#each outputs}}output{{this.idx}}{{#unless @last}}, {{/unless}}{{/each}})
        {{else}}
        outputs = output0
        {{/if}}

        {{#if debug}}
            {{#if has_sliding_window}}
        debugSignals = bundle (pacings, slides)
            {{else}}
        debugSignals = pacings
            {{/if}}
        {{/if}}

        genTag :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Tag
        genTag en = t
            where 
                t = register 1 (mux en next_t t)
                next_t = mux (t .==. (pure maxTag)) (pure 1) (t + 1)


{{#if has_pipeline_wait}}
pipelineReady :: HiddenClockResetEnable dom => Signal dom Bool -> Signal dom Bool
pipelineReady rst = toWait .==. pure 0 
    where 
        waitTime = pure {{pipeline_wait}} :: Signal dom Int
        toWait = register (0 :: Int) next
        next = mux rst waitTime (mux (toWait .>. pure 0) (toWait - 1) toWait)
{{/if}}


{{{streams}}}
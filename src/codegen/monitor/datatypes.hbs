{{#each all_unique_types}}
data Valid{{this}} = Valid{{this}} {
    value :: {{this}},
    valid :: Bool
} deriving (Generic, NFDataX)

{{/each}}

{{#if (gt (len inputs) 1)}}
data Inputs = Inputs {
    {{#each inputs}}
    input{{this.index}} :: Valid{{this.ty}}{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{else}}
    {{#if (eq (len inputs) 1)}}
-- using newtype to avoid flattening of data
-- https://clash-lang.discourse.group/t/how-to-avoid-flattening-of-fields-in-record/79/5
newtype Inputs = Inputs {
    {{#each inputs}}
    input0 :: Valid{{this.ty}}
    {{/each}}
} deriving (Generic, NFDataX)
    {{/if}}
{{/if}}

{{#if (gt (len outputs) 1)}}
data Outputs = Outputs {
    {{#each outputs}}
    output{{this.index}} :: Valid{{this.ty}}{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{else}}
-- using newtype to avoid flattening of data
-- https://clash-lang.discourse.group/t/how-to-avoid-flattening-of-fields-in-record/79/5
newtype Outputs = Outputs {
    {{#each outputs}}
    output{{this.index}} :: Valid{{this.ty}}
    {{/each}}
} deriving (Generic, NFDataX)
{{/if}}

{{#if (gt (len outputs) 1)}}
data Pacings = Pacings {
    {{#each outputs}}
    pacing{{this.index}} :: Bool{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{else}}
-- using newtype to avoid flattening of data
-- https://clash-lang.discourse.group/t/how-to-avoid-flattening-of-fields-in-record/79/5
newtype Pacings = Pacings {
    {{#each outputs}}
    pacing{{this.index}} :: Bool
    {{/each}}
} deriving (Generic, NFDataX)
{{/if}}

{{#if has_sliding_window}}
{{#if (gt (len sliding_windows) 1)}}
data Slides = Slides {
    {{#each sliding_windows}}
    slide{{this.index}} :: Bool{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{else}}
-- using newtype to avoid flattening of data
-- https://clash-lang.discourse.group/t/how-to-avoid-flattening-of-fields-in-record/79/5
newtype Slides = Slides {
    slide0 :: Bool
} deriving (Generic, NFDataX)
{{/if}}
{{/if}}

type Tag = Unsigned 8

{{#if (gt (len all_streams) 1)}}
data Tags = Tags {
    {{#each all_streams}}
    {{this.stream_type}}{{this.index}} :: Tag{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{else}}
newtype Tags = Tags {
    {{#each all_streams}}
    {{this.stream_type}}{{this.index}} :: Tag{{#unless @last}},{{/unless}}
    {{/each}}
} deriving (Generic, NFDataX)
{{/if}}

{{#if has_sliding_window}}
type Event = (Inputs, Slides, Pacings)
{{else}}
type Event = (Inputs, Pacings)
{{/if}}

nullEvent :: Event
{{#if has_sliding_window}}
nullEvent = (nullInputs, nullSlides, nullPacings)
nullSlides = Slides {{#each sliding_windows}}False {{/each}}
{{else}}
nullEvent = (nullInputs, nullPacings)
{{/if}}
nullInputs = Inputs {{#each inputs}}(Valid{{this.ty}} {{this.default}} False) {{/each}}
nullPacings = Pacings {{#each outputs}}False {{/each}}
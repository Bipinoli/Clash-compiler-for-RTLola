/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] input0_0
    , input wire  input0_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire  result_1_0
    , output wire  result_1_1
    );
  wire [457:0] result_2;
  reg  c$app_arg = 1'b0;
  // pipeline1.hs:208:1-96
  reg signed [63:0] out = (64'sd0);
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  // pipeline1.hs:127:1-107
  reg  aktvOutF = 1'b0;
  // pipeline1.hs:204:1-96
  reg signed [63:0] out_0 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  // pipeline1.hs:127:1-107
  reg  pacingF = 1'b0;
  // pipeline1.hs:200:1-96
  reg signed [63:0] out_1 = (64'sd0);
  wire signed [63:0] result_5;
  wire signed [63:0] x_1;
  // pipeline1.hs:127:1-107
  reg  pacingE = 1'b0;
  // pipeline1.hs:196:1-96
  reg signed [63:0] out_2 = (64'sd0);
  wire signed [63:0] result_6;
  wire signed [63:0] x_2;
  // pipeline1.hs:188:1-96
  reg signed [63:0] out_3 = (64'sd0);
  wire signed [63:0] result_7;
  wire signed [63:0] x_3;
  // pipeline1.hs:184:1-116
  reg signed [63:0] out_4 = (64'sd0);
  wire signed [63:0] result_8;
  wire signed [63:0] x_4;
  wire signed [63:0] y;
  // pipeline1.hs:192:1-96
  reg signed [63:0] out_5 = (64'sd0);
  wire signed [63:0] result_9;
  wire signed [63:0] x_5;
  // pipeline1.hs:127:1-107
  reg  pacingC = 1'b0;
  // pipeline1.hs:127:1-107
  reg  pacingB = 1'b0;
  // pipeline1.hs:127:1-107
  wire  pacings;
  // pipeline1.hs:176:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_10;
  wire signed [63:0] result_11;
  // pipeline1.hs:176:1-81
  wire  b;
  wire signed [63:0] result_12;
  wire signed [63:0] x_6;
  wire  result_13;
  // pipeline1.hs:127:1-107
  wire  b_0;
  wire [67:0] result_14;
  reg [65:0] c$app_arg_0 = {{64'sd0,   1'b0},   1'b0};
  wire [65:0] c$case_alt;
  reg [65:0] c$case_alt_0;
  wire [65:0] c$case_alt_1;
  reg  c$app_arg_1 = 1'b0;
  wire  c$case_alt_2;
  reg  c$case_alt_3;
  reg  c$app_arg_2 = 1'b0;
  wire  c$case_alt_4;
  // pipeline1.hs:41:1-78
  reg [1319:0] buffer = {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                              1'b0},
 {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
  // pipeline1.hs:41:1-78
  wire [1319:0] c$buffer_case_alt;
  // pipeline1.hs:41:1-78
  wire [1319:0] c$buffer_case_alt_0;
  // pipeline1.hs:41:1-78
  wire [65:0] qData;
  // pipeline1.hs:41:1-78
  reg signed [63:0] cursor = (64'sd0);
  // pipeline1.hs:41:1-78
  wire signed [63:0] c$cursor_case_alt;
  // pipeline1.hs:41:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // pipeline1.hs:41:1-78
  reg signed [63:0] c$cursor_case_alt_1;
  // pipeline1.hs:41:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // pipeline1.hs:41:1-78
  wire  c$cursor_case_scrut;
  // pipeline1.hs:41:1-78
  wire signed [63:0] x_7;
  // pipeline1.hs:41:1-78
  wire signed [63:0] c$cursor_case_alt_3;
  // pipeline1.hs:41:1-78
  wire  pop;
  // pipeline1.hs:41:1-78
  reg signed [63:0] c$cursor_case_alt_4;
  // pipeline1.hs:41:1-78
  wire signed [63:0] c$cursor_case_alt_5;
  // pipeline1.hs:103:1-96
  wire  newX;
  wire [64:0] input0;
  wire [1385:0] c$buffer_case_alt_sel_alt_t_1;
  wire signed [63:0] c$tte_rhs;
  wire [456:0] result;
  wire [454:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [1:0] result_1;

  assign input0 = {input0_0,   input0_1};

  assign result_2 = {{result_10 & (~ result_13),
                      {{out_4,   pacingB},   {out_3,   pacingC},
                       {out_5,   pacingE},   {out_2,   pacingE},
                       {out_1,   pacingF},   {out_0,   aktvOutF},
                       {out,   c$app_arg}}},   {result_10,
                                                result_13}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= aktvOutF;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_register
    if ( rst) begin
      out <= (64'sd0);
    end else if (en) begin
      out <= result_3;
    end
  end
  // register end

  assign result_3 = aktvOutF ? ((x + 64'sd1)) : out;

  assign x = out_0;

  // delay begin
  always @(posedge clk) begin : aktvOutF_delay
    if (en) begin
      aktvOutF <= pacingF;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_0_register
    if ( rst) begin
      out_0 <= (64'sd0);
    end else if (en) begin
      out_0 <= result_4;
    end
  end
  // register end

  assign result_4 = pacingF ? ((x_0 + 64'sd1)) : out_0;

  assign x_0 = out_1;

  // delay begin
  always @(posedge clk) begin : pacingF_delay
    if (en) begin
      pacingF <= pacingE;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_1_register
    if ( rst) begin
      out_1 <= (64'sd0);
    end else if (en) begin
      out_1 <= result_5;
    end
  end
  // register end

  assign result_5 = pacingE ? ((x_1 + 64'sd1)) : out_1;

  assign x_1 = out_2;

  // delay begin
  always @(posedge clk) begin : pacingE_delay
    if (en) begin
      pacingE <= pacingC;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_2_register
    if ( rst) begin
      out_2 <= (64'sd0);
    end else if (en) begin
      out_2 <= result_6;
    end
  end
  // register end

  assign result_6 = pacingC ? ((x_2 + 64'sd1)) : out_2;

  assign x_2 = out_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_3_register
    if ( rst) begin
      out_3 <= (64'sd0);
    end else if (en) begin
      out_3 <= result_7;
    end
  end
  // register end

  assign result_7 = pacingB ? ((x_3 + 64'sd1)) : out_3;

  assign x_3 = out_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_4_register
    if ( rst) begin
      out_4 <= (64'sd0);
    end else if (en) begin
      out_4 <= result_8;
    end
  end
  // register end

  assign result_8 = pacings ? ((x_4 + y)) : out_4;

  assign x_4 = $signed(result_14[65:2]);

  assign y = out_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : out_5_register
    if ( rst) begin
      out_5 <= (64'sd0);
    end else if (en) begin
      out_5 <= result_9;
    end
  end
  // register end

  assign result_9 = pacingC ? ((x_5 + 64'sd1)) : out_5;

  assign x_5 = out_3;

  // delay begin
  always @(posedge clk) begin : pacingC_delay
    if (en) begin
      pacingC <= pacingB;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : pacingB_delay
    if (en) begin
      pacingB <= pacings;
    end
  end
  // delay end

  assign pacings = result_14[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_11;
    end
  end
  // register end

  assign result_10 = toWait == (64'sd0);

  assign result_11 = result_13 ? (64'sd2) : result_12;

  assign b = toWait > (64'sd0);

  assign result_12 = b ? ((x_6 - 64'sd1)) : toWait;

  assign x_6 = toWait;

  assign result_13 = b_0 ? 1'b1 : 1'b0;

  assign b_0 = result_10 & result_14[66:66];

  assign result_14 = {c$app_arg_2,   c$app_arg_1,
                      c$app_arg_0};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_0_register
    if ( rst) begin
      c$app_arg_0 <= {{64'sd0,   1'b0},   1'b0};
    end else if (en) begin
      c$app_arg_0 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = pop ? c$case_alt_0 : {{64'sd0,
                                             1'b0},   1'b0};

  always @(*) begin
    case(x_7)
      64'sd0 : c$case_alt_0 = {{64'sd0,   1'b0},
                               1'b0};
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  // index begin
  wire [65:0] vecArray [0:20-1];
  genvar i;
  generate
  for (i=0; i < 20; i=i+1) begin : mk_array
    assign vecArray[(20-1)-i] = buffer[i*66+:66];
  end
  endgenerate
  assign c$case_alt_1 = vecArray[c$cursor_case_alt_5];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_1_register
    if ( rst) begin
      c$app_arg_1 <= 1'b0;
    end else if (en) begin
      c$app_arg_1 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = pop ? c$case_alt_3 : 1'b0;

  always @(*) begin
    case(x_7)
      64'sd0 : c$case_alt_3 = 1'b0;
      default : c$case_alt_3 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_2_register
    if ( rst) begin
      c$app_arg_2 <= 1'b0;
    end else if (en) begin
      c$app_arg_2 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = newX ? c$cursor_case_scrut : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},
                                                                1'b0},
   {{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = newX ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_1[1385:66] : buffer;

  assign qData = {input0,   newX};

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = newX ? c$cursor_case_alt_0 : c$cursor_case_alt_3;

  assign c$cursor_case_alt_0 = pop ? c$cursor_case_alt_1 : c$cursor_case_alt_2;

  always @(*) begin
    case(x_7)
      64'sd0 : c$cursor_case_alt_1 = 64'sd1;
      default : c$cursor_case_alt_1 = cursor;
    endcase
  end

  assign c$cursor_case_alt_2 = c$cursor_case_scrut ? ((x_7 + 64'sd1)) : cursor;

  assign c$tte_rhs = (x_7 != 64'sd20) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs[0];

  assign x_7 = cursor;

  assign c$cursor_case_alt_3 = pop ? c$cursor_case_alt_4 : cursor;

  assign pop = result_2[457:457];

  always @(*) begin
    case(x_7)
      64'sd0 : c$cursor_case_alt_4 = 64'sd0;
      default : c$cursor_case_alt_4 = c$cursor_case_alt_5;
    endcase
  end

  assign c$cursor_case_alt_5 = (x_7 - 64'sd1);

  assign result = {result_2[456:2],
                   result_2[1:0]};

  assign newX = input0[0:0];

  assign result_0 = result[456:2];

  assign result_1 = result[1:0];

  assign result_0_0 = result_0[454:390];

  assign result_0_1 = result_0[389:325];

  assign result_0_2 = result_0[324:260];

  assign result_0_3 = result_0[259:195];

  assign result_0_4 = result_0[194:130];

  assign result_0_5 = result_0[129:65];

  assign result_0_6 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_1_0 = result_1[1:1];

  assign result_1_1 = result_1[0:0];


endmodule


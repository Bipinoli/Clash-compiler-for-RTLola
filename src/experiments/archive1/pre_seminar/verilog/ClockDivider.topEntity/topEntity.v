/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  eta // clock
    , input  eta1 // reset
    , input  eta2 // enable

      // Outputs
    , output wire  result_0
    , output wire  result_1
    );
  // clock_divider/clock_divider.hs:8:1-73
  wire  b;
  wire  result_4;
  // clock_divider/clock_divider.hs:15:5-74
  wire  b_0;
  // clock_divider/clock_divider.hs:15:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_5;
  reg signed [63:0] result_6 = 64'sd0;
  reg  result_7 = 1'b0;
  // clock_divider/clock_divider.hs:8:1-73
  wire  b_1;
  wire  result_8;
  // clock_divider/clock_divider.hs:15:5-74
  wire  b_2;
  // clock_divider/clock_divider.hs:15:5-74
  wire signed [63:0] t_0;
  wire signed [63:0] result_9;
  reg signed [63:0] result_10 = 64'sd0;
  reg  result_11 = 1'b0;
  wire [1:0] result;

  assign b = result_6 < 64'sd1;

  assign result_4 = b ? 1'b1 : 1'b0;

  assign b_0 = result_6 < 64'sd1;

  assign t = result_6 + 64'sd1;

  assign result_5 = b_0 ? t : 64'sd0;

  // register begin
  always @(posedge eta or  posedge  eta1) begin : result_6_register
    if ( eta1) begin
      result_6 <= 64'sd0;
    end else if (eta2) begin
      result_6 <= result_5;
    end
  end
  // register end

  // register begin
  always @(posedge eta or  posedge  eta1) begin : result_7_register
    if ( eta1) begin
      result_7 <= 1'b0;
    end else if (eta2) begin
      result_7 <= result_4;
    end
  end
  // register end

  assign b_1 = result_10 < 64'sd2;

  assign result_8 = b_1 ? 1'b1 : 1'b0;

  assign b_2 = result_10 < 64'sd3;

  assign t_0 = result_10 + 64'sd1;

  assign result_9 = b_2 ? t_0 : 64'sd0;

  // register begin
  always @(posedge eta or  posedge  eta1) begin : result_10_register
    if ( eta1) begin
      result_10 <= 64'sd0;
    end else if (eta2) begin
      result_10 <= result_9;
    end
  end
  // register end

  // register begin
  always @(posedge eta or  posedge  eta1) begin : result_11_register
    if ( eta1) begin
      result_11 <= 1'b0;
    end else if (eta2) begin
      result_11 <= result_8;
    end
  end
  // register end

  assign result = {result_11,   result_7};

  assign result_0 = result[1:1];

  assign result_1 = result[0:0];


endmodule


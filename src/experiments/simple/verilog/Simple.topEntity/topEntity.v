/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire [7:0] result_1_0
    , output wire  result_1_1
    );
  wire [135:0] result_2;
  // simple.hs:148:1-82
  wire  pacing1;
  // simple.hs:148:1-82
  wire  hasInput1;
  // simple.hs:148:1-82
  wire  hasInput0;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  // simple.hs:148:1-82
  wire  timer0Over;
  wire signed [63:0] result_5;
  wire signed [63:0] x_0;
  reg signed [63:0] result_6 = (64'sd0);
  // simple.hs:148:1-82
  wire  timer1Over;
  wire signed [63:0] result_7;
  wire signed [63:0] x_1;
  reg signed [63:0] result_8 = (64'sd0);
  // simple.hs:148:1-82
  wire  timer2Over;
  wire [204:0] result_9;
  reg  c$app_arg = 1'b0;
  wire [71:0] result_10;
  // simple.hs:327:1-178
  reg [71:0] result_11 = {8'd9,   64'sd0};
  // simple.hs:327:1-178
  wire [71:0] t;
  wire signed [63:0] ds1;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  wire signed [63:0] ds1_0;
  wire signed [63:0] x_3;
  wire signed [63:0] y_0;
  // simple.hs:350:1-148
  wire signed [63:0] y_1;
  // simple.hs:350:1-148
  wire signed [63:0] dta;
  // simple.hs:350:1-148
  wire signed [63:0] x1;
  // simple.hs:350:1-148
  wire [255:0] win;
  // simple.hs:350:1-148
  reg [263:0] window = {8'd9,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [263:0] result_12;
  // simple.hs:350:1-148
  wire [263:0] t_0;
  wire [255:0] result_13;
  // simple.hs:350:1-148
  wire [255:0] c$t_case_alt;
  // simple.hs:350:1-148
  wire [255:0] c$t_case_alt_0;
  // simple.hs:350:1-148
  wire [255:0] c$t_case_alt_1;
  // simple.hs:201:1-70
  wire [147:0] c$ws_app_arg;
  // simple.hs:201:1-70
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_14;
  // simple.hs:201:1-70
  wire [0:0] i;
  // simple.hs:201:1-70
  wire [5:0] ws;
  // simple.hs:201:1-70
  wire [224:0] c$ws_app_arg_1;
  // simple.hs:201:1-70
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_15;
  // simple.hs:201:1-70
  wire [1:0] i_0;
  // simple.hs:201:1-70
  wire [11:0] ws_0;
  // simple.hs:201:1-70
  wire [403:0] c$ws_app_arg_3;
  // simple.hs:201:1-70
  wire [3:0] c$ws_app_arg_4;
  wire [199:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire [199:0] result_16;
  // simple.hs:201:1-70
  wire [0:0] i_1;
  // simple.hs:201:1-70
  wire [5:0] ws_1;
  // simple.hs:370:1-156
  wire [399:0] c$window_app_arg;
  // simple.hs:370:1-156
  wire [399:0] next;
  wire [191:0] result_17;
  // simple.hs:370:1-156
  wire [191:0] c$next_case_alt;
  // simple.hs:370:1-156
  wire [191:0] c$next_case_alt_0;
  // simple.hs:370:1-156
  wire [191:0] c$next_case_alt_1;
  // simple.hs:370:1-156
  wire signed [63:0] y_2;
  // simple.hs:370:1-156
  wire signed [63:0] dta_0;
  // simple.hs:370:1-156
  wire signed [63:0] x1_0;
  // simple.hs:370:1-156
  wire [191:0] win_0;
  // simple.hs:370:1-156
  reg [399:0] window_0 = {{8'd9,   {64'sd0,   64'sd0,   64'sd0}},   {8'd9,   {64'sd0,   64'sd0,
                                                     64'sd0}}};
  reg  c$app_arg_0 = 1'b0;
  reg  c$app_arg_1 = 1'b0;
  reg  c$app_arg_2 = 1'b0;
  reg  c$app_arg_3 = 1'b0;
  reg  c$app_arg_4 = 1'b0;
  reg  c$app_arg_5 = 1'b0;
  reg  c$app_arg_6 = 1'b0;
  // simple.hs:201:1-70
  wire [147:0] c$ws_app_arg_5;
  // simple.hs:201:1-70
  wire [3:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire [71:0] result_18;
  // simple.hs:201:1-70
  wire [0:0] i_2;
  // simple.hs:201:1-70
  wire [5:0] ws_2;
  reg  c$app_arg_7 = 1'b0;
  reg  c$app_arg_8 = 1'b0;
  reg  c$app_arg_9 = 1'b0;
  reg  c$app_arg_10 = 1'b0;
  // simple.hs:201:1-70
  wire [224:0] c$ws_app_arg_7;
  // simple.hs:201:1-70
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire [71:0] result_19;
  // simple.hs:201:1-70
  wire [1:0] i_3;
  // simple.hs:201:1-70
  wire [11:0] ws_3;
  // simple.hs:209:1-106
  reg [7:0] outputPhaseTag = 8'd9;
  // simple.hs:201:1-70
  wire [224:0] c$ws_app_arg_9;
  // simple.hs:201:1-70
  wire [8:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire [71:0] result_20;
  // simple.hs:201:1-70
  wire [1:0] i_4;
  // simple.hs:201:1-70
  wire [11:0] ws_4;
  // simple.hs:305:1-145
  wire [215:0] c$result_app_arg;
  // simple.hs:305:1-145
  reg [215:0] result_21 = {{8'd9,   64'sd0},   {8'd9,   64'sd0},   {8'd9,   64'sd0}};
  // simple.hs:305:1-145
  wire [215:0] next_0;
  wire signed [63:0] x_4;
  wire signed [63:0] y_3;
  wire [71:0] result_22;
  wire [71:0] c$case_scrut_11;
  // simple.hs:193:1-72
  wire [0:0] i_5;
  wire [1:0] c$case_scrut_12;
  // simple.hs:193:1-72
  wire [5:0] ws_5;
  // simple.hs:193:1-72
  wire [3:0] c$ws_app_arg_11;
  // simple.hs:193:1-72
  wire [7:0] offsetTag;
  // simple.hs:193:1-72
  wire [147:0] c$ws_app_arg_12;
  // simple.hs:193:1-72
  wire [7:0] c$offsetTag_app_arg;
  // simple.hs:316:1-145
  wire [143:0] c$result_app_arg_0;
  // simple.hs:316:1-145
  reg [143:0] result_23 = {{8'd9,   64'sd0},   {8'd9,   64'sd0}};
  // simple.hs:316:1-145
  wire [143:0] next_1;
  wire signed [63:0] x_5;
  wire signed [63:0] y_4;
  wire [71:0] result_24;
  wire [71:0] c$case_scrut_13;
  // simple.hs:193:1-72
  wire [0:0] i_6;
  wire [1:0] c$case_scrut_14;
  // simple.hs:193:1-72
  wire [5:0] ws_6;
  // simple.hs:193:1-72
  wire [3:0] c$ws_app_arg_13;
  // simple.hs:193:1-72
  wire [7:0] offsetTag_0;
  // simple.hs:193:1-72
  wire [147:0] c$ws_app_arg_14;
  // simple.hs:193:1-72
  wire [7:0] c$offsetTag_app_arg_0;
  // simple.hs:294:1-119
  reg [143:0] result_25 = {{8'd9,   64'sd0},   {8'd9,   64'sd0}};
  // simple.hs:294:1-119
  wire [143:0] t_1;
  wire [143:0] result_26;
  // simple.hs:209:1-106
  reg  c$out1_app_arg = 1'b0;
  // simple.hs:209:1-106
  reg [7:0] c$outputPhaseTag_app_arg = 8'd9;
  // simple.hs:209:1-106
  reg [7:0] c$out2Tag_app_arg = 8'd9;
  // simple.hs:209:1-106
  reg [7:0] c$sw0Tag_app_arg = 8'd9;
  // simple.hs:299:1-111
  reg [71:0] result_27 = {8'd9,   64'sd0};
  // simple.hs:299:1-111
  wire [71:0] c$result_app_arg_1;
  // simple.hs:209:1-106
  wire  input1HasData;
  wire [7:0] result_28;
  // simple.hs:209:1-106
  wire  b;
  // simple.hs:209:1-106
  wire [7:0] f1;
  // simple.hs:209:1-106
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_29;
  // simple.hs:209:1-106
  wire  b_0;
  // simple.hs:209:1-106
  wire  p0;
  // simple.hs:209:1-106
  wire  p3;
  // simple.hs:209:1-106
  wire  p2;
  wire [136:0] result_30;
  reg [134:0] c$app_arg_11 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                              1'b0}};
  wire [134:0] c$case_alt;
  reg [134:0] c$case_alt_0;
  wire [134:0] c$case_alt_1;
  reg  c$app_arg_12 = 1'b0;
  wire  c$case_alt_2;
  reg  c$case_alt_3;
  reg  c$app_arg_13 = 1'b0;
  wire  c$case_alt_4;
  // simple.hs:86:1-78
  reg [269:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0}}};
  // simple.hs:86:1-78
  wire [269:0] c$buffer_case_alt;
  // simple.hs:86:1-78
  wire [269:0] c$buffer_case_alt_0;
  // simple.hs:86:1-78
  wire [134:0] qData;
  // simple.hs:86:1-78
  reg signed [63:0] cursor = (64'sd0);
  // simple.hs:86:1-78
  wire signed [63:0] c$cursor_case_alt;
  // simple.hs:86:1-78
  wire  push;
  // simple.hs:86:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // simple.hs:86:1-78
  reg signed [63:0] c$cursor_case_alt_1;
  // simple.hs:86:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // simple.hs:86:1-78
  wire  c$cursor_case_scrut;
  // simple.hs:86:1-78
  wire signed [63:0] x_6;
  // simple.hs:86:1-78
  wire signed [63:0] c$cursor_case_alt_3;
  // simple.hs:86:1-78
  wire  pop;
  // simple.hs:86:1-78
  reg signed [63:0] c$cursor_case_alt_4;
  // simple.hs:86:1-78
  wire signed [63:0] c$cursor_case_alt_5;
  wire [129:0] inputs;
  wire signed [63:0] x_projection_9;
  wire signed [63:0] x1_projection;
  wire [319:0] c$t_case_alt_sel_alt_f_0;
  wire [3:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [599:0] next_projection;
  wire [255:0] c$next_case_alt_sel_alt_f_0;
  wire signed [63:0] x1_projection_0;
  wire [199:0] win_projection_0;
  wire [3:0] c$vec2_2;
  wire [8:0] c$vec2_3;
  wire [8:0] c$vec2_4;
  wire [287:0] next_projection_0;
  wire [3:0] c$vec2_5;
  wire [215:0] next_projection_1;
  wire [3:0] c$vec2_6;
  wire [215:0] t_projection_7;
  wire [404:0] c$buffer_case_alt_sel_alt_t_1;
  wire signed [63:0] c$tte_rhs;
  wire [203:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [8:0] result_1;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {timer2Over | (timer1Over | (pacing1 | (pacing1 | timer0Over))),
                     {inputs,   {timer2Over,   timer1Over},
                      {pacing1,   pacing1,   timer0Over}}};

  assign pacing1 = hasInput0 & hasInput1;

  assign hasInput1 = inputs[0:0];

  assign hasInput0 = inputs[65:65];

  assign result_3 = timer0Over ? (64'sd10000) : ((x + 64'sd10000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign timer0Over = result_4 >= (64'sd1000000);

  assign result_5 = timer1Over ? (64'sd10000) : ((x_0 + 64'sd10000));

  assign x_0 = result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= (64'sd0);
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign timer1Over = result_6 >= (64'sd2000000);

  assign result_7 = timer2Over ? (64'sd10000) : ((x_1 + 64'sd10000));

  assign x_1 = result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= (64'sd0);
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign timer2Over = result_8 >= (64'sd3000000);

  assign result_9 = {{1'b1,
                      {{$signed(result_19[63:0]),   c$app_arg_7},
                       {$signed(result_18[63:0]),   c$app_arg_4},
                       {$signed(result_11[63:0]),   c$app_arg}}},
                     {t_2,   1'b1}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$app_arg_1;
    end
  end
  // delay end

  assign result_10 = c$app_arg_1 ? t : result_11;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_11_register
    if ( rst) begin
      result_11 <= {8'd9,   64'sd0};
    end else if (en) begin
      result_11 <= result_10;
    end
  end
  // register end

  assign t = {result_16[199:192],   (x_3 + y_0)};

  wire [255:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  assign ds1 = acc_2_0;

  assign vec = window[255:0];

  assign acc_1 = $signed(vec[255:192]);

  assign acc_2 = $signed(vec[191:128]);

  assign acc_3 = $signed(vec[127:64]);

  assign acc_4 = $signed(vec[63:0]);

  wire signed [63:0] x_8;
  wire signed [63:0] y_5;
  wire signed [63:0] c$case_alt_5;
  assign acc_1_0 = c$case_alt_5;

  assign x_8 = acc_1;

  assign y_5 = acc_2;

  assign c$case_alt_5 = (x_8 + y_5);



  wire signed [63:0] x_9;
  wire signed [63:0] y_6;
  wire signed [63:0] c$case_alt_6;
  assign acc_1_1 = c$case_alt_6;

  assign x_9 = acc_3;

  assign y_6 = acc_4;

  assign c$case_alt_6 = (x_9 + y_6);



  wire signed [63:0] x_10;
  wire signed [63:0] y_7;
  wire signed [63:0] c$case_alt_7;
  assign acc_2_0 = c$case_alt_7;

  assign x_10 = acc_1_0;

  assign y_7 = acc_1_1;

  assign c$case_alt_7 = (x_10 + y_7);





  assign x_2 = $signed(result_15[63:0]);

  assign y = ds1;

  wire [191:0] vec_0;
  wire signed [63:0] acc_2_0_1;
  wire signed [63:0] acc_0_3;
  wire signed [63:0] acc_0_4;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_0_5;
  assign ds1_0 = acc_2_0_1;

  assign vec_0 = result_16[191:0];

  assign acc_0_3 = $signed(vec_0[191:128]);

  assign acc_0_4 = $signed(vec_0[127:64]);

  assign acc_0_5 = $signed(vec_0[63:0]);

  wire signed [63:0] x_11;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_8;
  assign acc_1_0_0 = c$case_alt_8;

  assign x_11 = acc_0_3;

  assign y_9 = acc_0_4;

  assign c$case_alt_8 = (x_11 + y_9);



  wire signed [63:0] x_12;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_9;
  assign acc_2_0_1 = c$case_alt_9;

  assign x_12 = acc_1_0_0;

  assign y_10 = acc_0_5;

  assign c$case_alt_9 = (x_12 + y_10);





  assign x_projection_9 = (x_2 + y);

  assign x_3 = x_projection_9;

  assign y_0 = ds1_0;

  assign y_1 = dta;

  assign dta = $signed(result_14[63:0]);

  assign x1_projection = $signed(win[64-1:0]);

  assign x1 = x1_projection;

  assign win = window[255:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd9,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_12;
    end
  end
  // register end

  assign result_12 = c$app_arg_2 ? t_0 : window;

  assign t_0 = {c$out2Tag_app_arg,   result_13};

  assign result_13 = result_30[4:4] ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_f_0 = ({win,64'sd0});

  assign c$t_case_alt = c$app_arg_6 ? ({256 {1'bx}}) : c$t_case_alt_sel_alt_f_0[255:0];

  assign c$t_case_alt_0 = c$app_arg_6 ? c$t_case_alt_1 : win;

  // vector replace begin
  genvar i_7;
  generate
  for (i_7=0;i_7<4;i_7=i_7+1) begin : vector_replace
    assign c$t_case_alt_1[(3-i_7)*64+:64] = (64'sd3) == i_7 ? ((x1 + y_1)) : win[(3-i_7)*64+:64];
  end
  endgenerate
  // vector replace end

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_8;
  generate
  for (i_8 = 0; i_8 < 2; i_8 = i_8 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_23[i_8*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_8*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_8*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 2; i_9 = i_9 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_9*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_9[0+:1];
    wire [1:0] c$case_alt_10;
    // simple.hs:201:1-70
    wire [7:0] t_4;
    // simple.hs:201:1-70
    wire [71:0] x_13;
    assign map_out = c$case_alt_10;

    assign c$case_alt_10 = (t_4 == c$out2Tag_app_arg) ? {1'b1,map_index} : map_in[1:0];

    assign t_4 = x_13[71:64];

    assign x_13 = map_in[73:2];


    assign c$ws_app_arg_0[i_9*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10=i_10+1) begin : mk_array
    assign vecArray[(2-1)-i_10] = result_23[i_10*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_14 = c$case_scrut_0[1:1] ? {c$out2Tag_app_arg,
                                            $signed(c$case_scrut[63:0])} : {c$out2Tag_app_arg,
                                                                            64'sd0};

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 3; i_12 = i_12 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_21[i_12*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_12*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_12*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13 = i_13 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_13*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_13[0+:2];
    wire [2:0] c$case_alt_11;
    // simple.hs:201:1-70
    wire [7:0] t_5;
    // simple.hs:201:1-70
    wire [71:0] x_14;
    assign map_out_0 = c$case_alt_11;

    assign c$case_alt_11 = (t_5 == c$outputPhaseTag_app_arg) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_5 = x_14[71:64];

    assign x_14 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_13*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 3; i_14=i_14+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_14] = result_21[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_15 = c$case_scrut_2[2:2] ? {c$outputPhaseTag_app_arg,
                                            $signed(c$case_scrut_1[63:0])} : {c$outputPhaseTag_app_arg,
                                                                              64'sd100};

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 2; i_15 = i_15 + 1) begin : zipWith_1
    wire [199:0] zipWith_in1_1;
    assign zipWith_in1_1 = window_0[i_15*200+:200];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_15*2+:2];
    wire [201:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_15*202+:202] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16 = i_16 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [201:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_16*202+:202];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_16[0+:1];
    wire [1:0] c$case_alt_12;
    // simple.hs:201:1-70
    wire [7:0] t_6;
    // simple.hs:201:1-70
    wire [199:0] x_15;
    assign map_out_1 = c$case_alt_12;

    assign c$case_alt_12 = (t_6 == c$outputPhaseTag_app_arg) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_6 = x_15[199:192];

    assign x_15 = map_in_1[201:2];


    assign c$ws_app_arg_4[i_16*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [199:0] vecArray_1 [0:2-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 2; i_17=i_17+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_17] = window_0[i_17*200+:200];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_16 = c$case_scrut_4[1:1] ? {c$outputPhaseTag_app_arg,
                                            c$case_scrut_3[191:0]} : {c$outputPhaseTag_app_arg,
                                                                      {3 {(64'sd0)}}};

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign c$window_app_arg = c$app_arg_3 ? next : window_0;

  assign next_projection = ({next,{c$sw0Tag_app_arg,   result_17}});

  assign next = next_projection[399:0];

  assign result_17 = result_30[3:3] ? c$next_case_alt : c$next_case_alt_0;

  assign c$next_case_alt_sel_alt_f_0 = ({win_0,64'sd0});

  assign c$next_case_alt = c$app_arg_0 ? ({192 {1'bx}}) : c$next_case_alt_sel_alt_f_0[191:0];

  assign c$next_case_alt_0 = c$app_arg_0 ? c$next_case_alt_1 : win_0;

  // vector replace begin
  genvar i_18;
  generate
  for (i_18=0;i_18<3;i_18=i_18+1) begin : vector_replace_0
    assign c$next_case_alt_1[(2-i_18)*64+:64] = (64'sd2) == i_18 ? ((x1_0 + y_2)) : win_0[(2-i_18)*64+:64];
  end
  endgenerate
  // vector replace end

  assign y_2 = dta_0;

  assign dta_0 = $signed(result_27[63:0]);

  assign x1_projection_0 = $signed(win_0[64-1:0]);

  assign x1_0 = x1_projection_0;

  assign win_projection_0 = window_0[200-1:0];

  assign win_0 = win_projection_0[191:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {{8'd9,   {64'sd0,   64'sd0,   64'sd0}},   {8'd9,   {64'sd0,   64'sd0,
                                                       64'sd0}}};
    end else if (en) begin
      window_0 <= c$window_app_arg;
    end
  end
  // register end

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= input1HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= c$app_arg_2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_2_delay
    if (en) begin
      c$app_arg_2 <= c$app_arg_3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_3_delay
    if (en) begin
      c$app_arg_3 <= p3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$app_arg_5;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_5_delay
    if (en) begin
      c$app_arg_5 <= c$app_arg_6;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_6_delay
    if (en) begin
      c$app_arg_6 <= c$out1_app_arg;
    end
  end
  // delay end

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_19;
  generate
  for (i_19 = 0; i_19 < 2; i_19 = i_19 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_23[i_19*72+:72];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_19*2+:2];
    wire [73:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_19*74+:74] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_20;
  generate
  for (i_20=0; i_20 < 2; i_20 = i_20 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [73:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_20*74+:74];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_20[0+:1];
    wire [1:0] c$case_alt_13;
    // simple.hs:201:1-70
    wire [7:0] t_7;
    // simple.hs:201:1-70
    wire [71:0] x_16;
    assign map_out_2 = c$case_alt_13;

    assign c$case_alt_13 = (t_7 == outputPhaseTag) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_7 = x_16[71:64];

    assign x_16 = map_in_2[73:2];


    assign c$ws_app_arg_6[i_20*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:2-1];
  genvar i_21;
  generate
  for (i_21=0; i_21 < 2; i_21=i_21+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_21] = result_23[i_21*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_18 = c$case_scrut_6[1:1] ? {outputPhaseTag,
                                            $signed(c$case_scrut_5[63:0])} : {outputPhaseTag,
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_7_delay
    if (en) begin
      c$app_arg_7 <= c$app_arg_8;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_8_delay
    if (en) begin
      c$app_arg_8 <= c$app_arg_9;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_9_delay
    if (en) begin
      c$app_arg_9 <= c$app_arg_10;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_10_delay
    if (en) begin
      c$app_arg_10 <= p0;
    end
  end
  // delay end

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_22;
  generate
  for (i_22 = 0; i_22 < 3; i_22 = i_22 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_21[i_22*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_22*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_22*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_23;
  generate
  for (i_23=0; i_23 < 3; i_23 = i_23 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_23*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_23[0+:2];
    wire [2:0] c$case_alt_14;
    // simple.hs:201:1-70
    wire [7:0] t_8;
    // simple.hs:201:1-70
    wire [71:0] x_17;
    assign map_out_3 = c$case_alt_14;

    assign c$case_alt_14 = (t_8 == outputPhaseTag) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_8 = x_17[71:64];

    assign x_17 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_23*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_24;
  generate
  for (i_24=0; i_24 < 3; i_24=i_24+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_24] = result_21[i_24*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_19 = c$case_scrut_8[2:2] ? {outputPhaseTag,
                                            $signed(c$case_scrut_7[63:0])} : {outputPhaseTag,
                                                                              64'sd0};

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  // delay begin
  always @(posedge clk) begin : outputPhaseTag_delay
    if (en) begin
      outputPhaseTag <= c$outputPhaseTag_app_arg;
    end
  end
  // delay end

  assign c$vec2_4 = (ws_4[9-1 : 0]);

  // zipWith start
  genvar i_25;
  generate
  for (i_25 = 0; i_25 < 3; i_25 = i_25 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_21[i_25*72+:72];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_25*3+:3];
    wire [74:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_25*75+:75] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_26;
  generate
  for (i_26=0; i_26 < 3; i_26 = i_26 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [74:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_26*75+:75];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd2 - i_26[0+:2];
    wire [2:0] c$case_alt_15;
    // simple.hs:201:1-70
    wire [7:0] t_9;
    // simple.hs:201:1-70
    wire [71:0] x_18;
    assign map_out_4 = c$case_alt_15;

    assign c$case_alt_15 = (t_9 == c$sw0Tag_app_arg) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_9 = x_18[71:64];

    assign x_18 = map_in_4[74:3];


    assign c$ws_app_arg_10[i_26*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:3-1];
  genvar i_27;
  generate
  for (i_27=0; i_27 < 3; i_27=i_27+1) begin : mk_array_4
    assign vecArray_4[(3-1)-i_27] = result_21[i_27*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[12-1 -: 3];

  assign result_20 = c$case_scrut_10[2:2] ? {c$sw0Tag_app_arg,
                                             $signed(c$case_scrut_9[63:0])} : {c$sw0Tag_app_arg,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign c$result_app_arg = p0 ? next_0 : result_21;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {{8'd9,   64'sd0},   {8'd9,   64'sd0},   {8'd9,   64'sd0}};
    end else if (en) begin
      result_21 <= c$result_app_arg;
    end
  end
  // register end

  assign next_projection_0 = ({next_0,{result_24[71:64],   (x_4 + y_3)}});

  assign next_0 = next_projection_0[215:0];

  assign x_4 = $signed(result_24[63:0]);

  assign y_3 = $signed(result_22[63:0]);

  assign result_22 = c$case_scrut_12[1:1] ? {t_2,
                                             $signed(c$case_scrut_11[63:0])} : {t_2,
                                                                                64'sd20};

  // index begin
  wire [71:0] vecArray_5 [0:2-1];
  genvar i_28;
  generate
  for (i_28=0; i_28 < 2; i_28=i_28+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_28] = result_23[i_28*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-1) {1'b0}},i_5}))];
  // index end

  assign i_5 = c$case_scrut_12[0:0];

  assign c$case_scrut_12 = ws_5[6-1 -: 2];

  assign ws_5 = {c$ws_app_arg_11,{1'b0,1'bx}};

  // imap begin
  genvar i_29;
  generate
  for (i_29=0; i_29 < 2; i_29 = i_29 + 1) begin : imap_5
    wire [1-1:0] map_index_5;
    wire [73:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_12[i_29*74+:74];
    wire [1:0] map_out_5;

    assign map_index_5 = 1'd1 - i_29[0+:1];
    wire [1:0] c$case_alt_16;
    // simple.hs:193:1-72
    wire [7:0] t_10;
    // simple.hs:193:1-72
    wire [71:0] x_19;
    assign map_out_5 = c$case_alt_16;

    assign c$case_alt_16 = (t_10 == offsetTag) ? {1'b1,map_index_5} : map_in_5[1:0];

    assign t_10 = x_19[71:64];

    assign x_19 = map_in_5[73:2];


    assign c$ws_app_arg_11[i_29*2+:2] = map_out_5;
  end
  endgenerate
  // imap end

  assign offsetTag = (t_2 > 8'd3) ? c$offsetTag_app_arg : (c$offsetTag_app_arg + 8'd8);

  assign c$vec2_5 = (ws_5[4-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 2; i_30 = i_30 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_23[i_30*72+:72];
    wire [1:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_30*2+:2];
    wire [73:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_12[i_30*74+:74] = c$n_5;
  end
  endgenerate
  // zipWith end

  assign c$offsetTag_app_arg = t_2 - 8'd3;

  assign c$result_app_arg_0 = c$out1_app_arg ? next_1 : result_23;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_23_register
    if ( rst) begin
      result_23 <= {{8'd9,   64'sd0},   {8'd9,   64'sd0}};
    end else if (en) begin
      result_23 <= c$result_app_arg_0;
    end
  end
  // register end

  assign next_projection_1 = ({next_1,{result_27[71:64],   (x_5 + y_4)}});

  assign next_1 = next_projection_1[143:0];

  assign x_5 = $signed(result_20[63:0]);

  assign y_4 = $signed(result_27[63:0]);

  assign result_24 = c$case_scrut_14[1:1] ? {t_2,
                                             $signed(c$case_scrut_13[63:0])} : {t_2,
                                                                                64'sd10};

  // index begin
  wire [71:0] vecArray_6 [0:2-1];
  genvar i_31;
  generate
  for (i_31=0; i_31 < 2; i_31=i_31+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_31] = result_25[i_31*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-1) {1'b0}},i_6}))];
  // index end

  assign i_6 = c$case_scrut_14[0:0];

  assign c$case_scrut_14 = ws_6[6-1 -: 2];

  assign ws_6 = {c$ws_app_arg_13,{1'b0,1'bx}};

  // imap begin
  genvar i_32;
  generate
  for (i_32=0; i_32 < 2; i_32 = i_32 + 1) begin : imap_6
    wire [1-1:0] map_index_6;
    wire [73:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_14[i_32*74+:74];
    wire [1:0] map_out_6;

    assign map_index_6 = 1'd1 - i_32[0+:1];
    wire [1:0] c$case_alt_17;
    // simple.hs:193:1-72
    wire [7:0] t_11;
    // simple.hs:193:1-72
    wire [71:0] x_20;
    assign map_out_6 = c$case_alt_17;

    assign c$case_alt_17 = (t_11 == offsetTag_0) ? {1'b1,map_index_6} : map_in_6[1:0];

    assign t_11 = x_20[71:64];

    assign x_20 = map_in_6[73:2];


    assign c$ws_app_arg_13[i_32*2+:2] = map_out_6;
  end
  endgenerate
  // imap end

  assign offsetTag_0 = (t_2 > 8'd2) ? c$offsetTag_app_arg_0 : (c$offsetTag_app_arg_0 + 8'd8);

  assign c$vec2_6 = (ws_6[4-1 : 0]);

  // zipWith start
  genvar i_33;
  generate
  for (i_33 = 0; i_33 < 2; i_33 = i_33 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_25[i_33*72+:72];
    wire [1:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_33*2+:2];
    wire [73:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_14[i_33*74+:74] = c$n_6;
  end
  endgenerate
  // zipWith end

  assign c$offsetTag_app_arg_0 = t_2 - 8'd2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {{8'd9,   64'sd0},   {8'd9,   64'sd0}};
    end else if (en) begin
      result_25 <= result_26;
    end
  end
  // register end

  assign t_projection_7 = ({result_25,{t_2,   $signed(result_30[134:71])}});

  assign t_1 = t_projection_7[143:0];

  assign result_26 = result_30[70:70] ? t_1 : result_25;

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= p2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$outputPhaseTag_app_arg_delay
    if (en) begin
      c$outputPhaseTag_app_arg <= c$out2Tag_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2Tag_app_arg_delay
    if (en) begin
      c$out2Tag_app_arg <= c$sw0Tag_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$sw0Tag_app_arg_delay
    if (en) begin
      c$sw0Tag_app_arg <= t_2;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {8'd9,   64'sd0};
    end else if (en) begin
      result_27 <= c$result_app_arg_1;
    end
  end
  // register end

  assign c$result_app_arg_1 = input1HasData ? {t_2,
                                               $signed(result_30[69:6])} : result_27;

  assign input1HasData = result_30[5:5];

  assign result_28 = b ? 8'd1 : f1;

  assign b = t_2 == 8'd8;

  assign f1 = t_2 + 8'd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_29;
    end
  end
  // register end

  assign result_29 = b_0 ? result_28 : t_2;

  assign b_0 = p0 | (p2 | p3);

  assign p0 = result_30[2:2];

  assign p3 = result_30[0:0];

  assign p2 = result_30[1:1];

  assign result_30 = {c$app_arg_13,
                      c$app_arg_12,   c$app_arg_11};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_11_register
    if ( rst) begin
      c$app_arg_11 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                1'b0}};
    end else if (en) begin
      c$app_arg_11 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = pop ? c$case_alt_0 : {{{64'sd0,
                                              1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                            {1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_6)
      64'sd0 : c$case_alt_0 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                        1'b0,   1'b0}};
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  // index begin
  wire [134:0] vecArray_7 [0:2-1];
  genvar i_34;
  generate
  for (i_34=0; i_34 < 2; i_34=i_34+1) begin : mk_array_7
    assign vecArray_7[(2-1)-i_34] = buffer[i_34*135+:135];
  end
  endgenerate
  assign c$case_alt_1 = vecArray_7[c$cursor_case_alt_5];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_12_register
    if ( rst) begin
      c$app_arg_12 <= 1'b0;
    end else if (en) begin
      c$app_arg_12 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = pop ? c$case_alt_3 : 1'b0;

  always @(*) begin
    case(x_6)
      64'sd0 : c$case_alt_3 = 1'b0;
      default : c$case_alt_3 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_13_register
    if ( rst) begin
      c$app_arg_13 <= 1'b0;
    end else if (en) begin
      c$app_arg_13 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = push ? c$cursor_case_scrut : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = push ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_1[404:135] : buffer;

  assign qData = result_2[134:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = push ? c$cursor_case_alt_0 : c$cursor_case_alt_3;

  assign push = result_2[135:135];

  assign c$cursor_case_alt_0 = pop ? c$cursor_case_alt_1 : c$cursor_case_alt_2;

  always @(*) begin
    case(x_6)
      64'sd0 : c$cursor_case_alt_1 = 64'sd1;
      default : c$cursor_case_alt_1 = cursor;
    endcase
  end

  assign c$cursor_case_alt_2 = c$cursor_case_scrut ? ((x_6 + 64'sd1)) : cursor;

  assign c$tte_rhs = (x_6 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs[0];

  assign x_6 = cursor;

  assign c$cursor_case_alt_3 = pop ? c$cursor_case_alt_4 : cursor;

  assign pop = result_9[204:204];

  always @(*) begin
    case(x_6)
      64'sd0 : c$cursor_case_alt_4 = 64'sd0;
      default : c$cursor_case_alt_4 = c$cursor_case_alt_5;
    endcase
  end

  assign c$cursor_case_alt_5 = (x_6 - 64'sd1);

  assign result = {result_9[203:9],
                   result_9[8:0]};

  assign result_0 = result[203:9];

  assign result_1 = result[8:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[8:1];

  assign result_1_1 = result_1[0:0];


endmodule


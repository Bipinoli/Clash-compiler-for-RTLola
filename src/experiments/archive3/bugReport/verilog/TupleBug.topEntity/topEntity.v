/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable

      // Outputs
    , output wire signed [63:0] result_0
    , output wire signed [63:0] result_1
    , output wire signed [63:0] result_2
    , output wire signed [63:0] result_3
    , output wire signed [63:0] result_4
    , output wire signed [63:0] result_5
    , output wire signed [63:0] result_6
    , output wire signed [63:0] result_7
    , output wire signed [63:0] result_8
    , output wire signed [63:0] result_9
    , output wire signed [63:0] result_10
    , output wire signed [63:0] result_11
    , output wire signed [63:0] result_12
    , output wire signed [63:0] result_13
    , output wire signed [63:0] result_14
    , output wire signed [63:0] result_15
    , output wire signed [63:0] result_16
    );
  wire [191:0] result_34;
  // tuple.hs:36:1-63
  reg signed [63:0] out22 = (64'sd0);
  // tuple.hs:36:1-63
  reg signed [63:0] out22_0 = (64'sd0);
  // tuple.hs:36:1-63
  reg signed [63:0] out22_1 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_2 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_3 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_4 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_5 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_6 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_7 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_8 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_9 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_10 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_11 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_12 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_13 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_14 = (64'sd0);
  // tuple.hs:44:1-63
  reg signed [63:0] out22_15 = (64'sd0);
  wire [1087:0] result;

  assign result_34 = {out22_1,   out22_0,
                      out22};

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_register
    if ( rst) begin
      out22 <= (64'sd0);
    end else if (en) begin
      out22 <= out22;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_0_register
    if ( rst) begin
      out22_0 <= (64'sd0);
    end else if (en) begin
      out22_0 <= out22_0;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_1_register
    if ( rst) begin
      out22_1 <= (64'sd0);
    end else if (en) begin
      out22_1 <= out22_1;
    end
  end
  // register end

  assign result = {$signed(result_34[191:128]),
                   $signed(result_34[127:64]),   out22_15,
                   out22_14,   out22_13,   out22_12,   out22_11,
                   out22_10,   out22_9,   out22_8,   out22_7,
                   out22_6,   out22_5,   out22_4,   out22_3,
                   out22_2,   $signed(result_34[63:0])};

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_2_register
    if ( rst) begin
      out22_2 <= (64'sd0);
    end else if (en) begin
      out22_2 <= out22_2;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_3_register
    if ( rst) begin
      out22_3 <= (64'sd0);
    end else if (en) begin
      out22_3 <= out22_3;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_4_register
    if ( rst) begin
      out22_4 <= (64'sd0);
    end else if (en) begin
      out22_4 <= out22_4;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_5_register
    if ( rst) begin
      out22_5 <= (64'sd0);
    end else if (en) begin
      out22_5 <= out22_5;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_6_register
    if ( rst) begin
      out22_6 <= (64'sd0);
    end else if (en) begin
      out22_6 <= out22_6;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_7_register
    if ( rst) begin
      out22_7 <= (64'sd0);
    end else if (en) begin
      out22_7 <= out22_7;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_8_register
    if ( rst) begin
      out22_8 <= (64'sd0);
    end else if (en) begin
      out22_8 <= out22_8;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_9_register
    if ( rst) begin
      out22_9 <= (64'sd0);
    end else if (en) begin
      out22_9 <= out22_9;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_10_register
    if ( rst) begin
      out22_10 <= (64'sd0);
    end else if (en) begin
      out22_10 <= out22_10;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_11_register
    if ( rst) begin
      out22_11 <= (64'sd0);
    end else if (en) begin
      out22_11 <= out22_11;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_12_register
    if ( rst) begin
      out22_12 <= (64'sd0);
    end else if (en) begin
      out22_12 <= out22_12;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_13_register
    if ( rst) begin
      out22_13 <= (64'sd0);
    end else if (en) begin
      out22_13 <= out22_13;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_14_register
    if ( rst) begin
      out22_14 <= (64'sd0);
    end else if (en) begin
      out22_14 <= out22_14;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : out22_15_register
    if ( rst) begin
      out22_15 <= (64'sd0);
    end else if (en) begin
      out22_15 <= out22_15;
    end
  end
  // register end

  assign result_0 = $signed(result[1087:1024]);

  assign result_1 = $signed(result[1023:960]);

  assign result_2 = $signed(result[959:896]);

  assign result_3 = $signed(result[895:832]);

  assign result_4 = $signed(result[831:768]);

  assign result_5 = $signed(result[767:704]);

  assign result_6 = $signed(result[703:640]);

  assign result_7 = $signed(result[639:576]);

  assign result_8 = $signed(result[575:512]);

  assign result_9 = $signed(result[511:448]);

  assign result_10 = $signed(result[447:384]);

  assign result_11 = $signed(result[383:320]);

  assign result_12 = $signed(result[319:256]);

  assign result_13 = $signed(result[255:192]);

  assign result_14 = $signed(result[191:128]);

  assign result_15 = $signed(result[127:64]);

  assign result_16 = $signed(result[63:0]);


endmodule


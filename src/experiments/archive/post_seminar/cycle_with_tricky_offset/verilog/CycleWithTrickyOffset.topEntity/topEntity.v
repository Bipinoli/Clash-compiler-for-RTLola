/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input signed [63:0] input0_0
    , input  input0_1

      // Outputs
    , output wire  result_0
    , output wire signed [63:0] result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire signed [63:0] result_2_0
    , output wire signed [63:0] result_2_1_0
    , output wire  result_2_1_1
    , output wire signed [63:0] result_2_2_0
    , output wire  result_2_2_1
    , output wire signed [63:0] result_2_3_0
    , output wire  result_2_3_1
    );
  wire [2:0] result_3;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:90:1-96
  wire  eta;
  wire signed [63:0] result_4;
  wire signed [63:0] x;
  reg signed [63:0] result_5 = 64'sd100;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:96:1-104
  wire  eta_0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:101:1-110
  wire signed [63:0] eta1;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:101:1-110
  reg signed [63:0] cur = 64'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:101:1-110
  reg signed [63:0] past1 = 64'sd0;
  wire [127:0] result_6;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:101:1-110
  wire signed [63:0] c$past1_app_arg;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:101:1-110
  wire signed [63:0] c$cur_app_arg;
  wire signed [63:0] x_0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:84:1-104
  wire  eta_1;
  wire signed [63:0] result_7;
  wire signed [63:0] x_1;
  wire signed [63:0] y;
  reg signed [63:0] result_8 = 64'sd100;
  wire [258:0] result_9;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:66:1-153
  wire  b;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:66:1-153
  wire signed [63:0] outC;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:66:1-153
  wire  enC;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:66:1-153
  wire  enB;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:66:1-153
  wire  enA;
  reg signed [63:0] c$app_arg = 64'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:27:1-64
  reg signed [63:0] s = 64'sd0;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:27:1-64
  wire  b_0;
  wire signed [63:0] result_10;
  wire signed [63:0] x_2;
  wire [66:0] result_11;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:55:1-118
  wire  aktv_x;
  reg [66:0] result_12 = {64'sd0,   1'b0,   1'b0,   1'b0};
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:10:1-73
  wire  b_1;
  wire  result_13;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:17:5-74
  wire  b_2;
  // cycle_with_tricky_offset/cycle_with_tricky_offset.hs:17:5-74
  wire signed [63:0] t;
  wire signed [63:0] result_14;
  reg signed [63:0] result_15 = 64'sd0;
  reg  result_16 = 1'b0;
  wire [64:0] input0;
  wire [326:0] result;
  wire [66:0] result_1_4;
  wire [258:0] result_2;
  wire [64:0] result_2_1;
  wire [64:0] result_2_2;
  wire [64:0] result_2_3;

  assign input0 = {input0_0,   input0_1};

  assign result = {result_16,   result_12,
                   result_9};

  assign result_3 = b ? {enA,   enB,
                         enC} : {1'b0,   1'b0,   1'b0};

  assign eta = (c$app_arg == 64'sd2) & enB;

  assign result_4 = eta ? (x + 64'sd1) : result_5;

  assign x = result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= 64'sd100;
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign eta_0 = (c$app_arg == 64'sd3) & enC;

  assign eta1 = x_0 + 64'sd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cur_register
    if ( rst) begin
      cur <= 64'sd0;
    end else if (en) begin
      cur <= c$cur_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : past1_register
    if ( rst) begin
      past1 <= 64'sd0;
    end else if (en) begin
      past1 <= c$past1_app_arg;
    end
  end
  // register end

  assign result_6 = {past1,   cur};

  assign c$past1_app_arg = eta_0 ? cur : past1;

  assign c$cur_app_arg = eta_0 ? eta1 : cur;

  assign x_0 = result_5;

  assign eta_1 = (c$app_arg == 64'sd1) & enA;

  assign result_7 = eta_1 ? (x_1 + y) : result_8;

  assign x_1 = $signed(result_12[66:3]);

  assign y = outC;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= 64'sd100;
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign result_9 = {c$app_arg,   {result_8,
                                   result_3[2:2]},   {result_5,   result_3[1:1]},
                     {outC,   result_3[0:0]}};

  assign b = c$app_arg == 64'sd4;

  assign outC = $signed(result_6[63:0]);

  assign enC = result_12[0:0];

  assign enB = result_12[1:1];

  assign enA = result_12[2:2];

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= s;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : s_register
    if ( rst) begin
      s <= 64'sd0;
    end else if (en) begin
      s <= result_10;
    end
  end
  // register end

  assign b_0 = s == 64'sd4;

  assign result_10 = b_0 ? 64'sd0 : (x_2 + 64'sd1);

  assign x_2 = s;

  assign result_11 = result_16 ? {$signed(input0[64:1]),
                                  aktv_x,   aktv_x,   aktv_x} : result_12;

  assign aktv_x = input0[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {64'sd0,   1'b0,   1'b0,   1'b0};
    end else if (en) begin
      result_12 <= result_11;
    end
  end
  // register end

  assign b_1 = result_15 < 64'sd2;

  assign result_13 = b_1 ? 1'b1 : 1'b0;

  assign b_2 = result_15 < 64'sd4;

  assign t = result_15 + 64'sd1;

  assign result_14 = b_2 ? t : 64'sd0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= 64'sd0;
    end else if (en) begin
      result_15 <= result_14;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= 1'b0;
    end else if (en) begin
      result_16 <= result_13;
    end
  end
  // register end

  assign result_0 = result[326:326];

  assign result_1_4 = result[325:259];

  assign result_2 = result[258:0];

  assign result_1_0 = $signed(result_1_4[66:3]);

  assign result_1_1 = result_1_4[2:2];

  assign result_1_2 = result_1_4[1:1];

  assign result_1_3 = result_1_4[0:0];

  assign result_2_0 = $signed(result_2[258:195]);

  assign result_2_1 = result_2[194:130];

  assign result_2_2 = result_2[129:65];

  assign result_2_3 = result_2[64:0];

  assign result_2_1_0 = $signed(result_2_1[64:1]);

  assign result_2_1_1 = result_2_1[0:0];

  assign result_2_2_0 = $signed(result_2_2[64:1]);

  assign result_2_2_1 = result_2_2[0:0];

  assign result_2_3_0 = $signed(result_2_3[64:1]);

  assign result_2_3_1 = result_2_3[0:0];


endmodule


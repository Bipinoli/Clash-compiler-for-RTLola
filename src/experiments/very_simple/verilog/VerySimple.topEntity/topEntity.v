/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire [7:0] result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    );
  wire [131:0] result_2;
  // very_simple.hs:127:1-82
  wire  pacing0;
  wire [7:0] result_3;
  wire [7:0] result_4;
  // very_simple.hs:225:1-111
  reg [71:0] result_5 = {8'd11,   64'sd0};
  // very_simple.hs:225:1-111
  wire [71:0] c$result_app_arg;
  wire [71:0] c$case_alt;
  wire [71:0] c$case_alt_0;
  wire [71:0] c$case_alt_1;
  // very_simple.hs:168:1-62
  wire signed [63:0] winData;
  // very_simple.hs:168:1-62
  wire [7:0] winTag;
  wire [7:0] c$app_arg;
  // very_simple.hs:230:1-111
  reg [71:0] result_6 = {8'd11,   64'sd0};
  // very_simple.hs:230:1-111
  wire [71:0] c$result_app_arg_0;
  wire [71:0] c$case_alt_2;
  wire [71:0] c$case_alt_3;
  wire [71:0] c$case_alt_4;
  // very_simple.hs:168:1-62
  wire signed [63:0] winData_0;
  // very_simple.hs:168:1-62
  wire [7:0] winTag_0;
  wire [7:0] c$app_arg_0;
  wire [71:0] result_7;
  // very_simple.hs:236:1-137
  reg [71:0] result_8 = {8'd11,   64'sd0};
  // very_simple.hs:236:1-137
  wire [71:0] t;
  wire signed [63:0] x;
  wire signed [63:0] y;
  reg  c$app_arg_1 = 1'b0;
  wire [73:0] result_9;
  // very_simple.hs:175:1-98
  wire  p0;
  // very_simple.hs:175:1-98
  reg [7:0] t_0 = 8'd1;
  // very_simple.hs:175:1-98
  wire  b;
  // very_simple.hs:175:1-98
  wire [7:0] f1;
  wire [132:0] result_10;
  reg [130:0] c$app_arg_2 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0};
  wire [130:0] c$case_alt_5;
  wire [130:0] c$case_alt_6;
  wire [130:0] c$case_alt_7;
  reg [130:0] c$case_alt_8;
  reg [130:0] c$case_alt_9;
  wire [130:0] c$case_alt_10;
  reg  c$app_arg_3 = 1'b0;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  reg  c$case_alt_15;
  reg  c$app_arg_4 = 1'b0;
  wire  c$case_alt_16;
  wire  c$case_alt_17;
  wire  c$case_alt_18;
  // very_simple.hs:64:1-78
  reg [261:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0},   {{{64'sd0,   1'b0},
                                                       {64'sd0,   1'b0}},
                                                      1'b0}};
  // very_simple.hs:64:1-78
  wire [261:0] c$buffer_case_alt;
  // very_simple.hs:64:1-78
  wire [261:0] c$buffer_case_alt_0;
  // very_simple.hs:64:1-78
  wire [261:0] c$buffer_case_alt_1;
  // very_simple.hs:64:1-78
  wire [130:0] qData;
  // very_simple.hs:64:1-78
  wire signed [63:0] x_0;
  // very_simple.hs:64:1-78
  reg signed [63:0] cursor = (64'sd0);
  // very_simple.hs:64:1-78
  wire signed [63:0] c$cursor_case_alt;
  // very_simple.hs:64:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // very_simple.hs:64:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // very_simple.hs:64:1-78
  wire  c$cursor_case_scrut;
  // very_simple.hs:64:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // very_simple.hs:64:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // very_simple.hs:64:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // very_simple.hs:252:1-125
  wire  qPopValid;
  // very_simple.hs:252:1-125
  wire  qPush;
  // very_simple.hs:252:1-125
  wire  qPop;
  wire [129:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [392:0] c$buffer_case_alt_sel_alt_t_1;
  wire [392:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [76:0] result;
  wire [64:0] result_0;
  wire [11:0] result_1;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {pacing0,   {inputs,
                                 pacing0}};

  assign pacing0 = inputs[65:65] & inputs[0:0];

  assign result_3 = b ? 8'd1 : f1;

  assign result_4 = p0 ? result_3 : t_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_5 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_10[66:66] ? {t_0,
                                                $signed(result_10[130:67])} : result_5;

  assign c$case_alt = (t_0 > 8'd1) ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = (c$app_arg == winTag) ? {t_0,
                                                 winData} : {t_0,   64'sd10};

  assign c$case_alt_1 = ((c$app_arg + 8'd10) == winTag) ? {t_0,
                                                           winData} : {t_0,   64'sd10};

  assign winData = $signed(result_5[63:0]);

  assign winTag = result_5[71:64];

  assign c$app_arg = t_0 - 8'd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_6 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = result_10[1:1] ? {t_0,
                                                $signed(result_10[65:2])} : result_6;

  assign c$case_alt_2 = (t_0 > 8'd1) ? c$case_alt_3 : c$case_alt_4;

  assign c$case_alt_3 = (c$app_arg_0 == winTag_0) ? {t_0,
                                                     winData_0} : {t_0,   64'sd20};

  assign c$case_alt_4 = ((c$app_arg_0 + 8'd10) == winTag_0) ? {t_0,
                                                               winData_0} : {t_0,   64'sd20};

  assign winData_0 = $signed(result_6[63:0]);

  assign winTag_0 = result_6[71:64];

  assign c$app_arg_0 = t_0 - 8'd1;

  assign result_7 = p0 ? t : result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign t = {c$case_alt[71:64],   (x + y)};

  assign x = $signed(c$case_alt[63:0]);

  assign y = $signed(c$case_alt_2[63:0]);

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= p0;
    end
  end
  // delay end

  assign result_9 = {{1'b1,
                      {$signed(result_8[63:0]),   c$app_arg_1}},
                     t_0};

  assign p0 = result_10[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_4;
    end
  end
  // register end

  assign b = t_0 == 8'd10;

  assign f1 = t_0 + 8'd1;

  assign result_10 = {c$app_arg_4,   c$app_arg_3,
                      c$app_arg_2};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_2_register
    if ( rst) begin
      c$app_arg_2 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0};
    end else if (en) begin
      c$app_arg_2 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? c$case_alt_8 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0};

  assign c$case_alt_7 = qPop ? c$case_alt_9 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0};

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_8 = qData;
      default : c$case_alt_8 = c$case_alt_10;
    endcase
  end

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_9 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   1'b0};
      default : c$case_alt_9 = c$case_alt_10;
    endcase
  end

  // index begin
  wire [130:0] vecArray [0:2-1];
  genvar i;
  generate
  for (i=0; i < 2; i=i+1) begin : mk_array
    assign vecArray[(2-1)-i] = buffer[i*131+:131];
  end
  endgenerate
  assign c$case_alt_10 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_3_register
    if ( rst) begin
      c$app_arg_3 <= 1'b0;
    end else if (en) begin
      c$app_arg_3 <= c$case_alt_11;
    end
  end
  // register end

  assign c$case_alt_11 = qPush ? c$case_alt_12 : c$case_alt_13;

  assign c$case_alt_12 = qPop ? 1'b1 : c$case_alt_14;

  assign c$case_alt_13 = qPop ? c$case_alt_15 : c$case_alt_14;

  assign c$case_alt_14 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_15 = 1'b0;
      default : c$case_alt_15 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_4_register
    if ( rst) begin
      c$app_arg_4 <= 1'b0;
    end else if (en) begin
      c$app_arg_4 <= c$case_alt_16;
    end
  end
  // register end

  assign c$case_alt_16 = qPush ? c$case_alt_17 : 1'b0;

  assign c$case_alt_17 = qPop ? 1'b1 : c$case_alt_18;

  assign c$tte_rhs = (x_0 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_18 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0},   {{{64'sd0,   1'b0},
                                                         {64'sd0,   1'b0}},
                                                        1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[392:131] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[392:131];

  assign qData = result_2[130:0];

  assign x_0 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_0 + 64'sd1));

  assign c$tte_rhs_0 = (x_0 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_0)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_0 - 64'sd1);

  assign result = {result_9[72:8],
                   {result_9[7:0],   qPush,   qPop,
                    result_10[132:132],   qPopValid}};

  assign qPopValid = result_10[131:131];

  assign qPush = result_2[131:131];

  assign qPop = result_9[73:73];

  assign result_0 = result[76:12];

  assign result_1 = result[11:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = result_1[11:4];

  assign result_1_1 = result_1[3:3];

  assign result_1_2 = result_1[2:2];

  assign result_1_3 = result_1[1:1];

  assign result_1_4 = result_1[0:0];


endmodule


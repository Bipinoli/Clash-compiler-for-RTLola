/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_5
    , output wire [7:0] result_1_6
    , output wire [7:0] result_1_7
    , output wire [7:0] result_1_8
    , output wire [7:0] result_1_9
    , output wire [7:0] result_1_10
    , output wire [7:0] result_1_11
    );
  wire [134:0] result_2;
  // very_simple.hs:156:1-82
  wire  pacing1;
  // very_simple.hs:156:1-82
  wire  hasInput1;
  // very_simple.hs:156:1-82
  wire  hasInput0;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  // very_simple.hs:156:1-82
  wire  timer0Over;
  wire [247:0] result_5;
  // very_simple.hs:288:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_6;
  // very_simple.hs:288:9-81
  wire  b;
  // very_simple.hs:288:9-81
  wire [7:0] f1;
  wire [7:0] result_7;
  reg  c$app_arg = 1'b0;
  wire [71:0] result_8;
  // very_simple.hs:331:1-145
  reg [71:0] result_9 = {8'd5,   64'sd0};
  // very_simple.hs:331:1-145
  wire [71:0] t_0;
  wire signed [63:0] ds1;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // very_simple.hs:348:1-148
  wire signed [63:0] y_0;
  // very_simple.hs:348:1-148
  wire signed [63:0] x1;
  // very_simple.hs:348:1-148
  wire [191:0] win;
  // very_simple.hs:348:1-148
  reg [199:0] window = {8'd5,   {64'sd0,   64'sd0,   64'sd0}};
  wire [199:0] result_10;
  // very_simple.hs:348:1-148
  wire [199:0] t_1;
  wire [191:0] result_11;
  // very_simple.hs:348:1-148
  wire [191:0] c$t_case_alt;
  // very_simple.hs:348:1-148
  wire signed [63:0] wild2;
  // very_simple.hs:348:1-148
  wire [191:0] c$t_case_alt_0;
  // very_simple.hs:348:1-148
  wire [191:0] c$t_case_alt_1;
  // very_simple.hs:203:1-70
  wire [224:0] c$ws_app_arg;
  // very_simple.hs:203:1-70
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire [71:0] result_12;
  // very_simple.hs:203:1-70
  wire [1:0] i;
  // very_simple.hs:203:1-70
  wire [11:0] ws;
  reg  c$app_arg_0 = 1'b0;
  reg  c$app_arg_1 = 1'b0;
  reg  c$app_arg_2 = 1'b0;
  reg  c$app_arg_3 = 1'b0;
  reg  c$app_arg_4 = 1'b0;
  // very_simple.hs:220:1-151
  wire  slides;
  // very_simple.hs:203:1-70
  wire [224:0] c$ws_app_arg_1;
  // very_simple.hs:203:1-70
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_13;
  // very_simple.hs:203:1-70
  wire [1:0] i_0;
  // very_simple.hs:203:1-70
  wire [11:0] ws_0;
  wire [7:0] result_14;
  wire [7:0] c$app_arg_5;
  reg  c$app_arg_6 = 1'b0;
  reg  c$app_arg_7 = 1'b0;
  reg  c$app_arg_8 = 1'b0;
  reg  c$app_arg_9 = 1'b0;
  // very_simple.hs:220:1-151
  wire  p3;
  reg  c$app_arg_10 = 1'b0;
  reg  c$app_arg_11 = 1'b0;
  reg  c$app_arg_12 = 1'b0;
  // very_simple.hs:203:1-70
  wire [224:0] c$ws_app_arg_3;
  // very_simple.hs:203:1-70
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire [71:0] result_15;
  // very_simple.hs:203:1-70
  wire [1:0] i_1;
  // very_simple.hs:203:1-70
  wire [11:0] ws_1;
  wire [7:0] result_16;
  wire [7:0] c$app_arg_13;
  reg  c$app_arg_14 = 1'b0;
  reg  c$app_arg_15 = 1'b0;
  reg  c$app_arg_16 = 1'b0;
  reg  c$app_arg_17 = 1'b0;
  // very_simple.hs:203:1-70
  wire [224:0] c$ws_app_arg_5;
  // very_simple.hs:203:1-70
  wire [8:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire [71:0] result_17;
  // very_simple.hs:203:1-70
  wire [1:0] i_2;
  // very_simple.hs:203:1-70
  wire [11:0] ws_2;
  wire [7:0] result_18;
  wire [7:0] c$app_arg_18;
  // very_simple.hs:195:1-72
  wire [224:0] c$ws_app_arg_7;
  // very_simple.hs:195:1-72
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire [71:0] result_19;
  wire [7:0] result_20;
  wire [7:0] c$app_arg_19;
  // very_simple.hs:195:1-72
  wire [1:0] i_3;
  // very_simple.hs:195:1-72
  wire [11:0] ws_3;
  wire [215:0] result_21;
  // very_simple.hs:320:1-145
  reg [215:0] result_22 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // very_simple.hs:320:1-145
  wire [215:0] t_2;
  wire signed [63:0] x_1;
  wire signed [63:0] y_1;
  // very_simple.hs:203:1-70
  wire [224:0] c$ws_app_arg_9;
  // very_simple.hs:203:1-70
  wire [8:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire [71:0] result_23;
  // very_simple.hs:203:1-70
  wire [1:0] i_4;
  // very_simple.hs:203:1-70
  wire [11:0] ws_4;
  wire [7:0] result_24;
  wire [7:0] c$app_arg_20;
  wire [215:0] result_25;
  // very_simple.hs:309:1-145
  reg [215:0] result_26 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // very_simple.hs:309:1-145
  wire [215:0] t_3;
  wire signed [63:0] x_2;
  wire signed [63:0] y_2;
  // very_simple.hs:203:1-70
  wire [147:0] c$ws_app_arg_11;
  // very_simple.hs:203:1-70
  wire [3:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [1:0] c$case_scrut_12;
  wire [71:0] result_27;
  // very_simple.hs:203:1-70
  wire [0:0] i_5;
  // very_simple.hs:203:1-70
  wire [5:0] ws_5;
  wire [7:0] result_28;
  wire [7:0] c$app_arg_21;
  // very_simple.hs:303:1-119
  reg [143:0] result_29 = {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // very_simple.hs:303:1-119
  wire [143:0] t_4;
  wire [143:0] result_30;
  // very_simple.hs:220:1-151
  reg  c$out1_app_arg = 1'b0;
  // very_simple.hs:220:1-151
  reg  c$out1_app_arg_0 = 1'b0;
  wire [7:0] result_31;
  wire [7:0] c$app_arg_22;
  // very_simple.hs:298:1-111
  reg [71:0] result_32 = {8'd5,   64'sd0};
  // very_simple.hs:298:1-111
  wire [71:0] c$result_app_arg;
  // very_simple.hs:220:1-151
  reg  c$out0_app_arg = 1'b0;
  // very_simple.hs:288:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_33;
  // very_simple.hs:288:9-81
  wire  b_0;
  // very_simple.hs:288:9-81
  wire [7:0] f1_0;
  wire [7:0] result_34;
  // very_simple.hs:220:1-151
  wire  p2;
  // very_simple.hs:288:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_35;
  // very_simple.hs:288:9-81
  wire  b_1;
  // very_simple.hs:288:9-81
  wire [7:0] f1_1;
  wire [7:0] result_36;
  // very_simple.hs:220:1-151
  wire  p0;
  // very_simple.hs:220:1-151
  wire [2:0] pacings;
  // very_simple.hs:288:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_37;
  // very_simple.hs:288:9-81
  wire  b_2;
  // very_simple.hs:288:9-81
  wire [7:0] f1_2;
  wire [7:0] result_38;
  // very_simple.hs:220:1-151
  wire  input1HasData;
  // very_simple.hs:288:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_39;
  // very_simple.hs:288:9-81
  wire  b_3;
  // very_simple.hs:288:9-81
  wire [7:0] f1_3;
  wire [7:0] result_40;
  // very_simple.hs:220:1-151
  wire  input0HasData;
  wire [135:0] result_41;
  reg [133:0] c$app_arg_23 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}};
  wire [133:0] c$case_alt;
  wire [133:0] c$case_alt_0;
  wire [133:0] c$case_alt_1;
  reg [133:0] c$case_alt_2;
  reg [133:0] c$case_alt_3;
  wire [133:0] c$case_alt_4;
  reg  c$app_arg_24 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_25 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // very_simple.hs:87:1-78
  reg [267:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}}};
  // very_simple.hs:87:1-78
  wire [267:0] c$buffer_case_alt;
  // very_simple.hs:87:1-78
  wire [267:0] c$buffer_case_alt_0;
  // very_simple.hs:87:1-78
  wire [267:0] c$buffer_case_alt_1;
  // very_simple.hs:87:1-78
  wire [133:0] qData;
  // very_simple.hs:87:1-78
  wire signed [63:0] x_3;
  // very_simple.hs:87:1-78
  reg signed [63:0] cursor = (64'sd0);
  // very_simple.hs:87:1-78
  wire signed [63:0] c$cursor_case_alt;
  // very_simple.hs:87:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // very_simple.hs:87:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // very_simple.hs:87:1-78
  wire  c$cursor_case_scrut;
  // very_simple.hs:87:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // very_simple.hs:87:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // very_simple.hs:87:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // very_simple.hs:373:1-176
  wire  qPopValid;
  // very_simple.hs:373:1-176
  wire  qPush;
  // very_simple.hs:373:1-176
  wire  qPop;
  wire [129:0] inputs;
  wire signed [63:0] x1_projection;
  wire [255:0] c$t_case_alt_sel_alt_t_0;
  wire [255:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [8:0] c$vec2_1;
  wire [8:0] c$vec2_2;
  wire [8:0] c$vec2_3;
  wire [287:0] t_projection_4;
  wire [8:0] c$vec2_4;
  wire [287:0] t_projection_6;
  wire [3:0] c$vec2_5;
  wire [215:0] t_projection_8;
  wire signed [63:0] c$tte_rhs;
  wire [401:0] c$buffer_case_alt_sel_alt_t_1;
  wire [401:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [250:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [55:0] result_1;
  wire [2:0] result_1_4;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {timer0Over | (pacing1 | (pacing1 | timer0Over)),
                     {inputs,   timer0Over,   {pacing1,   pacing1,
                                               timer0Over}}};

  assign pacing1 = hasInput0 & hasInput1;

  assign hasInput1 = inputs[0:0];

  assign hasInput0 = inputs[65:65];

  assign result_3 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign timer0Over = result_4 >= (64'sd1000000);

  assign result_5 = {{1'b1,
                      {{$signed(result_17[63:0]),   c$app_arg_14},
                       {$signed(result_15[63:0]),   c$app_arg_10},
                       {$signed(result_9[63:0]),   c$app_arg}}},
                     {pacings,   slides,   t_8,   t_7,   t_6,
                      t_5,   t,   t_6}};

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_6;
    end
  end
  // register end

  assign result_6 = p3 ? result_7 : t;

  assign b = t == 8'd4;

  assign f1 = t + 8'd1;

  assign result_7 = b ? 8'd1 : f1;

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$app_arg_6;
    end
  end
  // delay end

  assign result_8 = c$app_arg_6 ? t_0 : result_9;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_9 <= result_8;
    end
  end
  // register end

  assign t_0 = {result_13[71:64],   (x_0 + y)};

  wire [191:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_3;
  assign ds1 = acc_2_0;

  assign vec = window[191:0];

  assign acc_1 = $signed(vec[191:128]);

  assign acc_2 = $signed(vec[127:64]);

  assign acc_3 = $signed(vec[63:0]);

  wire signed [63:0] x_5;
  wire signed [63:0] y_3;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_5 = acc_1;

  assign y_3 = acc_2;

  assign c$case_alt_13 = (x_5 + y_3);



  wire signed [63:0] x_6;
  wire signed [63:0] y_4;
  wire signed [63:0] c$case_alt_14;
  assign acc_2_0 = c$case_alt_14;

  assign x_6 = acc_1_0;

  assign y_4 = acc_3;

  assign c$case_alt_14 = (x_6 + y_4);





  assign x_0 = $signed(result_13[63:0]);

  assign y = ds1;

  assign y_0 = wild2;

  assign x1_projection = $signed(win[64-1:0]);

  assign x1 = x1_projection;

  assign win = window[191:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd5,   {64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_10;
    end
  end
  // register end

  assign result_10 = c$app_arg_2 ? t_1 : window;

  assign t_1 = {result_14,   result_11};

  assign result_11 = c$app_arg_0 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({win,wild2});

  assign c$t_case_alt_sel_alt_f_0 = ({win,64'sd0});

  assign c$t_case_alt = c$app_arg_12 ? c$t_case_alt_sel_alt_t_0[191:0] : c$t_case_alt_sel_alt_f_0[191:0];

  assign wild2 = $signed(result_12[63:0]);

  assign c$t_case_alt_0 = c$app_arg_12 ? c$t_case_alt_1 : win;

  // vector replace begin
  genvar i_6;
  generate
  for (i_6=0;i_6<3;i_6=i_6+1) begin : vector_replace
    assign c$t_case_alt_1[(2-i_6)*64+:64] = (64'sd2) == i_6 ? ((x1 + y_0)) : win[(2-i_6)*64+:64];
  end
  endgenerate
  // vector replace end

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_7;
  generate
  for (i_7 = 0; i_7 < 3; i_7 = i_7 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_22[i_7*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_7*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_7*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_8;
  generate
  for (i_8=0; i_8 < 3; i_8 = i_8 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_8*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_8[0+:2];
    wire [2:0] c$case_alt_15;
    // very_simple.hs:203:1-70
    wire [7:0] t_9;
    // very_simple.hs:203:1-70
    wire [71:0] x_7;
    assign map_out = c$case_alt_15;

    assign c$case_alt_15 = (t_9 == result_31) ? {1'b1,map_index} : map_in[2:0];

    assign t_9 = x_7[71:64];

    assign x_7 = map_in[74:3];


    assign c$ws_app_arg_0[i_8*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_9;
  generate
  for (i_9=0; i_9 < 3; i_9=i_9+1) begin : mk_array
    assign vecArray[(3-1)-i_9] = result_22[i_9*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_12 = c$case_scrut_0[2:2] ? {result_31,
                                            $signed(c$case_scrut[63:0])} : {result_31,
                                                                            64'sd0};

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= c$app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= c$app_arg_4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_2_delay
    if (en) begin
      c$app_arg_2 <= c$app_arg_3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_3_delay
    if (en) begin
      c$app_arg_3 <= (c$app_arg_4 | p3);
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= slides;
    end
  end
  // delay end

  assign slides = result_41[3:3];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 3; i_11 = i_11 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_26[i_11*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_11*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_11*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 3; i_12 = i_12 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_12*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_12[0+:2];
    wire [2:0] c$case_alt_16;
    // very_simple.hs:203:1-70
    wire [7:0] t_10;
    // very_simple.hs:203:1-70
    wire [71:0] x_8;
    assign map_out_0 = c$case_alt_16;

    assign c$case_alt_16 = (t_10 == result_14) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_10 = x_8[71:64];

    assign x_8 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_12*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13=i_13+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_13] = result_26[i_13*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_13 = c$case_scrut_2[2:2] ? {result_14,
                                            $signed(c$case_scrut_1[63:0])} : {result_14,
                                                                              64'sd1};

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign result_14 = (t_6 > 8'd3) ? c$app_arg_5 : (c$app_arg_5 + 8'd4);

  assign c$app_arg_5 = t_6 - 8'd3;

  // delay begin
  always @(posedge clk) begin : c$app_arg_6_delay
    if (en) begin
      c$app_arg_6 <= c$app_arg_7;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_7_delay
    if (en) begin
      c$app_arg_7 <= c$app_arg_8;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_8_delay
    if (en) begin
      c$app_arg_8 <= c$app_arg_9;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_9_delay
    if (en) begin
      c$app_arg_9 <= p3;
    end
  end
  // delay end

  assign p3 = pacings[0:0];

  // delay begin
  always @(posedge clk) begin : c$app_arg_10_delay
    if (en) begin
      c$app_arg_10 <= c$app_arg_11;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_11_delay
    if (en) begin
      c$app_arg_11 <= c$app_arg_12;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_12_delay
    if (en) begin
      c$app_arg_12 <= c$out1_app_arg;
    end
  end
  // delay end

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_14;
  generate
  for (i_14 = 0; i_14 < 3; i_14 = i_14 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_22[i_14*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_14*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_14*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_15;
  generate
  for (i_15=0; i_15 < 3; i_15 = i_15 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_15*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_15[0+:2];
    wire [2:0] c$case_alt_17;
    // very_simple.hs:203:1-70
    wire [7:0] t_11;
    // very_simple.hs:203:1-70
    wire [71:0] x_9;
    assign map_out_1 = c$case_alt_17;

    assign c$case_alt_17 = (t_11 == result_16) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_11 = x_9[71:64];

    assign x_9 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_15*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16=i_16+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_16] = result_22[i_16*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_15 = c$case_scrut_4[2:2] ? {result_16,
                                            $signed(c$case_scrut_3[63:0])} : {result_16,
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  assign result_16 = (t_5 > 8'd5) ? c$app_arg_13 : (c$app_arg_13 + 8'd4);

  assign c$app_arg_13 = t_5 - 8'd5;

  // delay begin
  always @(posedge clk) begin : c$app_arg_14_delay
    if (en) begin
      c$app_arg_14 <= c$app_arg_15;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_15_delay
    if (en) begin
      c$app_arg_15 <= c$app_arg_16;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_16_delay
    if (en) begin
      c$app_arg_16 <= c$app_arg_17;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_17_delay
    if (en) begin
      c$app_arg_17 <= c$out0_app_arg;
    end
  end
  // delay end

  assign c$vec2_2 = (ws_2[9-1 : 0]);

  // zipWith start
  genvar i_17;
  generate
  for (i_17 = 0; i_17 < 3; i_17 = i_17 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_26[i_17*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_17*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_17*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_18;
  generate
  for (i_18=0; i_18 < 3; i_18 = i_18 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_18*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd2 - i_18[0+:2];
    wire [2:0] c$case_alt_18;
    // very_simple.hs:203:1-70
    wire [7:0] t_12;
    // very_simple.hs:203:1-70
    wire [71:0] x_10;
    assign map_out_2 = c$case_alt_18;

    assign c$case_alt_18 = (t_12 == result_18) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_12 = x_10[71:64];

    assign x_10 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_18*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:3-1];
  genvar i_19;
  generate
  for (i_19=0; i_19 < 3; i_19=i_19+1) begin : mk_array_2
    assign vecArray_2[(3-1)-i_19] = result_26[i_19*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[12-1 -: 3];

  assign result_17 = c$case_scrut_6[2:2] ? {result_18,
                                            $signed(c$case_scrut_5[63:0])} : {result_18,
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  assign result_18 = (t_6 > 8'd5) ? c$app_arg_18 : (c$app_arg_18 + 8'd4);

  assign c$app_arg_18 = t_6 - 8'd5;

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_20;
  generate
  for (i_20 = 0; i_20 < 3; i_20 = i_20 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_22[i_20*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_20*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_20*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 3; i_21 = i_21 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_21*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_21[0+:2];
    wire [2:0] c$case_alt_19;
    // very_simple.hs:203:1-70
    wire [7:0] t_13;
    // very_simple.hs:203:1-70
    wire [71:0] x_11;
    assign map_out_3 = c$case_alt_19;

    assign c$case_alt_19 = (t_13 == result_20) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_13 = x_11[71:64];

    assign x_11 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_21*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_22;
  generate
  for (i_22=0; i_22 < 3; i_22=i_22+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_22] = result_22[i_22*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_19 = c$case_scrut_8[2:2] ? {result_31,
                                            $signed(c$case_scrut_7[63:0])} : {result_31,
                                                                              64'sd2};

  assign result_20 = (result_31 > 8'd3) ? c$app_arg_19 : (c$app_arg_19 + 8'd4);

  assign c$app_arg_19 = result_31 - 8'd3;

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  assign result_21 = c$out1_app_arg ? t_2 : result_22;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_22_register
    if ( rst) begin
      result_22 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_22 <= result_21;
    end
  end
  // register end

  assign t_projection_4 = ({result_22,{result_27[71:64],   (x_1 + y_1)}});

  assign t_2 = t_projection_4[215:0];

  assign x_1 = $signed(result_23[63:0]);

  assign y_1 = $signed(result_27[63:0]);

  assign c$vec2_4 = (ws_4[9-1 : 0]);

  // zipWith start
  genvar i_23;
  generate
  for (i_23 = 0; i_23 < 3; i_23 = i_23 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_26[i_23*72+:72];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_23*3+:3];
    wire [74:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_23*75+:75] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_24;
  generate
  for (i_24=0; i_24 < 3; i_24 = i_24 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [74:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_24*75+:75];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd2 - i_24[0+:2];
    wire [2:0] c$case_alt_20;
    // very_simple.hs:203:1-70
    wire [7:0] t_14;
    // very_simple.hs:203:1-70
    wire [71:0] x_12;
    assign map_out_4 = c$case_alt_20;

    assign c$case_alt_20 = (t_14 == result_24) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_14 = x_12[71:64];

    assign x_12 = map_in_4[74:3];


    assign c$ws_app_arg_10[i_24*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:3-1];
  genvar i_25;
  generate
  for (i_25=0; i_25 < 3; i_25=i_25+1) begin : mk_array_4
    assign vecArray_4[(3-1)-i_25] = result_26[i_25*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[12-1 -: 3];

  assign result_23 = c$case_scrut_10[2:2] ? {result_24,
                                             $signed(c$case_scrut_9[63:0])} : {result_24,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign result_24 = (t_6 > 8'd1) ? c$app_arg_20 : (c$app_arg_20 + 8'd4);

  assign c$app_arg_20 = t_6 - 8'd1;

  assign result_25 = c$out0_app_arg ? t_3 : result_26;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_26_register
    if ( rst) begin
      result_26 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_26 <= result_25;
    end
  end
  // register end

  assign t_projection_6 = ({result_26,{result_32[71:64],   (x_2 + y_2)}});

  assign t_3 = t_projection_6[215:0];

  assign x_2 = $signed(result_32[63:0]);

  assign y_2 = $signed(result_19[63:0]);

  assign c$vec2_5 = (ws_5[4-1 : 0]);

  // zipWith start
  genvar i_26;
  generate
  for (i_26 = 0; i_26 < 2; i_26 = i_26 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_29[i_26*72+:72];
    wire [1:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_26*2+:2];
    wire [73:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_26*74+:74] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_27;
  generate
  for (i_27=0; i_27 < 2; i_27 = i_27 + 1) begin : imap_5
    wire [1-1:0] map_index_5;
    wire [73:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_27*74+:74];
    wire [1:0] map_out_5;

    assign map_index_5 = 1'd1 - i_27[0+:1];
    wire [1:0] c$case_alt_21;
    // very_simple.hs:203:1-70
    wire [7:0] t_15;
    // very_simple.hs:203:1-70
    wire [71:0] x_13;
    assign map_out_5 = c$case_alt_21;

    assign c$case_alt_21 = (t_15 == result_28) ? {1'b1,map_index_5} : map_in_5[1:0];

    assign t_15 = x_13[71:64];

    assign x_13 = map_in_5[73:2];


    assign c$ws_app_arg_12[i_27*2+:2] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:2-1];
  genvar i_28;
  generate
  for (i_28=0; i_28 < 2; i_28=i_28+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_28] = result_29[i_28*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-1) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[6-1 -: 2];

  assign result_27 = c$case_scrut_12[1:1] ? {result_28,
                                             $signed(c$case_scrut_11[63:0])} : {result_28,
                                                                                64'sd0};

  assign i_5 = c$case_scrut_12[0:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,1'bx}};

  assign result_28 = (t_7 > 8'd2) ? c$app_arg_21 : (c$app_arg_21 + 8'd4);

  assign c$app_arg_21 = t_7 - 8'd2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_29 <= result_30;
    end
  end
  // register end

  assign t_projection_8 = ({result_29,{t_7,   $signed(result_41[68:5])}});

  assign t_4 = t_projection_8[143:0];

  assign result_30 = input1HasData ? t_4 : result_29;

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= c$out1_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_0_delay
    if (en) begin
      c$out1_app_arg_0 <= p2;
    end
  end
  // delay end

  assign result_31 = (t_5 > 8'd1) ? c$app_arg_22 : (c$app_arg_22 + 8'd4);

  assign c$app_arg_22 = t_5 - 8'd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_32_register
    if ( rst) begin
      result_32 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_32 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = input0HasData ? {t_8,
                                             $signed(result_41[133:70])} : result_32;

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_delay
    if (en) begin
      c$out0_app_arg <= p0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_33;
    end
  end
  // register end

  assign result_33 = p2 ? result_34 : t_5;

  assign b_0 = t_5 == 8'd4;

  assign f1_0 = t_5 + 8'd1;

  assign result_34 = b_0 ? 8'd1 : f1_0;

  assign p2 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_35;
    end
  end
  // register end

  assign result_35 = p0 ? result_36 : t_6;

  assign b_1 = t_6 == 8'd4;

  assign f1_1 = t_6 + 8'd1;

  assign result_36 = b_1 ? 8'd1 : f1_1;

  assign p0 = pacings[2:2];

  assign pacings = result_41[2:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_37;
    end
  end
  // register end

  assign result_37 = input1HasData ? result_38 : t_7;

  assign b_2 = t_7 == 8'd4;

  assign f1_2 = t_7 + 8'd1;

  assign result_38 = b_2 ? 8'd1 : f1_2;

  assign input1HasData = result_41[4:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_39;
    end
  end
  // register end

  assign result_39 = input0HasData ? result_40 : t_8;

  assign b_3 = t_8 == 8'd4;

  assign f1_3 = t_8 + 8'd1;

  assign result_40 = b_3 ? 8'd1 : f1_3;

  assign input0HasData = result_41[69:69];

  assign result_41 = {c$app_arg_25,
                      c$app_arg_24,   c$app_arg_23};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_23_register
    if ( rst) begin
      c$app_arg_23 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_23 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                                        1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                                        1'b0,   1'b0}};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,
                                                              1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [133:0] vecArray_6 [0:2-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 2; i_29=i_29+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_29] = buffer[i_29*134+:134];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_6[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_24_register
    if ( rst) begin
      c$app_arg_24 <= 1'b0;
    end else if (en) begin
      c$app_arg_24 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_25_register
    if ( rst) begin
      c$app_arg_25 <= 1'b0;
    end else if (en) begin
      c$app_arg_25 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_3 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[401:134] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[401:134];

  assign qData = result_2[133:0];

  assign x_3 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_3 + 64'sd1));

  assign c$tte_rhs_0 = (x_3 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_3 - 64'sd1);

  assign result = {result_5[246:52],   {qPush,
                                        qPop,   result_41[135:135],   qPopValid,
                                        result_5[51:49],   result_5[48:48],
                                        result_5[47:40],   result_5[39:32],
                                        result_5[31:24],   result_5[23:16],
                                        result_5[15:8],   result_5[7:0]}};

  assign qPopValid = result_41[134:134];

  assign qPush = result_2[134:134];

  assign qPop = result_5[247:247];

  assign result_0 = result[250:56];

  assign result_1 = result[55:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[55:55];

  assign result_1_1 = result_1[54:54];

  assign result_1_2 = result_1[53:53];

  assign result_1_3 = result_1[52:52];

  assign result_1_4 = result_1[51:49];

  assign result_1_5 = result_1[48:48];

  assign result_1_6 = result_1[47:40];

  assign result_1_7 = result_1[39:32];

  assign result_1_8 = result_1[31:24];

  assign result_1_9 = result_1[23:16];

  assign result_1_10 = result_1[15:8];

  assign result_1_11 = result_1[7:0];

  assign result_1_4_0 = result_1_4[2:2];

  assign result_1_4_1 = result_1_4[1:1];

  assign result_1_4_2 = result_1_4[0:0];


endmodule


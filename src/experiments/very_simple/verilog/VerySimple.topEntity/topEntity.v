/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire [7:0] result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    , output wire  result_1_5
    , output wire  result_1_6
    , output wire  result_1_7
    );
  wire [75:0] result_2;
  reg  c$app_arg = 1'b0;
  // very_simple.hs:217:1-112
  wire [71:0] c$result_app_arg;
  // very_simple.hs:217:1-112
  reg [71:0] result_3 = {8'd11,   64'sd0};
  // very_simple.hs:211:1-111
  reg [71:0] result_4 = {8'd11,   64'sd0};
  // very_simple.hs:211:1-111
  wire [71:0] c$result_app_arg_0;
  reg  c$app_arg_0 = 1'b0;
  wire [7:0] result_5;
  // very_simple.hs:165:1-112
  wire [7:0] f1;
  // very_simple.hs:165:1-112
  wire  b;
  // very_simple.hs:165:1-112
  reg [7:0] t = 8'd1;
  wire [7:0] result_6;
  // very_simple.hs:165:1-112
  wire  p0;
  wire [67:0] result_7;
  reg [65:0] c$app_arg_1 = {{64'sd0,   1'b0},   1'b0};
  wire [65:0] c$case_alt;
  wire [65:0] c$case_alt_0;
  wire [65:0] c$case_alt_1;
  reg [65:0] c$case_alt_2;
  reg [65:0] c$case_alt_3;
  wire [65:0] c$case_alt_4;
  reg  c$app_arg_2 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  reg  c$case_alt_7;
  reg  c$app_arg_3 = 1'b0;
  wire  c$case_alt_8;
  wire  c$case_alt_9;
  // very_simple.hs:63:1-78
  reg [131:0] buffer = {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
  // very_simple.hs:63:1-78
  wire [131:0] c$buffer_case_alt;
  // very_simple.hs:63:1-78
  wire [131:0] c$buffer_case_alt_0;
  // very_simple.hs:63:1-78
  wire [131:0] c$buffer_case_alt_1;
  // very_simple.hs:63:1-78
  wire [65:0] qData;
  // very_simple.hs:63:1-78
  reg signed [63:0] cursor = (64'sd0);
  // very_simple.hs:63:1-78
  wire signed [63:0] c$cursor_case_alt;
  // very_simple.hs:63:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // very_simple.hs:63:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // very_simple.hs:63:1-78
  wire  c$cursor_case_scrut;
  // very_simple.hs:63:1-78
  wire signed [63:0] x;
  // very_simple.hs:63:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // very_simple.hs:63:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // very_simple.hs:63:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // very_simple.hs:232:1-142
  wire  pacing0;
  // very_simple.hs:232:1-142
  wire  qPopValid;
  // very_simple.hs:232:1-142
  wire  qPop;
  wire [64:0] inputs;
  wire [197:0] c$buffer_case_alt_sel_alt_t_2;
  wire signed [63:0] c$tte_rhs;
  wire [79:0] result;
  wire [64:0] result_0;
  wire [14:0] result_1;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = {{1'b1,
                      {$signed(result_3[63:0]),   c$app_arg}},   {t,
                                                                  1'b1,   qPopValid}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$app_arg_0;
    end
  end
  // delay end

  assign c$result_app_arg = c$app_arg_0 ? {result_4[71:64],
                                           $signed(result_4[63:0])} : result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_3 <= c$result_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_4 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = result_7[1:1] ? {t,
                                               $signed(result_7[65:2])} : result_4;

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= p0;
    end
  end
  // delay end

  assign result_5 = b ? 8'd1 : f1;

  assign f1 = t + 8'd1;

  assign b = t == 8'd10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_6;
    end
  end
  // register end

  assign result_6 = p0 ? result_5 : t;

  assign p0 = result_7[0:0];

  assign result_7 = {c$app_arg_3,   c$app_arg_2,
                     c$app_arg_1};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_1_register
    if ( rst) begin
      c$app_arg_1 <= {{64'sd0,   1'b0},   1'b0};
    end else if (en) begin
      c$app_arg_1 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = pacing0 ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   1'b0};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   1'b0};

  always @(*) begin
    case(x)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               1'b0};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [65:0] vecArray [0:2-1];
  genvar i;
  generate
  for (i=0; i < 2; i=i+1) begin : mk_array
    assign vecArray[(2-1)-i] = buffer[i*66+:66];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_2_register
    if ( rst) begin
      c$app_arg_2 <= 1'b0;
    end else if (en) begin
      c$app_arg_2 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = pacing0 ? qPop : c$case_alt_6;

  assign c$case_alt_6 = qPop ? c$case_alt_7 : 1'b0;

  always @(*) begin
    case(x)
      64'sd0 : c$case_alt_7 = 1'b0;
      default : c$case_alt_7 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_3_register
    if ( rst) begin
      c$app_arg_3 <= 1'b0;
    end else if (en) begin
      c$app_arg_3 <= c$case_alt_8;
    end
  end
  // register end

  assign c$case_alt_8 = pacing0 ? c$case_alt_9 : 1'b0;

  assign c$case_alt_9 = qPop ? 1'b1 : c$cursor_case_scrut;

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0},   {{64'sd0,   1'b0},   1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = pacing0 ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_0 = qPop ? buffer : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_t_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? c$buffer_case_alt_sel_alt_t_2[197:66] : buffer;

  assign qData = {inputs,   pacing0};

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = pacing0 ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? ((x + 64'sd1)) : cursor;

  assign c$tte_rhs = (x != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs[0];

  assign x = cursor;

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x - 64'sd1);

  assign result = {result_2[74:10],
                   {result_2[9:2],   result_2[1:1],
                    result_2[0:0],   result_7[67:67],   qPopValid,
                    pacing0,   pacing0,   qPop}};

  assign pacing0 = inputs[0:0];

  assign qPopValid = result_7[66:66];

  assign qPop = result_2[75:75];

  assign result_0 = result[79:15];

  assign result_1 = result[14:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = result_1[14:7];

  assign result_1_1 = result_1[6:6];

  assign result_1_2 = result_1[5:5];

  assign result_1_3 = result_1[4:4];

  assign result_1_4 = result_1[3:3];

  assign result_1_5 = result_1[2:2];

  assign result_1_6 = result_1[1:1];

  assign result_1_7 = result_1[0:0];


endmodule


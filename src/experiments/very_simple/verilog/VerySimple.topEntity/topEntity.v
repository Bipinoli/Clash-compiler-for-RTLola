/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire [7:0] result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    );
  wire [131:0] result_2;
  // very_simple.hs:130:1-82
  wire  pacing0;
  wire [73:0] result_3;
  reg  c$app_arg = 1'b0;
  wire [71:0] result_4;
  // very_simple.hs:234:1-137
  reg [71:0] result_5 = {8'd11,   64'sd0};
  // very_simple.hs:234:1-137
  wire [71:0] t;
  wire signed [63:0] x;
  wire signed [63:0] y;
  // very_simple.hs:228:1-111
  reg [71:0] result_6 = {8'd11,   64'sd0};
  // very_simple.hs:228:1-111
  wire [71:0] c$result_app_arg;
  wire [71:0] result_7;
  wire [71:0] c$case_scrut;
  // very_simple.hs:156:1-72
  wire [0:0] i;
  wire [1:0] c$case_scrut_0;
  // very_simple.hs:156:1-72
  wire [5:0] ws;
  // very_simple.hs:156:1-72
  wire [3:0] c$ws_app_arg;
  // very_simple.hs:156:1-72
  wire [7:0] offsetTag;
  // very_simple.hs:156:1-72
  wire [147:0] c$ws_app_arg_0;
  // very_simple.hs:156:1-72
  wire [7:0] c$offsetTag_app_arg;
  reg [7:0] c$app_arg_0 = 8'd11;
  // very_simple.hs:223:1-119
  reg [143:0] result_8 = {{8'd11,   64'sd0},   {8'd11,   64'sd0}};
  // very_simple.hs:223:1-119
  wire [143:0] t_0;
  wire [143:0] result_9;
  reg  c$app_arg_1 = 1'b0;
  wire [7:0] result_10;
  // very_simple.hs:172:1-98
  wire [7:0] f1;
  // very_simple.hs:172:1-98
  wire  b;
  // very_simple.hs:172:1-98
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_11;
  // very_simple.hs:172:1-98
  wire  p0;
  wire [132:0] result_12;
  reg [130:0] c$app_arg_2 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0};
  wire [130:0] c$case_alt;
  wire [130:0] c$case_alt_0;
  wire [130:0] c$case_alt_1;
  reg [130:0] c$case_alt_2;
  reg [130:0] c$case_alt_3;
  wire [130:0] c$case_alt_4;
  reg  c$app_arg_3 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_4 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // very_simple.hs:67:1-78
  reg [261:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0},   {{{64'sd0,   1'b0},
                                                       {64'sd0,   1'b0}},
                                                      1'b0}};
  // very_simple.hs:67:1-78
  wire [261:0] c$buffer_case_alt;
  // very_simple.hs:67:1-78
  wire [261:0] c$buffer_case_alt_0;
  // very_simple.hs:67:1-78
  wire [261:0] c$buffer_case_alt_1;
  // very_simple.hs:67:1-78
  wire [130:0] qData;
  // very_simple.hs:67:1-78
  wire signed [63:0] x_0;
  // very_simple.hs:67:1-78
  reg signed [63:0] cursor = (64'sd0);
  // very_simple.hs:67:1-78
  wire signed [63:0] c$cursor_case_alt;
  // very_simple.hs:67:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // very_simple.hs:67:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // very_simple.hs:67:1-78
  wire  c$cursor_case_scrut;
  // very_simple.hs:67:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // very_simple.hs:67:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // very_simple.hs:67:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // very_simple.hs:250:1-125
  wire  qPopValid;
  // very_simple.hs:250:1-125
  wire  qPush;
  // very_simple.hs:250:1-125
  wire  qPop;
  wire [129:0] inputs;
  wire [3:0] c$vec2;
  wire [215:0] t_projection_0;
  wire signed [63:0] c$tte_rhs;
  wire [392:0] c$buffer_case_alt_sel_alt_t_1;
  wire [392:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [76:0] result;
  wire [64:0] result_0;
  wire [11:0] result_1;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {pacing0,   {inputs,
                                 pacing0}};

  assign pacing0 = inputs[65:65] & inputs[0:0];

  assign result_3 = {{1'b1,
                      {$signed(result_5[63:0]),   c$app_arg}},
                     t_1};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$app_arg_1;
    end
  end
  // delay end

  assign result_4 = c$app_arg_1 ? t : result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign t = {result_7[71:64],   (x + y)};

  assign x = $signed(result_7[63:0]);

  assign y = $signed(result_6[63:0]);

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= {8'd11,   64'sd0};
    end else if (en) begin
      result_6 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_12[1:1] ? {t_1,
                                              $signed(result_12[65:2])} : result_6;

  assign result_7 = c$case_scrut_0[1:1] ? {c$app_arg_0,
                                           $signed(c$case_scrut[63:0])} : {c$app_arg_0,
                                                                           64'sd10};

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 2; i_0=i_0+1) begin : mk_array
    assign vecArray[(2-1)-i_0] = result_8[i_0*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign i = c$case_scrut_0[0:0];

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign ws = {c$ws_app_arg,{1'b0,1'bx}};

  // imap begin
  genvar i_2;
  generate
  for (i_2=0; i_2 < 2; i_2 = i_2 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg_0[i_2*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_2[0+:1];
    wire [1:0] c$case_alt_13;
    // very_simple.hs:156:1-72
    wire [7:0] t_3;
    // very_simple.hs:156:1-72
    wire [71:0] x_2;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_3 == offsetTag) ? {1'b1,map_index} : map_in[1:0];

    assign t_3 = x_2[71:64];

    assign x_2 = map_in[73:2];


    assign c$ws_app_arg[i_2*2+:2] = map_out;
  end
  endgenerate
  // imap end

  assign offsetTag = (c$app_arg_0 > 8'd1) ? c$offsetTag_app_arg : (c$offsetTag_app_arg + 8'd10);

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_3;
  generate
  for (i_3 = 0; i_3 < 2; i_3 = i_3 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_8[i_3*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_3*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg_0[i_3*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  assign c$offsetTag_app_arg = c$app_arg_0 - 8'd1;

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= t_1;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {{8'd11,   64'sd0},   {8'd11,   64'sd0}};
    end else if (en) begin
      result_8 <= result_9;
    end
  end
  // register end

  assign t_projection_0 = ({result_8,{t_1,   $signed(result_12[130:67])}});

  assign t_0 = t_projection_0[143:0];

  assign result_9 = result_12[66:66] ? t_0 : result_8;

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= p0;
    end
  end
  // delay end

  assign result_10 = b ? 8'd1 : f1;

  assign f1 = t_1 + 8'd1;

  assign b = t_1 == 8'd10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_11;
    end
  end
  // register end

  assign result_11 = p0 ? result_10 : t_1;

  assign p0 = result_12[0:0];

  assign result_12 = {c$app_arg_4,   c$app_arg_3,
                      c$app_arg_2};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_2_register
    if ( rst) begin
      c$app_arg_2 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0};
    end else if (en) begin
      c$app_arg_2 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0};

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   1'b0};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [130:0] vecArray_0 [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_4] = buffer[i_4*131+:131];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_0[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_3_register
    if ( rst) begin
      c$app_arg_3 <= 1'b0;
    end else if (en) begin
      c$app_arg_3 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_4_register
    if ( rst) begin
      c$app_arg_4 <= 1'b0;
    end else if (en) begin
      c$app_arg_4 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_0 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0},   {{{64'sd0,   1'b0},
                                                         {64'sd0,   1'b0}},
                                                        1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[392:131] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[392:131];

  assign qData = result_2[130:0];

  assign x_0 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_0 + 64'sd1));

  assign c$tte_rhs_0 = (x_0 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_0)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_0 - 64'sd1);

  assign result = {result_3[72:8],
                   {result_3[7:0],   qPush,   qPop,
                    result_12[132:132],   qPopValid}};

  assign qPopValid = result_12[131:131];

  assign qPush = result_2[131:131];

  assign qPop = result_3[73:73];

  assign result_0 = result[76:12];

  assign result_1 = result[11:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = result_1[11:4];

  assign result_1_1 = result_1[3:3];

  assign result_1_2 = result_1[2:2];

  assign result_1_3 = result_1[1:1];

  assign result_1_4 = result_1[0:0];


endmodule


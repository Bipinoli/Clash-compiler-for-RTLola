/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1
    , input wire signed [63:0] inputs_2_0
    , input wire  inputs_2_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [200:0] result_4;
  // spec.hs:193:1-82
  wire  timer0Over;
  wire [200:0] result_5;
  wire [5:0] c$app_arg;
  wire  result_6;
  // spec.hs:424:1-159
  reg [71:0] result_7 = {8'd23,   64'sd0};
  // spec.hs:424:1-159
  wire [71:0] t;
  wire [71:0] result_8;
  wire signed [63:0] ds;
  wire signed [63:0] ds1;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // spec.hs:462:1-160
  wire signed [63:0] y_0;
  // spec.hs:462:1-160
  wire signed [63:0] x_1;
  // spec.hs:462:1-160
  wire [1343:0] win;
  // spec.hs:462:1-160
  reg [1351:0] window = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [1351:0] result_9;
  // spec.hs:462:1-160
  wire [1351:0] t_0;
  wire [1343:0] result_10;
  // spec.hs:462:1-160
  wire [1343:0] c$t_case_alt;
  // spec.hs:462:1-160
  wire [1343:0] c$t_case_alt_0;
  // spec.hs:462:1-160
  wire [1343:0] lastBucketUpdated;
  wire [3:0] c$app_arg_0;
  wire  result_11;
  // spec.hs:241:1-63
  wire [224:0] c$ws_app_arg;
  // spec.hs:241:1-63
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire signed [63:0] result_12;
  // spec.hs:241:1-63
  wire [1:0] i;
  // spec.hs:241:1-63
  wire [11:0] ws;
  wire [3:0] c$app_arg_1;
  wire  result_13;
  // spec.hs:268:1-127
  wire  sig;
  wire [3:0] c$app_arg_2;
  wire  result_14;
  // spec.hs:275:1-112
  wire  slide3;
  // spec.hs:444:1-160
  wire signed [63:0] y_1;
  // spec.hs:444:1-160
  wire signed [63:0] x_2;
  // spec.hs:444:1-160
  wire [703:0] win_0;
  // spec.hs:444:1-160
  reg [711:0] window_0 = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [711:0] result_15;
  // spec.hs:444:1-160
  wire [711:0] t_1;
  wire [703:0] result_16;
  // spec.hs:444:1-160
  wire [703:0] c$t_case_alt_1;
  // spec.hs:444:1-160
  wire [703:0] c$t_case_alt_2;
  // spec.hs:444:1-160
  wire [703:0] lastBucketUpdated_0;
  wire [3:0] c$app_arg_3;
  wire  result_17;
  // spec.hs:241:1-63
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:241:1-63
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_18;
  // spec.hs:241:1-63
  wire [1:0] i_0;
  // spec.hs:241:1-63
  wire [11:0] ws_0;
  wire [3:0] c$app_arg_4;
  wire  result_19;
  // spec.hs:268:1-127
  wire  sig_0;
  wire [3:0] c$app_arg_5;
  wire  result_20;
  // spec.hs:275:1-112
  wire  slide2;
  // spec.hs:275:1-112
  wire [1:0] slides;
  wire [255:0] c$app_arg_6;
  wire [63:0] result_21;
  wire [4:0] c$app_arg_7;
  wire  result_22;
  // spec.hs:241:1-63
  wire [224:0] c$ws_app_arg_3;
  // spec.hs:241:1-63
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire signed [63:0] result_23;
  // spec.hs:241:1-63
  wire [1:0] i_1;
  // spec.hs:241:1-63
  wire [11:0] ws_1;
  wire [5:0] c$app_arg_8;
  wire  result_24;
  // spec.hs:241:1-63
  wire [224:0] c$ws_app_arg_5;
  // spec.hs:241:1-63
  wire [8:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire signed [63:0] result_25;
  // spec.hs:241:1-63
  wire [1:0] i_2;
  // spec.hs:241:1-63
  wire [11:0] ws_2;
  wire [5:0] c$app_arg_9;
  wire  result_26;
  // spec.hs:415:1-149
  reg [215:0] result_27 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
  // spec.hs:415:1-149
  wire [215:0] t_2;
  wire [215:0] result_28;
  wire signed [63:0] x_3;
  wire signed [63:0] y_2;
  // spec.hs:275:1-112
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:254:1-53
  wire signed [63:0] dta;
  // spec.hs:254:1-53
  wire [7:0] tag;
  // spec.hs:254:1-53
  wire [7:0] tagToMatch;
  // spec.hs:400:1-122
  reg [71:0] result_29 = {8'd23,   64'sd0};
  // spec.hs:400:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:254:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_10;
  wire  result_30;
  wire [2:0] c$app_arg_11;
  wire  result_31;
  // spec.hs:406:1-149
  reg [215:0] result_32 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
  // spec.hs:406:1-149
  wire [215:0] t_3;
  wire [215:0] result_33;
  wire signed [63:0] x_4;
  wire signed [63:0] y_3;
  // spec.hs:275:1-112
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:254:1-53
  wire signed [63:0] dta_0;
  // spec.hs:254:1-53
  wire [7:0] tag_0;
  // spec.hs:254:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:275:1-112
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:254:1-53
  wire signed [63:0] dta_1;
  // spec.hs:254:1-53
  wire [7:0] tagToMatch_1;
  // spec.hs:254:1-53
  wire [7:0] tag_1;
  // spec.hs:390:1-122
  reg [71:0] result_34 = {8'd23,   64'sd0};
  // spec.hs:390:1-122
  wire [71:0] c$result_app_arg_0;
  // spec.hs:254:1-53
  reg signed [63:0] c$ds_app_arg_0 = (64'sd0);
  wire [1:0] c$app_arg_12;
  wire  result_35;
  wire [2:0] c$app_arg_13;
  wire  result_36;
  // spec.hs:395:1-122
  reg [71:0] result_37 = {8'd23,   64'sd0};
  // spec.hs:395:1-122
  wire [71:0] c$result_app_arg_1;
  // spec.hs:275:1-112
  reg signed [63:0] c$input1Win_app_arg = (64'sd0);
  wire [1:0] c$app_arg_14;
  wire  result_38;
  wire [319:0] c$app_arg_15;
  wire [63:0] result_39;
  wire [191:0] c$app_arg_16;
  wire [63:0] result_40;
  wire [127:0] c$app_arg_17;
  wire [63:0] result_41;
  // spec.hs:380:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_42;
  // spec.hs:380:9-81
  wire  b;
  // spec.hs:380:9-81
  wire [7:0] f1;
  wire [7:0] result_43;
  // spec.hs:275:1-112
  wire  p2;
  // spec.hs:380:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_44;
  // spec.hs:380:9-81
  wire  b_0;
  // spec.hs:380:9-81
  wire [7:0] f1_0;
  wire [7:0] result_45;
  // spec.hs:275:1-112
  wire  p1;
  // spec.hs:380:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_46;
  // spec.hs:380:9-81
  wire  b_1;
  // spec.hs:380:9-81
  wire [7:0] f1_1;
  wire [7:0] result_47;
  // spec.hs:275:1-112
  wire  p0;
  // spec.hs:275:1-112
  wire [2:0] pacings;
  // spec.hs:380:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_48;
  // spec.hs:380:9-81
  wire  b_2;
  // spec.hs:380:9-81
  wire [7:0] f1_2;
  wire [7:0] result_49;
  // spec.hs:380:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_50;
  // spec.hs:380:9-81
  wire  b_3;
  // spec.hs:380:9-81
  wire [7:0] f1_3;
  wire [7:0] result_51;
  // spec.hs:380:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_52;
  // spec.hs:380:9-81
  wire  b_4;
  // spec.hs:380:9-81
  wire [7:0] f1_4;
  wire [7:0] result_53;
  // spec.hs:275:1-112
  wire [194:0] inputs_3;
  wire [201:0] result_54;
  reg [199:0] c$app_arg_18 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
 {1'b0,   1'b0,   1'b0}};
  wire [199:0] c$case_alt;
  wire [199:0] c$case_alt_0;
  wire [199:0] c$case_alt_1;
  reg [199:0] c$case_alt_2;
  reg [199:0] c$case_alt_3;
  wire [199:0] c$case_alt_4;
  reg  c$app_arg_19 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_20 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:124:1-78
  reg [399:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
  {1'b0,   1'b0,   1'b0}},   {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                        1'b0}},
                              {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0}}};
  // spec.hs:124:1-78
  wire [399:0] c$buffer_case_alt;
  // spec.hs:124:1-78
  wire [399:0] c$buffer_case_alt_0;
  // spec.hs:124:1-78
  wire [399:0] c$buffer_case_alt_1;
  // spec.hs:124:1-78
  wire [199:0] qData;
  // spec.hs:124:1-78
  wire signed [63:0] x_5;
  // spec.hs:124:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:124:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:124:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:124:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:124:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:124:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:124:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:124:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:485:1-136
  wire  qPopValid;
  // spec.hs:485:1-136
  wire  qPush;
  // spec.hs:485:1-136
  wire  qPop;
  wire [194:0] inputs;
  wire [703:0] c$vec;
  wire [1343:0] c$vec_0;
  wire signed [63:0] x_projection_29;
  wire [1407:0] c$t_case_alt_sel_alt_t_0;
  wire [1407:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire signed [63:0] x_projection_31;
  wire [767:0] c$t_case_alt_sel_alt_t_3;
  wire [767:0] c$t_case_alt_sel_alt_f_3;
  wire [8:0] c$vec2_0;
  wire [8:0] c$vec2_1;
  wire [8:0] c$vec2_2;
  wire [287:0] t_projection_3;
  wire [287:0] t_projection_4;
  wire signed [63:0] c$tte_rhs;
  wire [599:0] c$buffer_case_alt_sel_alt_t_1;
  wire [599:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [203:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [8:0] result_1;
  wire [2:0] result_1_4_9;
  wire [1:0] result_1_5_13;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1},   {inputs_2_0,
                                                  inputs_2_1}};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {inputs[130:130] | (inputs[65:65] | (inputs[0:0] | (timer0Over | (timer0Over | timer0Over)))),
                     {inputs,   {timer0Over,   timer0Over},
                      {inputs[130:130] & inputs[65:65],
                       inputs[65:65] & inputs[0:0],   timer0Over}}};

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{1'b1,   {{result_25,
                                result_26},   {result_23,   result_24},
                               {$signed(result_7[63:0]),   result_6}}},
                     {pacings,   slides}};

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  assign c$app_arg = {p2,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res,   iterateI_ho1_4_res};



  assign result_6 = c$app_arg[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_7_register
    if ( rst) begin
      result_7 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_7 <= result_8;
    end
  end
  // register end

  assign t = {result_21[23:16],   (x_0 + y)};

  assign result_8 = result_22 ? t : result_7;

  assign c$vec = window_0[703:0];

  wire [639:0] vec;
  wire signed [63:0] acc_4_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_5;
  wire signed [63:0] acc_6;
  wire signed [63:0] acc_7;
  wire signed [63:0] acc_8;
  wire signed [63:0] acc_9;
  wire signed [63:0] acc_10;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  wire signed [63:0] acc_1_2;
  wire signed [63:0] acc_1_3;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_2_1;
  wire signed [63:0] acc_3_0;
  wire signed [63:0] acc_1_4;
  assign ds = acc_4_0;

  assign vec = (c$vec[640-1 : 0]);

  assign acc_1 = $signed(vec[639:576]);

  assign acc_2 = $signed(vec[575:512]);

  assign acc_3 = $signed(vec[511:448]);

  assign acc_4 = $signed(vec[447:384]);

  assign acc_5 = $signed(vec[383:320]);

  assign acc_6 = $signed(vec[319:256]);

  assign acc_7 = $signed(vec[255:192]);

  assign acc_8 = $signed(vec[191:128]);

  assign acc_9 = $signed(vec[127:64]);

  assign acc_10 = $signed(vec[63:0]);

  wire signed [63:0] x_7;
  wire signed [63:0] y_4;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_7 = acc_1;

  assign y_4 = acc_2;

  assign c$case_alt_13 = (x_7 + y_4);



  wire signed [63:0] x_8;
  wire signed [63:0] y_5;
  wire signed [63:0] c$case_alt_14;
  assign acc_1_1 = c$case_alt_14;

  assign x_8 = acc_3;

  assign y_5 = acc_4;

  assign c$case_alt_14 = (x_8 + y_5);



  wire signed [63:0] x_9;
  wire signed [63:0] y_6;
  wire signed [63:0] c$case_alt_15;
  assign acc_1_2 = c$case_alt_15;

  assign x_9 = acc_5;

  assign y_6 = acc_6;

  assign c$case_alt_15 = (x_9 + y_6);



  wire signed [63:0] x_10;
  wire signed [63:0] y_7;
  wire signed [63:0] c$case_alt_16;
  assign acc_1_3 = c$case_alt_16;

  assign x_10 = acc_7;

  assign y_7 = acc_8;

  assign c$case_alt_16 = (x_10 + y_7);



  wire signed [63:0] x_11;
  wire signed [63:0] y_8;
  wire signed [63:0] c$case_alt_17;
  assign acc_1_4 = c$case_alt_17;

  assign x_11 = acc_9;

  assign y_8 = acc_10;

  assign c$case_alt_17 = (x_11 + y_8);



  wire signed [63:0] x_12;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_18;
  assign acc_2_0 = c$case_alt_18;

  assign x_12 = acc_1_0;

  assign y_9 = acc_1_1;

  assign c$case_alt_18 = (x_12 + y_9);



  wire signed [63:0] x_13;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_19;
  assign acc_2_1 = c$case_alt_19;

  assign x_13 = acc_1_2;

  assign y_10 = acc_1_3;

  assign c$case_alt_19 = (x_13 + y_10);



  wire signed [63:0] x_14;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_20;
  assign acc_3_0 = c$case_alt_20;

  assign x_14 = acc_2_0;

  assign y_11 = acc_2_1;

  assign c$case_alt_20 = (x_14 + y_11);



  wire signed [63:0] x_15;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_21;
  assign acc_4_0 = c$case_alt_21;

  assign x_15 = acc_3_0;

  assign y_12 = acc_1_4;

  assign c$case_alt_21 = (x_15 + y_12);





  assign c$vec_0 = window[1343:0];

  wire [1279:0] vec_0;
  wire signed [63:0] acc_5_0;
  wire signed [63:0] acc_0_6;
  wire signed [63:0] acc_0_7;
  wire signed [63:0] acc_0_8;
  wire signed [63:0] acc_0_9;
  wire signed [63:0] acc_0_10;
  wire signed [63:0] acc_0_11;
  wire signed [63:0] acc_0_12;
  wire signed [63:0] acc_0_13;
  wire signed [63:0] acc_0_14;
  wire signed [63:0] acc_0_15;
  wire signed [63:0] acc_0_16;
  wire signed [63:0] acc_0_17;
  wire signed [63:0] acc_0_18;
  wire signed [63:0] acc_0_19;
  wire signed [63:0] acc_0_20;
  wire signed [63:0] acc_0_21;
  wire signed [63:0] acc_0_22;
  wire signed [63:0] acc_0_23;
  wire signed [63:0] acc_0_24;
  wire signed [63:0] acc_0_25;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_1_1_1;
  wire signed [63:0] acc_1_2_2;
  wire signed [63:0] acc_1_3_3;
  wire signed [63:0] acc_1_4_4;
  wire signed [63:0] acc_1_5;
  wire signed [63:0] acc_1_6;
  wire signed [63:0] acc_1_7;
  wire signed [63:0] acc_1_8;
  wire signed [63:0] acc_1_9;
  wire signed [63:0] acc_2_0_5;
  wire signed [63:0] acc_2_1_6;
  wire signed [63:0] acc_2_2;
  wire signed [63:0] acc_2_3;
  wire signed [63:0] acc_3_0_7;
  wire signed [63:0] acc_3_1;
  wire signed [63:0] acc_4_0_8;
  wire signed [63:0] acc_2_4;
  assign ds1 = acc_5_0;

  assign vec_0 = (c$vec_0[1280-1 : 0]);

  assign acc_0_6 = $signed(vec_0[1279:1216]);

  assign acc_0_7 = $signed(vec_0[1215:1152]);

  assign acc_0_8 = $signed(vec_0[1151:1088]);

  assign acc_0_9 = $signed(vec_0[1087:1024]);

  assign acc_0_10 = $signed(vec_0[1023:960]);

  assign acc_0_11 = $signed(vec_0[959:896]);

  assign acc_0_12 = $signed(vec_0[895:832]);

  assign acc_0_13 = $signed(vec_0[831:768]);

  assign acc_0_14 = $signed(vec_0[767:704]);

  assign acc_0_15 = $signed(vec_0[703:640]);

  assign acc_0_16 = $signed(vec_0[639:576]);

  assign acc_0_17 = $signed(vec_0[575:512]);

  assign acc_0_18 = $signed(vec_0[511:448]);

  assign acc_0_19 = $signed(vec_0[447:384]);

  assign acc_0_20 = $signed(vec_0[383:320]);

  assign acc_0_21 = $signed(vec_0[319:256]);

  assign acc_0_22 = $signed(vec_0[255:192]);

  assign acc_0_23 = $signed(vec_0[191:128]);

  assign acc_0_24 = $signed(vec_0[127:64]);

  assign acc_0_25 = $signed(vec_0[63:0]);

  wire signed [63:0] x_16;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_22;
  assign acc_1_0_0 = c$case_alt_22;

  assign x_16 = acc_0_6;

  assign y_13 = acc_0_7;

  assign c$case_alt_22 = (x_16 + y_13);



  wire signed [63:0] x_17;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_23;
  assign acc_1_1_1 = c$case_alt_23;

  assign x_17 = acc_0_8;

  assign y_14 = acc_0_9;

  assign c$case_alt_23 = (x_17 + y_14);



  wire signed [63:0] x_18;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_24;
  assign acc_1_2_2 = c$case_alt_24;

  assign x_18 = acc_0_10;

  assign y_15 = acc_0_11;

  assign c$case_alt_24 = (x_18 + y_15);



  wire signed [63:0] x_19;
  wire signed [63:0] y_16;
  wire signed [63:0] c$case_alt_25;
  assign acc_1_3_3 = c$case_alt_25;

  assign x_19 = acc_0_12;

  assign y_16 = acc_0_13;

  assign c$case_alt_25 = (x_19 + y_16);



  wire signed [63:0] x_20;
  wire signed [63:0] y_17;
  wire signed [63:0] c$case_alt_26;
  assign acc_1_4_4 = c$case_alt_26;

  assign x_20 = acc_0_14;

  assign y_17 = acc_0_15;

  assign c$case_alt_26 = (x_20 + y_17);



  wire signed [63:0] x_21;
  wire signed [63:0] y_18;
  wire signed [63:0] c$case_alt_27;
  assign acc_1_5 = c$case_alt_27;

  assign x_21 = acc_0_16;

  assign y_18 = acc_0_17;

  assign c$case_alt_27 = (x_21 + y_18);



  wire signed [63:0] x_22;
  wire signed [63:0] y_19;
  wire signed [63:0] c$case_alt_28;
  assign acc_1_6 = c$case_alt_28;

  assign x_22 = acc_0_18;

  assign y_19 = acc_0_19;

  assign c$case_alt_28 = (x_22 + y_19);



  wire signed [63:0] x_23;
  wire signed [63:0] y_20;
  wire signed [63:0] c$case_alt_29;
  assign acc_1_7 = c$case_alt_29;

  assign x_23 = acc_0_20;

  assign y_20 = acc_0_21;

  assign c$case_alt_29 = (x_23 + y_20);



  wire signed [63:0] x_24;
  wire signed [63:0] y_21;
  wire signed [63:0] c$case_alt_30;
  assign acc_1_8 = c$case_alt_30;

  assign x_24 = acc_0_22;

  assign y_21 = acc_0_23;

  assign c$case_alt_30 = (x_24 + y_21);



  wire signed [63:0] x_25;
  wire signed [63:0] y_22;
  wire signed [63:0] c$case_alt_31;
  assign acc_1_9 = c$case_alt_31;

  assign x_25 = acc_0_24;

  assign y_22 = acc_0_25;

  assign c$case_alt_31 = (x_25 + y_22);



  wire signed [63:0] x_26;
  wire signed [63:0] y_23;
  wire signed [63:0] c$case_alt_32;
  assign acc_2_0_5 = c$case_alt_32;

  assign x_26 = acc_1_0_0;

  assign y_23 = acc_1_1_1;

  assign c$case_alt_32 = (x_26 + y_23);



  wire signed [63:0] x_27;
  wire signed [63:0] y_24;
  wire signed [63:0] c$case_alt_33;
  assign acc_2_1_6 = c$case_alt_33;

  assign x_27 = acc_1_2_2;

  assign y_24 = acc_1_3_3;

  assign c$case_alt_33 = (x_27 + y_24);



  wire signed [63:0] x_28;
  wire signed [63:0] y_25;
  wire signed [63:0] c$case_alt_34;
  assign acc_2_2 = c$case_alt_34;

  assign x_28 = acc_1_4_4;

  assign y_25 = acc_1_5;

  assign c$case_alt_34 = (x_28 + y_25);



  wire signed [63:0] x_29;
  wire signed [63:0] y_26;
  wire signed [63:0] c$case_alt_35;
  assign acc_2_3 = c$case_alt_35;

  assign x_29 = acc_1_6;

  assign y_26 = acc_1_7;

  assign c$case_alt_35 = (x_29 + y_26);



  wire signed [63:0] x_30;
  wire signed [63:0] y_27;
  wire signed [63:0] c$case_alt_36;
  assign acc_2_4 = c$case_alt_36;

  assign x_30 = acc_1_8;

  assign y_27 = acc_1_9;

  assign c$case_alt_36 = (x_30 + y_27);



  wire signed [63:0] x_31;
  wire signed [63:0] y_28;
  wire signed [63:0] c$case_alt_37;
  assign acc_3_0_7 = c$case_alt_37;

  assign x_31 = acc_2_0_5;

  assign y_28 = acc_2_1_6;

  assign c$case_alt_37 = (x_31 + y_28);



  wire signed [63:0] x_32;
  wire signed [63:0] y_29;
  wire signed [63:0] c$case_alt_38;
  assign acc_3_1 = c$case_alt_38;

  assign x_32 = acc_2_2;

  assign y_29 = acc_2_3;

  assign c$case_alt_38 = (x_32 + y_29);



  wire signed [63:0] x_33;
  wire signed [63:0] y_30;
  wire signed [63:0] c$case_alt_39;
  assign acc_4_0_8 = c$case_alt_39;

  assign x_33 = acc_3_0_7;

  assign y_30 = acc_3_1;

  assign c$case_alt_39 = (x_33 + y_30);



  wire signed [63:0] x_34;
  wire signed [63:0] y_31;
  wire signed [63:0] c$case_alt_40;
  assign acc_5_0 = c$case_alt_40;

  assign x_34 = acc_4_0_8;

  assign y_31 = acc_2_4;

  assign c$case_alt_40 = (x_34 + y_31);





  assign x_0 = ds;

  assign y = ds1;

  assign y_0 = result_12;

  assign x_projection_29 = $signed(win[1344-1 -: 64]);

  assign x_1 = x_projection_29;

  assign win = window[1343:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_9;
    end
  end
  // register end

  assign result_9 = result_14 ? t_0 : window;

  assign t_0 = {result_40[7:0],   result_10};

  assign result_10 = result_13 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = result_11 ? c$t_case_alt_sel_alt_t_0[1407:64] : c$t_case_alt_sel_alt_f_0[1407:64];

  assign c$t_case_alt_0 = result_11 ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_3;
  generate
  for (i_3=0;i_3<21;i_3=i_3+1) begin : vector_replace
    assign lastBucketUpdated[(20-i_3)*64+:64] = (64'sd0) == i_3 ? ((x_1 + y_0)) : win[(20-i_3)*64+:64];
  end
  endgenerate
  // vector replace end

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {p1,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0};



  assign result_11 = c$app_arg_0[1-1:0];

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_4;
  generate
  for (i_4 = 0; i_4 < 3; i_4 = i_4 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_27[i_4*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_4*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_4*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_5;
  generate
  for (i_5=0; i_5 < 3; i_5 = i_5 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_5*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_5[0+:2];
    wire [2:0] c$case_alt_41;
    // spec.hs:241:1-63
    wire [7:0] t_11;
    // spec.hs:241:1-63
    wire [71:0] x_35;
    assign map_out = c$case_alt_41;

    assign c$case_alt_41 = (t_11 == result_40[31:24]) ? {1'b1,map_index} : map_in[2:0];

    assign t_11 = x_35[71:64];

    assign x_35 = map_in[74:3];


    assign c$ws_app_arg_0[i_5*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_6;
  generate
  for (i_6=0; i_6 < 3; i_6=i_6+1) begin : mk_array
    assign vecArray[(3-1)-i_6] = result_27[i_6*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_12 = c$case_scrut_0[2:2] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= slide3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_9;



  assign c$app_arg_1 = {slide3,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1};



  assign result_13 = c$app_arg_1[1-1:0];

  assign sig = slide3 | p1;

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= sig;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_12;



  assign c$app_arg_2 = {sig,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2};



  assign result_14 = c$app_arg_2[1-1:0];

  assign slide3 = slides[0:0];

  assign y_1 = result_18;

  assign x_projection_31 = $signed(win_0[704-1 -: 64]);

  assign x_2 = x_projection_31;

  assign win_0 = window_0[703:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_15;
    end
  end
  // register end

  assign result_15 = result_20 ? t_1 : window_0;

  assign t_1 = {result_40[15:8],   result_16};

  assign result_16 = result_19 ? c$t_case_alt_1 : c$t_case_alt_2;

  assign c$t_case_alt_sel_alt_t_3 = ({64'sd0,lastBucketUpdated_0});

  assign c$t_case_alt_sel_alt_f_3 = ({64'sd0,win_0});

  assign c$t_case_alt_1 = result_17 ? c$t_case_alt_sel_alt_t_3[767:64] : c$t_case_alt_sel_alt_f_3[767:64];

  assign c$t_case_alt_2 = result_17 ? lastBucketUpdated_0 : win_0;

  // vector replace begin
  genvar i_8;
  generate
  for (i_8=0;i_8<11;i_8=i_8+1) begin : vector_replace_0
    assign lastBucketUpdated_0[(10-i_8)*64+:64] = (64'sd0) == i_8 ? ((x_2 + y_1)) : win_0[(10-i_8)*64+:64];
  end
  endgenerate
  // vector replace end

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_15;



  assign c$app_arg_3 = {p0,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3};



  assign result_17 = c$app_arg_3[1-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 3; i_9 = i_9 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_32[i_9*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_9*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_9*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 3; i_10 = i_10 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_10*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_10[0+:2];
    wire [2:0] c$case_alt_42;
    // spec.hs:241:1-63
    wire [7:0] t_12;
    // spec.hs:241:1-63
    wire [71:0] x_36;
    assign map_out_0 = c$case_alt_42;

    assign c$case_alt_42 = (t_12 == result_40[39:32]) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_12 = x_36[71:64];

    assign x_36 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_10*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 3; i_11=i_11+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_11] = result_32[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_18 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= slide2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_18;



  assign c$app_arg_4 = {slide2,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4};



  assign result_19 = c$app_arg_4[1-1:0];

  assign sig_0 = slide2 | p0;

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= sig_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_21;



  assign c$app_arg_5 = {sig_0,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5};



  assign result_20 = c$app_arg_5[1-1:0];

  assign slide2 = slides[1:1];

  assign slides = result_54[4:3];

  wire [63:0] iterateI_ho1_0_arg0;
  wire [63:0] iterateI_ho1_0_res_6;
  wire [63:0] iterateI_ho1_1_res_6;
  wire [63:0] iterateI_ho1_2_res_6;
  assign iterateI_ho1_0_arg0 = {t_9,   t_8,
                                t_7,   t_6,   t_5,   t_4,   t_6,   t_5};

  reg [63:0] c$bb_res_res_22 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_22;



  reg [63:0] c$bb_res_res_23 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_23;



  reg [63:0] c$bb_res_res_24 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_24;



  assign c$app_arg_6 = {{t_9,   t_8,   t_7,
                         t_6,   t_5,   t_4,   t_6,   t_5},
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6};



  assign result_21 = c$app_arg_6[64-1:0];

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_0;
  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_28;



  assign c$app_arg_7 = {p2,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_0};



  assign result_22 = c$app_arg_7[1-1:0];

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 3; i_12 = i_12 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_27[i_12*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_12*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_12*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13 = i_13 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_13*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_13[0+:2];
    wire [2:0] c$case_alt_43;
    // spec.hs:241:1-63
    wire [7:0] t_13;
    // spec.hs:241:1-63
    wire [71:0] x_37;
    assign map_out_1 = c$case_alt_43;

    assign c$case_alt_43 = (t_13 == result_39[31:24]) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_13 = x_37[71:64];

    assign x_37 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_13*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 3; i_14=i_14+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_14] = result_27[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_23 = c$case_scrut_4[2:2] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_0;
  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_33;



  assign c$app_arg_8 = {p1,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_0};



  assign result_24 = c$app_arg_8[1-1:0];

  assign c$vec2_2 = (ws_2[9-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 3; i_15 = i_15 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_32[i_15*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_15*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_15*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16 = i_16 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_16*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd2 - i_16[0+:2];
    wire [2:0] c$case_alt_44;
    // spec.hs:241:1-63
    wire [7:0] t_14;
    // spec.hs:241:1-63
    wire [71:0] x_38;
    assign map_out_2 = c$case_alt_44;

    assign c$case_alt_44 = (t_14 == result_39[39:32]) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_14 = x_38[71:64];

    assign x_38 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_16*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:3-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 3; i_17=i_17+1) begin : mk_array_2
    assign vecArray_2[(3-1)-i_17] = result_32[i_17*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[12-1 -: 3];

  assign result_25 = c$case_scrut_6[2:2] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_1;
  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_38;



  assign c$app_arg_9 = {p0,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                        iterateI_ho1_2_res_9,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_1};



  assign result_26 = c$app_arg_9[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
    end else if (en) begin
      result_27 <= result_28;
    end
  end
  // register end

  assign t_projection_3 = ({result_27,{result_41[31:24],   (x_3 + y_2)}});

  assign t_2 = t_projection_3[215:0];

  assign result_28 = result_31 ? t_2 : result_27;

  assign x_3 = c$out0_case_alt;

  assign y_2 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == tagToMatch) ? dta : (64'sd0);

  assign dta = $signed(result_29[63:0]);

  assign tag = result_29[71:64];

  assign tagToMatch = result_41[47:40];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_29 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_30 ? {t_7,
                                         c$ds_app_arg} : result_29;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_3[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_10;
  assign iterateI_ho1_0_arg0_0 = inputs_3[0:0];

  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_39;



  assign c$app_arg_10 = {inputs_3[0:0],
                         iterateI_ho1_0_res_10};



  assign result_30 = c$app_arg_10[1-1:0];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_10;
  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_41;



  assign c$app_arg_11 = {p1,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_10};



  assign result_31 = c$app_arg_11[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_32_register
    if ( rst) begin
      result_32 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
    end else if (en) begin
      result_32 <= result_33;
    end
  end
  // register end

  assign t_projection_4 = ({result_32,{result_41[39:32],   (x_4 + y_3)}});

  assign t_3 = t_projection_4[215:0];

  assign result_33 = result_36 ? t_3 : result_32;

  assign x_4 = c$out0_case_alt_0;

  assign y_3 = c$out0_case_alt;

  assign c$out0_case_alt = (tag_0 == tagToMatch_0) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_37[63:0]);

  assign tag_0 = result_37[71:64];

  assign tagToMatch_0 = result_41[55:48];

  assign c$out0_case_alt_0 = (tag_1 == tagToMatch_1) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_34[63:0]);

  assign tagToMatch_1 = result_41[63:56];

  assign tag_1 = result_34[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_34_register
    if ( rst) begin
      result_34 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_34 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = result_35 ? {t_9,
                                           c$ds_app_arg_0} : result_34;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_0_delay
    if (en) begin
      c$ds_app_arg_0 <= $signed(inputs_3[194:131]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_12;
  assign iterateI_ho1_0_arg0_1 = inputs_3[130:130];

  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_42;



  assign c$app_arg_12 = {inputs_3[130:130],
                         iterateI_ho1_0_res_12};



  assign result_35 = c$app_arg_12[1-1:0];

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_11;
  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_44;



  assign c$app_arg_13 = {p0,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_11};



  assign result_36 = c$app_arg_13[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_37_register
    if ( rst) begin
      result_37 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_37 <= c$result_app_arg_1;
    end
  end
  // register end

  assign c$result_app_arg_1 = result_38 ? {t_8,
                                           c$input1Win_app_arg} : result_37;

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= $signed(inputs_3[129:66]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_14;
  assign iterateI_ho1_0_arg0_2 = inputs_3[65:65];

  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_45;



  assign c$app_arg_14 = {inputs_3[65:65],
                         iterateI_ho1_0_res_14};



  assign result_38 = c$app_arg_14[1-1:0];

  wire [63:0] iterateI_ho1_0_arg0_3;
  wire [63:0] iterateI_ho1_0_res_15;
  wire [63:0] iterateI_ho1_1_res_12;
  wire [63:0] iterateI_ho1_2_res_10;
  wire [63:0] iterateI_ho1_3_res_3;
  assign iterateI_ho1_0_arg0_3 = {t_9,   t_8,
                                  t_7,   t_6,   t_5,   t_4,   t_6,   t_5};

  reg [63:0] c$bb_res_res_46 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_46;



  reg [63:0] c$bb_res_res_47 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_47;



  reg [63:0] c$bb_res_res_48 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_48;



  reg [63:0] c$bb_res_res_49 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_49;



  assign c$app_arg_15 = {{t_9,   t_8,   t_7,
                          t_6,   t_5,   t_4,   t_6,   t_5},
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_10,   iterateI_ho1_3_res_3};



  assign result_39 = c$app_arg_15[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_4;
  wire [63:0] iterateI_ho1_0_res_16;
  wire [63:0] iterateI_ho1_1_res_13;
  assign iterateI_ho1_0_arg0_4 = {t_9,   t_8,
                                  t_7,   t_6,   t_5,   t_4,   t_6,   t_5};

  reg [63:0] c$bb_res_res_50 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_50;



  reg [63:0] c$bb_res_res_51 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_51;



  assign c$app_arg_16 = {{t_9,   t_8,   t_7,
                          t_6,   t_5,   t_4,   t_6,   t_5},
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_13};



  assign result_40 = c$app_arg_16[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_5;
  wire [63:0] iterateI_ho1_0_res_17;
  assign iterateI_ho1_0_arg0_5 = {t_9,   t_8,
                                  t_7,   t_6,   t_5,   t_4,   t_6,   t_5};

  reg [63:0] c$bb_res_res_52 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_52;



  assign c$app_arg_17 = {{t_9,   t_8,   t_7,
                          t_6,   t_5,   t_4,   t_6,   t_5},
                         iterateI_ho1_0_res_17};



  assign result_41 = c$app_arg_17[64-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_42;
    end
  end
  // register end

  assign result_42 = p2 ? result_43 : t_4;

  assign b = t_4 == 8'd22;

  assign f1 = t_4 + 8'd1;

  assign result_43 = b ? 8'd1 : f1;

  assign p2 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_44;
    end
  end
  // register end

  assign result_44 = p1 ? result_45 : t_5;

  assign b_0 = t_5 == 8'd22;

  assign f1_0 = t_5 + 8'd1;

  assign result_45 = b_0 ? 8'd1 : f1_0;

  assign p1 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_46;
    end
  end
  // register end

  assign result_46 = p0 ? result_47 : t_6;

  assign b_1 = t_6 == 8'd22;

  assign f1_1 = t_6 + 8'd1;

  assign result_47 = b_1 ? 8'd1 : f1_1;

  assign p0 = pacings[2:2];

  assign pacings = result_54[2:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_48;
    end
  end
  // register end

  assign result_48 = inputs_3[0:0] ? result_49 : t_7;

  assign b_2 = t_7 == 8'd22;

  assign f1_2 = t_7 + 8'd1;

  assign result_49 = b_2 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_50;
    end
  end
  // register end

  assign result_50 = inputs_3[65:65] ? result_51 : t_8;

  assign b_3 = t_8 == 8'd22;

  assign f1_3 = t_8 + 8'd1;

  assign result_51 = b_3 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_52;
    end
  end
  // register end

  assign result_52 = inputs_3[130:130] ? result_53 : t_9;

  assign b_4 = t_9 == 8'd22;

  assign f1_4 = t_9 + 8'd1;

  assign result_53 = b_4 ? 8'd1 : f1_4;

  assign inputs_3 = result_54[199:5];

  assign result_54 = {c$app_arg_20,
                      c$app_arg_19,   c$app_arg_18};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_18_register
    if ( rst) begin
      c$app_arg_18 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
   {1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_18 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                                                            1'b0,
                                                                                                            1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                                                            1'b0,
                                                                                                            1'b0}};

  always @(*) begin
    case(x_5)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_5)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0},   {64'sd0,   1'b0}},
                               {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [199:0] vecArray_3 [0:2-1];
  genvar i_18;
  generate
  for (i_18=0; i_18 < 2; i_18=i_18+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_18] = buffer[i_18*200+:200];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_3[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_19_register
    if ( rst) begin
      c$app_arg_19 <= 1'b0;
    end else if (en) begin
      c$app_arg_19 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_5)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_20_register
    if ( rst) begin
      c$app_arg_20 <= 1'b0;
    end else if (en) begin
      c$app_arg_20 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_5 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
    {1'b0,   1'b0,   1'b0}},   {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                          1'b0}},
                                {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[599:200] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[599:200];

  assign qData = result_4[199:0];

  assign x_5 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_5 + 64'sd1));

  assign c$tte_rhs_0 = (x_5 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_5)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_5 - 64'sd1);

  assign result = {result_5[199:5],   {qPush,
                                       qPop,   result_54[201:201],   qPopValid,
                                       result_5[4:2],   result_5[1:0]}};

  assign qPopValid = result_54[200:200];

  assign qPush = result_4[200:200];

  assign qPop = result_5[200:200];

  assign result_0 = result[203:9];

  assign result_1 = result[8:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[8:8];

  assign result_1_1 = result_1[7:7];

  assign result_1_2 = result_1[6:6];

  assign result_1_3 = result_1[5:5];

  assign result_1_4_9 = result_1[4:2];

  assign result_1_5_13 = result_1[1:0];

  assign result_1_4_0 = result_1_4_9[2:2];

  assign result_1_4_1 = result_1_4_9[1:1];

  assign result_1_4_2 = result_1_4_9[0:0];

  assign result_1_5_0 = result_1_5_13[1:1];

  assign result_1_5_1 = result_1_5_13[0:0];


endmodule


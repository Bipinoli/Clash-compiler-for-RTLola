/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [72:0] result_6;
  // spec.hs:230:1-82
  wire  hasInput0;
  // spec.hs:230:1-82
  wire  timer0Over;
  // spec.hs:230:1-82
  wire  timer1Over;
  wire [397:0] result_7;
  wire [1:0] c$app_arg;
  wire  result_8;
  // spec.hs:280:1-63
  wire [147:0] c$ws_app_arg;
  // spec.hs:280:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_9;
  // spec.hs:280:1-63
  wire [0:0] i;
  // spec.hs:280:1-63
  wire [5:0] ws;
  wire [5:0] c$app_arg_0;
  wire  result_10;
  wire [279:0] c$app_arg_1;
  wire [55:0] result_11;
  wire [5:0] c$app_arg_2;
  wire  result_12;
  wire [5:0] c$app_arg_3;
  wire  result_13;
  wire [5:0] c$app_arg_4;
  wire  result_14;
  wire [5:0] c$app_arg_5;
  wire  result_15;
  wire [5:0] c$app_arg_6;
  wire  result_16;
  wire [71:0] result_17;
  // spec.hs:468:1-165
  reg [71:0] result_18 = {8'd4,   64'sd0};
  // spec.hs:468:1-165
  wire  b;
  // spec.hs:468:1-165
  wire [71:0] t;
  wire signed [63:0] x_1;
  wire signed [63:0] y;
  wire signed [63:0] x_2;
  wire signed [63:0] x_3;
  wire signed [63:0] y_0;
  // spec.hs:272:1-65
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:272:1-65
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire signed [63:0] result_19;
  wire [7:0] result_20;
  wire [7:0] c$app_arg_7;
  // spec.hs:272:1-65
  wire [0:0] i_0;
  // spec.hs:272:1-65
  wire [5:0] ws_0;
  // spec.hs:272:1-65
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:272:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_21;
  wire [7:0] result_22;
  wire [7:0] c$app_arg_8;
  // spec.hs:272:1-65
  wire [0:0] i_1;
  // spec.hs:272:1-65
  wire [5:0] ws_1;
  wire [143:0] result_23;
  // spec.hs:500:1-137
  reg [143:0] result_24 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:500:1-137
  wire  b_0;
  // spec.hs:500:1-137
  wire [143:0] t_0;
  wire signed [63:0] x_4;
  // spec.hs:314:1-109
  wire signed [63:0] c$out5_case_alt;
  wire [71:0] result_25;
  // spec.hs:484:1-147
  reg [71:0] result_26 = {8'd4,   64'sd0};
  // spec.hs:484:1-147
  wire  b_1;
  // spec.hs:484:1-147
  wire [71:0] t_1;
  wire signed [63:0] x_5;
  wire signed [63:0] y_1;
  // spec.hs:314:1-109
  wire signed [63:0] c$out3_case_alt;
  // spec.hs:287:1-55
  wire signed [63:0] winData;
  // spec.hs:287:1-55
  wire [7:0] winTag;
  wire [71:0] result_27;
  // spec.hs:492:1-129
  reg [71:0] result_28 = {8'd4,   64'sd0};
  // spec.hs:492:1-129
  wire  b_2;
  // spec.hs:492:1-129
  wire [71:0] t_2;
  wire signed [63:0] x_6;
  // spec.hs:314:1-109
  wire signed [63:0] c$out4_case_alt;
  // spec.hs:301:1-46
  wire signed [63:0] dta;
  // spec.hs:301:1-46
  wire [7:0] tag;
  wire [71:0] result_29;
  // spec.hs:476:1-147
  reg [71:0] result_30 = {8'd4,   64'sd0};
  // spec.hs:476:1-147
  wire  b_3;
  // spec.hs:476:1-147
  wire [71:0] t_3;
  wire signed [63:0] x_7;
  wire signed [63:0] y_2;
  // spec.hs:314:1-109
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:301:1-46
  wire signed [63:0] dta_0;
  // spec.hs:314:1-109
  wire  c$out2_case_scrut;
  // spec.hs:301:1-46
  wire [7:0] tag_0;
  // spec.hs:314:1-109
  wire signed [63:0] c$out2_case_alt_0;
  wire [223:0] c$app_arg_9;
  wire [55:0] result_31;
  wire [7:0] result_32;
  wire [7:0] c$app_arg_10;
  // spec.hs:287:1-55
  wire [7:0] tag_1;
  // spec.hs:314:1-109
  wire signed [63:0] c$out3_case_alt_0;
  // spec.hs:287:1-55
  wire signed [63:0] winData_0;
  // spec.hs:287:1-55
  wire [7:0] winTag_0;
  wire [7:0] result_33;
  wire [7:0] c$app_arg_11;
  // spec.hs:287:1-55
  wire [7:0] tag_2;
  // spec.hs:314:1-109
  wire signed [63:0] c$out1_case_alt;
  wire [7:0] result_34;
  wire [7:0] c$app_arg_12;
  // spec.hs:287:1-55
  wire [7:0] tag_3;
  wire [3:0] c$app_arg_13;
  wire  result_35;
  wire [167:0] c$app_arg_14;
  wire [55:0] result_36;
  // spec.hs:287:1-55
  wire [7:0] winTag_1;
  wire [71:0] result_37;
  // spec.hs:460:1-129
  reg [71:0] result_38 = {8'd4,   64'sd0};
  // spec.hs:460:1-129
  wire  b_4;
  // spec.hs:460:1-129
  wire [71:0] t_4;
  wire signed [63:0] x_8;
  // spec.hs:314:1-109
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:287:1-55
  wire signed [63:0] winData_1;
  wire [7:0] result_39;
  wire [7:0] c$app_arg_15;
  wire [111:0] c$app_arg_16;
  wire [55:0] result_40;
  // spec.hs:438:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_41;
  // spec.hs:438:9-81
  wire  b_5;
  // spec.hs:438:9-81
  wire [7:0] f1;
  wire [7:0] result_42;
  // spec.hs:314:1-109
  wire  pOut5;
  // spec.hs:438:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_43;
  // spec.hs:438:9-81
  wire  b_6;
  // spec.hs:438:9-81
  wire [7:0] f1_0;
  wire [7:0] result_44;
  // spec.hs:438:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_45;
  // spec.hs:438:9-81
  wire  b_7;
  // spec.hs:438:9-81
  wire [7:0] f1_1;
  wire [7:0] result_46;
  // spec.hs:438:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_47;
  // spec.hs:438:9-81
  wire  b_8;
  // spec.hs:438:9-81
  wire [7:0] f1_2;
  wire [7:0] result_48;
  // spec.hs:438:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_49;
  // spec.hs:438:9-81
  wire  b_9;
  // spec.hs:438:9-81
  wire [7:0] f1_3;
  wire [7:0] result_50;
  // spec.hs:438:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_51;
  // spec.hs:438:9-81
  wire  b_10;
  // spec.hs:438:9-81
  wire [7:0] f1_4;
  wire [7:0] result_52;
  // spec.hs:438:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_53;
  // spec.hs:438:9-81
  wire  b_11;
  // spec.hs:438:9-81
  wire [7:0] f1_5;
  wire [7:0] result_54;
  // spec.hs:314:1-109
  wire  pIn0;
  wire [4:0] c$app_arg_17;
  wire  result_55;
  // spec.hs:314:1-109
  wire  pOut4;
  wire [2:0] c$app_arg_18;
  wire  result_56;
  // spec.hs:314:1-109
  wire  pOut3;
  wire [3:0] c$app_arg_19;
  wire  result_57;
  // spec.hs:314:1-109
  wire  pOut2;
  wire [3:0] c$app_arg_20;
  wire  result_58;
  // spec.hs:314:1-109
  wire  pOut1;
  wire [2:0] c$app_arg_21;
  wire  result_59;
  // spec.hs:314:1-109
  wire  pOut0;
  // spec.hs:314:1-109
  wire [6:0] pacings;
  // spec.hs:445:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_60;
  wire signed [63:0] result_61;
  // spec.hs:445:1-81
  wire  b_12;
  wire signed [63:0] result_62;
  wire signed [63:0] x_9;
  wire  result_63;
  // spec.hs:314:1-109
  wire  b_13;
  wire [73:0] result_64;
  reg [71:0] c$app_arg_22 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
  wire [71:0] c$case_alt;
  wire [71:0] c$case_alt_0;
  wire [71:0] c$case_alt_1;
  reg [71:0] c$case_alt_2;
  reg [71:0] c$case_alt_3;
  wire [71:0] c$case_alt_4;
  reg  c$app_arg_23 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_24 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:161:1-78
  reg [287:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:161:1-78
  wire [287:0] c$buffer_case_alt;
  // spec.hs:161:1-78
  wire [287:0] c$buffer_case_alt_0;
  // spec.hs:161:1-78
  wire [287:0] c$buffer_case_alt_1;
  // spec.hs:161:1-78
  wire [71:0] qData;
  // spec.hs:161:1-78
  wire signed [63:0] x_10;
  // spec.hs:161:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:161:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:161:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:161:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:161:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:161:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:161:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:161:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:516:1-134
  wire  qPopValid;
  // spec.hs:516:1-134
  wire  qPush;
  // spec.hs:516:1-134
  wire  qPop;
  wire [64:0] inputs;
  wire [3:0] c$vec2;
  wire signed [63:0] x_projection_3;
  wire signed [63:0] x_projection_4;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [359:0] c$buffer_case_alt_sel_alt_t_1;
  wire [359:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [400:0] result;
  wire [389:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [10:0] result_1;
  wire [6:0] result_1_4;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {hasInput0 | (timer0Over | timer1Over),
                     {inputs,   {hasInput0,   timer1Over,
                                 timer1Over,   timer1Over,   timer1Over,
                                 timer0Over,   timer1Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd500000);

  assign timer1Over = result_3 >= (64'sd1000000);

  assign result_7 = {{result_60 & (~ result_63),
                      {{winData_1,   result_16},   {winData_0,
                                                    result_15},   {dta,   result_14},   {dta_0,
                                                                                         result_13},   {winData,
                                                                                                        result_12},
                       {result_9,   result_10}}},   {result_8,
                                                     result_59,   result_58,   result_57,
                                                     result_56,   result_55,   result_35}};

  wire  iterateI_ho1_0_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= pIn0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  assign c$app_arg = {pIn0,   iterateI_ho1_0_res};



  assign result_8 = c$app_arg[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_24[i_2*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_2*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_3*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_3[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:280:1-63
    wire [7:0] t_12;
    // spec.hs:280:1-63
    wire [71:0] x_12;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_12 == result_11[7:0]) ? {1'b1,map_index} : map_in[1:0];

    assign t_12 = x_12[71:64];

    assign x_12 = map_in[73:2];


    assign c$ws_app_arg_0[i_3*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array
    assign vecArray[(2-1)-i_4] = result_24[i_4*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_9 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  assign iterateI_ho1_0_arg0 = pOut5;

  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_4;



  assign c$app_arg_0 = {pOut5,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res,
                        iterateI_ho1_2_res,   iterateI_ho1_3_res,
                        iterateI_ho1_4_res};



  assign result_10 = c$app_arg_0[1-1:0];

  wire [55:0] iterateI_ho1_0_arg0_0;
  wire [55:0] iterateI_ho1_0_res_1;
  wire [55:0] iterateI_ho1_1_res_0;
  wire [55:0] iterateI_ho1_2_res_0;
  wire [55:0] iterateI_ho1_3_res_0;
  assign iterateI_ho1_0_arg0_0 = {t_11,   t_10,
                                  t_9,   t_8,   t_7,   t_6,   t_5};

  reg [55:0] c$bb_res_res_5 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_5;



  reg [55:0] c$bb_res_res_6 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg [55:0] c$bb_res_res_7 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg [55:0] c$bb_res_res_8 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  assign c$app_arg_1 = {{t_11,   t_10,   t_9,
                         t_8,   t_7,   t_6,   t_5},
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_11 = c$app_arg_1[56-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_0;
  assign iterateI_ho1_0_arg0_1 = pOut4;

  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_13;



  assign c$app_arg_2 = {pOut4,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_0};



  assign result_12 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_1;
  assign iterateI_ho1_0_arg0_2 = pOut3;

  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_18;



  assign c$app_arg_3 = {pOut3,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_1};



  assign result_13 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_2;
  assign iterateI_ho1_0_arg0_3 = pOut2;

  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_23;



  assign c$app_arg_4 = {pOut2,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_2};



  assign result_14 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_3;
  assign iterateI_ho1_0_arg0_4 = pOut1;

  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_28;



  assign c$app_arg_5 = {pOut1,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_3};



  assign result_15 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_arg0_5;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_4;
  assign iterateI_ho1_0_arg0_5 = pOut0;

  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_33;



  assign c$app_arg_6 = {pOut0,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_4};



  assign result_16 = c$app_arg_6[1-1:0];

  assign result_17 = b ? t : result_18;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_18_register
    if ( rst) begin
      result_18 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_18 <= result_17;
    end
  end
  // register end

  assign b = result_58;

  assign t = {tag_3,   (x_3 + y_0)};

  assign x_1 = c$out1_case_alt;

  assign y = result_21;

  assign x_projection_3 = (x_1 + y);

  assign x_2 = x_projection_3;

  assign x_projection_4 = (x_2 + 64'sd1);

  assign x_3 = x_projection_4;

  assign y_0 = result_19;

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 2; i_6 = i_6 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_24[i_6*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_6*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_6*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_7*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_7[0+:1];
    wire [1:0] c$case_alt_14;
    // spec.hs:280:1-63
    wire [7:0] t_14;
    // spec.hs:280:1-63
    wire [71:0] x_13;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_14 == result_20) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_14 = x_13[71:64];

    assign x_13 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_7*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_8] = result_24[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_19 = c$case_scrut_2[1:1] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign result_20 = (result_36[7:0] > 8'd2) ? c$app_arg_7 : (c$app_arg_7 + 8'd3);

  assign c$app_arg_7 = result_36[7:0] - 8'd2;

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 2; i_9 = i_9 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_24[i_9*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_9*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_9*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_10*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_10[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:280:1-63
    wire [7:0] t_15;
    // spec.hs:280:1-63
    wire [71:0] x_14;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_15 == result_22) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_15 = x_14[71:64];

    assign x_14 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_10*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11=i_11+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_11] = result_24[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_21 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign result_22 = (result_36[7:0] > 8'd1) ? c$app_arg_8 : (c$app_arg_8 + 8'd3);

  assign c$app_arg_8 = result_36[7:0] - 8'd1;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign result_23 = b_0 ? t_0 : result_24;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_24_register
    if ( rst) begin
      result_24 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_24 <= result_23;
    end
  end
  // register end

  assign b_0 = result_35;

  assign t_projection_2 = ({result_24,{result_36[7:0],   (x_4 + 64'sd1)}});

  assign t_0 = t_projection_2[143:0];

  assign x_4 = c$out5_case_alt;

  assign c$out5_case_alt = c$out2_case_scrut ? (64'sd2) : dta_0;

  assign result_25 = b_1 ? t_1 : result_26;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_26_register
    if ( rst) begin
      result_26 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_26 <= result_25;
    end
  end
  // register end

  assign b_1 = result_56;

  assign t_1 = {result_40[23:16],   (x_5 + y_1)};

  assign x_5 = c$out3_case_alt_0;

  assign y_1 = c$out3_case_alt;

  assign c$out3_case_alt = (result_32 == winTag) ? winData : (64'sd1);

  assign winData = $signed(result_28[63:0]);

  assign winTag = result_28[71:64];

  assign result_27 = b_2 ? t_2 : result_28;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_28_register
    if ( rst) begin
      result_28 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_28 <= result_27;
    end
  end
  // register end

  assign b_2 = result_55;

  assign t_2 = {result_31[15:8],
                (x_6 + 64'sd1)};

  assign x_6 = c$out4_case_alt;

  assign c$out4_case_alt = (tag == 8'd4) ? (64'sd0) : dta;

  assign dta = $signed(result_30[63:0]);

  assign tag = result_30[71:64];

  assign result_29 = b_3 ? t_3 : result_30;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_30_register
    if ( rst) begin
      result_30 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_30 <= result_29;
    end
  end
  // register end

  assign b_3 = result_57;

  assign t_3 = {result_36[31:24],   (x_7 + y_2)};

  assign x_7 = c$out2_case_alt_0;

  assign y_2 = c$out2_case_alt;

  assign c$out2_case_alt = c$out2_case_scrut ? (64'sd0) : dta_0;

  assign dta_0 = $signed(result_26[63:0]);

  assign c$out2_case_scrut = tag_0 == 8'd4;

  assign tag_0 = result_26[71:64];

  assign c$out2_case_alt_0 = (result_34 == winTag_0) ? winData_0 : (64'sd0);

  wire [55:0] iterateI_ho1_0_arg0_6;
  wire [55:0] iterateI_ho1_0_res_7;
  wire [55:0] iterateI_ho1_1_res_6;
  wire [55:0] iterateI_ho1_2_res_6;
  assign iterateI_ho1_0_arg0_6 = {t_11,   t_10,
                                  t_9,   t_8,   t_7,   t_6,   t_5};

  reg [55:0] c$bb_res_res_34 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_34;



  reg [55:0] c$bb_res_res_35 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_35;



  reg [55:0] c$bb_res_res_36 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_36;



  assign c$app_arg_9 = {{t_11,   t_10,   t_9,
                         t_8,   t_7,   t_6,   t_5},
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6};



  assign result_31 = c$app_arg_9[56-1:0];

  assign result_32 = (tag_1 > 8'd1) ? c$app_arg_10 : (c$app_arg_10 + 8'd3);

  assign c$app_arg_10 = tag_1 - 8'd1;

  assign tag_1 = result_40[15:8];

  assign c$out3_case_alt_0 = (result_33 == winTag_0) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_18[63:0]);

  assign winTag_0 = result_18[71:64];

  assign result_33 = (tag_2 > 8'd1) ? c$app_arg_11 : (c$app_arg_11 + 8'd3);

  assign c$app_arg_11 = tag_2 - 8'd1;

  assign tag_2 = result_40[39:32];

  assign c$out1_case_alt = (winTag_1 == 8'd4) ? (64'sd0) : winData_1;

  assign result_34 = (tag_3 > 8'd1) ? c$app_arg_12 : (c$app_arg_12 + 8'd3);

  assign c$app_arg_12 = tag_3 - 8'd1;

  assign tag_3 = result_36[39:32];

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_39;



  assign c$app_arg_13 = {pOut5,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_7,
                         iterateI_ho1_2_res_7};



  assign result_35 = c$app_arg_13[1-1:0];

  wire [55:0] iterateI_ho1_0_arg0_7;
  wire [55:0] iterateI_ho1_0_res_9;
  wire [55:0] iterateI_ho1_1_res_8;
  assign iterateI_ho1_0_arg0_7 = {t_11,   t_10,
                                  t_9,   t_8,   t_7,   t_6,   t_5};

  reg [55:0] c$bb_res_res_40 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_40;



  reg [55:0] c$bb_res_res_41 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_41;



  assign c$app_arg_14 = {{t_11,   t_10,   t_9,
                          t_8,   t_7,   t_6,   t_5},
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_8};



  assign result_36 = c$app_arg_14[56-1:0];

  assign winTag_1 = result_38[71:64];

  assign result_37 = b_4 ? t_4 : result_38;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign b_4 = result_59;

  assign t_4 = {result_40[47:40],
                (x_8 + 64'sd1)};

  assign x_8 = c$out0_case_alt;

  assign c$out0_case_alt = (result_39 == winTag_1) ? winData_1 : (64'sd0);

  assign winData_1 = $signed(result_38[63:0]);

  assign result_39 = (result_40[47:40] > 8'd1) ? c$app_arg_15 : (c$app_arg_15 + 8'd3);

  assign c$app_arg_15 = result_40[47:40] - 8'd1;

  wire [55:0] iterateI_ho1_0_arg0_8;
  wire [55:0] iterateI_ho1_0_res_10;
  assign iterateI_ho1_0_arg0_8 = {t_11,   t_10,
                                  t_9,   t_8,   t_7,   t_6,   t_5};

  reg [55:0] c$bb_res_res_42 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_42;



  assign c$app_arg_16 = {{t_11,   t_10,   t_9,
                          t_8,   t_7,   t_6,   t_5},
                         iterateI_ho1_0_res_10};



  assign result_40 = c$app_arg_16[56-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_41;
    end
  end
  // register end

  assign result_41 = pOut5 ? result_42 : t_5;

  assign b_5 = t_5 == 8'd3;

  assign f1 = t_5 + 8'd1;

  assign result_42 = b_5 ? 8'd1 : f1;

  assign pOut5 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_43;
    end
  end
  // register end

  assign result_43 = pOut4 ? result_44 : t_6;

  assign b_6 = t_6 == 8'd3;

  assign f1_0 = t_6 + 8'd1;

  assign result_44 = b_6 ? 8'd1 : f1_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_45;
    end
  end
  // register end

  assign result_45 = pOut3 ? result_46 : t_7;

  assign b_7 = t_7 == 8'd3;

  assign f1_1 = t_7 + 8'd1;

  assign result_46 = b_7 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_47;
    end
  end
  // register end

  assign result_47 = pOut2 ? result_48 : t_8;

  assign b_8 = t_8 == 8'd3;

  assign f1_2 = t_8 + 8'd1;

  assign result_48 = b_8 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_49;
    end
  end
  // register end

  assign result_49 = pOut1 ? result_50 : t_9;

  assign b_9 = t_9 == 8'd3;

  assign f1_3 = t_9 + 8'd1;

  assign result_50 = b_9 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_51;
    end
  end
  // register end

  assign result_51 = pOut0 ? result_52 : t_10;

  assign b_10 = t_10 == 8'd3;

  assign f1_4 = t_10 + 8'd1;

  assign result_52 = b_10 ? 8'd1 : f1_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_53;
    end
  end
  // register end

  assign result_53 = pIn0 ? result_54 : t_11;

  assign b_11 = t_11 == 8'd3;

  assign f1_5 = t_11 + 8'd1;

  assign result_54 = b_11 ? 8'd1 : f1_5;

  assign pIn0 = pacings[6:6];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_6;
  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_46;



  assign c$app_arg_17 = {pOut4,
                         iterateI_ho1_0_res_11,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_8,   iterateI_ho1_3_res_6};



  assign result_55 = c$app_arg_17[1-1:0];

  assign pOut4 = pacings[1:1];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_10;
  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_48;



  assign c$app_arg_18 = {pOut3,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_10};



  assign result_56 = c$app_arg_18[1-1:0];

  assign pOut3 = pacings[2:2];

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_9;
  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_51;



  assign c$app_arg_19 = {pOut2,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_11,   iterateI_ho1_2_res_9};



  assign result_57 = c$app_arg_19[1-1:0];

  assign pOut2 = pacings[3:3];

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_12;
  wire  iterateI_ho1_2_res_10;
  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_52;



  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_54;



  assign c$app_arg_20 = {pOut1,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_10};



  assign result_58 = c$app_arg_20[1-1:0];

  assign pOut1 = pacings[4:4];

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_13;
  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_56;



  assign c$app_arg_21 = {pOut0,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_13};



  assign result_59 = c$app_arg_21[1-1:0];

  assign pOut0 = pacings[5:5];

  assign pacings = result_64[6:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_61;
    end
  end
  // register end

  assign result_60 = toWait == (64'sd0);

  assign result_61 = result_63 ? (64'sd2) : result_62;

  assign b_12 = toWait > (64'sd0);

  assign result_62 = b_12 ? ((x_9 - 64'sd1)) : toWait;

  assign x_9 = toWait;

  assign result_63 = b_13 ? 1'b1 : 1'b0;

  assign b_13 = result_60 & qPopValid;

  assign result_64 = {c$app_arg_24,
                      c$app_arg_23,   c$app_arg_22};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_22_register
    if ( rst) begin
      c$app_arg_22 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_22 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_10)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_10)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [71:0] vecArray_2 [0:4-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 4; i_12=i_12+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_12] = buffer[i_12*72+:72];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_2[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_23_register
    if ( rst) begin
      c$app_arg_23 <= 1'b0;
    end else if (en) begin
      c$app_arg_23 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_10)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_24_register
    if ( rst) begin
      c$app_arg_24 <= 1'b0;
    end else if (en) begin
      c$app_arg_24 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_10 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[359:72] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[359:72];

  assign qData = result_6[71:0];

  assign x_10 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_10 + 64'sd1));

  assign c$tte_rhs_0 = (x_10 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_10)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_10 - 64'sd1);

  assign result = {result_7[396:7],   {qPush,
                                       qPop,   result_64[73:73],   qPopValid,
                                       result_7[6:0]}};

  assign qPopValid = result_64[72:72];

  assign qPush = result_6[72:72];

  assign qPop = result_7[397:397];

  assign result_0 = result[400:11];

  assign result_1 = result[10:0];

  assign result_0_0 = result_0[389:325];

  assign result_0_1 = result_0[324:260];

  assign result_0_2 = result_0[259:195];

  assign result_0_3 = result_0[194:130];

  assign result_0_4 = result_0[129:65];

  assign result_0_5 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_1_0 = result_1[10:10];

  assign result_1_1 = result_1[9:9];

  assign result_1_2 = result_1[8:8];

  assign result_1_3 = result_1[7:7];

  assign result_1_4 = result_1[6:0];

  assign result_1_4_0 = result_1_4[6:6];

  assign result_1_4_1 = result_1_4[5:5];

  assign result_1_4_2 = result_1_4[4:4];

  assign result_1_4_3 = result_1_4[3:3];

  assign result_1_4_4 = result_1_4[2:2];

  assign result_1_4_5 = result_1_4[1:1];

  assign result_1_4_6 = result_1_4[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    );
  // spec.hs:286:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_2;
  wire signed [63:0] result_3;
  // spec.hs:286:1-81
  wire  b;
  wire signed [63:0] result_4;
  wire signed [63:0] x;
  wire  result_5;
  // spec.hs:279:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_6;
  // spec.hs:279:9-81
  wire  b_0;
  // spec.hs:279:9-81
  wire [7:0] f1;
  wire [7:0] result_7;
  // spec.hs:279:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_8;
  // spec.hs:279:9-81
  wire  b_1;
  // spec.hs:279:9-81
  wire [7:0] f1_0;
  wire [7:0] result_9;
  // spec.hs:279:9-81
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_10;
  // spec.hs:279:9-81
  wire  b_2;
  // spec.hs:279:9-81
  wire [7:0] f1_1;
  wire [7:0] result_11;
  // spec.hs:279:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_12;
  // spec.hs:279:9-81
  wire  b_3;
  // spec.hs:279:9-81
  wire [7:0] f1_2;
  wire [7:0] result_13;
  // spec.hs:279:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_14;
  // spec.hs:279:9-81
  wire  b_4;
  // spec.hs:279:9-81
  wire [7:0] f1_3;
  wire [7:0] result_15;
  // spec.hs:197:1-121
  reg  c$out1_app_arg = 1'b0;
  // spec.hs:197:1-121
  reg  c$out1_app_arg_0 = 1'b0;
  // spec.hs:197:1-121
  reg  c$out1_app_arg_1 = 1'b0;
  wire [71:0] result_16;
  // spec.hs:311:1-130
  reg [71:0] result_17 = {8'd3,   64'sd0};
  // spec.hs:311:1-130
  wire [71:0] t_4;
  wire signed [63:0] x_0;
  // spec.hs:197:1-121
  reg  c$out2_app_arg = 1'b0;
  // spec.hs:197:1-121
  reg  c$out2_app_arg_0 = 1'b0;
  // spec.hs:187:1-62
  wire [7:0] winTag;
  // spec.hs:187:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_18;
  wire [7:0] c$app_arg;
  // spec.hs:320:1-130
  wire [71:0] c$result_app_arg;
  // spec.hs:320:1-130
  reg [71:0] result_19 = {8'd3,   64'sd0};
  // spec.hs:197:1-121
  reg  c$out3_app_arg = 1'b0;
  // spec.hs:197:1-121
  reg  c$out3_app_arg_0 = 1'b0;
  // spec.hs:197:1-121
  reg  c$out3_app_arg_1 = 1'b0;
  wire [71:0] result_20;
  // spec.hs:329:1-130
  reg [71:0] result_21 = {8'd3,   64'sd0};
  // spec.hs:329:1-130
  wire [71:0] t_5;
  wire signed [63:0] x_1;
  // spec.hs:197:1-121
  reg  c$out0_app_arg = 1'b0;
  // spec.hs:197:1-121
  reg  c$out0_app_arg_0 = 1'b0;
  // spec.hs:197:1-121
  reg  c$out0_app_arg_1 = 1'b0;
  // spec.hs:197:1-121
  reg [64:0] c$out0_case_scrut = {64'sd0,   1'b0};
  // spec.hs:295:1-122
  reg [71:0] result_22 = {8'd3,   64'sd0};
  // spec.hs:295:1-122
  wire [71:0] c$result_app_arg_0;
  // spec.hs:187:1-62
  wire [7:0] winTag_0;
  // spec.hs:187:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_23;
  wire [7:0] c$app_arg_0;
  wire [71:0] result_24;
  // spec.hs:301:1-155
  reg [71:0] result_25 = {8'd3,   64'sd0};
  // spec.hs:301:1-155
  wire [71:0] t_6;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  reg  c$app_arg_1 = 1'b0;
  reg  c$app_arg_2 = 1'b0;
  reg  c$app_arg_3 = 1'b0;
  reg  c$app_arg_4 = 1'b0;
  reg  c$app_arg_5 = 1'b0;
  reg  c$app_arg_6 = 1'b0;
  wire [264:0] result_26;
  // spec.hs:197:1-121
  wire [3:0] pacings;
  // spec.hs:197:1-121
  wire [64:0] input0;
  // spec.hs:197:1-121
  wire  input0HasData;
  // spec.hs:197:1-121
  wire  p0;
  // spec.hs:197:1-121
  wire [39:0] curTags;
  // spec.hs:197:1-121
  reg [39:0] curTagsLevel1 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:197:1-121
  reg [39:0] curTagsLevel2 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:197:1-121
  wire [7:0] out0Level1TagOut0;
  // spec.hs:197:1-121
  wire [7:0] out0Level1TagOut3;
  // spec.hs:197:1-121
  wire  p2;
  // spec.hs:197:1-121
  wire [7:0] out2Level1TagOut1;
  // spec.hs:197:1-121
  wire [7:0] out2Level1TagOut2;
  // spec.hs:197:1-121
  wire  p4;
  // spec.hs:197:1-121
  wire  p3;
  // spec.hs:197:1-121
  wire  b_5;
  wire [70:0] result_27;
  reg [68:0] c$app_arg_7 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
  wire [68:0] c$case_alt_1;
  wire [68:0] c$case_alt_2;
  wire [68:0] c$case_alt_3;
  reg [68:0] c$case_alt_4;
  reg [68:0] c$case_alt_5;
  wire [68:0] c$case_alt_6;
  reg  c$app_arg_8 = 1'b0;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  reg  c$case_alt_11;
  reg  c$app_arg_9 = 1'b0;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  // spec.hs:77:1-78
  reg [206:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},
                                                          {1'b0,   1'b0,
                                                           1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:77:1-78
  wire [206:0] c$buffer_case_alt;
  // spec.hs:77:1-78
  wire [206:0] c$buffer_case_alt_0;
  // spec.hs:77:1-78
  wire [206:0] c$buffer_case_alt_1;
  // spec.hs:77:1-78
  wire [68:0] qData;
  // spec.hs:77:1-78
  wire signed [63:0] x_3;
  // spec.hs:77:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:77:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:77:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:77:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:77:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:77:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:77:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:77:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:144:1-82
  wire  hasInput0;
  // spec.hs:344:1-146
  wire  qPopValid;
  // spec.hs:344:1-146
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [275:0] c$buffer_case_alt_sel_alt_t_1;
  wire [275:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [267:0] result;
  wire [259:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [7:0] result_1;
  wire [3:0] result_1_4_12;

  assign inputs = {inputs_0,   inputs_1};

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_3;
    end
  end
  // register end

  assign result_2 = toWait == (64'sd0);

  assign result_3 = result_5 ? (64'sd1) : result_4;

  assign b = toWait > (64'sd0);

  assign result_4 = b ? ((x - 64'sd1)) : toWait;

  assign x = toWait;

  assign result_5 = b_5 ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_6;
    end
  end
  // register end

  assign result_6 = input0HasData ? result_7 : t;

  assign b_0 = t == 8'd2;

  assign f1 = t + 8'd1;

  assign result_7 = b_0 ? 8'd1 : f1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_8;
    end
  end
  // register end

  assign result_8 = p0 ? result_9 : t_0;

  assign b_1 = t_0 == 8'd2;

  assign f1_0 = t_0 + 8'd1;

  assign result_9 = b_1 ? 8'd1 : f1_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_10;
    end
  end
  // register end

  assign result_10 = p2 ? result_11 : t_1;

  assign b_2 = t_1 == 8'd2;

  assign f1_1 = t_1 + 8'd1;

  assign result_11 = b_2 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_12;
    end
  end
  // register end

  assign result_12 = p3 ? result_13 : t_2;

  assign b_3 = t_2 == 8'd2;

  assign f1_2 = t_2 + 8'd1;

  assign result_13 = b_3 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_14;
    end
  end
  // register end

  assign result_14 = p4 ? result_15 : t_3;

  assign b_4 = t_3 == 8'd2;

  assign f1_3 = t_3 + 8'd1;

  assign result_15 = b_4 ? 8'd1 : f1_3;

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= p2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_0_delay
    if (en) begin
      c$out1_app_arg_0 <= c$out1_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_1_delay
    if (en) begin
      c$out1_app_arg_1 <= c$out1_app_arg_0;
    end
  end
  // delay end

  assign result_16 = c$out1_app_arg_1 ? t_4 : result_17;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_17_register
    if ( rst) begin
      result_17 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_17 <= result_16;
    end
  end
  // register end

  assign t_4 = {curTagsLevel2[23:16],
                (x_0 + 64'sd1)};

  assign x_0 = $signed(result_25[63:0]);

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_delay
    if (en) begin
      c$out2_app_arg <= p3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_0_delay
    if (en) begin
      c$out2_app_arg_0 <= c$out2_app_arg;
    end
  end
  // delay end

  assign winTag = result_17[71:64];

  assign winData = $signed(result_17[63:0]);

  assign c$case_alt = (result_18 == winTag) ? {out2Level1TagOut1,
                                               winData} : {out2Level1TagOut1,   64'sd0};

  assign result_18 = (out2Level1TagOut1 > 8'd1) ? c$app_arg : (c$app_arg + 8'd2);

  assign c$app_arg = out2Level1TagOut1 - 8'd1;

  assign c$result_app_arg = c$out2_app_arg_0 ? {out2Level1TagOut2,
                                                $signed(c$case_alt[63:0])} : result_19;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_19 <= c$result_app_arg;
    end
  end
  // register end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_delay
    if (en) begin
      c$out3_app_arg <= p4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_0_delay
    if (en) begin
      c$out3_app_arg_0 <= c$out3_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_1_delay
    if (en) begin
      c$out3_app_arg_1 <= c$out3_app_arg_0;
    end
  end
  // delay end

  assign result_20 = c$out3_app_arg_1 ? t_5 : result_21;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_5 = {curTagsLevel2[7:0],
                (x_1 + 64'sd1)};

  assign x_1 = $signed(result_19[63:0]);

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_delay
    if (en) begin
      c$out0_app_arg <= p0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_0_delay
    if (en) begin
      c$out0_app_arg_0 <= c$out0_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_1_delay
    if (en) begin
      c$out0_app_arg_1 <= input0HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_case_scrut_delay
    if (en) begin
      c$out0_case_scrut <= input0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_22_register
    if ( rst) begin
      result_22 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_22 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = c$out0_app_arg_1 ? {t,
                                                  $signed(c$out0_case_scrut[64:1])} : result_22;

  assign winTag_0 = result_21[71:64];

  assign winData_0 = $signed(result_21[63:0]);

  assign c$case_alt_0 = (result_23 == winTag_0) ? {out0Level1TagOut3,
                                                   winData_0} : {out0Level1TagOut3,   64'sd0};

  assign result_23 = (out0Level1TagOut3 > 8'd1) ? c$app_arg_0 : (c$app_arg_0 + 8'd2);

  assign c$app_arg_0 = out0Level1TagOut3 - 8'd1;

  assign result_24 = c$out0_app_arg_0 ? t_6 : result_25;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign t_6 = {out0Level1TagOut0,   (x_2 + y)};

  assign x_2 = $signed(result_22[63:0]);

  assign y = $signed(c$case_alt_0[63:0]);

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= c$out0_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_2_delay
    if (en) begin
      c$app_arg_2 <= c$app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_3_delay
    if (en) begin
      c$app_arg_3 <= c$out1_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$out2_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_5_delay
    if (en) begin
      c$app_arg_5 <= c$app_arg_4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_6_delay
    if (en) begin
      c$app_arg_6 <= c$out3_app_arg_1;
    end
  end
  // delay end

  assign result_26 = {{result_2 & (~ result_5),
                       {{$signed(result_25[63:0]),   c$app_arg_2},
                        {$signed(result_17[63:0]),   c$app_arg_3},
                        {$signed(result_19[63:0]),   c$app_arg_5},
                        {$signed(result_21[63:0]),   c$app_arg_6}}},
                      pacings};

  assign pacings = result_27[3:0];

  assign input0 = result_27[68:4];

  assign input0HasData = input0[0:0];

  assign p0 = pacings[3:3];

  assign curTags = {t,   t_0,   t_1,   t_2,
                    t_3};

  // delay begin
  always @(posedge clk) begin : curTagsLevel1_delay
    if (en) begin
      curTagsLevel1 <= curTags;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : curTagsLevel2_delay
    if (en) begin
      curTagsLevel2 <= curTagsLevel1;
    end
  end
  // delay end

  assign out0Level1TagOut0 = curTagsLevel1[31:24];

  assign out0Level1TagOut3 = curTagsLevel1[7:0];

  assign p2 = pacings[2:2];

  assign out2Level1TagOut1 = curTagsLevel1[23:16];

  assign out2Level1TagOut2 = curTagsLevel1[15:8];

  assign p4 = pacings[0:0];

  assign p3 = pacings[1:1];

  assign b_5 = result_2 & qPopValid;

  assign result_27 = {c$app_arg_9,   c$app_arg_8,
                      c$app_arg_7};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_7_register
    if ( rst) begin
      c$app_arg_7 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_7 <= c$case_alt_1;
    end
  end
  // register end

  assign c$case_alt_1 = hasInput0 ? c$case_alt_2 : c$case_alt_3;

  assign c$case_alt_2 = qPop ? c$case_alt_4 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_3 = qPop ? c$case_alt_5 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_4 = qData;
      default : c$case_alt_4 = c$case_alt_6;
    endcase
  end

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_5 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_5 = c$case_alt_6;
    endcase
  end

  // index begin
  wire [68:0] vecArray [0:3-1];
  genvar i;
  generate
  for (i=0; i < 3; i=i+1) begin : mk_array
    assign vecArray[(3-1)-i] = buffer[i*69+:69];
  end
  endgenerate
  assign c$case_alt_6 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= 1'b0;
    end else if (en) begin
      c$app_arg_8 <= c$case_alt_7;
    end
  end
  // register end

  assign c$case_alt_7 = hasInput0 ? c$case_alt_8 : c$case_alt_9;

  assign c$case_alt_8 = qPop ? 1'b1 : c$case_alt_10;

  assign c$case_alt_9 = qPop ? c$case_alt_11 : c$case_alt_10;

  assign c$case_alt_10 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_11 = 1'b0;
      default : c$case_alt_11 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_9_register
    if ( rst) begin
      c$app_arg_9 <= 1'b0;
    end else if (en) begin
      c$app_arg_9 <= c$case_alt_12;
    end
  end
  // register end

  assign c$case_alt_12 = hasInput0 ? c$case_alt_13 : 1'b0;

  assign c$case_alt_13 = qPop ? 1'b1 : c$case_alt_14;

  assign c$tte_rhs = (x_3 != 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$case_alt_14 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},
                                                            {1'b0,   1'b0,
                                                             1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = hasInput0 ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[275:69] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[275:69];

  assign qData = {inputs,   {hasInput0,
                             hasInput0,   hasInput0,   hasInput0}};

  assign x_3 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = hasInput0 ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_3 + 64'sd1));

  assign c$tte_rhs_0 = (x_3 == 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_3 - 64'sd1);

  assign result = {result_26[263:4],
                   {hasInput0,   qPop,   result_27[70:70],
                    qPopValid,   result_26[3:0]}};

  assign hasInput0 = inputs[0:0];

  assign qPopValid = result_27[69:69];

  assign qPop = result_26[264:264];

  assign result_0 = result[267:8];

  assign result_1 = result[7:0];

  assign result_0_0 = result_0[259:195];

  assign result_0_1 = result_0[194:130];

  assign result_0_2 = result_0[129:65];

  assign result_0_3 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[7:7];

  assign result_1_1 = result_1[6:6];

  assign result_1_2 = result_1[5:5];

  assign result_1_3 = result_1[4:4];

  assign result_1_4_12 = result_1[3:0];

  assign result_1_4_0 = result_1_4_12[3:3];

  assign result_1_4_1 = result_1_4_12[2:2];

  assign result_1_4_2 = result_1_4_12[1:1];

  assign result_1_4_3 = result_1_4_12[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    , output wire  result_1_5_2
    , output wire  result_1_5_3
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [71:0] result_4;
  // spec.hs:(238,1)-(240,31)
  wire  hasInput0;
  // spec.hs:(238,1)-(240,31)
  wire  pIn0;
  // spec.hs:(238,1)-(240,31)
  wire  timer0Over;
  wire [201:0] result_5;
  // spec.hs:89:34-42
  wire  x_0;
  // spec.hs:88:34-42
  wire  x_1;
  wire [6:0] c$app_arg;
  wire  result_6;
  wire [6:0] c$app_arg_0;
  wire  result_7;
  // spec.hs:295:1-63
  wire [147:0] c$ws_app_arg;
  // spec.hs:295:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_8;
  // spec.hs:295:1-63
  wire [0:0] i;
  // spec.hs:295:1-63
  wire [5:0] ws;
  wire [6:0] c$app_arg_1;
  wire  result_9;
  wire [287:0] c$app_arg_2;
  wire [47:0] result_10;
  // spec.hs:317:1-46
  wire [7:0] tag;
  wire [71:0] result_11;
  // spec.hs:(550,1)-(555,28)
  reg [71:0] result_12 = {8'd103,   64'sd0};
  // spec.hs:(550,1)-(555,28)
  wire  b;
  // spec.hs:(550,1)-(555,28)
  wire [71:0] t;
  wire signed [63:0] ds;
  wire signed [63:0] ds1;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  // spec.hs:(602,1)-(607,37)
  wire signed [63:0] y_0;
  // spec.hs:(602,1)-(607,37)
  wire signed [63:0] x_3;
  // spec.hs:(602,1)-(607,37)
  wire [703:0] win;
  // spec.hs:(602,1)-(607,37)
  reg [711:0] window = {8'd103,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [711:0] result_13;
  // spec.hs:(602,1)-(607,37)
  wire [711:0] t_0;
  wire [703:0] result_14;
  // spec.hs:(602,1)-(607,37)
  wire [703:0] c$t_case_alt;
  // spec.hs:(602,1)-(607,37)
  wire [703:0] c$t_case_alt_0;
  // spec.hs:(602,1)-(607,37)
  wire [703:0] lastBucketUpdated;
  // spec.hs:(602,1)-(607,37)
  wire  b_0;
  // spec.hs:88:34-42
  wire  x_4;
  // spec.hs:295:1-63
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:295:1-63
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire signed [63:0] result_15;
  // spec.hs:295:1-63
  wire [0:0] i_0;
  // spec.hs:295:1-63
  wire [5:0] ws_0;
  wire [4:0] c$app_arg_3;
  wire  result_16;
  wire [4:0] c$app_arg_4;
  wire  result_17;
  // spec.hs:(573,1)-(578,38)
  wire signed [63:0] y_1;
  // spec.hs:(573,1)-(578,38)
  wire signed [63:0] x_5;
  // spec.hs:(573,1)-(578,38)
  wire [6463:0] win_0;
  // spec.hs:(573,1)-(578,38)
  reg [6471:0] window_0 = {8'd103,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
            64'sd0,   64'sd0,   64'sd0}};
  wire [6471:0] result_18;
  // spec.hs:(573,1)-(578,38)
  wire [6471:0] t_1;
  wire [6463:0] result_19;
  // spec.hs:(573,1)-(578,38)
  wire [6463:0] c$t_case_alt_1;
  // spec.hs:(573,1)-(578,38)
  wire [6463:0] c$t_case_alt_2;
  // spec.hs:(573,1)-(578,38)
  wire [6463:0] lastBucketUpdated_0;
  // spec.hs:(573,1)-(578,38)
  wire  b_1;
  // spec.hs:89:34-42
  wire  x_6;
  wire [71:0] result_20;
  // spec.hs:89:34-42
  wire  x_7;
  // spec.hs:(536,1)-(541,28)
  reg [71:0] result_21 = {8'd103,   64'sd0};
  // spec.hs:(536,1)-(541,28)
  wire [71:0] t_2;
  wire signed [63:0] x_8;
  wire signed [63:0] y_2;
  // spec.hs:295:1-63
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:295:1-63
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_22;
  // spec.hs:295:1-63
  wire [0:0] i_1;
  // spec.hs:295:1-63
  wire [5:0] ws_1;
  // spec.hs:(339,1)-(341,59)
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:287:1-65
  wire [147:0] c$ws_app_arg_5;
  // spec.hs:287:1-65
  wire [3:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire signed [63:0] result_23;
  wire [7:0] result_24;
  wire [7:0] c$app_arg_5;
  // spec.hs:287:1-65
  wire [0:0] i_2;
  // spec.hs:287:1-65
  wire [5:0] ws_2;
  wire [143:0] result_25;
  // spec.hs:88:34-42
  wire  x_9;
  // spec.hs:(521,1)-(526,36)
  reg [143:0] result_26 = {{8'd103,   64'sd0},   {8'd103,   64'sd0}};
  // spec.hs:(521,1)-(526,36)
  wire [143:0] t_3;
  wire signed [63:0] x_10;
  wire signed [63:0] y_3;
  // spec.hs:(339,1)-(341,59)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:287:1-65
  wire [147:0] c$ws_app_arg_7;
  // spec.hs:287:1-65
  wire [3:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [1:0] c$case_scrut_8;
  wire signed [63:0] result_27;
  wire [7:0] result_28;
  wire [7:0] c$app_arg_6;
  // spec.hs:287:1-65
  wire [0:0] i_3;
  // spec.hs:287:1-65
  wire [5:0] ws_3;
  // spec.hs:302:1-55
  wire signed [63:0] winData;
  // spec.hs:302:1-55
  wire [7:0] winTag;
  wire [7:0] result_29;
  wire [7:0] c$app_arg_7;
  // spec.hs:302:1-55
  wire [7:0] tag_0;
  // spec.hs:295:1-63
  wire [147:0] c$ws_app_arg_9;
  // spec.hs:295:1-63
  wire [3:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [1:0] c$case_scrut_10;
  wire signed [63:0] result_30;
  // spec.hs:295:1-63
  wire [0:0] i_4;
  // spec.hs:295:1-63
  wire [5:0] ws_4;
  // spec.hs:317:1-46
  wire signed [63:0] dta;
  wire [4:0] c$app_arg_8;
  wire  result_31;
  // spec.hs:(339,1)-(341,59)
  wire [1:0] slides;
  wire [4:0] c$app_arg_9;
  wire  result_32;
  wire [239:0] c$app_arg_10;
  wire [47:0] result_33;
  wire [143:0] result_34;
  // spec.hs:(508,1)-(512,36)
  reg [143:0] result_35 = {{8'd103,   64'sd0},   {8'd103,   64'sd0}};
  // spec.hs:(508,1)-(512,36)
  wire  b_2;
  // spec.hs:(508,1)-(512,36)
  wire [143:0] t_4;
  // spec.hs:(339,1)-(341,59)
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  wire [5:0] c$app_arg_11;
  wire  result_36;
  wire [191:0] c$app_arg_12;
  wire [47:0] result_37;
  wire [143:0] c$app_arg_13;
  wire [47:0] result_38;
  wire [95:0] c$app_arg_14;
  wire [47:0] result_39;
  // spec.hs:(487,9)-(489,29)
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_40;
  // spec.hs:(487,9)-(489,29)
  wire  b_3;
  // spec.hs:(487,9)-(489,29)
  wire [7:0] f1;
  wire [7:0] result_41;
  // spec.hs:(339,1)-(341,59)
  wire  pOut2;
  // spec.hs:(487,9)-(489,29)
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_42;
  // spec.hs:(487,9)-(489,29)
  wire  b_4;
  // spec.hs:(487,9)-(489,29)
  wire [7:0] f1_0;
  wire [7:0] result_43;
  // spec.hs:89:34-42
  wire  x_11;
  // spec.hs:(487,9)-(489,29)
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_44;
  // spec.hs:(487,9)-(489,29)
  wire  b_5;
  // spec.hs:(487,9)-(489,29)
  wire [7:0] f1_1;
  wire [7:0] result_45;
  // spec.hs:88:34-42
  wire  x_12;
  wire [3:0] c$app_arg_15;
  wire  result_46;
  // spec.hs:(339,1)-(341,59)
  wire  pOut1;
  wire [2:0] c$app_arg_16;
  wire  result_47;
  // spec.hs:(339,1)-(341,59)
  wire  pOut0;
  wire [1:0] c$app_arg_17;
  wire  result_48;
  // spec.hs:(487,9)-(489,29)
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_49;
  // spec.hs:(487,9)-(489,29)
  wire  b_6;
  // spec.hs:(487,9)-(489,29)
  wire [7:0] f1_2;
  wire [7:0] result_50;
  // spec.hs:(339,1)-(341,59)
  wire  pIn0_0;
  // spec.hs:(339,1)-(341,59)
  wire [3:0] pacings;
  // spec.hs:(496,1)-(498,22)
  reg signed [63:0] toWait = (64'sd0);
  wire  result_51;
  wire signed [63:0] result_52;
  // spec.hs:(496,1)-(498,22)
  wire  b_7;
  wire signed [63:0] result_53;
  wire signed [63:0] x_13;
  wire  result_54;
  // spec.hs:(339,1)-(341,59)
  wire  b_8;
  wire [72:0] result_55;
  reg [70:0] c$app_arg_18 = {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
  wire [70:0] c$case_alt;
  wire [70:0] c$case_alt_0;
  wire [70:0] c$case_alt_1;
  reg [70:0] c$case_alt_2;
  reg [70:0] c$case_alt_3;
  wire [70:0] c$case_alt_4;
  reg  c$app_arg_19 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_20 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(155,1)-(157,25)
  reg [283:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:(155,1)-(157,25)
  wire [283:0] c$buffer_case_alt;
  // spec.hs:(155,1)-(157,25)
  wire [283:0] c$buffer_case_alt_0;
  // spec.hs:(155,1)-(157,25)
  wire [283:0] c$buffer_case_alt_1;
  // spec.hs:(155,1)-(157,25)
  wire [70:0] qData;
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] x_14;
  // spec.hs:(155,1)-(157,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(155,1)-(157,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(155,1)-(157,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(155,1)-(157,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(636,1)-(638,87)
  wire  qPopValid;
  // spec.hs:(636,1)-(638,87)
  wire  qPush;
  // spec.hs:(636,1)-(638,87)
  wire  qPop;
  wire [64:0] inputs;
  wire [3:0] c$vec2;
  wire [6463:0] c$vec;
  wire [703:0] c$vec_0;
  wire signed [63:0] x_projection_112;
  wire [767:0] c$t_case_alt_sel_alt_t_0;
  wire [767:0] c$t_case_alt_sel_alt_f_0;
  wire [3:0] c$vec2_0;
  wire signed [63:0] x_projection_115;
  wire [6527:0] c$t_case_alt_sel_alt_t_3;
  wire [6527:0] c$t_case_alt_sel_alt_f_3;
  wire [3:0] c$vec2_1;
  wire [3:0] c$vec2_2;
  wire [215:0] t_projection_3;
  wire [3:0] c$vec2_3;
  wire [3:0] c$vec2_4;
  wire [215:0] t_projection_6;
  wire signed [63:0] c$tte_rhs;
  wire [354:0] c$buffer_case_alt_sel_alt_t_1;
  wire [354:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [204:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [9:0] result_1;
  wire [1:0] result_1_4_10;
  wire [3:0] result_1_5_13;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {hasInput0 | timer0Over,
                     {inputs,   {timer0Over,   timer0Over},
                      {pIn0,   pIn0,   pIn0,   timer0Over}}};

  assign hasInput0 = inputs[0:0];

  assign pIn0 = hasInput0;

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{result_51 & (~ result_54),
                      {{result_8,   result_9},   {winData,
                                                  result_7},   {dta,   result_6}}},   {slides,
                                                                                       {result_48,   x_1,   x_0,
                                                                                        result_36}}};

  assign x_0 = result_46;

  assign x_1 = result_47;

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  assign iterateI_ho1_0_arg0 = pOut2;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  assign c$app_arg = {pOut2,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res};



  assign result_6 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  assign iterateI_ho1_0_arg0_0 = x_11;

  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_10;



  assign c$app_arg_0 = {x_11,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0};



  assign result_7 = c$app_arg_0[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 2; i_5 = i_5 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_26[i_5*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_5*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_5*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_6;
  generate
  for (i_6=0; i_6 < 2; i_6 = i_6 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_6*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_6[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:295:1-63
    wire [7:0] t_9;
    // spec.hs:295:1-63
    wire [71:0] x_16;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_9 == result_10[39:32]) ? {1'b1,map_index} : map_in[1:0];

    assign t_9 = x_16[71:64];

    assign x_16 = map_in[73:2];


    assign c$ws_app_arg_0[i_6*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7=i_7+1) begin : mk_array
    assign vecArray[(2-1)-i_7] = result_26[i_7*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_8 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  assign iterateI_ho1_0_arg0_1 = x_12;

  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_16;



  assign c$app_arg_1 = {x_12,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_1};



  assign result_9 = c$app_arg_1[1-1:0];

  wire [47:0] iterateI_ho1_0_arg0_2;
  wire [47:0] iterateI_ho1_0_res_2;
  wire [47:0] iterateI_ho1_1_res_2;
  wire [47:0] iterateI_ho1_2_res_2;
  wire [47:0] iterateI_ho1_3_res_2;
  wire [47:0] iterateI_ho1_4_res_2;
  assign iterateI_ho1_0_arg0_2 = {t_8,   t_7,
                                  t_6,   t_5,   t_6,   t_7};

  reg [47:0] c$bb_res_res_17 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_17;



  reg [47:0] c$bb_res_res_18 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_18;



  reg [47:0] c$bb_res_res_19 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_19;



  reg [47:0] c$bb_res_res_20 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_20;



  reg [47:0] c$bb_res_res_21 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_21;



  assign c$app_arg_2 = {{t_8,   t_7,   t_6,
                         t_5,   t_6,   t_7},   iterateI_ho1_0_res_2,
                        iterateI_ho1_1_res_2,   iterateI_ho1_2_res_2,
                        iterateI_ho1_3_res_2,   iterateI_ho1_4_res_2};



  assign result_10 = c$app_arg_2[48-1:0];

  assign tag = result_12[71:64];

  assign result_11 = b ? t : result_12;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {8'd103,   64'sd0};
    end else if (en) begin
      result_12 <= result_11;
    end
  end
  // register end

  assign b = result_36;

  assign t = {result_33[23:16],   (x_2 + y)};

  assign c$vec = window_0[6463:0];

  wire [6399:0] vec;
  wire signed [63:0] acc_7_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_5;
  wire signed [63:0] acc_6;
  wire signed [63:0] acc_7;
  wire signed [63:0] acc_8;
  wire signed [63:0] acc_9;
  wire signed [63:0] acc_10;
  wire signed [63:0] acc_11;
  wire signed [63:0] acc_12;
  wire signed [63:0] acc_13;
  wire signed [63:0] acc_14;
  wire signed [63:0] acc_15;
  wire signed [63:0] acc_16;
  wire signed [63:0] acc_17;
  wire signed [63:0] acc_18;
  wire signed [63:0] acc_19;
  wire signed [63:0] acc_20;
  wire signed [63:0] acc_21;
  wire signed [63:0] acc_22;
  wire signed [63:0] acc_23;
  wire signed [63:0] acc_24;
  wire signed [63:0] acc_25;
  wire signed [63:0] acc_26;
  wire signed [63:0] acc_27;
  wire signed [63:0] acc_28;
  wire signed [63:0] acc_29;
  wire signed [63:0] acc_30;
  wire signed [63:0] acc_31;
  wire signed [63:0] acc_32;
  wire signed [63:0] acc_33;
  wire signed [63:0] acc_34;
  wire signed [63:0] acc_35;
  wire signed [63:0] acc_36;
  wire signed [63:0] acc_37;
  wire signed [63:0] acc_38;
  wire signed [63:0] acc_39;
  wire signed [63:0] acc_40;
  wire signed [63:0] acc_41;
  wire signed [63:0] acc_42;
  wire signed [63:0] acc_43;
  wire signed [63:0] acc_44;
  wire signed [63:0] acc_45;
  wire signed [63:0] acc_46;
  wire signed [63:0] acc_47;
  wire signed [63:0] acc_48;
  wire signed [63:0] acc_49;
  wire signed [63:0] acc_50;
  wire signed [63:0] acc_51;
  wire signed [63:0] acc_52;
  wire signed [63:0] acc_53;
  wire signed [63:0] acc_54;
  wire signed [63:0] acc_55;
  wire signed [63:0] acc_56;
  wire signed [63:0] acc_57;
  wire signed [63:0] acc_58;
  wire signed [63:0] acc_59;
  wire signed [63:0] acc_60;
  wire signed [63:0] acc_61;
  wire signed [63:0] acc_62;
  wire signed [63:0] acc_63;
  wire signed [63:0] acc_64;
  wire signed [63:0] acc_65;
  wire signed [63:0] acc_66;
  wire signed [63:0] acc_67;
  wire signed [63:0] acc_68;
  wire signed [63:0] acc_69;
  wire signed [63:0] acc_70;
  wire signed [63:0] acc_71;
  wire signed [63:0] acc_72;
  wire signed [63:0] acc_73;
  wire signed [63:0] acc_74;
  wire signed [63:0] acc_75;
  wire signed [63:0] acc_76;
  wire signed [63:0] acc_77;
  wire signed [63:0] acc_78;
  wire signed [63:0] acc_79;
  wire signed [63:0] acc_80;
  wire signed [63:0] acc_81;
  wire signed [63:0] acc_82;
  wire signed [63:0] acc_83;
  wire signed [63:0] acc_84;
  wire signed [63:0] acc_85;
  wire signed [63:0] acc_86;
  wire signed [63:0] acc_87;
  wire signed [63:0] acc_88;
  wire signed [63:0] acc_89;
  wire signed [63:0] acc_90;
  wire signed [63:0] acc_91;
  wire signed [63:0] acc_92;
  wire signed [63:0] acc_93;
  wire signed [63:0] acc_94;
  wire signed [63:0] acc_95;
  wire signed [63:0] acc_96;
  wire signed [63:0] acc_97;
  wire signed [63:0] acc_98;
  wire signed [63:0] acc_99;
  wire signed [63:0] acc_100;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  wire signed [63:0] acc_1_2;
  wire signed [63:0] acc_1_3;
  wire signed [63:0] acc_1_4;
  wire signed [63:0] acc_1_5;
  wire signed [63:0] acc_1_6;
  wire signed [63:0] acc_1_7;
  wire signed [63:0] acc_1_8;
  wire signed [63:0] acc_1_9;
  wire signed [63:0] acc_1_10;
  wire signed [63:0] acc_1_11;
  wire signed [63:0] acc_1_12;
  wire signed [63:0] acc_1_13;
  wire signed [63:0] acc_1_14;
  wire signed [63:0] acc_1_15;
  wire signed [63:0] acc_1_16;
  wire signed [63:0] acc_1_17;
  wire signed [63:0] acc_1_18;
  wire signed [63:0] acc_1_19;
  wire signed [63:0] acc_1_20;
  wire signed [63:0] acc_1_21;
  wire signed [63:0] acc_1_22;
  wire signed [63:0] acc_1_23;
  wire signed [63:0] acc_1_24;
  wire signed [63:0] acc_1_25;
  wire signed [63:0] acc_1_26;
  wire signed [63:0] acc_1_27;
  wire signed [63:0] acc_1_28;
  wire signed [63:0] acc_1_29;
  wire signed [63:0] acc_1_30;
  wire signed [63:0] acc_1_31;
  wire signed [63:0] acc_1_32;
  wire signed [63:0] acc_1_33;
  wire signed [63:0] acc_1_34;
  wire signed [63:0] acc_1_35;
  wire signed [63:0] acc_1_36;
  wire signed [63:0] acc_1_37;
  wire signed [63:0] acc_1_38;
  wire signed [63:0] acc_1_39;
  wire signed [63:0] acc_1_40;
  wire signed [63:0] acc_1_41;
  wire signed [63:0] acc_1_42;
  wire signed [63:0] acc_1_43;
  wire signed [63:0] acc_1_44;
  wire signed [63:0] acc_1_45;
  wire signed [63:0] acc_1_46;
  wire signed [63:0] acc_1_47;
  wire signed [63:0] acc_1_48;
  wire signed [63:0] acc_1_49;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_2_1;
  wire signed [63:0] acc_2_2;
  wire signed [63:0] acc_2_3;
  wire signed [63:0] acc_2_4;
  wire signed [63:0] acc_2_5;
  wire signed [63:0] acc_2_6;
  wire signed [63:0] acc_2_7;
  wire signed [63:0] acc_2_8;
  wire signed [63:0] acc_2_9;
  wire signed [63:0] acc_2_10;
  wire signed [63:0] acc_2_11;
  wire signed [63:0] acc_2_12;
  wire signed [63:0] acc_2_13;
  wire signed [63:0] acc_2_14;
  wire signed [63:0] acc_2_15;
  wire signed [63:0] acc_2_16;
  wire signed [63:0] acc_2_17;
  wire signed [63:0] acc_2_18;
  wire signed [63:0] acc_2_19;
  wire signed [63:0] acc_2_20;
  wire signed [63:0] acc_2_21;
  wire signed [63:0] acc_2_22;
  wire signed [63:0] acc_2_23;
  wire signed [63:0] acc_3_0;
  wire signed [63:0] acc_3_1;
  wire signed [63:0] acc_3_2;
  wire signed [63:0] acc_3_3;
  wire signed [63:0] acc_3_4;
  wire signed [63:0] acc_3_5;
  wire signed [63:0] acc_3_6;
  wire signed [63:0] acc_3_7;
  wire signed [63:0] acc_3_8;
  wire signed [63:0] acc_3_9;
  wire signed [63:0] acc_3_10;
  wire signed [63:0] acc_3_11;
  wire signed [63:0] acc_4_0;
  wire signed [63:0] acc_4_1;
  wire signed [63:0] acc_4_2;
  wire signed [63:0] acc_4_3;
  wire signed [63:0] acc_4_4;
  wire signed [63:0] acc_4_5;
  wire signed [63:0] acc_5_0;
  wire signed [63:0] acc_5_1;
  wire signed [63:0] acc_5_2;
  wire signed [63:0] acc_2_24;
  wire signed [63:0] acc_6_0;
  wire signed [63:0] acc_6_1;
  assign ds = acc_7_0;

  assign vec = (c$vec[6400-1 : 0]);

  assign acc_1 = $signed(vec[6399:6336]);

  assign acc_2 = $signed(vec[6335:6272]);

  assign acc_3 = $signed(vec[6271:6208]);

  assign acc_4 = $signed(vec[6207:6144]);

  assign acc_5 = $signed(vec[6143:6080]);

  assign acc_6 = $signed(vec[6079:6016]);

  assign acc_7 = $signed(vec[6015:5952]);

  assign acc_8 = $signed(vec[5951:5888]);

  assign acc_9 = $signed(vec[5887:5824]);

  assign acc_10 = $signed(vec[5823:5760]);

  assign acc_11 = $signed(vec[5759:5696]);

  assign acc_12 = $signed(vec[5695:5632]);

  assign acc_13 = $signed(vec[5631:5568]);

  assign acc_14 = $signed(vec[5567:5504]);

  assign acc_15 = $signed(vec[5503:5440]);

  assign acc_16 = $signed(vec[5439:5376]);

  assign acc_17 = $signed(vec[5375:5312]);

  assign acc_18 = $signed(vec[5311:5248]);

  assign acc_19 = $signed(vec[5247:5184]);

  assign acc_20 = $signed(vec[5183:5120]);

  assign acc_21 = $signed(vec[5119:5056]);

  assign acc_22 = $signed(vec[5055:4992]);

  assign acc_23 = $signed(vec[4991:4928]);

  assign acc_24 = $signed(vec[4927:4864]);

  assign acc_25 = $signed(vec[4863:4800]);

  assign acc_26 = $signed(vec[4799:4736]);

  assign acc_27 = $signed(vec[4735:4672]);

  assign acc_28 = $signed(vec[4671:4608]);

  assign acc_29 = $signed(vec[4607:4544]);

  assign acc_30 = $signed(vec[4543:4480]);

  assign acc_31 = $signed(vec[4479:4416]);

  assign acc_32 = $signed(vec[4415:4352]);

  assign acc_33 = $signed(vec[4351:4288]);

  assign acc_34 = $signed(vec[4287:4224]);

  assign acc_35 = $signed(vec[4223:4160]);

  assign acc_36 = $signed(vec[4159:4096]);

  assign acc_37 = $signed(vec[4095:4032]);

  assign acc_38 = $signed(vec[4031:3968]);

  assign acc_39 = $signed(vec[3967:3904]);

  assign acc_40 = $signed(vec[3903:3840]);

  assign acc_41 = $signed(vec[3839:3776]);

  assign acc_42 = $signed(vec[3775:3712]);

  assign acc_43 = $signed(vec[3711:3648]);

  assign acc_44 = $signed(vec[3647:3584]);

  assign acc_45 = $signed(vec[3583:3520]);

  assign acc_46 = $signed(vec[3519:3456]);

  assign acc_47 = $signed(vec[3455:3392]);

  assign acc_48 = $signed(vec[3391:3328]);

  assign acc_49 = $signed(vec[3327:3264]);

  assign acc_50 = $signed(vec[3263:3200]);

  assign acc_51 = $signed(vec[3199:3136]);

  assign acc_52 = $signed(vec[3135:3072]);

  assign acc_53 = $signed(vec[3071:3008]);

  assign acc_54 = $signed(vec[3007:2944]);

  assign acc_55 = $signed(vec[2943:2880]);

  assign acc_56 = $signed(vec[2879:2816]);

  assign acc_57 = $signed(vec[2815:2752]);

  assign acc_58 = $signed(vec[2751:2688]);

  assign acc_59 = $signed(vec[2687:2624]);

  assign acc_60 = $signed(vec[2623:2560]);

  assign acc_61 = $signed(vec[2559:2496]);

  assign acc_62 = $signed(vec[2495:2432]);

  assign acc_63 = $signed(vec[2431:2368]);

  assign acc_64 = $signed(vec[2367:2304]);

  assign acc_65 = $signed(vec[2303:2240]);

  assign acc_66 = $signed(vec[2239:2176]);

  assign acc_67 = $signed(vec[2175:2112]);

  assign acc_68 = $signed(vec[2111:2048]);

  assign acc_69 = $signed(vec[2047:1984]);

  assign acc_70 = $signed(vec[1983:1920]);

  assign acc_71 = $signed(vec[1919:1856]);

  assign acc_72 = $signed(vec[1855:1792]);

  assign acc_73 = $signed(vec[1791:1728]);

  assign acc_74 = $signed(vec[1727:1664]);

  assign acc_75 = $signed(vec[1663:1600]);

  assign acc_76 = $signed(vec[1599:1536]);

  assign acc_77 = $signed(vec[1535:1472]);

  assign acc_78 = $signed(vec[1471:1408]);

  assign acc_79 = $signed(vec[1407:1344]);

  assign acc_80 = $signed(vec[1343:1280]);

  assign acc_81 = $signed(vec[1279:1216]);

  assign acc_82 = $signed(vec[1215:1152]);

  assign acc_83 = $signed(vec[1151:1088]);

  assign acc_84 = $signed(vec[1087:1024]);

  assign acc_85 = $signed(vec[1023:960]);

  assign acc_86 = $signed(vec[959:896]);

  assign acc_87 = $signed(vec[895:832]);

  assign acc_88 = $signed(vec[831:768]);

  assign acc_89 = $signed(vec[767:704]);

  assign acc_90 = $signed(vec[703:640]);

  assign acc_91 = $signed(vec[639:576]);

  assign acc_92 = $signed(vec[575:512]);

  assign acc_93 = $signed(vec[511:448]);

  assign acc_94 = $signed(vec[447:384]);

  assign acc_95 = $signed(vec[383:320]);

  assign acc_96 = $signed(vec[319:256]);

  assign acc_97 = $signed(vec[255:192]);

  assign acc_98 = $signed(vec[191:128]);

  assign acc_99 = $signed(vec[127:64]);

  assign acc_100 = $signed(vec[63:0]);

  wire signed [63:0] x_17;
  wire signed [63:0] y_4;
  wire signed [63:0] c$case_alt_14;
  assign acc_1_0 = c$case_alt_14;

  assign x_17 = acc_1;

  assign y_4 = acc_2;

  assign c$case_alt_14 = (x_17 + y_4);



  wire signed [63:0] x_18;
  wire signed [63:0] y_5;
  wire signed [63:0] c$case_alt_15;
  assign acc_1_1 = c$case_alt_15;

  assign x_18 = acc_3;

  assign y_5 = acc_4;

  assign c$case_alt_15 = (x_18 + y_5);



  wire signed [63:0] x_19;
  wire signed [63:0] y_6;
  wire signed [63:0] c$case_alt_16;
  assign acc_1_2 = c$case_alt_16;

  assign x_19 = acc_5;

  assign y_6 = acc_6;

  assign c$case_alt_16 = (x_19 + y_6);



  wire signed [63:0] x_20;
  wire signed [63:0] y_7;
  wire signed [63:0] c$case_alt_17;
  assign acc_1_3 = c$case_alt_17;

  assign x_20 = acc_7;

  assign y_7 = acc_8;

  assign c$case_alt_17 = (x_20 + y_7);



  wire signed [63:0] x_21;
  wire signed [63:0] y_8;
  wire signed [63:0] c$case_alt_18;
  assign acc_1_4 = c$case_alt_18;

  assign x_21 = acc_9;

  assign y_8 = acc_10;

  assign c$case_alt_18 = (x_21 + y_8);



  wire signed [63:0] x_22;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_19;
  assign acc_1_5 = c$case_alt_19;

  assign x_22 = acc_11;

  assign y_9 = acc_12;

  assign c$case_alt_19 = (x_22 + y_9);



  wire signed [63:0] x_23;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_20;
  assign acc_1_6 = c$case_alt_20;

  assign x_23 = acc_13;

  assign y_10 = acc_14;

  assign c$case_alt_20 = (x_23 + y_10);



  wire signed [63:0] x_24;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_21;
  assign acc_1_7 = c$case_alt_21;

  assign x_24 = acc_15;

  assign y_11 = acc_16;

  assign c$case_alt_21 = (x_24 + y_11);



  wire signed [63:0] x_25;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_22;
  assign acc_1_8 = c$case_alt_22;

  assign x_25 = acc_17;

  assign y_12 = acc_18;

  assign c$case_alt_22 = (x_25 + y_12);



  wire signed [63:0] x_26;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_23;
  assign acc_1_9 = c$case_alt_23;

  assign x_26 = acc_19;

  assign y_13 = acc_20;

  assign c$case_alt_23 = (x_26 + y_13);



  wire signed [63:0] x_27;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_24;
  assign acc_1_10 = c$case_alt_24;

  assign x_27 = acc_21;

  assign y_14 = acc_22;

  assign c$case_alt_24 = (x_27 + y_14);



  wire signed [63:0] x_28;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_25;
  assign acc_1_11 = c$case_alt_25;

  assign x_28 = acc_23;

  assign y_15 = acc_24;

  assign c$case_alt_25 = (x_28 + y_15);



  wire signed [63:0] x_29;
  wire signed [63:0] y_16;
  wire signed [63:0] c$case_alt_26;
  assign acc_1_12 = c$case_alt_26;

  assign x_29 = acc_25;

  assign y_16 = acc_26;

  assign c$case_alt_26 = (x_29 + y_16);



  wire signed [63:0] x_30;
  wire signed [63:0] y_17;
  wire signed [63:0] c$case_alt_27;
  assign acc_1_13 = c$case_alt_27;

  assign x_30 = acc_27;

  assign y_17 = acc_28;

  assign c$case_alt_27 = (x_30 + y_17);



  wire signed [63:0] x_31;
  wire signed [63:0] y_18;
  wire signed [63:0] c$case_alt_28;
  assign acc_1_14 = c$case_alt_28;

  assign x_31 = acc_29;

  assign y_18 = acc_30;

  assign c$case_alt_28 = (x_31 + y_18);



  wire signed [63:0] x_32;
  wire signed [63:0] y_19;
  wire signed [63:0] c$case_alt_29;
  assign acc_1_15 = c$case_alt_29;

  assign x_32 = acc_31;

  assign y_19 = acc_32;

  assign c$case_alt_29 = (x_32 + y_19);



  wire signed [63:0] x_33;
  wire signed [63:0] y_20;
  wire signed [63:0] c$case_alt_30;
  assign acc_1_16 = c$case_alt_30;

  assign x_33 = acc_33;

  assign y_20 = acc_34;

  assign c$case_alt_30 = (x_33 + y_20);



  wire signed [63:0] x_34;
  wire signed [63:0] y_21;
  wire signed [63:0] c$case_alt_31;
  assign acc_1_17 = c$case_alt_31;

  assign x_34 = acc_35;

  assign y_21 = acc_36;

  assign c$case_alt_31 = (x_34 + y_21);



  wire signed [63:0] x_35;
  wire signed [63:0] y_22;
  wire signed [63:0] c$case_alt_32;
  assign acc_1_18 = c$case_alt_32;

  assign x_35 = acc_37;

  assign y_22 = acc_38;

  assign c$case_alt_32 = (x_35 + y_22);



  wire signed [63:0] x_36;
  wire signed [63:0] y_23;
  wire signed [63:0] c$case_alt_33;
  assign acc_1_19 = c$case_alt_33;

  assign x_36 = acc_39;

  assign y_23 = acc_40;

  assign c$case_alt_33 = (x_36 + y_23);



  wire signed [63:0] x_37;
  wire signed [63:0] y_24;
  wire signed [63:0] c$case_alt_34;
  assign acc_1_20 = c$case_alt_34;

  assign x_37 = acc_41;

  assign y_24 = acc_42;

  assign c$case_alt_34 = (x_37 + y_24);



  wire signed [63:0] x_38;
  wire signed [63:0] y_25;
  wire signed [63:0] c$case_alt_35;
  assign acc_1_21 = c$case_alt_35;

  assign x_38 = acc_43;

  assign y_25 = acc_44;

  assign c$case_alt_35 = (x_38 + y_25);



  wire signed [63:0] x_39;
  wire signed [63:0] y_26;
  wire signed [63:0] c$case_alt_36;
  assign acc_1_22 = c$case_alt_36;

  assign x_39 = acc_45;

  assign y_26 = acc_46;

  assign c$case_alt_36 = (x_39 + y_26);



  wire signed [63:0] x_40;
  wire signed [63:0] y_27;
  wire signed [63:0] c$case_alt_37;
  assign acc_1_23 = c$case_alt_37;

  assign x_40 = acc_47;

  assign y_27 = acc_48;

  assign c$case_alt_37 = (x_40 + y_27);



  wire signed [63:0] x_41;
  wire signed [63:0] y_28;
  wire signed [63:0] c$case_alt_38;
  assign acc_1_24 = c$case_alt_38;

  assign x_41 = acc_49;

  assign y_28 = acc_50;

  assign c$case_alt_38 = (x_41 + y_28);



  wire signed [63:0] x_42;
  wire signed [63:0] y_29;
  wire signed [63:0] c$case_alt_39;
  assign acc_1_25 = c$case_alt_39;

  assign x_42 = acc_51;

  assign y_29 = acc_52;

  assign c$case_alt_39 = (x_42 + y_29);



  wire signed [63:0] x_43;
  wire signed [63:0] y_30;
  wire signed [63:0] c$case_alt_40;
  assign acc_1_26 = c$case_alt_40;

  assign x_43 = acc_53;

  assign y_30 = acc_54;

  assign c$case_alt_40 = (x_43 + y_30);



  wire signed [63:0] x_44;
  wire signed [63:0] y_31;
  wire signed [63:0] c$case_alt_41;
  assign acc_1_27 = c$case_alt_41;

  assign x_44 = acc_55;

  assign y_31 = acc_56;

  assign c$case_alt_41 = (x_44 + y_31);



  wire signed [63:0] x_45;
  wire signed [63:0] y_32;
  wire signed [63:0] c$case_alt_42;
  assign acc_1_28 = c$case_alt_42;

  assign x_45 = acc_57;

  assign y_32 = acc_58;

  assign c$case_alt_42 = (x_45 + y_32);



  wire signed [63:0] x_46;
  wire signed [63:0] y_33;
  wire signed [63:0] c$case_alt_43;
  assign acc_1_29 = c$case_alt_43;

  assign x_46 = acc_59;

  assign y_33 = acc_60;

  assign c$case_alt_43 = (x_46 + y_33);



  wire signed [63:0] x_47;
  wire signed [63:0] y_34;
  wire signed [63:0] c$case_alt_44;
  assign acc_1_30 = c$case_alt_44;

  assign x_47 = acc_61;

  assign y_34 = acc_62;

  assign c$case_alt_44 = (x_47 + y_34);



  wire signed [63:0] x_48;
  wire signed [63:0] y_35;
  wire signed [63:0] c$case_alt_45;
  assign acc_1_31 = c$case_alt_45;

  assign x_48 = acc_63;

  assign y_35 = acc_64;

  assign c$case_alt_45 = (x_48 + y_35);



  wire signed [63:0] x_49;
  wire signed [63:0] y_36;
  wire signed [63:0] c$case_alt_46;
  assign acc_1_32 = c$case_alt_46;

  assign x_49 = acc_65;

  assign y_36 = acc_66;

  assign c$case_alt_46 = (x_49 + y_36);



  wire signed [63:0] x_50;
  wire signed [63:0] y_37;
  wire signed [63:0] c$case_alt_47;
  assign acc_1_33 = c$case_alt_47;

  assign x_50 = acc_67;

  assign y_37 = acc_68;

  assign c$case_alt_47 = (x_50 + y_37);



  wire signed [63:0] x_51;
  wire signed [63:0] y_38;
  wire signed [63:0] c$case_alt_48;
  assign acc_1_34 = c$case_alt_48;

  assign x_51 = acc_69;

  assign y_38 = acc_70;

  assign c$case_alt_48 = (x_51 + y_38);



  wire signed [63:0] x_52;
  wire signed [63:0] y_39;
  wire signed [63:0] c$case_alt_49;
  assign acc_1_35 = c$case_alt_49;

  assign x_52 = acc_71;

  assign y_39 = acc_72;

  assign c$case_alt_49 = (x_52 + y_39);



  wire signed [63:0] x_53;
  wire signed [63:0] y_40;
  wire signed [63:0] c$case_alt_50;
  assign acc_1_36 = c$case_alt_50;

  assign x_53 = acc_73;

  assign y_40 = acc_74;

  assign c$case_alt_50 = (x_53 + y_40);



  wire signed [63:0] x_54;
  wire signed [63:0] y_41;
  wire signed [63:0] c$case_alt_51;
  assign acc_1_37 = c$case_alt_51;

  assign x_54 = acc_75;

  assign y_41 = acc_76;

  assign c$case_alt_51 = (x_54 + y_41);



  wire signed [63:0] x_55;
  wire signed [63:0] y_42;
  wire signed [63:0] c$case_alt_52;
  assign acc_1_38 = c$case_alt_52;

  assign x_55 = acc_77;

  assign y_42 = acc_78;

  assign c$case_alt_52 = (x_55 + y_42);



  wire signed [63:0] x_56;
  wire signed [63:0] y_43;
  wire signed [63:0] c$case_alt_53;
  assign acc_1_39 = c$case_alt_53;

  assign x_56 = acc_79;

  assign y_43 = acc_80;

  assign c$case_alt_53 = (x_56 + y_43);



  wire signed [63:0] x_57;
  wire signed [63:0] y_44;
  wire signed [63:0] c$case_alt_54;
  assign acc_1_40 = c$case_alt_54;

  assign x_57 = acc_81;

  assign y_44 = acc_82;

  assign c$case_alt_54 = (x_57 + y_44);



  wire signed [63:0] x_58;
  wire signed [63:0] y_45;
  wire signed [63:0] c$case_alt_55;
  assign acc_1_41 = c$case_alt_55;

  assign x_58 = acc_83;

  assign y_45 = acc_84;

  assign c$case_alt_55 = (x_58 + y_45);



  wire signed [63:0] x_59;
  wire signed [63:0] y_46;
  wire signed [63:0] c$case_alt_56;
  assign acc_1_42 = c$case_alt_56;

  assign x_59 = acc_85;

  assign y_46 = acc_86;

  assign c$case_alt_56 = (x_59 + y_46);



  wire signed [63:0] x_60;
  wire signed [63:0] y_47;
  wire signed [63:0] c$case_alt_57;
  assign acc_1_43 = c$case_alt_57;

  assign x_60 = acc_87;

  assign y_47 = acc_88;

  assign c$case_alt_57 = (x_60 + y_47);



  wire signed [63:0] x_61;
  wire signed [63:0] y_48;
  wire signed [63:0] c$case_alt_58;
  assign acc_1_44 = c$case_alt_58;

  assign x_61 = acc_89;

  assign y_48 = acc_90;

  assign c$case_alt_58 = (x_61 + y_48);



  wire signed [63:0] x_62;
  wire signed [63:0] y_49;
  wire signed [63:0] c$case_alt_59;
  assign acc_1_45 = c$case_alt_59;

  assign x_62 = acc_91;

  assign y_49 = acc_92;

  assign c$case_alt_59 = (x_62 + y_49);



  wire signed [63:0] x_63;
  wire signed [63:0] y_50;
  wire signed [63:0] c$case_alt_60;
  assign acc_1_46 = c$case_alt_60;

  assign x_63 = acc_93;

  assign y_50 = acc_94;

  assign c$case_alt_60 = (x_63 + y_50);



  wire signed [63:0] x_64;
  wire signed [63:0] y_51;
  wire signed [63:0] c$case_alt_61;
  assign acc_1_47 = c$case_alt_61;

  assign x_64 = acc_95;

  assign y_51 = acc_96;

  assign c$case_alt_61 = (x_64 + y_51);



  wire signed [63:0] x_65;
  wire signed [63:0] y_52;
  wire signed [63:0] c$case_alt_62;
  assign acc_1_48 = c$case_alt_62;

  assign x_65 = acc_97;

  assign y_52 = acc_98;

  assign c$case_alt_62 = (x_65 + y_52);



  wire signed [63:0] x_66;
  wire signed [63:0] y_53;
  wire signed [63:0] c$case_alt_63;
  assign acc_1_49 = c$case_alt_63;

  assign x_66 = acc_99;

  assign y_53 = acc_100;

  assign c$case_alt_63 = (x_66 + y_53);



  wire signed [63:0] x_67;
  wire signed [63:0] y_54;
  wire signed [63:0] c$case_alt_64;
  assign acc_2_0 = c$case_alt_64;

  assign x_67 = acc_1_0;

  assign y_54 = acc_1_1;

  assign c$case_alt_64 = (x_67 + y_54);



  wire signed [63:0] x_68;
  wire signed [63:0] y_55;
  wire signed [63:0] c$case_alt_65;
  assign acc_2_1 = c$case_alt_65;

  assign x_68 = acc_1_2;

  assign y_55 = acc_1_3;

  assign c$case_alt_65 = (x_68 + y_55);



  wire signed [63:0] x_69;
  wire signed [63:0] y_56;
  wire signed [63:0] c$case_alt_66;
  assign acc_2_2 = c$case_alt_66;

  assign x_69 = acc_1_4;

  assign y_56 = acc_1_5;

  assign c$case_alt_66 = (x_69 + y_56);



  wire signed [63:0] x_70;
  wire signed [63:0] y_57;
  wire signed [63:0] c$case_alt_67;
  assign acc_2_3 = c$case_alt_67;

  assign x_70 = acc_1_6;

  assign y_57 = acc_1_7;

  assign c$case_alt_67 = (x_70 + y_57);



  wire signed [63:0] x_71;
  wire signed [63:0] y_58;
  wire signed [63:0] c$case_alt_68;
  assign acc_2_4 = c$case_alt_68;

  assign x_71 = acc_1_8;

  assign y_58 = acc_1_9;

  assign c$case_alt_68 = (x_71 + y_58);



  wire signed [63:0] x_72;
  wire signed [63:0] y_59;
  wire signed [63:0] c$case_alt_69;
  assign acc_2_5 = c$case_alt_69;

  assign x_72 = acc_1_10;

  assign y_59 = acc_1_11;

  assign c$case_alt_69 = (x_72 + y_59);



  wire signed [63:0] x_73;
  wire signed [63:0] y_60;
  wire signed [63:0] c$case_alt_70;
  assign acc_2_6 = c$case_alt_70;

  assign x_73 = acc_1_12;

  assign y_60 = acc_1_13;

  assign c$case_alt_70 = (x_73 + y_60);



  wire signed [63:0] x_74;
  wire signed [63:0] y_61;
  wire signed [63:0] c$case_alt_71;
  assign acc_2_7 = c$case_alt_71;

  assign x_74 = acc_1_14;

  assign y_61 = acc_1_15;

  assign c$case_alt_71 = (x_74 + y_61);



  wire signed [63:0] x_75;
  wire signed [63:0] y_62;
  wire signed [63:0] c$case_alt_72;
  assign acc_2_8 = c$case_alt_72;

  assign x_75 = acc_1_16;

  assign y_62 = acc_1_17;

  assign c$case_alt_72 = (x_75 + y_62);



  wire signed [63:0] x_76;
  wire signed [63:0] y_63;
  wire signed [63:0] c$case_alt_73;
  assign acc_2_9 = c$case_alt_73;

  assign x_76 = acc_1_18;

  assign y_63 = acc_1_19;

  assign c$case_alt_73 = (x_76 + y_63);



  wire signed [63:0] x_77;
  wire signed [63:0] y_64;
  wire signed [63:0] c$case_alt_74;
  assign acc_2_10 = c$case_alt_74;

  assign x_77 = acc_1_20;

  assign y_64 = acc_1_21;

  assign c$case_alt_74 = (x_77 + y_64);



  wire signed [63:0] x_78;
  wire signed [63:0] y_65;
  wire signed [63:0] c$case_alt_75;
  assign acc_2_11 = c$case_alt_75;

  assign x_78 = acc_1_22;

  assign y_65 = acc_1_23;

  assign c$case_alt_75 = (x_78 + y_65);



  wire signed [63:0] x_79;
  wire signed [63:0] y_66;
  wire signed [63:0] c$case_alt_76;
  assign acc_2_12 = c$case_alt_76;

  assign x_79 = acc_1_24;

  assign y_66 = acc_1_25;

  assign c$case_alt_76 = (x_79 + y_66);



  wire signed [63:0] x_80;
  wire signed [63:0] y_67;
  wire signed [63:0] c$case_alt_77;
  assign acc_2_13 = c$case_alt_77;

  assign x_80 = acc_1_26;

  assign y_67 = acc_1_27;

  assign c$case_alt_77 = (x_80 + y_67);



  wire signed [63:0] x_81;
  wire signed [63:0] y_68;
  wire signed [63:0] c$case_alt_78;
  assign acc_2_14 = c$case_alt_78;

  assign x_81 = acc_1_28;

  assign y_68 = acc_1_29;

  assign c$case_alt_78 = (x_81 + y_68);



  wire signed [63:0] x_82;
  wire signed [63:0] y_69;
  wire signed [63:0] c$case_alt_79;
  assign acc_2_15 = c$case_alt_79;

  assign x_82 = acc_1_30;

  assign y_69 = acc_1_31;

  assign c$case_alt_79 = (x_82 + y_69);



  wire signed [63:0] x_83;
  wire signed [63:0] y_70;
  wire signed [63:0] c$case_alt_80;
  assign acc_2_16 = c$case_alt_80;

  assign x_83 = acc_1_32;

  assign y_70 = acc_1_33;

  assign c$case_alt_80 = (x_83 + y_70);



  wire signed [63:0] x_84;
  wire signed [63:0] y_71;
  wire signed [63:0] c$case_alt_81;
  assign acc_2_17 = c$case_alt_81;

  assign x_84 = acc_1_34;

  assign y_71 = acc_1_35;

  assign c$case_alt_81 = (x_84 + y_71);



  wire signed [63:0] x_85;
  wire signed [63:0] y_72;
  wire signed [63:0] c$case_alt_82;
  assign acc_2_18 = c$case_alt_82;

  assign x_85 = acc_1_36;

  assign y_72 = acc_1_37;

  assign c$case_alt_82 = (x_85 + y_72);



  wire signed [63:0] x_86;
  wire signed [63:0] y_73;
  wire signed [63:0] c$case_alt_83;
  assign acc_2_19 = c$case_alt_83;

  assign x_86 = acc_1_38;

  assign y_73 = acc_1_39;

  assign c$case_alt_83 = (x_86 + y_73);



  wire signed [63:0] x_87;
  wire signed [63:0] y_74;
  wire signed [63:0] c$case_alt_84;
  assign acc_2_20 = c$case_alt_84;

  assign x_87 = acc_1_40;

  assign y_74 = acc_1_41;

  assign c$case_alt_84 = (x_87 + y_74);



  wire signed [63:0] x_88;
  wire signed [63:0] y_75;
  wire signed [63:0] c$case_alt_85;
  assign acc_2_21 = c$case_alt_85;

  assign x_88 = acc_1_42;

  assign y_75 = acc_1_43;

  assign c$case_alt_85 = (x_88 + y_75);



  wire signed [63:0] x_89;
  wire signed [63:0] y_76;
  wire signed [63:0] c$case_alt_86;
  assign acc_2_22 = c$case_alt_86;

  assign x_89 = acc_1_44;

  assign y_76 = acc_1_45;

  assign c$case_alt_86 = (x_89 + y_76);



  wire signed [63:0] x_90;
  wire signed [63:0] y_77;
  wire signed [63:0] c$case_alt_87;
  assign acc_2_23 = c$case_alt_87;

  assign x_90 = acc_1_46;

  assign y_77 = acc_1_47;

  assign c$case_alt_87 = (x_90 + y_77);



  wire signed [63:0] x_91;
  wire signed [63:0] y_78;
  wire signed [63:0] c$case_alt_88;
  assign acc_2_24 = c$case_alt_88;

  assign x_91 = acc_1_48;

  assign y_78 = acc_1_49;

  assign c$case_alt_88 = (x_91 + y_78);



  wire signed [63:0] x_92;
  wire signed [63:0] y_79;
  wire signed [63:0] c$case_alt_89;
  assign acc_3_0 = c$case_alt_89;

  assign x_92 = acc_2_0;

  assign y_79 = acc_2_1;

  assign c$case_alt_89 = (x_92 + y_79);



  wire signed [63:0] x_93;
  wire signed [63:0] y_80;
  wire signed [63:0] c$case_alt_90;
  assign acc_3_1 = c$case_alt_90;

  assign x_93 = acc_2_2;

  assign y_80 = acc_2_3;

  assign c$case_alt_90 = (x_93 + y_80);



  wire signed [63:0] x_94;
  wire signed [63:0] y_81;
  wire signed [63:0] c$case_alt_91;
  assign acc_3_2 = c$case_alt_91;

  assign x_94 = acc_2_4;

  assign y_81 = acc_2_5;

  assign c$case_alt_91 = (x_94 + y_81);



  wire signed [63:0] x_95;
  wire signed [63:0] y_82;
  wire signed [63:0] c$case_alt_92;
  assign acc_3_3 = c$case_alt_92;

  assign x_95 = acc_2_6;

  assign y_82 = acc_2_7;

  assign c$case_alt_92 = (x_95 + y_82);



  wire signed [63:0] x_96;
  wire signed [63:0] y_83;
  wire signed [63:0] c$case_alt_93;
  assign acc_3_4 = c$case_alt_93;

  assign x_96 = acc_2_8;

  assign y_83 = acc_2_9;

  assign c$case_alt_93 = (x_96 + y_83);



  wire signed [63:0] x_97;
  wire signed [63:0] y_84;
  wire signed [63:0] c$case_alt_94;
  assign acc_3_5 = c$case_alt_94;

  assign x_97 = acc_2_10;

  assign y_84 = acc_2_11;

  assign c$case_alt_94 = (x_97 + y_84);



  wire signed [63:0] x_98;
  wire signed [63:0] y_85;
  wire signed [63:0] c$case_alt_95;
  assign acc_3_6 = c$case_alt_95;

  assign x_98 = acc_2_12;

  assign y_85 = acc_2_13;

  assign c$case_alt_95 = (x_98 + y_85);



  wire signed [63:0] x_99;
  wire signed [63:0] y_86;
  wire signed [63:0] c$case_alt_96;
  assign acc_3_7 = c$case_alt_96;

  assign x_99 = acc_2_14;

  assign y_86 = acc_2_15;

  assign c$case_alt_96 = (x_99 + y_86);



  wire signed [63:0] x_100;
  wire signed [63:0] y_87;
  wire signed [63:0] c$case_alt_97;
  assign acc_3_8 = c$case_alt_97;

  assign x_100 = acc_2_16;

  assign y_87 = acc_2_17;

  assign c$case_alt_97 = (x_100 + y_87);



  wire signed [63:0] x_101;
  wire signed [63:0] y_88;
  wire signed [63:0] c$case_alt_98;
  assign acc_3_9 = c$case_alt_98;

  assign x_101 = acc_2_18;

  assign y_88 = acc_2_19;

  assign c$case_alt_98 = (x_101 + y_88);



  wire signed [63:0] x_102;
  wire signed [63:0] y_89;
  wire signed [63:0] c$case_alt_99;
  assign acc_3_10 = c$case_alt_99;

  assign x_102 = acc_2_20;

  assign y_89 = acc_2_21;

  assign c$case_alt_99 = (x_102 + y_89);



  wire signed [63:0] x_103;
  wire signed [63:0] y_90;
  wire signed [63:0] c$case_alt_100;
  assign acc_3_11 = c$case_alt_100;

  assign x_103 = acc_2_22;

  assign y_90 = acc_2_23;

  assign c$case_alt_100 = (x_103 + y_90);



  wire signed [63:0] x_104;
  wire signed [63:0] y_91;
  wire signed [63:0] c$case_alt_101;
  assign acc_4_0 = c$case_alt_101;

  assign x_104 = acc_3_0;

  assign y_91 = acc_3_1;

  assign c$case_alt_101 = (x_104 + y_91);



  wire signed [63:0] x_105;
  wire signed [63:0] y_92;
  wire signed [63:0] c$case_alt_102;
  assign acc_4_1 = c$case_alt_102;

  assign x_105 = acc_3_2;

  assign y_92 = acc_3_3;

  assign c$case_alt_102 = (x_105 + y_92);



  wire signed [63:0] x_106;
  wire signed [63:0] y_93;
  wire signed [63:0] c$case_alt_103;
  assign acc_4_2 = c$case_alt_103;

  assign x_106 = acc_3_4;

  assign y_93 = acc_3_5;

  assign c$case_alt_103 = (x_106 + y_93);



  wire signed [63:0] x_107;
  wire signed [63:0] y_94;
  wire signed [63:0] c$case_alt_104;
  assign acc_4_3 = c$case_alt_104;

  assign x_107 = acc_3_6;

  assign y_94 = acc_3_7;

  assign c$case_alt_104 = (x_107 + y_94);



  wire signed [63:0] x_108;
  wire signed [63:0] y_95;
  wire signed [63:0] c$case_alt_105;
  assign acc_4_4 = c$case_alt_105;

  assign x_108 = acc_3_8;

  assign y_95 = acc_3_9;

  assign c$case_alt_105 = (x_108 + y_95);



  wire signed [63:0] x_109;
  wire signed [63:0] y_96;
  wire signed [63:0] c$case_alt_106;
  assign acc_4_5 = c$case_alt_106;

  assign x_109 = acc_3_10;

  assign y_96 = acc_3_11;

  assign c$case_alt_106 = (x_109 + y_96);



  wire signed [63:0] x_110;
  wire signed [63:0] y_97;
  wire signed [63:0] c$case_alt_107;
  assign acc_5_0 = c$case_alt_107;

  assign x_110 = acc_4_0;

  assign y_97 = acc_4_1;

  assign c$case_alt_107 = (x_110 + y_97);



  wire signed [63:0] x_111;
  wire signed [63:0] y_98;
  wire signed [63:0] c$case_alt_108;
  assign acc_5_1 = c$case_alt_108;

  assign x_111 = acc_4_2;

  assign y_98 = acc_4_3;

  assign c$case_alt_108 = (x_111 + y_98);



  wire signed [63:0] x_112;
  wire signed [63:0] y_99;
  wire signed [63:0] c$case_alt_109;
  assign acc_5_2 = c$case_alt_109;

  assign x_112 = acc_4_4;

  assign y_99 = acc_4_5;

  assign c$case_alt_109 = (x_112 + y_99);



  wire signed [63:0] x_113;
  wire signed [63:0] y_100;
  wire signed [63:0] c$case_alt_110;
  assign acc_6_0 = c$case_alt_110;

  assign x_113 = acc_5_0;

  assign y_100 = acc_5_1;

  assign c$case_alt_110 = (x_113 + y_100);



  wire signed [63:0] x_114;
  wire signed [63:0] y_101;
  wire signed [63:0] c$case_alt_111;
  assign acc_6_1 = c$case_alt_111;

  assign x_114 = acc_5_2;

  assign y_101 = acc_2_24;

  assign c$case_alt_111 = (x_114 + y_101);



  wire signed [63:0] x_115;
  wire signed [63:0] y_102;
  wire signed [63:0] c$case_alt_112;
  assign acc_7_0 = c$case_alt_112;

  assign x_115 = acc_6_0;

  assign y_102 = acc_6_1;

  assign c$case_alt_112 = (x_115 + y_102);





  assign c$vec_0 = window[703:0];

  wire [639:0] vec_0;
  wire signed [63:0] acc_4_0_8;
  wire signed [63:0] acc_0_51;
  wire signed [63:0] acc_0_52;
  wire signed [63:0] acc_0_53;
  wire signed [63:0] acc_0_54;
  wire signed [63:0] acc_0_55;
  wire signed [63:0] acc_0_56;
  wire signed [63:0] acc_0_57;
  wire signed [63:0] acc_0_58;
  wire signed [63:0] acc_0_59;
  wire signed [63:0] acc_0_60;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_1_1_1;
  wire signed [63:0] acc_1_2_2;
  wire signed [63:0] acc_1_3_3;
  wire signed [63:0] acc_2_0_5;
  wire signed [63:0] acc_2_1_6;
  wire signed [63:0] acc_3_0_7;
  wire signed [63:0] acc_1_4_4;
  assign ds1 = acc_4_0_8;

  assign vec_0 = (c$vec_0[640-1 : 0]);

  assign acc_0_51 = $signed(vec_0[639:576]);

  assign acc_0_52 = $signed(vec_0[575:512]);

  assign acc_0_53 = $signed(vec_0[511:448]);

  assign acc_0_54 = $signed(vec_0[447:384]);

  assign acc_0_55 = $signed(vec_0[383:320]);

  assign acc_0_56 = $signed(vec_0[319:256]);

  assign acc_0_57 = $signed(vec_0[255:192]);

  assign acc_0_58 = $signed(vec_0[191:128]);

  assign acc_0_59 = $signed(vec_0[127:64]);

  assign acc_0_60 = $signed(vec_0[63:0]);

  wire signed [63:0] x_116;
  wire signed [63:0] y_103;
  wire signed [63:0] c$case_alt_113;
  assign acc_1_0_0 = c$case_alt_113;

  assign x_116 = acc_0_51;

  assign y_103 = acc_0_52;

  assign c$case_alt_113 = (x_116 + y_103);



  wire signed [63:0] x_117;
  wire signed [63:0] y_104;
  wire signed [63:0] c$case_alt_114;
  assign acc_1_1_1 = c$case_alt_114;

  assign x_117 = acc_0_53;

  assign y_104 = acc_0_54;

  assign c$case_alt_114 = (x_117 + y_104);



  wire signed [63:0] x_118;
  wire signed [63:0] y_105;
  wire signed [63:0] c$case_alt_115;
  assign acc_1_2_2 = c$case_alt_115;

  assign x_118 = acc_0_55;

  assign y_105 = acc_0_56;

  assign c$case_alt_115 = (x_118 + y_105);



  wire signed [63:0] x_119;
  wire signed [63:0] y_106;
  wire signed [63:0] c$case_alt_116;
  assign acc_1_3_3 = c$case_alt_116;

  assign x_119 = acc_0_57;

  assign y_106 = acc_0_58;

  assign c$case_alt_116 = (x_119 + y_106);



  wire signed [63:0] x_120;
  wire signed [63:0] y_107;
  wire signed [63:0] c$case_alt_117;
  assign acc_1_4_4 = c$case_alt_117;

  assign x_120 = acc_0_59;

  assign y_107 = acc_0_60;

  assign c$case_alt_117 = (x_120 + y_107);



  wire signed [63:0] x_121;
  wire signed [63:0] y_108;
  wire signed [63:0] c$case_alt_118;
  assign acc_2_0_5 = c$case_alt_118;

  assign x_121 = acc_1_0_0;

  assign y_108 = acc_1_1_1;

  assign c$case_alt_118 = (x_121 + y_108);



  wire signed [63:0] x_122;
  wire signed [63:0] y_109;
  wire signed [63:0] c$case_alt_119;
  assign acc_2_1_6 = c$case_alt_119;

  assign x_122 = acc_1_2_2;

  assign y_109 = acc_1_3_3;

  assign c$case_alt_119 = (x_122 + y_109);



  wire signed [63:0] x_123;
  wire signed [63:0] y_110;
  wire signed [63:0] c$case_alt_120;
  assign acc_3_0_7 = c$case_alt_120;

  assign x_123 = acc_2_0_5;

  assign y_110 = acc_2_1_6;

  assign c$case_alt_120 = (x_123 + y_110);



  wire signed [63:0] x_124;
  wire signed [63:0] y_111;
  wire signed [63:0] c$case_alt_121;
  assign acc_4_0_8 = c$case_alt_121;

  assign x_124 = acc_3_0_7;

  assign y_111 = acc_1_4_4;

  assign c$case_alt_121 = (x_124 + y_111);





  assign x_2 = ds;

  assign y = ds1;

  assign y_0 = result_15;

  assign x_projection_112 = $signed(win[704-1 -: 64]);

  assign x_3 = x_projection_112;

  assign win = window[703:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd103,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_13;
    end
  end
  // register end

  assign result_13 = b_0 ? t_0 : window;

  assign t_0 = {result_37[7:0],   result_14};

  assign result_14 = result_16 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = x_4 ? c$t_case_alt_sel_alt_t_0[767:64] : c$t_case_alt_sel_alt_f_0[767:64];

  assign c$t_case_alt_0 = x_4 ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_9;
  generate
  for (i_9=0;i_9<11;i_9=i_9+1) begin : vector_replace
    assign lastBucketUpdated[(10-i_9)*64+:64] = (64'sd0) == i_9 ? ((x_3 + y_0)) : win[(10-i_9)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_0 = x_4 | result_16;

  assign x_4 = result_17;

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 2; i_10 = i_10 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_26[i_10*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_10*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_10*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11 = i_11 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_11*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_11[0+:1];
    wire [1:0] c$case_alt_122;
    // spec.hs:295:1-63
    wire [7:0] t_11;
    // spec.hs:295:1-63
    wire [71:0] x_125;
    assign map_out_0 = c$case_alt_122;

    assign c$case_alt_122 = (t_11 == result_37[39:32]) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_11 = x_125[71:64];

    assign x_125 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_11*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 2; i_12=i_12+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_12] = result_26[i_12*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_15 = c$case_scrut_2[1:1] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  assign iterateI_ho1_0_arg0_3 = slides[0:0];

  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_25;



  assign c$app_arg_3 = {slides[0:0],
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3};



  assign result_16 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_29;



  assign c$app_arg_4 = {pOut0,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4};



  assign result_17 = c$app_arg_4[1-1:0];

  assign y_1 = winData;

  assign x_projection_115 = $signed(win_0[6464-1 -: 64]);

  assign x_5 = x_projection_115;

  assign win_0 = window_0[6463:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd103,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
              64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_18;
    end
  end
  // register end

  assign result_18 = b_1 ? t_1 : window_0;

  assign t_1 = {result_37[15:8],   result_19};

  assign result_19 = result_31 ? c$t_case_alt_1 : c$t_case_alt_2;

  assign c$t_case_alt_sel_alt_t_3 = ({64'sd0,lastBucketUpdated_0});

  assign c$t_case_alt_sel_alt_f_3 = ({64'sd0,win_0});

  assign c$t_case_alt_1 = x_6 ? c$t_case_alt_sel_alt_t_3[6527:64] : c$t_case_alt_sel_alt_f_3[6527:64];

  assign c$t_case_alt_2 = x_6 ? lastBucketUpdated_0 : win_0;

  // vector replace begin
  genvar i_13;
  generate
  for (i_13=0;i_13<101;i_13=i_13+1) begin : vector_replace_0
    assign lastBucketUpdated_0[(100-i_13)*64+:64] = (64'sd0) == i_13 ? ((x_5 + y_1)) : win_0[(100-i_13)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_1 = x_6 | result_31;

  assign x_6 = result_32;

  assign result_20 = x_7 ? t_2 : result_21;

  assign x_7 = result_46;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd103,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_2 = {result_38[31:24],   (x_8 - y_2)};

  assign x_8 = c$out1_case_alt;

  assign y_2 = result_22;

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_14;
  generate
  for (i_14 = 0; i_14 < 2; i_14 = i_14 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_26[i_14*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_14*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_14*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_15;
  generate
  for (i_15=0; i_15 < 2; i_15 = i_15 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_15*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_15[0+:1];
    wire [1:0] c$case_alt_123;
    // spec.hs:295:1-63
    wire [7:0] t_12;
    // spec.hs:295:1-63
    wire [71:0] x_126;
    assign map_out_1 = c$case_alt_123;

    assign c$case_alt_123 = (t_12 == result_38[39:32]) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_12 = x_126[71:64];

    assign x_126 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_15*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16=i_16+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_16] = result_26[i_16*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_22 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign c$out1_case_alt = (tag == 8'd103) ? result_23 : dta;

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_17;
  generate
  for (i_17 = 0; i_17 < 2; i_17 = i_17 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_26[i_17*72+:72];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_17*2+:2];
    wire [73:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_17*74+:74] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_18;
  generate
  for (i_18=0; i_18 < 2; i_18 = i_18 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [73:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_18*74+:74];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_18[0+:1];
    wire [1:0] c$case_alt_124;
    // spec.hs:295:1-63
    wire [7:0] t_13;
    // spec.hs:295:1-63
    wire [71:0] x_127;
    assign map_out_2 = c$case_alt_124;

    assign c$case_alt_124 = (t_13 == result_24) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_13 = x_127[71:64];

    assign x_127 = map_in_2[73:2];


    assign c$ws_app_arg_6[i_18*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:2-1];
  genvar i_19;
  generate
  for (i_19=0; i_19 < 2; i_19=i_19+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_19] = result_26[i_19*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_23 = c$case_scrut_6[1:1] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign result_24 = (result_38[39:32] > 8'd1) ? c$app_arg_5 : (c$app_arg_5 + 8'd102);

  assign c$app_arg_5 = result_38[39:32] - 8'd1;

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  assign result_25 = x_9 ? t_3 : result_26;

  assign x_9 = result_47;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_26_register
    if ( rst) begin
      result_26 <= {{8'd103,   64'sd0},   {8'd103,   64'sd0}};
    end else if (en) begin
      result_26 <= result_25;
    end
  end
  // register end

  assign t_projection_3 = ({result_26,{result_39[39:32],   (x_10 + y_3)}});

  assign t_3 = t_projection_3[143:0];

  assign x_10 = result_30;

  assign y_3 = c$out0_case_alt;

  assign c$out0_case_alt = (result_29 == winTag) ? winData : result_27;

  assign c$vec2_3 = (ws_3[4-1 : 0]);

  // zipWith start
  genvar i_20;
  generate
  for (i_20 = 0; i_20 < 2; i_20 = i_20 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_35[i_20*72+:72];
    wire [1:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_20*2+:2];
    wire [73:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_20*74+:74] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 2; i_21 = i_21 + 1) begin : imap_3
    wire [1-1:0] map_index_3;
    wire [73:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_21*74+:74];
    wire [1:0] map_out_3;

    assign map_index_3 = 1'd1 - i_21[0+:1];
    wire [1:0] c$case_alt_125;
    // spec.hs:295:1-63
    wire [7:0] t_14;
    // spec.hs:295:1-63
    wire [71:0] x_128;
    assign map_out_3 = c$case_alt_125;

    assign c$case_alt_125 = (t_14 == result_28) ? {1'b1,map_index_3} : map_in_3[1:0];

    assign t_14 = x_128[71:64];

    assign x_128 = map_in_3[73:2];


    assign c$ws_app_arg_8[i_21*2+:2] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:2-1];
  genvar i_22;
  generate
  for (i_22=0; i_22 < 2; i_22=i_22+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_22] = result_35[i_22*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-1) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[6-1 -: 2];

  assign result_27 = c$case_scrut_8[1:1] ? $signed(c$case_scrut_7[63:0]) : (64'sd0);

  assign result_28 = (result_39[47:40] > 8'd1) ? c$app_arg_6 : (c$app_arg_6 + 8'd102);

  assign c$app_arg_6 = result_39[47:40] - 8'd1;

  assign i_3 = c$case_scrut_8[0:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,1'bx}};

  assign winData = $signed(result_21[63:0]);

  assign winTag = result_21[71:64];

  assign result_29 = (tag_0 > 8'd1) ? c$app_arg_7 : (c$app_arg_7 + 8'd102);

  assign c$app_arg_7 = tag_0 - 8'd1;

  assign tag_0 = result_39[31:24];

  assign c$vec2_4 = (ws_4[4-1 : 0]);

  // zipWith start
  genvar i_23;
  generate
  for (i_23 = 0; i_23 < 2; i_23 = i_23 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_35[i_23*72+:72];
    wire [1:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_23*2+:2];
    wire [73:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_23*74+:74] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_24;
  generate
  for (i_24=0; i_24 < 2; i_24 = i_24 + 1) begin : imap_4
    wire [1-1:0] map_index_4;
    wire [73:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_24*74+:74];
    wire [1:0] map_out_4;

    assign map_index_4 = 1'd1 - i_24[0+:1];
    wire [1:0] c$case_alt_126;
    // spec.hs:295:1-63
    wire [7:0] t_15;
    // spec.hs:295:1-63
    wire [71:0] x_129;
    assign map_out_4 = c$case_alt_126;

    assign c$case_alt_126 = (t_15 == result_39[47:40]) ? {1'b1,map_index_4} : map_in_4[1:0];

    assign t_15 = x_129[71:64];

    assign x_129 = map_in_4[73:2];


    assign c$ws_app_arg_10[i_24*2+:2] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:2-1];
  genvar i_25;
  generate
  for (i_25=0; i_25 < 2; i_25=i_25+1) begin : mk_array_4
    assign vecArray_4[(2-1)-i_25] = result_35[i_25*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-1) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[6-1 -: 2];

  assign result_30 = c$case_scrut_10[1:1] ? $signed(c$case_scrut_9[63:0]) : (64'sd0);

  assign i_4 = c$case_scrut_10[0:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,1'bx}};

  assign dta = $signed(result_12[63:0]);

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  assign iterateI_ho1_0_arg0_4 = slides[1:1];

  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_33;



  assign c$app_arg_8 = {slides[1:1],
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5};



  assign result_31 = c$app_arg_8[1-1:0];

  assign slides = result_55[5:4];

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_37;



  assign c$app_arg_9 = {pOut1,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6};



  assign result_32 = c$app_arg_9[1-1:0];

  wire [47:0] iterateI_ho1_0_arg0_5;
  wire [47:0] iterateI_ho1_0_res_7;
  wire [47:0] iterateI_ho1_1_res_7;
  wire [47:0] iterateI_ho1_2_res_7;
  wire [47:0] iterateI_ho1_3_res_7;
  assign iterateI_ho1_0_arg0_5 = {t_8,   t_7,
                                  t_6,   t_5,   t_6,   t_7};

  reg [47:0] c$bb_res_res_38 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_38;



  reg [47:0] c$bb_res_res_39 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_39;



  reg [47:0] c$bb_res_res_40 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_40;



  reg [47:0] c$bb_res_res_41 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_41;



  assign c$app_arg_10 = {{t_8,   t_7,   t_6,
                          t_5,   t_6,   t_7},   iterateI_ho1_0_res_7,
                         iterateI_ho1_1_res_7,   iterateI_ho1_2_res_7,
                         iterateI_ho1_3_res_7};



  assign result_33 = c$app_arg_10[48-1:0];

  assign result_34 = b_2 ? t_4 : result_35;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_35_register
    if ( rst) begin
      result_35 <= {{8'd103,   64'sd0},   {8'd103,   64'sd0}};
    end else if (en) begin
      result_35 <= result_34;
    end
  end
  // register end

  assign b_2 = result_48;

  assign t_projection_6 = ({result_35,{t_8,   c$input0Win_app_arg}});

  assign t_4 = t_projection_6[143:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(result_55[70:7]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_8;
  wire  iterateI_ho1_4_res_3;
  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_46;



  assign c$app_arg_11 = {pOut2,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_8,   iterateI_ho1_3_res_8,
                         iterateI_ho1_4_res_3};



  assign result_36 = c$app_arg_11[1-1:0];

  wire [47:0] iterateI_ho1_0_arg0_6;
  wire [47:0] iterateI_ho1_0_res_9;
  wire [47:0] iterateI_ho1_1_res_9;
  wire [47:0] iterateI_ho1_2_res_9;
  assign iterateI_ho1_0_arg0_6 = {t_8,   t_7,
                                  t_6,   t_5,   t_6,   t_7};

  reg [47:0] c$bb_res_res_47 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_47;



  reg [47:0] c$bb_res_res_48 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_48;



  reg [47:0] c$bb_res_res_49 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_49;



  assign c$app_arg_12 = {{t_8,   t_7,   t_6,
                          t_5,   t_6,   t_7},   iterateI_ho1_0_res_9,
                         iterateI_ho1_1_res_9,   iterateI_ho1_2_res_9};



  assign result_37 = c$app_arg_12[48-1:0];

  wire [47:0] iterateI_ho1_0_arg0_7;
  wire [47:0] iterateI_ho1_0_res_10;
  wire [47:0] iterateI_ho1_1_res_10;
  assign iterateI_ho1_0_arg0_7 = {t_8,   t_7,
                                  t_6,   t_5,   t_6,   t_7};

  reg [47:0] c$bb_res_res_50 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_50;



  reg [47:0] c$bb_res_res_51 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_51;



  assign c$app_arg_13 = {{t_8,   t_7,   t_6,
                          t_5,   t_6,   t_7},   iterateI_ho1_0_res_10,
                         iterateI_ho1_1_res_10};



  assign result_38 = c$app_arg_13[48-1:0];

  wire [47:0] iterateI_ho1_0_arg0_8;
  wire [47:0] iterateI_ho1_0_res_11;
  assign iterateI_ho1_0_arg0_8 = {t_8,   t_7,
                                  t_6,   t_5,   t_6,   t_7};

  reg [47:0] c$bb_res_res_52 = {8'd103,   8'd103,   8'd103,   8'd103,   8'd103,   8'd103};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_52;



  assign c$app_arg_14 = {{t_8,   t_7,   t_6,
                          t_5,   t_6,   t_7},   iterateI_ho1_0_res_11};



  assign result_39 = c$app_arg_14[48-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_40;
    end
  end
  // register end

  assign result_40 = pOut2 ? result_41 : t_5;

  assign b_3 = t_5 == 8'd102;

  assign f1 = t_5 + 8'd1;

  assign result_41 = b_3 ? 8'd1 : f1;

  assign pOut2 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_42;
    end
  end
  // register end

  assign result_42 = x_11 ? result_43 : t_6;

  assign b_4 = t_6 == 8'd102;

  assign f1_0 = t_6 + 8'd1;

  assign result_43 = b_4 ? 8'd1 : f1_0;

  assign x_11 = pOut1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_44;
    end
  end
  // register end

  assign result_44 = x_12 ? result_45 : t_7;

  assign b_5 = t_7 == 8'd102;

  assign f1_1 = t_7 + 8'd1;

  assign result_45 = b_5 ? 8'd1 : f1_1;

  assign x_12 = pOut0;

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_10;
  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_55;



  assign c$app_arg_15 = {pOut1,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_10};



  assign result_46 = c$app_arg_15[1-1:0];

  assign pOut1 = pacings[1:1];

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_12;
  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_57;



  assign c$app_arg_16 = {pOut0,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_12};



  assign result_47 = c$app_arg_16[1-1:0];

  assign pOut0 = pacings[2:2];

  wire  iterateI_ho1_0_res_14;
  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_58;



  assign c$app_arg_17 = {pIn0_0,
                         iterateI_ho1_0_res_14};



  assign result_48 = c$app_arg_17[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_49;
    end
  end
  // register end

  assign result_49 = pIn0_0 ? result_50 : t_8;

  assign b_6 = t_8 == 8'd102;

  assign f1_2 = t_8 + 8'd1;

  assign result_50 = b_6 ? 8'd1 : f1_2;

  assign pIn0_0 = pacings[3:3];

  assign pacings = result_55[3:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_52;
    end
  end
  // register end

  assign result_51 = toWait == (64'sd0);

  assign result_52 = result_54 ? (64'sd2) : result_53;

  assign b_7 = toWait > (64'sd0);

  assign result_53 = b_7 ? ((x_13 - 64'sd1)) : toWait;

  assign x_13 = toWait;

  assign result_54 = b_8 ? 1'b1 : 1'b0;

  assign b_8 = result_51 & qPopValid;

  assign result_55 = {c$app_arg_20,
                      c$app_arg_19,   c$app_arg_18};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_18_register
    if ( rst) begin
      c$app_arg_18 <= {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_18 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                            1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                            1'b0,   1'b0}};

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,
                                                  1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [70:0] vecArray_5 [0:4-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 4; i_26=i_26+1) begin : mk_array_5
    assign vecArray_5[(4-1)-i_26] = buffer[i_26*71+:71];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_5[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_19_register
    if ( rst) begin
      c$app_arg_19 <= 1'b0;
    end else if (en) begin
      c$app_arg_19 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_20_register
    if ( rst) begin
      c$app_arg_20 <= 1'b0;
    end else if (en) begin
      c$app_arg_20 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_14 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[354:71] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[354:71];

  assign qData = result_4[70:0];

  assign x_14 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_14 + 64'sd1));

  assign c$tte_rhs_0 = (x_14 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_14)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_14 - 64'sd1);

  assign result = {result_5[200:6],   {qPush,
                                       qPop,   result_55[72:72],   qPopValid,
                                       result_5[5:4],   result_5[3:0]}};

  assign qPopValid = result_55[71:71];

  assign qPush = result_4[71:71];

  assign qPop = result_5[201:201];

  assign result_0 = result[204:10];

  assign result_1 = result[9:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[9:9];

  assign result_1_1 = result_1[8:8];

  assign result_1_2 = result_1[7:7];

  assign result_1_3 = result_1[6:6];

  assign result_1_4_10 = result_1[5:4];

  assign result_1_5_13 = result_1[3:0];

  assign result_1_4_0 = result_1_4_10[1:1];

  assign result_1_4_1 = result_1_4_10[0:0];

  assign result_1_5_0 = result_1_5_13[3:3];

  assign result_1_5_1 = result_1_5_13[2:2];

  assign result_1_5_2 = result_1_5_13[1:1];

  assign result_1_5_3 = result_1_5_13[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [68:0] result_6;
  // spec.hs:(206,1)-(208,31)
  wire  hasInput0;
  // spec.hs:(206,1)-(208,31)
  wire  timer0Over;
  // spec.hs:(206,1)-(208,31)
  wire  timer1Over;
  wire [133:0] result_7;
  wire [1:0] c$app_arg;
  wire  result_8;
  wire [3:0] c$app_arg_0;
  wire  result_9;
  wire [3:0] c$app_arg_1;
  wire  result_10;
  wire [71:0] result_11;
  // spec.hs:(431,1)-(436,28)
  reg [71:0] result_12 = {8'd3,   64'sd0};
  // spec.hs:(431,1)-(436,28)
  wire  b;
  // spec.hs:(431,1)-(436,28)
  wire [71:0] t;
  wire signed [63:0] x_1;
  wire signed [63:0] y;
  // spec.hs:(304,1)-(306,51)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:282:1-46
  wire signed [63:0] dta;
  // spec.hs:282:1-46
  wire [7:0] tag;
  wire [71:0] result_13;
  // spec.hs:(445,1)-(449,28)
  reg [71:0] result_14 = {8'd3,   64'sd0};
  // spec.hs:(445,1)-(449,28)
  wire  b_0;
  // spec.hs:(445,1)-(449,28)
  wire [71:0] t_0;
  wire signed [63:0] x_2;
  // spec.hs:(304,1)-(306,51)
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:(304,1)-(306,51)
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:267:1-55
  wire signed [63:0] winData;
  // spec.hs:267:1-55
  wire [7:0] winTag;
  wire [7:0] result_15;
  wire [7:0] c$app_arg_2;
  wire [7:0] result_16;
  wire [7:0] c$app_arg_3;
  wire [1:0] c$app_arg_4;
  wire  result_17;
  wire [47:0] c$app_arg_5;
  wire [23:0] result_18;
  // spec.hs:(399,9)-(401,29)
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_19;
  // spec.hs:(399,9)-(401,29)
  wire  b_1;
  // spec.hs:(399,9)-(401,29)
  wire [7:0] f1;
  wire [7:0] result_20;
  // spec.hs:(304,1)-(306,51)
  wire  pIn0;
  // spec.hs:(399,9)-(401,29)
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_21;
  // spec.hs:(399,9)-(401,29)
  wire  b_2;
  // spec.hs:(399,9)-(401,29)
  wire [7:0] f1_0;
  wire [7:0] result_22;
  // spec.hs:(304,1)-(306,51)
  wire  pOut1;
  wire [2:0] c$app_arg_6;
  wire  result_23;
  // spec.hs:(399,9)-(401,29)
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_24;
  // spec.hs:(399,9)-(401,29)
  wire  b_3;
  // spec.hs:(399,9)-(401,29)
  wire [7:0] f1_1;
  wire [7:0] result_25;
  // spec.hs:(304,1)-(306,51)
  wire  pOut0;
  // spec.hs:(304,1)-(306,51)
  wire [2:0] pacings;
  // spec.hs:(408,1)-(410,22)
  reg signed [63:0] toWait = (64'sd0);
  wire  result_26;
  wire signed [63:0] result_27;
  // spec.hs:(408,1)-(410,22)
  wire  b_4;
  wire signed [63:0] result_28;
  wire signed [63:0] x_3;
  wire  result_29;
  // spec.hs:(304,1)-(306,51)
  wire  b_5;
  wire [69:0] result_30;
  reg [67:0] c$app_arg_7 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}};
  wire [67:0] c$case_alt;
  wire [67:0] c$case_alt_0;
  wire [67:0] c$case_alt_1;
  reg [67:0] c$case_alt_2;
  reg [67:0] c$case_alt_3;
  wire [67:0] c$case_alt_4;
  reg  c$app_arg_8 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_9 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(123,1)-(125,25)
  reg [203:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                       1'b0,
                                                                       1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}}};
  // spec.hs:(123,1)-(125,25)
  wire [203:0] c$buffer_case_alt;
  // spec.hs:(123,1)-(125,25)
  wire [203:0] c$buffer_case_alt_0;
  // spec.hs:(123,1)-(125,25)
  wire [203:0] c$buffer_case_alt_1;
  // spec.hs:(123,1)-(125,25)
  wire [67:0] qData;
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] x_4;
  // spec.hs:(123,1)-(125,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(123,1)-(125,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(123,1)-(125,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(123,1)-(125,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(465,1)-(467,80)
  wire  qPopValid;
  // spec.hs:(465,1)-(467,80)
  wire  qPush;
  // spec.hs:(465,1)-(467,80)
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [271:0] c$buffer_case_alt_sel_alt_t_1;
  wire [271:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [136:0] result;
  wire [129:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [6:0] result_1;
  wire [2:0] result_1_4_7;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {hasInput0 | (timer0Over | timer1Over),
                     {inputs,   {hasInput0,   timer0Over,
                                 timer1Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd1000000);

  assign timer1Over = result_3 >= (64'sd2000000);

  assign result_7 = {{result_26 & (~ result_29),
                      {{winData,   result_10},   {dta,
                                                  result_9}}},   {result_8,   result_23,
                                                                  result_17}};

  wire  iterateI_ho1_0_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= pIn0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  assign c$app_arg = {pIn0,   iterateI_ho1_0_res};



  assign result_8 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  assign iterateI_ho1_0_arg0 = pOut1;

  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_2;



  assign c$app_arg_0 = {pOut1,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res,
                        iterateI_ho1_2_res};



  assign result_9 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut0;

  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_5;



  assign c$app_arg_1 = {pOut0,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0};



  assign result_10 = c$app_arg_1[1-1:0];

  assign result_11 = b ? t : result_12;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_12 <= result_11;
    end
  end
  // register end

  assign b = result_23;

  assign t = {result_18[15:8],   (x_1 + y)};

  assign x_1 = c$out0_case_alt_0;

  assign y = c$out0_case_alt;

  assign c$out0_case_alt = (tag == 8'd3) ? (64'sd0) : dta;

  assign dta = $signed(result_14[63:0]);

  assign tag = result_14[71:64];

  assign result_13 = b_0 ? t_0 : result_14;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_14_register
    if ( rst) begin
      result_14 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_14 <= result_13;
    end
  end
  // register end

  assign b_0 = result_17;

  assign t_0 = {t_2,   (x_2 + 64'sd1)};

  assign x_2 = c$out1_case_alt;

  assign c$out1_case_alt = (result_16 == winTag) ? winData : (64'sd0);

  assign c$out0_case_alt_0 = (result_15 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_12[63:0]);

  assign winTag = result_12[71:64];

  assign result_15 = (result_18[15:8] > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd2);

  assign c$app_arg_2 = result_18[15:8] - 8'd1;

  assign result_16 = (t_3 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd2);

  assign c$app_arg_3 = t_3 - 8'd1;

  wire  iterateI_ho1_0_res_2;
  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_6;



  assign c$app_arg_4 = {pOut1,
                        iterateI_ho1_0_res_2};



  assign result_17 = c$app_arg_4[1-1:0];

  wire [23:0] iterateI_ho1_0_arg0_1;
  wire [23:0] iterateI_ho1_0_res_3;
  assign iterateI_ho1_0_arg0_1 = {t_1,   t_3,
                                  t_2};

  reg [23:0] c$bb_res_res_7 = {8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_7;



  assign c$app_arg_5 = {{t_1,   t_3,   t_2},
                        iterateI_ho1_0_res_3};



  assign result_18 = c$app_arg_5[24-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_19;
    end
  end
  // register end

  assign result_19 = pIn0 ? result_20 : t_1;

  assign b_1 = t_1 == 8'd2;

  assign f1 = t_1 + 8'd1;

  assign result_20 = b_1 ? 8'd1 : f1;

  assign pIn0 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_21;
    end
  end
  // register end

  assign result_21 = pOut1 ? result_22 : t_2;

  assign b_2 = t_2 == 8'd2;

  assign f1_0 = t_2 + 8'd1;

  assign result_22 = b_2 ? 8'd1 : f1_0;

  assign pOut1 = pacings[0:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_1;
  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_9;



  assign c$app_arg_6 = {pOut0,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_1};



  assign result_23 = c$app_arg_6[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_24;
    end
  end
  // register end

  assign result_24 = pOut0 ? result_25 : t_3;

  assign b_3 = t_3 == 8'd2;

  assign f1_1 = t_3 + 8'd1;

  assign result_25 = b_3 ? 8'd1 : f1_1;

  assign pOut0 = pacings[1:1];

  assign pacings = result_30[2:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_27;
    end
  end
  // register end

  assign result_26 = toWait == (64'sd0);

  assign result_27 = result_29 ? (64'sd1) : result_28;

  assign b_4 = toWait > (64'sd0);

  assign result_28 = b_4 ? ((x_3 - 64'sd1)) : toWait;

  assign x_3 = toWait;

  assign result_29 = b_5 ? 1'b1 : 1'b0;

  assign b_5 = result_26 & qPopValid;

  assign result_30 = {c$app_arg_9,   c$app_arg_8,
                      c$app_arg_7};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_7_register
    if ( rst) begin
      c$app_arg_7 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_7 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [67:0] vecArray [0:3-1];
  genvar i;
  generate
  for (i=0; i < 3; i=i+1) begin : mk_array
    assign vecArray[(3-1)-i] = buffer[i*68+:68];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= 1'b0;
    end else if (en) begin
      c$app_arg_8 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_9_register
    if ( rst) begin
      c$app_arg_9 <= 1'b0;
    end else if (en) begin
      c$app_arg_9 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_4 != 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                         1'b0,
                                                                         1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[271:68] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[271:68];

  assign qData = result_6[67:0];

  assign x_4 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_4 + 64'sd1));

  assign c$tte_rhs_0 = (x_4 == 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_4)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_4 - 64'sd1);

  assign result = {result_7[132:3],   {qPush,
                                       qPop,   result_30[69:69],   qPopValid,
                                       result_7[2:0]}};

  assign qPopValid = result_30[68:68];

  assign qPush = result_6[68:68];

  assign qPop = result_7[133:133];

  assign result_0 = result[136:7];

  assign result_1 = result[6:0];

  assign result_0_0 = result_0[129:65];

  assign result_0_1 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_1_0 = result_1[6:6];

  assign result_1_1 = result_1[5:5];

  assign result_1_2 = result_1[4:4];

  assign result_1_3 = result_1[3:3];

  assign result_1_4_7 = result_1[2:0];

  assign result_1_4_0 = result_1_4_7[2:2];

  assign result_1_4_1 = result_1_4_7[1:1];

  assign result_1_4_2 = result_1_4_7[0:0];


endmodule


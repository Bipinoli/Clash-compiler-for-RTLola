/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1
    , input wire signed [63:0] inputs_2_0
    , input wire  inputs_2_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5_0
    , output wire  result_1_4_5_1
    , output wire  result_1_4_6_0
    , output wire  result_1_4_6_1
    , output wire  result_1_4_6_2
    , output wire  result_1_4_7
    , output wire  result_1_5
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [207:0] result_4;
  // spec.hs:238:1-82
  wire  pIn0;
  // spec.hs:238:1-82
  wire  pIn1;
  // spec.hs:238:1-82
  wire  pIn2;
  // spec.hs:238:1-82
  wire  timer0Over;
  wire [337:0] result_5;
  wire [6:0] c$app_arg;
  wire  result_6;
  // spec.hs:500:1-138
  wire signed [63:0] c$t_app_arg;
  wire [71:0] result_7;
  // spec.hs:500:1-138
  reg [71:0] result_8 = {8'd13,   64'sd0};
  // spec.hs:500:1-138
  wire  b;
  // spec.hs:500:1-138
  wire [71:0] t;
  // spec.hs:515:1-158
  wire signed [63:0] y;
  // spec.hs:515:1-158
  wire signed [63:0] x_0;
  // spec.hs:515:1-158
  wire [703:0] win;
  // spec.hs:515:1-158
  reg [711:0] window = {8'd13,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [711:0] result_9;
  // spec.hs:515:1-158
  wire [711:0] t_0;
  wire [703:0] result_10;
  // spec.hs:515:1-158
  wire [703:0] c$t_case_alt;
  // spec.hs:515:1-158
  wire [703:0] c$t_case_alt_0;
  // spec.hs:515:1-158
  wire [703:0] lastBucketUpdated;
  // spec.hs:515:1-158
  wire  b_0;
  // spec.hs:515:1-158
  wire  c$b_case_alt;
  // spec.hs:103:34-42
  wire  z;
  // spec.hs:103:34-42
  wire  y_0;
  // spec.hs:103:34-42
  wire  x_1;
  // spec.hs:290:1-63
  wire [224:0] c$ws_app_arg;
  // spec.hs:290:1-63
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire signed [63:0] result_11;
  // spec.hs:290:1-63
  wire [1:0] i;
  // spec.hs:290:1-63
  wire [11:0] ws;
  wire [4:0] c$app_arg_0;
  wire  result_12;
  // spec.hs:324:1-112
  wire  slides;
  wire [14:0] c$app_arg_1;
  wire [2:0] result_13;
  wire [359:0] c$app_arg_2;
  wire [71:0] result_14;
  wire [5:0] c$app_arg_3;
  wire  result_15;
  // spec.hs:290:1-63
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:290:1-63
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_16;
  // spec.hs:290:1-63
  wire [1:0] i_0;
  // spec.hs:290:1-63
  wire [11:0] ws_0;
  wire [6:0] c$app_arg_4;
  wire  result_17;
  // spec.hs:290:1-63
  wire [224:0] c$ws_app_arg_3;
  // spec.hs:290:1-63
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire signed [63:0] result_18;
  // spec.hs:290:1-63
  wire [1:0] i_1;
  // spec.hs:290:1-63
  wire [11:0] ws_1;
  wire [6:0] c$app_arg_5;
  wire  result_19;
  wire [215:0] result_20;
  // spec.hs:102:34-42
  wire  x_2;
  // spec.hs:102:34-42
  wire  y_1;
  // spec.hs:482:1-155
  reg [215:0] result_21 = {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0}};
  // spec.hs:482:1-155
  wire [215:0] t_1;
  wire signed [63:0] x_3;
  wire signed [63:0] y_2;
  wire [7:0] c$app_arg_6;
  wire [1:0] result_22;
  // spec.hs:290:1-63
  wire [299:0] c$ws_app_arg_5;
  // spec.hs:290:1-63
  wire [11:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire signed [63:0] result_23;
  // spec.hs:290:1-63
  wire [1:0] i_2;
  // spec.hs:290:1-63
  wire [14:0] ws_2;
  // spec.hs:290:1-63
  wire [299:0] c$ws_app_arg_7;
  // spec.hs:290:1-63
  wire [11:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire signed [63:0] result_24;
  // spec.hs:290:1-63
  wire [1:0] i_3;
  // spec.hs:290:1-63
  wire [14:0] ws_3;
  wire [6:0] c$app_arg_7;
  wire  result_25;
  wire [215:0] result_26;
  // spec.hs:103:34-42
  wire  x_4;
  // spec.hs:103:34-42
  wire  y_3;
  // spec.hs:103:34-42
  wire  z_0;
  // spec.hs:491:1-173
  reg [215:0] result_27 = {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0}};
  // spec.hs:491:1-173
  wire [215:0] t_2;
  wire signed [63:0] x_5;
  wire signed [63:0] y_4;
  wire signed [63:0] x_6;
  wire signed [63:0] y_5;
  // spec.hs:290:1-63
  wire [299:0] c$ws_app_arg_9;
  // spec.hs:290:1-63
  wire [11:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire signed [63:0] result_28;
  // spec.hs:290:1-63
  wire [1:0] i_4;
  // spec.hs:290:1-63
  wire [14:0] ws_4;
  // spec.hs:290:1-63
  wire [299:0] c$ws_app_arg_11;
  // spec.hs:290:1-63
  wire [11:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [2:0] c$case_scrut_12;
  wire signed [63:0] result_29;
  // spec.hs:290:1-63
  wire [1:0] i_5;
  // spec.hs:290:1-63
  wire [14:0] ws_5;
  // spec.hs:290:1-63
  wire [147:0] c$ws_app_arg_13;
  // spec.hs:290:1-63
  wire [3:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_13;
  wire [1:0] c$case_scrut_14;
  wire signed [63:0] result_30;
  // spec.hs:290:1-63
  wire [0:0] i_6;
  // spec.hs:290:1-63
  wire [5:0] ws_6;
  wire [143:0] result_31;
  // spec.hs:458:1-135
  reg [143:0] result_32 = {{8'd13,   64'sd0},   {8'd13,   64'sd0}};
  // spec.hs:458:1-135
  wire  b_1;
  // spec.hs:458:1-135
  wire [143:0] t_3;
  // spec.hs:324:1-112
  reg signed [63:0] c$out3_app_arg = (64'sd0);
  wire [1:0] c$app_arg_8;
  wire  result_33;
  wire [11:0] c$app_arg_9;
  wire [2:0] result_34;
  wire [287:0] result_35;
  // spec.hs:101:34-42
  wire  x_7;
  // spec.hs:473:1-137
  reg [287:0] result_36 = {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,
                                                                 64'sd0}};
  // spec.hs:473:1-137
  wire [287:0] t_4;
  // spec.hs:324:1-112
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:303:1-53
  wire signed [63:0] dta;
  // spec.hs:303:1-53
  wire [7:0] tag;
  // spec.hs:303:1-53
  wire [7:0] tagToMatch;
  wire [71:0] result_37;
  // spec.hs:453:1-127
  reg [71:0] result_38 = {8'd13,   64'sd0};
  // spec.hs:453:1-127
  wire  b_2;
  // spec.hs:303:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_10;
  wire  result_39;
  wire [2:0] c$app_arg_11;
  wire  result_40;
  wire [287:0] result_41;
  // spec.hs:100:34-42
  wire  x_8;
  // spec.hs:464:1-137
  reg [287:0] result_42 = {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,
                                                                 64'sd0}};
  // spec.hs:464:1-137
  wire [287:0] t_5;
  // spec.hs:324:1-112
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:303:1-53
  wire signed [63:0] dta_0;
  // spec.hs:303:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:303:1-53
  wire [7:0] tag_0;
  wire [71:0] result_43;
  // spec.hs:448:1-127
  reg [71:0] result_44 = {8'd13,   64'sd0};
  // spec.hs:448:1-127
  wire  b_3;
  // spec.hs:303:1-53
  reg signed [63:0] c$ds_app_arg_0 = (64'sd0);
  // spec.hs:324:1-112
  wire [194:0] inputs_3;
  wire [1:0] c$app_arg_12;
  wire  result_45;
  wire [2:0] c$app_arg_13;
  wire  result_46;
  wire [431:0] c$app_arg_14;
  wire [71:0] result_47;
  wire [287:0] c$app_arg_15;
  wire [71:0] result_48;
  wire [215:0] c$app_arg_16;
  wire [71:0] result_49;
  wire [143:0] c$app_arg_17;
  wire [71:0] result_50;
  // spec.hs:438:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_51;
  // spec.hs:438:9-81
  wire  b_4;
  // spec.hs:438:9-81
  wire [7:0] f1;
  wire [7:0] result_52;
  // spec.hs:324:1-112
  wire  pOut4;
  // spec.hs:438:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_53;
  // spec.hs:438:9-81
  wire  b_5;
  // spec.hs:438:9-81
  wire [7:0] f1_0;
  wire [7:0] result_54;
  // spec.hs:324:1-112
  wire  c$ds7_case_alt;
  // spec.hs:103:34-42
  wire  z_1;
  // spec.hs:103:34-42
  wire  y_6;
  // spec.hs:103:34-42
  wire  x_9;
  // spec.hs:324:1-112
  wire [2:0] pOut3;
  // spec.hs:438:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_55;
  // spec.hs:438:9-81
  wire  b_6;
  // spec.hs:438:9-81
  wire [7:0] f1_1;
  wire [7:0] result_56;
  // spec.hs:324:1-112
  wire  c$ds6_case_alt;
  // spec.hs:102:34-42
  wire  y_7;
  // spec.hs:102:34-42
  wire  x_10;
  // spec.hs:324:1-112
  wire [1:0] pOut2;
  // spec.hs:438:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_57;
  // spec.hs:438:9-81
  wire  b_7;
  // spec.hs:438:9-81
  wire [7:0] f1_2;
  wire [7:0] result_58;
  // spec.hs:101:34-42
  wire  x_11;
  // spec.hs:324:1-112
  wire  pOut1;
  // spec.hs:438:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_59;
  // spec.hs:438:9-81
  wire  b_8;
  // spec.hs:438:9-81
  wire [7:0] f1_3;
  wire [7:0] result_60;
  // spec.hs:100:34-42
  wire  x_12;
  // spec.hs:324:1-112
  wire  pOut0;
  // spec.hs:438:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_61;
  // spec.hs:438:9-81
  wire  b_9;
  // spec.hs:438:9-81
  wire [7:0] f1_4;
  wire [7:0] result_62;
  // spec.hs:324:1-112
  wire  pIn2_0;
  // spec.hs:438:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_63;
  // spec.hs:438:9-81
  wire  b_10;
  // spec.hs:438:9-81
  wire [7:0] f1_5;
  wire [7:0] result_64;
  // spec.hs:324:1-112
  wire  pIn1_0;
  // spec.hs:438:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_65;
  // spec.hs:438:9-81
  wire  b_11;
  // spec.hs:438:9-81
  wire [7:0] f1_6;
  wire [7:0] result_66;
  // spec.hs:324:1-112
  wire  pIn0_0;
  // spec.hs:324:1-112
  wire [10:0] pacings;
  wire [208:0] result_67;
  reg [206:0] c$app_arg_18 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        {1'b0,
                                                                         1'b0},
                                                                        {1'b0,
                                                                         1'b0,
                                                                         1'b0},
                                                                        1'b0}};
  wire [206:0] c$case_alt;
  wire [206:0] c$case_alt_0;
  wire [206:0] c$case_alt_1;
  reg [206:0] c$case_alt_2;
  reg [206:0] c$case_alt_3;
  wire [206:0] c$case_alt_4;
  reg  c$app_arg_19 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_20 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:169:1-78
  reg [413:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         {1'b0,
                                                                          1'b0},
                                                                         {1'b0,
                                                                          1'b0,
                                                                          1'b0},
                                                                         1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         {1'b0,
                                                                          1'b0},
                                                                         {1'b0,
                                                                          1'b0,
                                                                          1'b0},
                                                                         1'b0}}};
  // spec.hs:169:1-78
  wire [413:0] c$buffer_case_alt;
  // spec.hs:169:1-78
  wire [413:0] c$buffer_case_alt_0;
  // spec.hs:169:1-78
  wire [413:0] c$buffer_case_alt_1;
  // spec.hs:169:1-78
  wire [206:0] qData;
  // spec.hs:169:1-78
  wire signed [63:0] x_13;
  // spec.hs:169:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:169:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:169:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:169:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:169:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:169:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:169:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:169:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:538:1-136
  wire  qPopValid;
  // spec.hs:538:1-136
  wire  qPush;
  // spec.hs:538:1-136
  wire  qPop;
  wire [194:0] inputs;
  wire [703:0] c$vec;
  wire signed [63:0] x_projection_9;
  wire [767:0] c$t_case_alt_sel_alt_t_0;
  wire [767:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [8:0] c$vec2_1;
  wire [287:0] t_projection_2;
  wire [11:0] c$vec2_2;
  wire [11:0] c$vec2_3;
  wire [287:0] t_projection_5;
  wire signed [63:0] x_projection_20;
  wire [11:0] c$vec2_4;
  wire [11:0] c$vec2_5;
  wire [3:0] c$vec2_6;
  wire [215:0] t_projection_9;
  wire [359:0] t_projection_10;
  wire [359:0] t_projection_11;
  wire signed [63:0] c$tte_rhs;
  wire [620:0] c$buffer_case_alt_sel_alt_t_1;
  wire [620:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [340:0] result;
  wire [324:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [15:0] result_1;
  wire [10:0] result_1_4;
  wire [1:0] result_1_4_5;
  wire [2:0] result_1_4_6;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1},   {inputs_2_0,
                                                  inputs_2_1}};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {inputs[130:130] | (inputs[65:65] | (inputs[0:0] | timer0Over)),
                     {inputs,   timer0Over,   {pIn0,   pIn1,
                                               pIn2,   pIn0,   pIn1,   {pIn0,   pIn1},
                                               {pIn0,   pIn1,   pIn2},   timer0Over}}};

  assign pIn0 = inputs[130:130];

  assign pIn1 = inputs[65:65];

  assign pIn2 = inputs[0:0];

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{1'b1,   {{result_24,
                                result_25},   {result_23,   result_25},
                               {result_18,   result_19},   {result_16,
                                                            result_17},   {$signed(result_8[63:0]),
                                                                           result_6}}},   {pacings,   slides}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  assign iterateI_ho1_0_arg0 = pOut4;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  assign c$app_arg = {pOut4,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res};



  assign result_6 = c$app_arg[1-1:0];

  assign c$vec = window[703:0];

  wire [639:0] vec;
  wire signed [63:0] acc_4_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_5;
  wire signed [63:0] acc_6;
  wire signed [63:0] acc_7;
  wire signed [63:0] acc_8;
  wire signed [63:0] acc_9;
  wire signed [63:0] acc_10;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  wire signed [63:0] acc_1_2;
  wire signed [63:0] acc_1_3;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_2_1;
  wire signed [63:0] acc_3_0;
  wire signed [63:0] acc_1_4;
  assign c$t_app_arg = acc_4_0;

  assign vec = (c$vec[640-1 : 0]);

  assign acc_1 = $signed(vec[639:576]);

  assign acc_2 = $signed(vec[575:512]);

  assign acc_3 = $signed(vec[511:448]);

  assign acc_4 = $signed(vec[447:384]);

  assign acc_5 = $signed(vec[383:320]);

  assign acc_6 = $signed(vec[319:256]);

  assign acc_7 = $signed(vec[255:192]);

  assign acc_8 = $signed(vec[191:128]);

  assign acc_9 = $signed(vec[127:64]);

  assign acc_10 = $signed(vec[63:0]);

  wire signed [63:0] x_15;
  wire signed [63:0] y_8;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_15 = acc_1;

  assign y_8 = acc_2;

  assign c$case_alt_13 = (x_15 + y_8);



  wire signed [63:0] x_16;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_14;
  assign acc_1_1 = c$case_alt_14;

  assign x_16 = acc_3;

  assign y_9 = acc_4;

  assign c$case_alt_14 = (x_16 + y_9);



  wire signed [63:0] x_17;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_15;
  assign acc_1_2 = c$case_alt_15;

  assign x_17 = acc_5;

  assign y_10 = acc_6;

  assign c$case_alt_15 = (x_17 + y_10);



  wire signed [63:0] x_18;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_16;
  assign acc_1_3 = c$case_alt_16;

  assign x_18 = acc_7;

  assign y_11 = acc_8;

  assign c$case_alt_16 = (x_18 + y_11);



  wire signed [63:0] x_19;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_17;
  assign acc_1_4 = c$case_alt_17;

  assign x_19 = acc_9;

  assign y_12 = acc_10;

  assign c$case_alt_17 = (x_19 + y_12);



  wire signed [63:0] x_20;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_18;
  assign acc_2_0 = c$case_alt_18;

  assign x_20 = acc_1_0;

  assign y_13 = acc_1_1;

  assign c$case_alt_18 = (x_20 + y_13);



  wire signed [63:0] x_21;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_19;
  assign acc_2_1 = c$case_alt_19;

  assign x_21 = acc_1_2;

  assign y_14 = acc_1_3;

  assign c$case_alt_19 = (x_21 + y_14);



  wire signed [63:0] x_22;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_20;
  assign acc_3_0 = c$case_alt_20;

  assign x_22 = acc_2_0;

  assign y_15 = acc_2_1;

  assign c$case_alt_20 = (x_22 + y_15);



  wire signed [63:0] x_23;
  wire signed [63:0] y_16;
  wire signed [63:0] c$case_alt_21;
  assign acc_4_0 = c$case_alt_21;

  assign x_23 = acc_3_0;

  assign y_16 = acc_1_4;

  assign c$case_alt_21 = (x_23 + y_16);





  assign result_7 = b ? t : result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd13,   64'sd0};
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign b = result_15;

  assign t = {result_14[15:8],   c$t_app_arg};

  assign y = result_11;

  assign x_projection_9 = $signed(win[704-1 -: 64]);

  assign x_0 = x_projection_9;

  assign win = window[703:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd13,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_9;
    end
  end
  // register end

  assign result_9 = b_0 ? t_0 : window;

  assign t_0 = {result_48[7:0],   result_10};

  assign result_10 = result_12 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = c$b_case_alt ? c$t_case_alt_sel_alt_t_0[767:64] : c$t_case_alt_sel_alt_f_0[767:64];

  assign c$t_case_alt_0 = c$b_case_alt ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_7;
  generate
  for (i_7=0;i_7<11;i_7=i_7+1) begin : vector_replace
    assign lastBucketUpdated[(10-i_7)*64+:64] = (64'sd0) == i_7 ? ((x_0 + y)) : win[(10-i_7)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_0 = c$b_case_alt | result_12;

  assign c$b_case_alt = x_1 & (y_0 & z);

  assign z = result_13[0:0];

  assign y_0 = result_13[1:1];

  assign x_1 = result_13[2:2];

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_8;
  generate
  for (i_8 = 0; i_8 < 3; i_8 = i_8 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_27[i_8*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_8*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_8*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 3; i_9 = i_9 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_9*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_9[0+:2];
    wire [2:0] c$case_alt_22;
    // spec.hs:290:1-63
    wire [7:0] t_15;
    // spec.hs:290:1-63
    wire [71:0] x_24;
    assign map_out = c$case_alt_22;

    assign c$case_alt_22 = (t_15 == result_48[23:16]) ? {1'b1,map_index} : map_in[2:0];

    assign t_15 = x_24[71:64];

    assign x_24 = map_in[74:3];


    assign c$ws_app_arg_0[i_9*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_10;
  generate
  for (i_10=0; i_10 < 3; i_10=i_10+1) begin : mk_array
    assign vecArray[(3-1)-i_10] = result_27[i_10*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_11 = c$case_scrut_0[2:2] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= slides;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  assign c$app_arg_0 = {slides,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_12 = c$app_arg_0[1-1:0];

  assign slides = result_67[11:11];

  wire [2:0] iterateI_ho1_0_res_1;
  wire [2:0] iterateI_ho1_1_res_1;
  wire [2:0] iterateI_ho1_2_res_1;
  wire [2:0] iterateI_ho1_3_res_1;
  reg [2:0] c$bb_res_res_9 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_9;



  reg [2:0] c$bb_res_res_10 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_10;



  reg [2:0] c$bb_res_res_11 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_11;



  reg [2:0] c$bb_res_res_12 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_12;



  assign c$app_arg_1 = {pOut3,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1};



  assign result_13 = c$app_arg_1[3-1:0];

  wire [71:0] iterateI_ho1_0_arg0_0;
  wire [71:0] iterateI_ho1_0_res_2;
  wire [71:0] iterateI_ho1_1_res_2;
  wire [71:0] iterateI_ho1_2_res_2;
  wire [71:0] iterateI_ho1_3_res_2;
  assign iterateI_ho1_0_arg0_0 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_6,
                                  t_7};

  reg [71:0] c$bb_res_res_13 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_13;



  reg [71:0] c$bb_res_res_14 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_14;



  reg [71:0] c$bb_res_res_15 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_15;



  reg [71:0] c$bb_res_res_16 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_16;



  assign c$app_arg_2 = {{t_13,   t_12,   t_11,
                         t_10,   t_9,   t_8,   t_7,   t_6,   t_7},
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2};



  assign result_14 = c$app_arg_2[72-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_0;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_21;



  assign c$app_arg_3 = {pOut4,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_0};



  assign result_15 = c$app_arg_3[1-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 3; i_12 = i_12 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_27[i_12*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_12*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_12*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13 = i_13 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_13*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_13[0+:2];
    wire [2:0] c$case_alt_23;
    // spec.hs:290:1-63
    wire [7:0] t_16;
    // spec.hs:290:1-63
    wire [71:0] x_25;
    assign map_out_0 = c$case_alt_23;

    assign c$case_alt_23 = (t_16 == result_47[23:16]) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_16 = x_25[71:64];

    assign x_25 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_13*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 3; i_14=i_14+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_14] = result_27[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_16 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_0;
  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= c$ds7_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_27;



  assign c$app_arg_4 = {c$ds7_case_alt,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_0};



  assign result_17 = c$app_arg_4[1-1:0];

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 3; i_15 = i_15 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_21[i_15*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_15*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_15*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16 = i_16 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_16*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_16[0+:2];
    wire [2:0] c$case_alt_24;
    // spec.hs:290:1-63
    wire [7:0] t_17;
    // spec.hs:290:1-63
    wire [71:0] x_26;
    assign map_out_1 = c$case_alt_24;

    assign c$case_alt_24 = (t_17 == result_47[31:24]) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_17 = x_26[71:64];

    assign x_26 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_16*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 3; i_17=i_17+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_17] = result_21[i_17*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_18 = c$case_scrut_4[2:2] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_2;
  wire  iterateI_ho1_5_res_1;
  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= c$ds6_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_4_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_33;



  assign c$app_arg_5 = {c$ds6_case_alt,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_2,   iterateI_ho1_5_res_1};



  assign result_19 = c$app_arg_5[1-1:0];

  assign result_20 = (x_2 & y_1) ? t_1 : result_21;

  assign x_2 = result_22[1:1];

  assign y_1 = result_22[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0}};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_projection_2 = ({result_21,{result_49[31:24],   (x_3 + y_2)}});

  assign t_1 = t_projection_2[215:0];

  assign x_3 = result_29;

  assign y_2 = result_28;

  wire [1:0] iterateI_ho1_0_res_6;
  wire [1:0] iterateI_ho1_1_res_6;
  wire [1:0] iterateI_ho1_2_res_6;
  reg [1:0] c$bb_res_res_34 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_34;



  reg [1:0] c$bb_res_res_35 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_35;



  reg [1:0] c$bb_res_res_36 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_36;



  assign c$app_arg_6 = {pOut2,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6};



  assign result_22 = c$app_arg_6[2-1:0];

  assign c$vec2_2 = (ws_2[12-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 4; i_18 = i_18 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_36[i_18*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_18*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_18*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 4; i_19 = i_19 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_19*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd3 - i_19[0+:2];
    wire [2:0] c$case_alt_25;
    // spec.hs:290:1-63
    wire [7:0] t_18;
    // spec.hs:290:1-63
    wire [71:0] x_27;
    assign map_out_2 = c$case_alt_25;

    assign c$case_alt_25 = (t_18 == result_47[39:32]) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_18 = x_27[71:64];

    assign x_27 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_19*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:4-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 4; i_20=i_20+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_20] = result_36[i_20*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[15-1 -: 3];

  assign result_23 = c$case_scrut_6[2:2] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  assign c$vec2_3 = (ws_3[12-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 4; i_21 = i_21 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_42[i_21*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_21*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_21*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 4; i_22 = i_22 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_22*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd3 - i_22[0+:2];
    wire [2:0] c$case_alt_26;
    // spec.hs:290:1-63
    wire [7:0] t_19;
    // spec.hs:290:1-63
    wire [71:0] x_28;
    assign map_out_3 = c$case_alt_26;

    assign c$case_alt_26 = (t_19 == result_47[47:40]) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_19 = x_28[71:64];

    assign x_28 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_22*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:4-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 4; i_23=i_23+1) begin : mk_array_3
    assign vecArray_3[(4-1)-i_23] = result_42[i_23*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[15-1 -: 3];

  assign result_24 = c$case_scrut_8[2:2] ? $signed(c$case_scrut_7[63:0]) : (64'sd0);

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_2;
  assign iterateI_ho1_0_arg0_1 = x_12;

  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_42;



  assign c$app_arg_7 = {x_12,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_2};



  assign result_25 = c$app_arg_7[1-1:0];

  assign result_26 = (x_4 & (y_3 & z_0)) ? t_2 : result_27;

  assign x_4 = result_34[2:2];

  assign y_3 = result_34[1:1];

  assign z_0 = result_34[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0}};
    end else if (en) begin
      result_27 <= result_26;
    end
  end
  // register end

  assign t_projection_5 = ({result_27,{result_49[23:16],   (x_6 + y_5)}});

  assign t_2 = t_projection_5[215:0];

  assign x_5 = result_29;

  assign y_4 = result_28;

  assign x_projection_20 = (x_5 + y_4);

  assign x_6 = x_projection_20;

  assign y_5 = result_30;

  assign c$vec2_4 = (ws_4[12-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 4; i_24 = i_24 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_36[i_24*72+:72];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_24*3+:3];
    wire [74:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_24*75+:75] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 4; i_25 = i_25 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [74:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_25*75+:75];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd3 - i_25[0+:2];
    wire [2:0] c$case_alt_27;
    // spec.hs:290:1-63
    wire [7:0] t_20;
    // spec.hs:290:1-63
    wire [71:0] x_29;
    assign map_out_4 = c$case_alt_27;

    assign c$case_alt_27 = (t_20 == result_49[39:32]) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_20 = x_29[71:64];

    assign x_29 = map_in_4[74:3];


    assign c$ws_app_arg_10[i_25*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:4-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 4; i_26=i_26+1) begin : mk_array_4
    assign vecArray_4[(4-1)-i_26] = result_36[i_26*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[15-1 -: 3];

  assign result_28 = c$case_scrut_10[2:2] ? $signed(c$case_scrut_9[63:0]) : (64'sd0);

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign c$vec2_5 = (ws_5[12-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 4; i_27 = i_27 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_42[i_27*72+:72];
    wire [2:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_27*3+:3];
    wire [74:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_27*75+:75] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 4; i_28 = i_28 + 1) begin : imap_5
    wire [2-1:0] map_index_5;
    wire [74:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_28*75+:75];
    wire [2:0] map_out_5;

    assign map_index_5 = 2'd3 - i_28[0+:2];
    wire [2:0] c$case_alt_28;
    // spec.hs:290:1-63
    wire [7:0] t_21;
    // spec.hs:290:1-63
    wire [71:0] x_30;
    assign map_out_5 = c$case_alt_28;

    assign c$case_alt_28 = (t_21 == result_49[47:40]) ? {1'b1,map_index_5} : map_in_5[2:0];

    assign t_21 = x_30[71:64];

    assign x_30 = map_in_5[74:3];


    assign c$ws_app_arg_12[i_28*3+:3] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:4-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 4; i_29=i_29+1) begin : mk_array_5
    assign vecArray_5[(4-1)-i_29] = result_42[i_29*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-2) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[15-1 -: 3];

  assign result_29 = c$case_scrut_12[2:2] ? $signed(c$case_scrut_11[63:0]) : (64'sd0);

  assign i_5 = c$case_scrut_12[1:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,2'bxx}};

  assign c$vec2_6 = (ws_6[4-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 2; i_30 = i_30 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_32[i_30*72+:72];
    wire [1:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_30*2+:2];
    wire [73:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_30*74+:74] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 2; i_31 = i_31 + 1) begin : imap_6
    wire [1-1:0] map_index_6;
    wire [73:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_31*74+:74];
    wire [1:0] map_out_6;

    assign map_index_6 = 1'd1 - i_31[0+:1];
    wire [1:0] c$case_alt_29;
    // spec.hs:290:1-63
    wire [7:0] t_22;
    // spec.hs:290:1-63
    wire [71:0] x_31;
    assign map_out_6 = c$case_alt_29;

    assign c$case_alt_29 = (t_22 == result_49[55:48]) ? {1'b1,map_index_6} : map_in_6[1:0];

    assign t_22 = x_31[71:64];

    assign x_31 = map_in_6[73:2];


    assign c$ws_app_arg_14[i_31*2+:2] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:2-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 2; i_32=i_32+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_32] = result_32[i_32*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-1) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[6-1 -: 2];

  assign result_30 = c$case_scrut_14[1:1] ? $signed(c$case_scrut_13[63:0]) : (64'sd0);

  assign i_6 = c$case_scrut_14[0:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,1'bx}};

  assign result_31 = b_1 ? t_3 : result_32;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_32_register
    if ( rst) begin
      result_32 <= {{8'd13,   64'sd0},   {8'd13,   64'sd0}};
    end else if (en) begin
      result_32 <= result_31;
    end
  end
  // register end

  assign b_1 = result_33;

  assign t_projection_9 = ({result_32,{t_11,   c$out3_app_arg}});

  assign t_3 = t_projection_9[143:0];

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_delay
    if (en) begin
      c$out3_app_arg <= $signed(inputs_3[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_8;
  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= pIn2_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_43;



  assign c$app_arg_8 = {pIn2_0,
                        iterateI_ho1_0_res_8};



  assign result_33 = c$app_arg_8[1-1:0];

  wire [2:0] iterateI_ho1_0_res_9;
  wire [2:0] iterateI_ho1_1_res_8;
  wire [2:0] iterateI_ho1_2_res_8;
  reg [2:0] c$bb_res_res_44 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_44;



  reg [2:0] c$bb_res_res_45 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_45;



  reg [2:0] c$bb_res_res_46 = {1'b0,   1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_46;



  assign c$app_arg_9 = {pOut3,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8};



  assign result_34 = c$app_arg_9[3-1:0];

  assign result_35 = x_7 ? t_4 : result_36;

  assign x_7 = result_40;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_36_register
    if ( rst) begin
      result_36 <= {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,
                                                                   64'sd0}};
    end else if (en) begin
      result_36 <= result_35;
    end
  end
  // register end

  assign t_projection_10 = ({result_36,{result_50[39:32],   c$out1_case_alt}});

  assign t_4 = t_projection_10[287:0];

  assign c$out1_case_alt = (tag == tagToMatch) ? dta : (64'sd0);

  assign dta = $signed(result_38[63:0]);

  assign tag = result_38[71:64];

  assign tagToMatch = result_50[63:56];

  assign result_37 = b_2 ? {t_12,
                            c$ds_app_arg} : result_38;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {8'd13,   64'sd0};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign b_2 = result_39;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_3[129:66]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_10;
  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_47;



  assign c$app_arg_10 = {pIn1_0,
                         iterateI_ho1_0_res_10};



  assign result_39 = c$app_arg_10[1-1:0];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_9;
  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_49;



  assign c$app_arg_11 = {pOut1,
                         iterateI_ho1_0_res_11,   iterateI_ho1_1_res_9};



  assign result_40 = c$app_arg_11[1-1:0];

  assign result_41 = x_8 ? t_5 : result_42;

  assign x_8 = result_46;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {{8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,   64'sd0},   {8'd13,
                                                                   64'sd0}};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_projection_11 = ({result_42,{result_50[47:40],   c$out0_case_alt}});

  assign t_5 = t_projection_11[287:0];

  assign c$out0_case_alt = (tag_0 == tagToMatch_0) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_44[63:0]);

  assign tagToMatch_0 = result_50[71:64];

  assign tag_0 = result_44[71:64];

  assign result_43 = b_3 ? {t_13,
                            c$ds_app_arg_0} : result_44;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_44_register
    if ( rst) begin
      result_44 <= {8'd13,   64'sd0};
    end else if (en) begin
      result_44 <= result_43;
    end
  end
  // register end

  assign b_3 = result_45;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_0_delay
    if (en) begin
      c$ds_app_arg_0 <= $signed(inputs_3[194:131]);
    end
  end
  // delay end

  assign inputs_3 = result_67[206:12];

  wire  iterateI_ho1_0_res_12;
  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_50;



  assign c$app_arg_12 = {pIn0_0,
                         iterateI_ho1_0_res_12};



  assign result_45 = c$app_arg_12[1-1:0];

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_10;
  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_51;



  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_52;



  assign c$app_arg_13 = {pOut0,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_10};



  assign result_46 = c$app_arg_13[1-1:0];

  wire [71:0] iterateI_ho1_0_arg0_2;
  wire [71:0] iterateI_ho1_0_res_14;
  wire [71:0] iterateI_ho1_1_res_11;
  wire [71:0] iterateI_ho1_2_res_9;
  wire [71:0] iterateI_ho1_3_res_7;
  wire [71:0] iterateI_ho1_4_res_4;
  assign iterateI_ho1_0_arg0_2 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_6,
                                  t_7};

  reg [71:0] c$bb_res_res_53 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_53;



  reg [71:0] c$bb_res_res_54 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_54;



  reg [71:0] c$bb_res_res_55 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_55;



  reg [71:0] c$bb_res_res_56 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_56;



  reg [71:0] c$bb_res_res_57 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_57;



  assign c$app_arg_14 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_6,   t_7},
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_11,   iterateI_ho1_2_res_9,
                         iterateI_ho1_3_res_7,   iterateI_ho1_4_res_4};



  assign result_47 = c$app_arg_14[72-1:0];

  wire [71:0] iterateI_ho1_0_arg0_3;
  wire [71:0] iterateI_ho1_0_res_15;
  wire [71:0] iterateI_ho1_1_res_12;
  wire [71:0] iterateI_ho1_2_res_10;
  assign iterateI_ho1_0_arg0_3 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_6,
                                  t_7};

  reg [71:0] c$bb_res_res_58 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_58;



  reg [71:0] c$bb_res_res_59 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_59;



  reg [71:0] c$bb_res_res_60 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_60;



  assign c$app_arg_15 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_6,   t_7},
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_10};



  assign result_48 = c$app_arg_15[72-1:0];

  wire [71:0] iterateI_ho1_0_arg0_4;
  wire [71:0] iterateI_ho1_0_res_16;
  wire [71:0] iterateI_ho1_1_res_13;
  assign iterateI_ho1_0_arg0_4 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_6,
                                  t_7};

  reg [71:0] c$bb_res_res_61 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_61;



  reg [71:0] c$bb_res_res_62 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_62;



  assign c$app_arg_16 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_6,   t_7},
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_13};



  assign result_49 = c$app_arg_16[72-1:0];

  wire [71:0] iterateI_ho1_0_arg0_5;
  wire [71:0] iterateI_ho1_0_res_17;
  assign iterateI_ho1_0_arg0_5 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_6,
                                  t_7};

  reg [71:0] c$bb_res_res_63 = {8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13,   8'd13};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_63;



  assign c$app_arg_17 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_6,   t_7},
                         iterateI_ho1_0_res_17};



  assign result_50 = c$app_arg_17[72-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_51;
    end
  end
  // register end

  assign result_51 = pOut4 ? result_52 : t_6;

  assign b_4 = t_6 == 8'd12;

  assign f1 = t_6 + 8'd1;

  assign result_52 = b_4 ? 8'd1 : f1;

  assign pOut4 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_53;
    end
  end
  // register end

  assign result_53 = c$ds7_case_alt ? result_54 : t_7;

  assign b_5 = t_7 == 8'd12;

  assign f1_0 = t_7 + 8'd1;

  assign result_54 = b_5 ? 8'd1 : f1_0;

  assign c$ds7_case_alt = x_9 & (y_6 & z_1);

  assign z_1 = pOut3[0:0];

  assign y_6 = pOut3[1:1];

  assign x_9 = pOut3[2:2];

  assign pOut3 = pacings[3:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_55;
    end
  end
  // register end

  assign result_55 = c$ds6_case_alt ? result_56 : t_8;

  assign b_6 = t_8 == 8'd12;

  assign f1_1 = t_8 + 8'd1;

  assign result_56 = b_6 ? 8'd1 : f1_1;

  assign c$ds6_case_alt = x_10 & y_7;

  assign y_7 = pOut2[0:0];

  assign x_10 = pOut2[1:1];

  assign pOut2 = pacings[5:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_57;
    end
  end
  // register end

  assign result_57 = x_11 ? result_58 : t_9;

  assign b_7 = t_9 == 8'd12;

  assign f1_2 = t_9 + 8'd1;

  assign result_58 = b_7 ? 8'd1 : f1_2;

  assign x_11 = pOut1;

  assign pOut1 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_59;
    end
  end
  // register end

  assign result_59 = x_12 ? result_60 : t_10;

  assign b_8 = t_10 == 8'd12;

  assign f1_3 = t_10 + 8'd1;

  assign result_60 = b_8 ? 8'd1 : f1_3;

  assign x_12 = pOut0;

  assign pOut0 = pacings[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_61;
    end
  end
  // register end

  assign result_61 = pIn2_0 ? result_62 : t_11;

  assign b_9 = t_11 == 8'd12;

  assign f1_4 = t_11 + 8'd1;

  assign result_62 = b_9 ? 8'd1 : f1_4;

  assign pIn2_0 = pacings[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_63;
    end
  end
  // register end

  assign result_63 = pIn1_0 ? result_64 : t_12;

  assign b_10 = t_12 == 8'd12;

  assign f1_5 = t_12 + 8'd1;

  assign result_64 = b_10 ? 8'd1 : f1_5;

  assign pIn1_0 = pacings[9:9];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_65;
    end
  end
  // register end

  assign result_65 = pIn0_0 ? result_66 : t_13;

  assign b_11 = t_13 == 8'd12;

  assign f1_6 = t_13 + 8'd1;

  assign result_66 = b_11 ? 8'd1 : f1_6;

  assign pIn0_0 = pacings[10:10];

  assign pacings = result_67[10:0];

  assign result_67 = {c$app_arg_20,
                      c$app_arg_19,   c$app_arg_18};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_18_register
    if ( rst) begin
      c$app_arg_18 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                          1'b0,
                                                                          1'b0,
                                                                          1'b0,
                                                                          1'b0,
                                                                          {1'b0,
                                                                           1'b0},
                                                                          {1'b0,
                                                                           1'b0,
                                                                           1'b0},
                                                                          1'b0}};
    end else if (en) begin
      c$app_arg_18 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0,
                                                                                                  1'b0,   1'b0,
                                                                                                  {1'b0,   1'b0},
                                                                                                  {1'b0,   1'b0,
                                                                                                   1'b0},   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   1'b0,   {1'b0,   1'b0,   1'b0,
                                                                                                  1'b0,   1'b0,
                                                                                                  {1'b0,   1'b0},
                                                                                                  {1'b0,   1'b0,
                                                                                                   1'b0},   1'b0}};

  always @(*) begin
    case(x_13)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_13)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                {1'b0,   1'b0},   {1'b0,   1'b0,   1'b0},
                                1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [206:0] vecArray_7 [0:2-1];
  genvar i_33;
  generate
  for (i_33=0; i_33 < 2; i_33=i_33+1) begin : mk_array_7
    assign vecArray_7[(2-1)-i_33] = buffer[i_33*207+:207];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_7[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_19_register
    if ( rst) begin
      c$app_arg_19 <= 1'b0;
    end else if (en) begin
      c$app_arg_19 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_13)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_20_register
    if ( rst) begin
      c$app_arg_20 <= 1'b0;
    end else if (en) begin
      c$app_arg_20 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_13 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           {1'b0,
                                                                            1'b0},
                                                                           {1'b0,
                                                                            1'b0,
                                                                            1'b0},
                                                                           1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           1'b0,
                                                                           {1'b0,
                                                                            1'b0},
                                                                           {1'b0,
                                                                            1'b0,
                                                                            1'b0},
                                                                           1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[620:207] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[620:207];

  assign qData = result_4[206:0];

  assign x_13 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_13 + 64'sd1));

  assign c$tte_rhs_0 = (x_13 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_13)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_13 - 64'sd1);

  assign result = {result_5[336:12],   {qPush,
                                        qPop,   result_67[208:208],   qPopValid,
                                        result_5[11:1],   result_5[0:0]}};

  assign qPopValid = result_67[207:207];

  assign qPush = result_4[207:207];

  assign qPop = result_5[337:337];

  assign result_0 = result[340:16];

  assign result_1 = result[15:0];

  assign result_0_0 = result_0[324:260];

  assign result_0_1 = result_0[259:195];

  assign result_0_2 = result_0[194:130];

  assign result_0_3 = result_0[129:65];

  assign result_0_4 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_1_0 = result_1[15:15];

  assign result_1_1 = result_1[14:14];

  assign result_1_2 = result_1[13:13];

  assign result_1_3 = result_1[12:12];

  assign result_1_4 = result_1[11:1];

  assign result_1_5 = result_1[0:0];

  assign result_1_4_0 = result_1_4[10:10];

  assign result_1_4_1 = result_1_4[9:9];

  assign result_1_4_2 = result_1_4[8:8];

  assign result_1_4_3 = result_1_4[7:7];

  assign result_1_4_4 = result_1_4[6:6];

  assign result_1_4_5 = result_1_4[5:4];

  assign result_1_4_6 = result_1_4[3:1];

  assign result_1_4_7 = result_1_4[0:0];

  assign result_1_4_5_0 = result_1_4_5[1:1];

  assign result_1_4_5_1 = result_1_4_5[0:0];

  assign result_1_4_6_0 = result_1_4_6[2:2];

  assign result_1_4_6_1 = result_1_4_6[1:1];

  assign result_1_4_6_2 = result_1_4_6[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    );
  wire [133:0] result_2;
  // spec.hs:146:1-82
  wire  pacing1;
  // spec.hs:146:1-82
  wire  hasInput0;
  // spec.hs:146:1-82
  wire  hasInput1;
  wire [198:0] result_3;
  reg  c$app_arg = 1'b0;
  reg  c$app_arg_0 = 1'b0;
  reg  c$app_arg_1 = 1'b0;
  // spec.hs:183:1-70
  wire [147:0] c$ws_app_arg;
  // spec.hs:183:1-70
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_4;
  // spec.hs:183:1-70
  wire [0:0] i;
  // spec.hs:183:1-70
  wire [5:0] ws;
  reg [39:0] c$case_scrut_1 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  wire [143:0] result_5;
  // spec.hs:312:1-120
  reg [143:0] result_6 = {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
  // spec.hs:312:1-120
  wire [143:0] t;
  // spec.hs:190:1-62
  wire [7:0] winTag;
  // spec.hs:190:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_7;
  wire [7:0] c$app_arg_2;
  reg  c$app_arg_3 = 1'b0;
  reg  c$app_arg_4 = 1'b0;
  wire [71:0] result_8;
  // spec.hs:302:1-137
  reg [71:0] result_9 = {8'd3,   64'sd0};
  // spec.hs:302:1-137
  wire [71:0] t_0;
  wire signed [63:0] x;
  wire signed [63:0] y;
  // spec.hs:190:1-62
  wire [7:0] winTag_0;
  // spec.hs:190:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_10;
  wire [7:0] c$app_arg_5;
  // spec.hs:190:1-62
  wire [7:0] winTag_1;
  // spec.hs:190:1-62
  wire signed [63:0] winData_1;
  wire [71:0] c$case_alt_1;
  wire [7:0] result_11;
  wire [7:0] c$app_arg_6;
  reg  c$app_arg_7 = 1'b0;
  reg  c$app_arg_8 = 1'b0;
  reg  c$app_arg_9 = 1'b0;
  reg  c$app_arg_10 = 1'b0;
  reg  c$app_arg_11 = 1'b0;
  // spec.hs:293:1-112
  wire [71:0] c$result_app_arg;
  // spec.hs:293:1-112
  reg [71:0] result_12 = {8'd3,   64'sd0};
  // spec.hs:175:1-72
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:175:1-72
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_2;
  wire [1:0] c$case_scrut_3;
  wire [71:0] result_13;
  wire [7:0] result_14;
  wire [7:0] c$app_arg_12;
  // spec.hs:175:1-72
  wire [0:0] i_0;
  // spec.hs:175:1-72
  wire [5:0] ws_0;
  // spec.hs:282:1-119
  reg [143:0] result_15 = {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
  // spec.hs:282:1-119
  wire [143:0] t_1;
  wire [143:0] result_16;
  // spec.hs:200:1-115
  reg [64:0] c$out0_case_scrut = {64'sd0,   1'b0};
  // spec.hs:200:1-115
  reg  c$out0_app_arg = 1'b0;
  // spec.hs:200:1-115
  reg  c$out0_app_arg_0 = 1'b0;
  // spec.hs:200:1-115
  reg  c$out0_app_arg_1 = 1'b0;
  // spec.hs:200:1-115
  wire [7:0] out1Level2TagOut0;
  // spec.hs:200:1-115
  wire [7:0] out1Level2TagIn1;
  // spec.hs:200:1-115
  reg [39:0] c$ds3_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:200:1-115
  reg [39:0] c$ds3_app_arg = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:200:1-115
  wire [39:0] curTags;
  // spec.hs:272:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_17;
  // spec.hs:272:9-81
  wire  b;
  // spec.hs:272:9-81
  wire [7:0] f1;
  wire [7:0] result_18;
  // spec.hs:200:1-115
  wire  p3;
  // spec.hs:272:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_19;
  // spec.hs:272:9-81
  wire  b_0;
  // spec.hs:272:9-81
  wire [7:0] f1_0;
  wire [7:0] result_20;
  // spec.hs:200:1-115
  wire  p2;
  // spec.hs:272:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_21;
  // spec.hs:272:9-81
  wire  b_1;
  // spec.hs:272:9-81
  wire [7:0] f1_1;
  wire [7:0] result_22;
  // spec.hs:200:1-115
  wire  p0;
  // spec.hs:200:1-115
  wire [2:0] pacings;
  // spec.hs:287:1-111
  reg [71:0] result_23 = {8'd3,   64'sd0};
  // spec.hs:287:1-111
  wire [71:0] c$result_app_arg_0;
  // spec.hs:200:1-115
  reg [64:0] c$input1Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:200:1-115
  reg  c$input1Win_app_arg = 1'b0;
  // spec.hs:272:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_24;
  // spec.hs:272:9-81
  wire  b_2;
  // spec.hs:272:9-81
  wire [7:0] f1_2;
  wire [7:0] result_25;
  // spec.hs:200:1-115
  wire  input1HasData;
  // spec.hs:200:1-115
  wire [64:0] input2;
  // spec.hs:272:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_26;
  // spec.hs:272:9-81
  wire  b_3;
  // spec.hs:272:9-81
  wire [7:0] f1_3;
  wire [7:0] result_27;
  // spec.hs:200:1-115
  wire  input0HasData;
  // spec.hs:200:1-115
  wire [64:0] input0;
  wire [134:0] result_28;
  reg [132:0] c$app_arg_13 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}};
  wire [132:0] c$case_alt_2;
  wire [132:0] c$case_alt_3;
  wire [132:0] c$case_alt_4;
  reg [132:0] c$case_alt_5;
  reg [132:0] c$case_alt_6;
  wire [132:0] c$case_alt_7;
  reg  c$app_arg_14 = 1'b0;
  wire  c$case_alt_8;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  reg  c$case_alt_12;
  reg  c$app_arg_15 = 1'b0;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  wire  c$case_alt_15;
  // spec.hs:79:1-78
  reg [265:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}}};
  // spec.hs:79:1-78
  wire [265:0] c$buffer_case_alt;
  // spec.hs:79:1-78
  wire [265:0] c$buffer_case_alt_0;
  // spec.hs:79:1-78
  wire [265:0] c$buffer_case_alt_1;
  // spec.hs:79:1-78
  wire [132:0] qData;
  // spec.hs:79:1-78
  wire signed [63:0] x_0;
  // spec.hs:79:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:79:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:79:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:79:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:79:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:79:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:79:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:79:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:328:1-140
  wire  qPopValid;
  // spec.hs:328:1-140
  wire  qPush;
  // spec.hs:328:1-140
  wire  qPop;
  wire [129:0] inputs;
  wire [3:0] c$vec2;
  wire [215:0] t_projection_0;
  wire [3:0] c$vec2_0;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [398:0] c$buffer_case_alt_sel_alt_t_1;
  wire [398:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [201:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [6:0] result_1;
  wire [2:0] result_1_4_9;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {pacing1 | (pacing1 | hasInput1),
                     {inputs,   {pacing1,   pacing1,   hasInput1}}};

  assign pacing1 = hasInput0 & hasInput1;

  assign hasInput0 = inputs[65:65];

  assign hasInput1 = inputs[0:0];

  assign result_3 = {{1'b1,
                      {{$signed(result_12[63:0]),   c$app_arg_10},
                       {$signed(result_9[63:0]),   c$app_arg_4},
                       {$signed(result_4[63:0]),   c$app_arg}}},
                     pacings};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= c$app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_1_delay
    if (en) begin
      c$app_arg_1 <= c$app_arg_3;
    end
  end
  // delay end

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_1;
  generate
  for (i_1 = 0; i_1 < 2; i_1 = i_1 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_6[i_1*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_1*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_1*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_2;
  generate
  for (i_2=0; i_2 < 2; i_2 = i_2 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_2*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_2[0+:1];
    wire [1:0] c$case_alt_16;
    // spec.hs:183:1-70
    wire [7:0] t_7;
    // spec.hs:183:1-70
    wire [71:0] x_1;
    assign map_out = c$case_alt_16;

    assign c$case_alt_16 = (t_7 == c$case_scrut_1[7:0]) ? {1'b1,map_index} : map_in[1:0];

    assign t_7 = x_1[71:64];

    assign x_1 = map_in[73:2];


    assign c$ws_app_arg_0[i_2*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3=i_3+1) begin : mk_array
    assign vecArray[(2-1)-i_3] = result_6[i_3*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_4 = c$case_scrut_0[1:1] ? {c$case_scrut_1[7:0],
                                           $signed(c$case_scrut[63:0])} : {c$case_scrut_1[7:0],
                                                                           64'sd0};

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  // delay begin
  always @(posedge clk) begin : c$case_scrut_1_delay
    if (en) begin
      c$case_scrut_1 <= c$ds3_case_scrut;
    end
  end
  // delay end

  assign result_5 = c$app_arg_3 ? t : result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign t_projection_0 = ({result_6,{c$case_alt[71:64],   $signed(c$case_alt[63:0])}});

  assign t = t_projection_0[143:0];

  assign winTag = result_23[71:64];

  assign winData = $signed(result_23[63:0]);

  assign c$case_alt = (result_7 == winTag) ? {t_5,
                                              winData} : {t_5,   64'sd2000};

  assign result_7 = (t_5 > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd2);

  assign c$app_arg_2 = t_5 - 8'd1;

  // delay begin
  always @(posedge clk) begin : c$app_arg_3_delay
    if (en) begin
      c$app_arg_3 <= p3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$app_arg_7;
    end
  end
  // delay end

  assign result_8 = c$app_arg_7 ? t_0 : result_9;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_9 <= result_8;
    end
  end
  // register end

  assign t_0 = {c$case_alt_1[71:64],   (x + y)};

  assign x = $signed(c$case_alt_0[63:0]);

  assign y = $signed(c$case_alt_1[63:0]);

  assign winTag_0 = result_12[71:64];

  assign winData_0 = $signed(result_12[63:0]);

  assign c$case_alt_0 = (result_10 == winTag_0) ? {out1Level2TagOut0,
                                                   winData_0} : {out1Level2TagOut0,   64'sd2000};

  assign result_10 = (out1Level2TagOut0 > 8'd1) ? c$app_arg_5 : (c$app_arg_5 + 8'd2);

  assign c$app_arg_5 = out1Level2TagOut0 - 8'd1;

  assign winTag_1 = result_23[71:64];

  assign winData_1 = $signed(result_23[63:0]);

  assign c$case_alt_1 = (result_11 == winTag_1) ? {out1Level2TagIn1,
                                                   winData_1} : {out1Level2TagIn1,   64'sd1000};

  assign result_11 = (out1Level2TagIn1 > 8'd1) ? c$app_arg_6 : (c$app_arg_6 + 8'd2);

  assign c$app_arg_6 = out1Level2TagIn1 - 8'd1;

  // delay begin
  always @(posedge clk) begin : c$app_arg_7_delay
    if (en) begin
      c$app_arg_7 <= c$app_arg_8;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_8_delay
    if (en) begin
      c$app_arg_8 <= c$app_arg_9;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_9_delay
    if (en) begin
      c$app_arg_9 <= p2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_10_delay
    if (en) begin
      c$app_arg_10 <= c$app_arg_11;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_11_delay
    if (en) begin
      c$app_arg_11 <= c$out0_app_arg_0;
    end
  end
  // delay end

  assign c$result_app_arg = c$out0_app_arg_0 ? {result_13[71:64],
                                                $signed(result_13[63:0])} : result_12;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_12 <= c$result_app_arg;
    end
  end
  // register end

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 2; i_5 = i_5 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_15[i_5*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_5*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_5*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_6;
  generate
  for (i_6=0; i_6 < 2; i_6 = i_6 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_6*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_6[0+:1];
    wire [1:0] c$case_alt_20;
    // spec.hs:175:1-72
    wire [7:0] t_9;
    // spec.hs:175:1-72
    wire [71:0] x_3;
    assign map_out_0 = c$case_alt_20;

    assign c$case_alt_20 = (t_9 == result_14) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_9 = x_3[71:64];

    assign x_3 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_6*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7=i_7+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_7] = result_15[i_7*72+:72];
  end
  endgenerate
  assign c$case_scrut_2 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_3 = ws_0[6-1 -: 2];

  assign result_13 = c$case_scrut_3[1:1] ? {c$ds3_app_arg[39:32],
                                            $signed(c$case_scrut_2[63:0])} : {c$ds3_app_arg[39:32],
                                                                              64'sd2000};

  assign result_14 = (c$ds3_app_arg[39:32] > 8'd1) ? c$app_arg_12 : (c$app_arg_12 + 8'd2);

  assign c$app_arg_12 = c$ds3_app_arg[39:32] - 8'd1;

  assign i_0 = c$case_scrut_3[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
    end else if (en) begin
      result_15 <= result_16;
    end
  end
  // register end

  assign t_projection_2 = ({result_15,{t_6,   $signed(c$out0_case_scrut[64:1])}});

  assign t_1 = t_projection_2[143:0];

  assign result_16 = c$out0_app_arg ? t_1 : result_15;

  // delay begin
  always @(posedge clk) begin : c$out0_case_scrut_delay
    if (en) begin
      c$out0_case_scrut <= input0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_delay
    if (en) begin
      c$out0_app_arg <= input0HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_0_delay
    if (en) begin
      c$out0_app_arg_0 <= c$out0_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_1_delay
    if (en) begin
      c$out0_app_arg_1 <= p0;
    end
  end
  // delay end

  assign out1Level2TagOut0 = c$ds3_case_scrut[23:16];

  assign out1Level2TagIn1 = c$ds3_case_scrut[31:24];

  // delay begin
  always @(posedge clk) begin : c$ds3_case_scrut_delay
    if (en) begin
      c$ds3_case_scrut <= c$ds3_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$ds3_app_arg_delay
    if (en) begin
      c$ds3_app_arg <= curTags;
    end
  end
  // delay end

  assign curTags = {t_6,   t_5,   t_4,   t_3,
                    t_2};

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_17;
    end
  end
  // register end

  assign result_17 = p3 ? result_18 : t_2;

  assign b = t_2 == 8'd2;

  assign f1 = t_2 + 8'd1;

  assign result_18 = b ? 8'd1 : f1;

  assign p3 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_19;
    end
  end
  // register end

  assign result_19 = p2 ? result_20 : t_3;

  assign b_0 = t_3 == 8'd2;

  assign f1_0 = t_3 + 8'd1;

  assign result_20 = b_0 ? 8'd1 : f1_0;

  assign p2 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_21;
    end
  end
  // register end

  assign result_21 = p0 ? result_22 : t_4;

  assign b_1 = t_4 == 8'd2;

  assign f1_1 = t_4 + 8'd1;

  assign result_22 = b_1 ? 8'd1 : f1_1;

  assign p0 = pacings[2:2];

  assign pacings = result_28[2:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_23_register
    if ( rst) begin
      result_23 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_23 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = c$input1Win_app_arg ? {t_5,
                                                     $signed(c$input1Win_case_scrut[64:1])} : result_23;

  // delay begin
  always @(posedge clk) begin : c$input1Win_case_scrut_delay
    if (en) begin
      c$input1Win_case_scrut <= input2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= input1HasData;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_24;
    end
  end
  // register end

  assign result_24 = input1HasData ? result_25 : t_5;

  assign b_2 = t_5 == 8'd2;

  assign f1_2 = t_5 + 8'd1;

  assign result_25 = b_2 ? 8'd1 : f1_2;

  assign input1HasData = input2[0:0];

  assign input2 = result_28[67:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_26;
    end
  end
  // register end

  assign result_26 = input0HasData ? result_27 : t_6;

  assign b_3 = t_6 == 8'd2;

  assign f1_3 = t_6 + 8'd1;

  assign result_27 = b_3 ? 8'd1 : f1_3;

  assign input0HasData = input0[0:0];

  assign input0 = result_28[132:68];

  assign result_28 = {c$app_arg_15,
                      c$app_arg_14,   c$app_arg_13};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_13_register
    if ( rst) begin
      c$app_arg_13 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_13 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = qPush ? c$case_alt_3 : c$case_alt_4;

  assign c$case_alt_3 = qPop ? c$case_alt_5 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0}};

  assign c$case_alt_4 = qPop ? c$case_alt_6 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0}};

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_5 = qData;
      default : c$case_alt_5 = c$case_alt_7;
    endcase
  end

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_6 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}};
      default : c$case_alt_6 = c$case_alt_7;
    endcase
  end

  // index begin
  wire [132:0] vecArray_1 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_8] = buffer[i_8*133+:133];
  end
  endgenerate
  assign c$case_alt_7 = vecArray_1[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_14_register
    if ( rst) begin
      c$app_arg_14 <= 1'b0;
    end else if (en) begin
      c$app_arg_14 <= c$case_alt_8;
    end
  end
  // register end

  assign c$case_alt_8 = qPush ? c$case_alt_9 : c$case_alt_10;

  assign c$case_alt_9 = qPop ? 1'b1 : c$case_alt_11;

  assign c$case_alt_10 = qPop ? c$case_alt_12 : c$case_alt_11;

  assign c$case_alt_11 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_0)
      64'sd0 : c$case_alt_12 = 1'b0;
      default : c$case_alt_12 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_15_register
    if ( rst) begin
      c$app_arg_15 <= 1'b0;
    end else if (en) begin
      c$app_arg_15 <= c$case_alt_13;
    end
  end
  // register end

  assign c$case_alt_13 = qPush ? c$case_alt_14 : 1'b0;

  assign c$case_alt_14 = qPop ? 1'b1 : c$case_alt_15;

  assign c$tte_rhs = (x_0 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_15 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[398:133] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[398:133];

  assign qData = result_2[132:0];

  assign x_0 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_0 + 64'sd1));

  assign c$tte_rhs_0 = (x_0 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_0)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_0 - 64'sd1);

  assign result = {result_3[197:3],   {qPush,
                                       qPop,   result_28[134:134],   qPopValid,
                                       result_3[2:0]}};

  assign qPopValid = result_28[133:133];

  assign qPush = result_2[133:133];

  assign qPop = result_3[198:198];

  assign result_0 = result[201:7];

  assign result_1 = result[6:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[6:6];

  assign result_1_1 = result_1[5:5];

  assign result_1_2 = result_1[4:4];

  assign result_1_3 = result_1[3:3];

  assign result_1_4_9 = result_1[2:0];

  assign result_1_4_0 = result_1_4_9[2:2];

  assign result_1_4_1 = result_1_4_9[1:1];

  assign result_1_4_2 = result_1_4_9[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    );
  wire [134:0] result_2;
  wire  c$app_arg;
  // spec.hs:155:1-82
  wire  hasInput1;
  // spec.hs:155:1-82
  wire  hasInput0;
  // spec.hs:305:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_3;
  // spec.hs:305:9-81
  wire  b;
  // spec.hs:305:9-81
  wire [7:0] f1;
  wire [7:0] result_4;
  // spec.hs:305:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_5;
  // spec.hs:305:9-81
  wire  b_0;
  // spec.hs:305:9-81
  wire [7:0] f1_0;
  wire [7:0] result_6;
  // spec.hs:210:1-121
  reg  c$input0Win_app_arg = 1'b0;
  // spec.hs:210:1-121
  reg [64:0] c$input0Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:315:1-119
  reg [359:0] result_7 = {{8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},
 {8'd3,   64'sd0}};
  // spec.hs:315:1-119
  wire [359:0] t_1;
  wire [359:0] result_8;
  // spec.hs:210:1-121
  reg  c$input1Win_app_arg = 1'b0;
  // spec.hs:210:1-121
  reg [64:0] c$input1Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:320:1-119
  reg [287:0] result_9 = {{8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0}};
  // spec.hs:320:1-119
  wire [287:0] t_2;
  wire [287:0] result_10;
  // spec.hs:305:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_11;
  // spec.hs:305:9-81
  wire  b_1;
  // spec.hs:305:9-81
  wire [7:0] f1_1;
  wire [7:0] result_12;
  // spec.hs:305:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_13;
  // spec.hs:305:9-81
  wire  b_2;
  // spec.hs:305:9-81
  wire [7:0] f1_2;
  wire [7:0] result_14;
  // spec.hs:305:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_15;
  // spec.hs:305:9-81
  wire  b_3;
  // spec.hs:305:9-81
  wire [7:0] f1_3;
  wire [7:0] result_16;
  // spec.hs:305:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_17;
  // spec.hs:305:9-81
  wire  b_4;
  // spec.hs:305:9-81
  wire [7:0] f1_4;
  wire [7:0] result_18;
  // spec.hs:210:1-121
  reg [47:0] c$out2Level1TagIn1_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:210:1-121
  reg [47:0] c$ds3_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:210:1-121
  reg [47:0] c$ds4_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:210:1-121
  reg [47:0] c$ds5_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:210:1-121
  reg [47:0] c$ds6_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:210:1-121
  reg  c$out2_app_arg = 1'b0;
  // spec.hs:210:1-121
  reg  c$out2_app_arg_0 = 1'b0;
  // spec.hs:193:1-70
  wire [299:0] c$ws_app_arg;
  // spec.hs:193:1-70
  wire [11:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire [71:0] result_19;
  // spec.hs:193:1-70
  wire [1:0] i;
  // spec.hs:193:1-70
  wire [14:0] ws;
  // spec.hs:185:1-72
  wire [299:0] c$ws_app_arg_1;
  // spec.hs:185:1-72
  wire [11:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_20;
  wire [7:0] result_21;
  wire [7:0] c$app_arg_0;
  // spec.hs:185:1-72
  wire [1:0] i_0;
  // spec.hs:185:1-72
  wire [14:0] ws_0;
  wire [143:0] result_22;
  // spec.hs:346:1-120
  reg [143:0] result_23 = {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
  // spec.hs:346:1-120
  wire [143:0] t_7;
  // spec.hs:210:1-121
  reg  c$out0_app_arg = 1'b0;
  // spec.hs:210:1-121
  reg  c$out0_app_arg_0 = 1'b0;
  // spec.hs:210:1-121
  reg  c$out0_app_arg_1 = 1'b0;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire [71:0] result_24;
  // spec.hs:193:1-70
  wire [0:0] i_1;
  // spec.hs:193:1-70
  wire [5:0] ws_1;
  // spec.hs:185:1-72
  wire [379:0] c$ws_app_arg_5;
  // spec.hs:185:1-72
  wire [19:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [3:0] c$case_scrut_6;
  wire [71:0] result_25;
  wire [7:0] result_26;
  wire [7:0] c$app_arg_1;
  // spec.hs:185:1-72
  wire [2:0] i_2;
  // spec.hs:185:1-72
  wire [23:0] ws_2;
  wire [143:0] result_27;
  // spec.hs:326:1-120
  reg [143:0] result_28 = {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
  // spec.hs:326:1-120
  wire [143:0] t_8;
  // spec.hs:210:1-121
  reg  c$out1_app_arg = 1'b0;
  // spec.hs:210:1-121
  reg  c$out1_app_arg_0 = 1'b0;
  // spec.hs:210:1-121
  reg  c$out1_app_arg_1 = 1'b0;
  // spec.hs:210:1-121
  reg  c$out1_app_arg_2 = 1'b0;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_7;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [1:0] c$case_scrut_8;
  wire [71:0] result_29;
  // spec.hs:193:1-70
  wire [0:0] i_3;
  // spec.hs:193:1-70
  wire [5:0] ws_3;
  // spec.hs:193:1-70
  wire [379:0] c$ws_app_arg_9;
  // spec.hs:193:1-70
  wire [19:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [3:0] c$case_scrut_10;
  wire [71:0] result_30;
  // spec.hs:193:1-70
  wire [2:0] i_4;
  // spec.hs:193:1-70
  wire [23:0] ws_4;
  // spec.hs:193:1-70
  wire [299:0] c$ws_app_arg_11;
  // spec.hs:193:1-70
  wire [11:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [2:0] c$case_scrut_12;
  wire [71:0] result_31;
  // spec.hs:193:1-70
  wire [1:0] i_5;
  // spec.hs:193:1-70
  wire [14:0] ws_5;
  // spec.hs:185:1-72
  wire signed [63:0] eta3;
  // spec.hs:185:1-72
  wire [299:0] c$ws_app_arg_13;
  // spec.hs:185:1-72
  wire [11:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_13;
  wire [2:0] c$case_scrut_14;
  wire [71:0] result_32;
  wire [7:0] result_33;
  wire [7:0] c$app_arg_2;
  // spec.hs:185:1-72
  wire [1:0] i_6;
  // spec.hs:185:1-72
  wire [14:0] ws_6;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_15;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_16;
  wire [71:0] c$case_scrut_15;
  wire [1:0] c$case_scrut_16;
  wire [71:0] result_34;
  // spec.hs:193:1-70
  wire [0:0] i_7;
  // spec.hs:193:1-70
  wire [5:0] ws_7;
  // spec.hs:185:1-72
  wire [147:0] c$ws_app_arg_17;
  // spec.hs:185:1-72
  wire [3:0] c$ws_app_arg_18;
  wire [71:0] c$case_scrut_17;
  wire [1:0] c$case_scrut_18;
  wire [71:0] result_35;
  wire [7:0] result_36;
  wire [7:0] c$app_arg_3;
  // spec.hs:185:1-72
  wire [0:0] i_8;
  // spec.hs:185:1-72
  wire [5:0] ws_8;
  wire [71:0] result_37;
  // spec.hs:336:1-137
  reg [71:0] result_38 = {8'd3,   64'sd0};
  // spec.hs:336:1-137
  wire [71:0] t_9;
  wire signed [63:0] x;
  wire signed [63:0] y;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_19;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_20;
  wire [71:0] c$case_scrut_19;
  wire [1:0] c$case_scrut_20;
  wire [71:0] result_39;
  // spec.hs:193:1-70
  wire [0:0] i_9;
  // spec.hs:193:1-70
  wire [5:0] ws_9;
  reg  c$app_arg_4 = 1'b0;
  reg  c$app_arg_5 = 1'b0;
  reg  c$app_arg_6 = 1'b0;
  reg  c$app_arg_7 = 1'b0;
  reg  c$app_arg_8 = 1'b0;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_21;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_22;
  wire [71:0] c$case_scrut_21;
  wire [1:0] c$case_scrut_22;
  wire [71:0] result_40;
  // spec.hs:193:1-70
  wire [0:0] i_10;
  // spec.hs:193:1-70
  wire [5:0] ws_10;
  reg  c$app_arg_9 = 1'b0;
  reg  c$app_arg_10 = 1'b0;
  reg  c$app_arg_11 = 1'b0;
  reg  c$app_arg_12 = 1'b0;
  reg  c$app_arg_13 = 1'b0;
  reg  c$app_arg_14 = 1'b0;
  reg  c$app_arg_15 = 1'b0;
  reg  c$app_arg_16 = 1'b0;
  reg  c$app_arg_17 = 1'b0;
  // spec.hs:193:1-70
  wire [147:0] c$ws_app_arg_23;
  // spec.hs:193:1-70
  wire [3:0] c$ws_app_arg_24;
  wire [71:0] c$case_scrut_23;
  wire [1:0] c$case_scrut_24;
  wire [71:0] result_41;
  // spec.hs:193:1-70
  wire [0:0] i_11;
  // spec.hs:193:1-70
  wire [5:0] ws_11;
  // spec.hs:185:1-72
  wire [379:0] c$ws_app_arg_25;
  // spec.hs:185:1-72
  wire [19:0] c$ws_app_arg_26;
  wire [71:0] c$case_scrut_25;
  wire [3:0] c$case_scrut_26;
  wire [71:0] result_42;
  wire [7:0] result_43;
  wire [7:0] c$app_arg_18;
  // spec.hs:185:1-72
  wire [2:0] i_12;
  // spec.hs:185:1-72
  wire [23:0] ws_12;
  wire [71:0] result_44;
  // spec.hs:356:1-137
  reg [71:0] result_45 = {8'd3,   64'sd0};
  // spec.hs:356:1-137
  wire [71:0] t_10;
  wire signed [63:0] x_0;
  wire signed [63:0] y_0;
  reg  c$app_arg_19 = 1'b0;
  wire [264:0] result_46;
  // spec.hs:210:1-121
  wire [3:0] pacings;
  // spec.hs:210:1-121
  wire [64:0] input0;
  // spec.hs:210:1-121
  wire  input0HasData;
  // spec.hs:210:1-121
  wire  input1HasData;
  // spec.hs:210:1-121
  wire  p0;
  // spec.hs:210:1-121
  wire [47:0] curTags;
  // spec.hs:210:1-121
  wire [64:0] input2;
  // spec.hs:210:1-121
  wire [7:0] out0Level2TagIn0;
  // spec.hs:210:1-121
  wire [7:0] out0Level2TagOut2;
  // spec.hs:210:1-121
  wire [7:0] out1Level3TagIn0;
  // spec.hs:210:1-121
  wire [7:0] out1Level3TagIn1;
  // spec.hs:210:1-121
  wire [7:0] out1Level3TagOut0;
  // spec.hs:210:1-121
  wire [7:0] out1Level3TagOut2;
  // spec.hs:210:1-121
  wire [7:0] out2Level1TagIn1;
  // spec.hs:210:1-121
  wire  p2;
  // spec.hs:210:1-121
  wire [7:0] out3Level4TagIn0;
  // spec.hs:210:1-121
  wire [7:0] out3Level4TagOut0;
  // spec.hs:210:1-121
  wire [7:0] level5TagOut0;
  // spec.hs:210:1-121
  wire [7:0] level5TagOut2;
  // spec.hs:210:1-121
  wire  p4;
  // spec.hs:210:1-121
  wire  p3;
  wire signed [63:0] x_1;
  wire signed [63:0] y_1;
  wire signed [63:0] x_2;
  wire signed [63:0] y_2;
  wire [135:0] result_47;
  reg [133:0] c$app_arg_20 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}};
  wire [133:0] c$case_alt;
  wire [133:0] c$case_alt_0;
  wire [133:0] c$case_alt_1;
  reg [133:0] c$case_alt_2;
  reg [133:0] c$case_alt_3;
  wire [133:0] c$case_alt_4;
  reg  c$app_arg_21 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_22 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:88:1-78
  reg [267:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:88:1-78
  wire [267:0] c$buffer_case_alt;
  // spec.hs:88:1-78
  wire [267:0] c$buffer_case_alt_0;
  // spec.hs:88:1-78
  wire [267:0] c$buffer_case_alt_1;
  // spec.hs:88:1-78
  wire [133:0] qData;
  // spec.hs:88:1-78
  wire signed [63:0] x_3;
  // spec.hs:88:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:88:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:88:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:88:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:88:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:88:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:88:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:88:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:372:1-146
  wire  qPopValid;
  // spec.hs:372:1-146
  wire  qPush;
  // spec.hs:372:1-146
  wire  qPop;
  wire [129:0] inputs;
  wire [431:0] t_projection;
  wire [359:0] t_projection_2;
  wire [11:0] c$vec2;
  wire [11:0] c$vec2_0;
  wire [215:0] t_projection_5;
  wire [3:0] c$vec2_1;
  wire [19:0] c$vec2_2;
  wire [215:0] t_projection_8;
  wire [3:0] c$vec2_3;
  wire [19:0] c$vec2_4;
  wire [11:0] c$vec2_5;
  wire [11:0] c$vec2_6;
  wire [3:0] c$vec2_7;
  wire [3:0] c$vec2_8;
  wire [3:0] c$vec2_9;
  wire [3:0] c$vec2_10;
  wire [3:0] c$vec2_11;
  wire [19:0] c$vec2_12;
  wire signed [63:0] x_projection_19;
  wire signed [63:0] c$tte_rhs;
  wire [401:0] c$buffer_case_alt_sel_alt_t_1;
  wire [401:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [267:0] result;
  wire [259:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [7:0] result_1;
  wire [3:0] result_1_4_12;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {hasInput0 | hasInput1,
                     {inputs,   {c$app_arg,   c$app_arg,
                                 hasInput1,   c$app_arg}}};

  assign c$app_arg = hasInput0 & hasInput1;

  assign hasInput1 = inputs[0:0];

  assign hasInput0 = inputs[65:65];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_3;
    end
  end
  // register end

  assign result_3 = input0HasData ? result_4 : t;

  assign b = t == 8'd2;

  assign f1 = t + 8'd1;

  assign result_4 = b ? 8'd1 : f1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_5;
    end
  end
  // register end

  assign result_5 = input1HasData ? result_6 : t_0;

  assign b_0 = t_0 == 8'd2;

  assign f1_0 = t_0 + 8'd1;

  assign result_6 = b_0 ? 8'd1 : f1_0;

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= input0HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$input0Win_case_scrut_delay
    if (en) begin
      c$input0Win_case_scrut <= input0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_7_register
    if ( rst) begin
      result_7 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},
   {8'd3,   64'sd0}};
    end else if (en) begin
      result_7 <= result_8;
    end
  end
  // register end

  assign t_projection = ({result_7,{t,   $signed(c$input0Win_case_scrut[64:1])}});

  assign t_1 = t_projection[359:0];

  assign result_8 = c$input0Win_app_arg ? t_1 : result_7;

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= input1HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$input1Win_case_scrut_delay
    if (en) begin
      c$input1Win_case_scrut <= input2;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0},   {8'd3,   64'sd0}};
    end else if (en) begin
      result_9 <= result_10;
    end
  end
  // register end

  assign t_projection_2 = ({result_9,{t_0,   $signed(c$input1Win_case_scrut[64:1])}});

  assign t_2 = t_projection_2[287:0];

  assign result_10 = c$input1Win_app_arg ? t_2 : result_9;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_11;
    end
  end
  // register end

  assign result_11 = p0 ? result_12 : t_3;

  assign b_1 = t_3 == 8'd2;

  assign f1_1 = t_3 + 8'd1;

  assign result_12 = b_1 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_13;
    end
  end
  // register end

  assign result_13 = p2 ? result_14 : t_4;

  assign b_2 = t_4 == 8'd2;

  assign f1_2 = t_4 + 8'd1;

  assign result_14 = b_2 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_15;
    end
  end
  // register end

  assign result_15 = p3 ? result_16 : t_5;

  assign b_3 = t_5 == 8'd2;

  assign f1_3 = t_5 + 8'd1;

  assign result_16 = b_3 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_17;
    end
  end
  // register end

  assign result_17 = p4 ? result_18 : t_6;

  assign b_4 = t_6 == 8'd2;

  assign f1_4 = t_6 + 8'd1;

  assign result_18 = b_4 ? 8'd1 : f1_4;

  // delay begin
  always @(posedge clk) begin : c$out2Level1TagIn1_case_scrut_delay
    if (en) begin
      c$out2Level1TagIn1_case_scrut <= curTags;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$ds3_case_scrut_delay
    if (en) begin
      c$ds3_case_scrut <= c$out2Level1TagIn1_case_scrut;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$ds4_case_scrut_delay
    if (en) begin
      c$ds4_case_scrut <= c$ds3_case_scrut;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$ds5_case_scrut_delay
    if (en) begin
      c$ds5_case_scrut <= c$ds4_case_scrut;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$ds6_case_scrut_delay
    if (en) begin
      c$ds6_case_scrut <= c$ds5_case_scrut;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_delay
    if (en) begin
      c$out2_app_arg <= p3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_0_delay
    if (en) begin
      c$out2_app_arg_0 <= c$out2_app_arg;
    end
  end
  // delay end

  assign c$vec2 = (ws[12-1 : 0]);

  // zipWith start
  genvar i_13;
  generate
  for (i_13 = 0; i_13 < 4; i_13 = i_13 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_9[i_13*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_13*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_13*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_14;
  generate
  for (i_14=0; i_14 < 4; i_14 = i_14 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_14*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd3 - i_14[0+:2];
    wire [2:0] c$case_alt_13;
    // spec.hs:193:1-70
    wire [7:0] t_11;
    // spec.hs:193:1-70
    wire [71:0] x_4;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_11 == out2Level1TagIn1) ? {1'b1,map_index} : map_in[2:0];

    assign t_11 = x_4[71:64];

    assign x_4 = map_in[74:3];


    assign c$ws_app_arg_0[i_14*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:4-1];
  genvar i_15;
  generate
  for (i_15=0; i_15 < 4; i_15=i_15+1) begin : mk_array
    assign vecArray[(4-1)-i_15] = result_9[i_15*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[15-1 -: 3];

  assign result_19 = c$case_scrut_0[2:2] ? {out2Level1TagIn1,
                                            $signed(c$case_scrut[63:0])} : {out2Level1TagIn1,
                                                                            64'sd0};

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  assign c$vec2_0 = (ws_0[12-1 : 0]);

  // zipWith start
  genvar i_17;
  generate
  for (i_17 = 0; i_17 < 4; i_17 = i_17 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_9[i_17*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_17*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_17*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_18;
  generate
  for (i_18=0; i_18 < 4; i_18 = i_18 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_18*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd3 - i_18[0+:2];
    wire [2:0] c$case_alt_14;
    // spec.hs:185:1-72
    wire [7:0] t_12;
    // spec.hs:185:1-72
    wire [71:0] x_5;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_12 == result_21) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_12 = x_5[71:64];

    assign x_5 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_18*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:4-1];
  genvar i_19;
  generate
  for (i_19=0; i_19 < 4; i_19=i_19+1) begin : mk_array_0
    assign vecArray_0[(4-1)-i_19] = result_9[i_19*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[15-1 -: 3];

  assign result_20 = c$case_scrut_2[2:2] ? {out2Level1TagIn1,
                                            $signed(c$case_scrut_1[63:0])} : {out2Level1TagIn1,
                                                                              $signed(result_19[63:0])};

  assign result_21 = (out2Level1TagIn1 > 8'd1) ? c$app_arg_0 : (c$app_arg_0 + 8'd2);

  assign c$app_arg_0 = out2Level1TagIn1 - 8'd1;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign result_22 = c$out2_app_arg_0 ? t_7 : result_23;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_23_register
    if ( rst) begin
      result_23 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
    end else if (en) begin
      result_23 <= result_22;
    end
  end
  // register end

  assign t_projection_5 = ({result_23,{result_20[71:64],   $signed(result_20[63:0])}});

  assign t_7 = t_projection_5[143:0];

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_delay
    if (en) begin
      c$out0_app_arg <= p0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_0_delay
    if (en) begin
      c$out0_app_arg_0 <= c$out0_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_1_delay
    if (en) begin
      c$out0_app_arg_1 <= c$out0_app_arg_0;
    end
  end
  // delay end

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_20;
  generate
  for (i_20 = 0; i_20 < 2; i_20 = i_20 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_23[i_20*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_20*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_20*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 2; i_21 = i_21 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_21*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_21[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:193:1-70
    wire [7:0] t_13;
    // spec.hs:193:1-70
    wire [71:0] x_6;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_13 == out0Level2TagOut2) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_13 = x_6[71:64];

    assign x_6 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_21*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_22;
  generate
  for (i_22=0; i_22 < 2; i_22=i_22+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_22] = result_23[i_22*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_24 = c$case_scrut_4[1:1] ? {out0Level2TagOut2,
                                            $signed(c$case_scrut_3[63:0])} : {out0Level2TagOut2,
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign c$vec2_2 = (ws_2[20-1 : 0]);

  // zipWith start
  genvar i_23;
  generate
  for (i_23 = 0; i_23 < 5; i_23 = i_23 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_7[i_23*72+:72];
    wire [3:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_23*4+:4];
    wire [75:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_23*76+:76] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_24;
  generate
  for (i_24=0; i_24 < 5; i_24 = i_24 + 1) begin : imap_2
    wire [3-1:0] map_index_2;
    wire [75:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_24*76+:76];
    wire [3:0] map_out_2;

    assign map_index_2 = 3'd4 - i_24[0+:3];
    wire [3:0] c$case_alt_16;
    // spec.hs:185:1-72
    wire [7:0] t_14;
    // spec.hs:185:1-72
    wire [71:0] x_7;
    assign map_out_2 = c$case_alt_16;

    assign c$case_alt_16 = (t_14 == result_26) ? {1'b1,map_index_2} : map_in_2[3:0];

    assign t_14 = x_7[71:64];

    assign x_7 = map_in_2[75:4];


    assign c$ws_app_arg_6[i_24*4+:4] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:5-1];
  genvar i_25;
  generate
  for (i_25=0; i_25 < 5; i_25=i_25+1) begin : mk_array_2
    assign vecArray_2[(5-1)-i_25] = result_7[i_25*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-3) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[24-1 -: 4];

  assign result_25 = c$case_scrut_6[3:3] ? {out0Level2TagIn0,
                                            $signed(c$case_scrut_5[63:0])} : {out0Level2TagIn0,
                                                                              $signed(result_24[63:0])};

  assign result_26 = (out0Level2TagIn0 > 8'd1) ? c$app_arg_1 : (c$app_arg_1 + 8'd2);

  assign c$app_arg_1 = out0Level2TagIn0 - 8'd1;

  assign i_2 = c$case_scrut_6[2:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,3'bxxx}};

  assign result_27 = c$out0_app_arg_1 ? t_8 : result_28;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_28_register
    if ( rst) begin
      result_28 <= {{8'd3,   64'sd0},   {8'd3,   64'sd0}};
    end else if (en) begin
      result_28 <= result_27;
    end
  end
  // register end

  assign t_projection_8 = ({result_28,{result_25[71:64],   $signed(result_25[63:0])}});

  assign t_8 = t_projection_8[143:0];

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= p2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_0_delay
    if (en) begin
      c$out1_app_arg_0 <= c$out1_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_1_delay
    if (en) begin
      c$out1_app_arg_1 <= c$out1_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_2_delay
    if (en) begin
      c$out1_app_arg_2 <= c$out1_app_arg_1;
    end
  end
  // delay end

  assign c$vec2_3 = (ws_3[4-1 : 0]);

  // zipWith start
  genvar i_26;
  generate
  for (i_26 = 0; i_26 < 2; i_26 = i_26 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_23[i_26*72+:72];
    wire [1:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_26*2+:2];
    wire [73:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_26*74+:74] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_27;
  generate
  for (i_27=0; i_27 < 2; i_27 = i_27 + 1) begin : imap_3
    wire [1-1:0] map_index_3;
    wire [73:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_27*74+:74];
    wire [1:0] map_out_3;

    assign map_index_3 = 1'd1 - i_27[0+:1];
    wire [1:0] c$case_alt_17;
    // spec.hs:193:1-70
    wire [7:0] t_15;
    // spec.hs:193:1-70
    wire [71:0] x_8;
    assign map_out_3 = c$case_alt_17;

    assign c$case_alt_17 = (t_15 == out1Level3TagOut2) ? {1'b1,map_index_3} : map_in_3[1:0];

    assign t_15 = x_8[71:64];

    assign x_8 = map_in_3[73:2];


    assign c$ws_app_arg_8[i_27*2+:2] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:2-1];
  genvar i_28;
  generate
  for (i_28=0; i_28 < 2; i_28=i_28+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_28] = result_23[i_28*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-1) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[6-1 -: 2];

  assign result_29 = c$case_scrut_8[1:1] ? {out1Level3TagOut2,
                                            $signed(c$case_scrut_7[63:0])} : {out1Level3TagOut2,
                                                                              64'sd0};

  assign i_3 = c$case_scrut_8[0:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,1'bx}};

  assign c$vec2_4 = (ws_4[20-1 : 0]);

  // zipWith start
  genvar i_29;
  generate
  for (i_29 = 0; i_29 < 5; i_29 = i_29 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_7[i_29*72+:72];
    wire [3:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_29*4+:4];
    wire [75:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_29*76+:76] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_30;
  generate
  for (i_30=0; i_30 < 5; i_30 = i_30 + 1) begin : imap_4
    wire [3-1:0] map_index_4;
    wire [75:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_30*76+:76];
    wire [3:0] map_out_4;

    assign map_index_4 = 3'd4 - i_30[0+:3];
    wire [3:0] c$case_alt_18;
    // spec.hs:193:1-70
    wire [7:0] t_16;
    // spec.hs:193:1-70
    wire [71:0] x_9;
    assign map_out_4 = c$case_alt_18;

    assign c$case_alt_18 = (t_16 == out1Level3TagIn0) ? {1'b1,map_index_4} : map_in_4[3:0];

    assign t_16 = x_9[71:64];

    assign x_9 = map_in_4[75:4];


    assign c$ws_app_arg_10[i_30*4+:4] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:5-1];
  genvar i_31;
  generate
  for (i_31=0; i_31 < 5; i_31=i_31+1) begin : mk_array_4
    assign vecArray_4[(5-1)-i_31] = result_7[i_31*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-3) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[24-1 -: 4];

  assign result_30 = c$case_scrut_10[3:3] ? {out1Level3TagIn0,
                                             $signed(c$case_scrut_9[63:0])} : {out1Level3TagIn0,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[2:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,3'bxxx}};

  assign c$vec2_5 = (ws_5[12-1 : 0]);

  // zipWith start
  genvar i_32;
  generate
  for (i_32 = 0; i_32 < 4; i_32 = i_32 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_9[i_32*72+:72];
    wire [2:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_32*3+:3];
    wire [74:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_32*75+:75] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_33;
  generate
  for (i_33=0; i_33 < 4; i_33 = i_33 + 1) begin : imap_5
    wire [2-1:0] map_index_5;
    wire [74:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_33*75+:75];
    wire [2:0] map_out_5;

    assign map_index_5 = 2'd3 - i_33[0+:2];
    wire [2:0] c$case_alt_19;
    // spec.hs:193:1-70
    wire [7:0] t_17;
    // spec.hs:193:1-70
    wire [71:0] x_10;
    assign map_out_5 = c$case_alt_19;

    assign c$case_alt_19 = (t_17 == out1Level3TagIn1) ? {1'b1,map_index_5} : map_in_5[2:0];

    assign t_17 = x_10[71:64];

    assign x_10 = map_in_5[74:3];


    assign c$ws_app_arg_12[i_33*3+:3] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:4-1];
  genvar i_34;
  generate
  for (i_34=0; i_34 < 4; i_34=i_34+1) begin : mk_array_5
    assign vecArray_5[(4-1)-i_34] = result_9[i_34*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-2) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[15-1 -: 3];

  assign result_31 = c$case_scrut_12[2:2] ? {out1Level3TagIn1,
                                             $signed(c$case_scrut_11[63:0])} : {out1Level3TagIn1,
                                                                                64'sd0};

  assign i_5 = c$case_scrut_12[1:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,2'bxx}};

  assign eta3 = (x_2 + y_2);

  assign c$vec2_6 = (ws_6[12-1 : 0]);

  // zipWith start
  genvar i_35;
  generate
  for (i_35 = 0; i_35 < 4; i_35 = i_35 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_9[i_35*72+:72];
    wire [2:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_35*3+:3];
    wire [74:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_35*75+:75] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_36;
  generate
  for (i_36=0; i_36 < 4; i_36 = i_36 + 1) begin : imap_6
    wire [2-1:0] map_index_6;
    wire [74:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_36*75+:75];
    wire [2:0] map_out_6;

    assign map_index_6 = 2'd3 - i_36[0+:2];
    wire [2:0] c$case_alt_20;
    // spec.hs:185:1-72
    wire [7:0] t_18;
    // spec.hs:185:1-72
    wire [71:0] x_11;
    assign map_out_6 = c$case_alt_20;

    assign c$case_alt_20 = (t_18 == result_33) ? {1'b1,map_index_6} : map_in_6[2:0];

    assign t_18 = x_11[71:64];

    assign x_11 = map_in_6[74:3];


    assign c$ws_app_arg_14[i_36*3+:3] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:4-1];
  genvar i_37;
  generate
  for (i_37=0; i_37 < 4; i_37=i_37+1) begin : mk_array_6
    assign vecArray_6[(4-1)-i_37] = result_9[i_37*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-2) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[15-1 -: 3];

  assign result_32 = c$case_scrut_14[2:2] ? {out1Level3TagIn1,
                                             $signed(c$case_scrut_13[63:0])} : {out1Level3TagIn1,
                                                                                eta3};

  assign result_33 = (out1Level3TagIn1 > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd2);

  assign c$app_arg_2 = out1Level3TagIn1 - 8'd1;

  assign i_6 = c$case_scrut_14[1:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,2'bxx}};

  assign c$vec2_7 = (ws_7[4-1 : 0]);

  // zipWith start
  genvar i_38;
  generate
  for (i_38 = 0; i_38 < 2; i_38 = i_38 + 1) begin : zipWith_7
    wire [71:0] zipWith_in1_7;
    assign zipWith_in1_7 = result_28[i_38*72+:72];
    wire [1:0] zipWith_in2_7;
    assign zipWith_in2_7 = c$vec2_7[i_38*2+:2];
    wire [73:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_15[i_38*74+:74] = c$n_7;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_39;
  generate
  for (i_39=0; i_39 < 2; i_39 = i_39 + 1) begin : imap_7
    wire [1-1:0] map_index_7;
    wire [73:0] map_in_7;
    assign map_in_7 = c$ws_app_arg_15[i_39*74+:74];
    wire [1:0] map_out_7;

    assign map_index_7 = 1'd1 - i_39[0+:1];
    wire [1:0] c$case_alt_21;
    // spec.hs:193:1-70
    wire [7:0] t_19;
    // spec.hs:193:1-70
    wire [71:0] x_12;
    assign map_out_7 = c$case_alt_21;

    assign c$case_alt_21 = (t_19 == out1Level3TagOut0) ? {1'b1,map_index_7} : map_in_7[1:0];

    assign t_19 = x_12[71:64];

    assign x_12 = map_in_7[73:2];


    assign c$ws_app_arg_16[i_39*2+:2] = map_out_7;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_7 [0:2-1];
  genvar i_40;
  generate
  for (i_40=0; i_40 < 2; i_40=i_40+1) begin : mk_array_7
    assign vecArray_7[(2-1)-i_40] = result_28[i_40*72+:72];
  end
  endgenerate
  assign c$case_scrut_15 = vecArray_7[($unsigned({{(64-1) {1'b0}},i_7}))];
  // index end

  assign c$case_scrut_16 = ws_7[6-1 -: 2];

  assign result_34 = c$case_scrut_16[1:1] ? {out1Level3TagOut0,
                                             $signed(c$case_scrut_15[63:0])} : {out1Level3TagOut0,
                                                                                64'sd0};

  assign i_7 = c$case_scrut_16[0:0];

  assign ws_7 = {c$ws_app_arg_16,{1'b0,1'bx}};

  assign c$vec2_8 = (ws_8[4-1 : 0]);

  // zipWith start
  genvar i_41;
  generate
  for (i_41 = 0; i_41 < 2; i_41 = i_41 + 1) begin : zipWith_8
    wire [71:0] zipWith_in1_8;
    assign zipWith_in1_8 = result_28[i_41*72+:72];
    wire [1:0] zipWith_in2_8;
    assign zipWith_in2_8 = c$vec2_8[i_41*2+:2];
    wire [73:0] c$n_8;
    assign c$n_8 = {zipWith_in1_8,   zipWith_in2_8};


    assign c$ws_app_arg_17[i_41*74+:74] = c$n_8;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_42;
  generate
  for (i_42=0; i_42 < 2; i_42 = i_42 + 1) begin : imap_8
    wire [1-1:0] map_index_8;
    wire [73:0] map_in_8;
    assign map_in_8 = c$ws_app_arg_17[i_42*74+:74];
    wire [1:0] map_out_8;

    assign map_index_8 = 1'd1 - i_42[0+:1];
    wire [1:0] c$case_alt_22;
    // spec.hs:185:1-72
    wire [7:0] t_20;
    // spec.hs:185:1-72
    wire [71:0] x_13;
    assign map_out_8 = c$case_alt_22;

    assign c$case_alt_22 = (t_20 == result_36) ? {1'b1,map_index_8} : map_in_8[1:0];

    assign t_20 = x_13[71:64];

    assign x_13 = map_in_8[73:2];


    assign c$ws_app_arg_18[i_42*2+:2] = map_out_8;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_8 [0:2-1];
  genvar i_43;
  generate
  for (i_43=0; i_43 < 2; i_43=i_43+1) begin : mk_array_8
    assign vecArray_8[(2-1)-i_43] = result_28[i_43*72+:72];
  end
  endgenerate
  assign c$case_scrut_17 = vecArray_8[($unsigned({{(64-1) {1'b0}},i_8}))];
  // index end

  assign c$case_scrut_18 = ws_8[6-1 -: 2];

  assign result_35 = c$case_scrut_18[1:1] ? {out1Level3TagOut0,
                                             $signed(c$case_scrut_17[63:0])} : {out1Level3TagOut0,
                                                                                $signed(result_34[63:0])};

  assign result_36 = (out1Level3TagOut0 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd2);

  assign c$app_arg_3 = out1Level3TagOut0 - 8'd1;

  assign i_8 = c$case_scrut_18[0:0];

  assign ws_8 = {c$ws_app_arg_18,{1'b0,1'bx}};

  assign result_37 = c$out1_app_arg_2 ? t_9 : result_38;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign t_9 = {result_32[71:64],   (x + y)};

  assign x = $signed(result_35[63:0]);

  assign y = $signed(result_32[63:0]);

  assign c$vec2_9 = (ws_9[4-1 : 0]);

  // zipWith start
  genvar i_44;
  generate
  for (i_44 = 0; i_44 < 2; i_44 = i_44 + 1) begin : zipWith_9
    wire [71:0] zipWith_in1_9;
    assign zipWith_in1_9 = result_28[i_44*72+:72];
    wire [1:0] zipWith_in2_9;
    assign zipWith_in2_9 = c$vec2_9[i_44*2+:2];
    wire [73:0] c$n_9;
    assign c$n_9 = {zipWith_in1_9,   zipWith_in2_9};


    assign c$ws_app_arg_19[i_44*74+:74] = c$n_9;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_45;
  generate
  for (i_45=0; i_45 < 2; i_45 = i_45 + 1) begin : imap_9
    wire [1-1:0] map_index_9;
    wire [73:0] map_in_9;
    assign map_in_9 = c$ws_app_arg_19[i_45*74+:74];
    wire [1:0] map_out_9;

    assign map_index_9 = 1'd1 - i_45[0+:1];
    wire [1:0] c$case_alt_23;
    // spec.hs:193:1-70
    wire [7:0] t_21;
    // spec.hs:193:1-70
    wire [71:0] x_15;
    assign map_out_9 = c$case_alt_23;

    assign c$case_alt_23 = (t_21 == level5TagOut0) ? {1'b1,map_index_9} : map_in_9[1:0];

    assign t_21 = x_15[71:64];

    assign x_15 = map_in_9[73:2];


    assign c$ws_app_arg_20[i_45*2+:2] = map_out_9;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_9 [0:2-1];
  genvar i_46;
  generate
  for (i_46=0; i_46 < 2; i_46=i_46+1) begin : mk_array_9
    assign vecArray_9[(2-1)-i_46] = result_28[i_46*72+:72];
  end
  endgenerate
  assign c$case_scrut_19 = vecArray_9[($unsigned({{(64-1) {1'b0}},i_9}))];
  // index end

  assign c$case_scrut_20 = ws_9[6-1 -: 2];

  assign result_39 = c$case_scrut_20[1:1] ? {level5TagOut0,
                                             $signed(c$case_scrut_19[63:0])} : {level5TagOut0,
                                                                                64'sd0};

  assign i_9 = c$case_scrut_20[0:0];

  assign ws_9 = {c$ws_app_arg_20,{1'b0,1'bx}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$out0_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_5_delay
    if (en) begin
      c$app_arg_5 <= c$app_arg_4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_6_delay
    if (en) begin
      c$app_arg_6 <= c$app_arg_5;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_7_delay
    if (en) begin
      c$app_arg_7 <= c$out1_app_arg_2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_8_delay
    if (en) begin
      c$app_arg_8 <= c$app_arg_7;
    end
  end
  // delay end

  assign c$vec2_10 = (ws_10[4-1 : 0]);

  // zipWith start
  genvar i_47;
  generate
  for (i_47 = 0; i_47 < 2; i_47 = i_47 + 1) begin : zipWith_10
    wire [71:0] zipWith_in1_10;
    assign zipWith_in1_10 = result_23[i_47*72+:72];
    wire [1:0] zipWith_in2_10;
    assign zipWith_in2_10 = c$vec2_10[i_47*2+:2];
    wire [73:0] c$n_10;
    assign c$n_10 = {zipWith_in1_10,   zipWith_in2_10};


    assign c$ws_app_arg_21[i_47*74+:74] = c$n_10;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_48;
  generate
  for (i_48=0; i_48 < 2; i_48 = i_48 + 1) begin : imap_10
    wire [1-1:0] map_index_10;
    wire [73:0] map_in_10;
    assign map_in_10 = c$ws_app_arg_21[i_48*74+:74];
    wire [1:0] map_out_10;

    assign map_index_10 = 1'd1 - i_48[0+:1];
    wire [1:0] c$case_alt_24;
    // spec.hs:193:1-70
    wire [7:0] t_22;
    // spec.hs:193:1-70
    wire [71:0] x_16;
    assign map_out_10 = c$case_alt_24;

    assign c$case_alt_24 = (t_22 == level5TagOut2) ? {1'b1,map_index_10} : map_in_10[1:0];

    assign t_22 = x_16[71:64];

    assign x_16 = map_in_10[73:2];


    assign c$ws_app_arg_22[i_48*2+:2] = map_out_10;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_10 [0:2-1];
  genvar i_49;
  generate
  for (i_49=0; i_49 < 2; i_49=i_49+1) begin : mk_array_10
    assign vecArray_10[(2-1)-i_49] = result_23[i_49*72+:72];
  end
  endgenerate
  assign c$case_scrut_21 = vecArray_10[($unsigned({{(64-1) {1'b0}},i_10}))];
  // index end

  assign c$case_scrut_22 = ws_10[6-1 -: 2];

  assign result_40 = c$case_scrut_22[1:1] ? {level5TagOut2,
                                             $signed(c$case_scrut_21[63:0])} : {level5TagOut2,
                                                                                64'sd0};

  assign i_10 = c$case_scrut_22[0:0];

  assign ws_10 = {c$ws_app_arg_22,{1'b0,1'bx}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_9_delay
    if (en) begin
      c$app_arg_9 <= c$out2_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_10_delay
    if (en) begin
      c$app_arg_10 <= c$app_arg_9;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_11_delay
    if (en) begin
      c$app_arg_11 <= c$app_arg_10;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_12_delay
    if (en) begin
      c$app_arg_12 <= c$app_arg_11;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_13_delay
    if (en) begin
      c$app_arg_13 <= p4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_14_delay
    if (en) begin
      c$app_arg_14 <= c$app_arg_13;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_15_delay
    if (en) begin
      c$app_arg_15 <= c$app_arg_14;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_16_delay
    if (en) begin
      c$app_arg_16 <= c$app_arg_15;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_17_delay
    if (en) begin
      c$app_arg_17 <= c$app_arg_16;
    end
  end
  // delay end

  assign c$vec2_11 = (ws_11[4-1 : 0]);

  // zipWith start
  genvar i_50;
  generate
  for (i_50 = 0; i_50 < 2; i_50 = i_50 + 1) begin : zipWith_11
    wire [71:0] zipWith_in1_11;
    assign zipWith_in1_11 = result_28[i_50*72+:72];
    wire [1:0] zipWith_in2_11;
    assign zipWith_in2_11 = c$vec2_11[i_50*2+:2];
    wire [73:0] c$n_11;
    assign c$n_11 = {zipWith_in1_11,   zipWith_in2_11};


    assign c$ws_app_arg_23[i_50*74+:74] = c$n_11;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_51;
  generate
  for (i_51=0; i_51 < 2; i_51 = i_51 + 1) begin : imap_11
    wire [1-1:0] map_index_11;
    wire [73:0] map_in_11;
    assign map_in_11 = c$ws_app_arg_23[i_51*74+:74];
    wire [1:0] map_out_11;

    assign map_index_11 = 1'd1 - i_51[0+:1];
    wire [1:0] c$case_alt_25;
    // spec.hs:193:1-70
    wire [7:0] t_23;
    // spec.hs:193:1-70
    wire [71:0] x_17;
    assign map_out_11 = c$case_alt_25;

    assign c$case_alt_25 = (t_23 == out3Level4TagOut0) ? {1'b1,map_index_11} : map_in_11[1:0];

    assign t_23 = x_17[71:64];

    assign x_17 = map_in_11[73:2];


    assign c$ws_app_arg_24[i_51*2+:2] = map_out_11;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_11 [0:2-1];
  genvar i_52;
  generate
  for (i_52=0; i_52 < 2; i_52=i_52+1) begin : mk_array_11
    assign vecArray_11[(2-1)-i_52] = result_28[i_52*72+:72];
  end
  endgenerate
  assign c$case_scrut_23 = vecArray_11[($unsigned({{(64-1) {1'b0}},i_11}))];
  // index end

  assign c$case_scrut_24 = ws_11[6-1 -: 2];

  assign result_41 = c$case_scrut_24[1:1] ? {out3Level4TagOut0,
                                             $signed(c$case_scrut_23[63:0])} : {out3Level4TagOut0,
                                                                                64'sd0};

  assign i_11 = c$case_scrut_24[0:0];

  assign ws_11 = {c$ws_app_arg_24,{1'b0,1'bx}};

  assign c$vec2_12 = (ws_12[20-1 : 0]);

  // zipWith start
  genvar i_53;
  generate
  for (i_53 = 0; i_53 < 5; i_53 = i_53 + 1) begin : zipWith_12
    wire [71:0] zipWith_in1_12;
    assign zipWith_in1_12 = result_7[i_53*72+:72];
    wire [3:0] zipWith_in2_12;
    assign zipWith_in2_12 = c$vec2_12[i_53*4+:4];
    wire [75:0] c$n_12;
    assign c$n_12 = {zipWith_in1_12,   zipWith_in2_12};


    assign c$ws_app_arg_25[i_53*76+:76] = c$n_12;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_54;
  generate
  for (i_54=0; i_54 < 5; i_54 = i_54 + 1) begin : imap_12
    wire [3-1:0] map_index_12;
    wire [75:0] map_in_12;
    assign map_in_12 = c$ws_app_arg_25[i_54*76+:76];
    wire [3:0] map_out_12;

    assign map_index_12 = 3'd4 - i_54[0+:3];
    wire [3:0] c$case_alt_26;
    // spec.hs:185:1-72
    wire [7:0] t_24;
    // spec.hs:185:1-72
    wire [71:0] x_18;
    assign map_out_12 = c$case_alt_26;

    assign c$case_alt_26 = (t_24 == result_43) ? {1'b1,map_index_12} : map_in_12[3:0];

    assign t_24 = x_18[71:64];

    assign x_18 = map_in_12[75:4];


    assign c$ws_app_arg_26[i_54*4+:4] = map_out_12;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_12 [0:5-1];
  genvar i_55;
  generate
  for (i_55=0; i_55 < 5; i_55=i_55+1) begin : mk_array_12
    assign vecArray_12[(5-1)-i_55] = result_7[i_55*72+:72];
  end
  endgenerate
  assign c$case_scrut_25 = vecArray_12[($unsigned({{(64-3) {1'b0}},i_12}))];
  // index end

  assign c$case_scrut_26 = ws_12[24-1 -: 4];

  assign result_42 = c$case_scrut_26[3:3] ? {out3Level4TagIn0,
                                             $signed(c$case_scrut_25[63:0])} : {out3Level4TagIn0,
                                                                                $signed(result_41[63:0])};

  assign result_43 = (out3Level4TagIn0 > 8'd1) ? c$app_arg_18 : (c$app_arg_18 + 8'd2);

  assign c$app_arg_18 = out3Level4TagIn0 - 8'd1;

  assign i_12 = c$case_scrut_26[2:0];

  assign ws_12 = {c$ws_app_arg_26,{1'b0,3'bxxx}};

  assign result_44 = c$app_arg_17 ? t_10 : result_45;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_45_register
    if ( rst) begin
      result_45 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_45 <= result_44;
    end
  end
  // register end

  assign t_10 = {result_42[71:64],   (x_0 + y_0)};

  assign x_0 = $signed(result_42[63:0]);

  assign y_0 = $signed(result_38[63:0]);

  // delay begin
  always @(posedge clk) begin : c$app_arg_19_delay
    if (en) begin
      c$app_arg_19 <= c$app_arg_17;
    end
  end
  // delay end

  assign result_46 = {{1'b1,
                       {{$signed(result_39[63:0]),   c$app_arg_6},
                        {$signed(result_38[63:0]),   c$app_arg_8},
                        {$signed(result_40[63:0]),   c$app_arg_12},
                        {$signed(result_45[63:0]),   c$app_arg_19}}},
                      pacings};

  assign pacings = result_47[3:0];

  assign input0 = result_47[133:69];

  assign input0HasData = input0[0:0];

  assign input1HasData = input2[0:0];

  assign p0 = pacings[3:3];

  assign curTags = {t,   t_0,   t_3,   t_4,
                    t_5,   t_6};

  assign input2 = result_47[68:4];

  assign out0Level2TagIn0 = c$ds3_case_scrut[47:40];

  assign out0Level2TagOut2 = c$ds3_case_scrut[15:8];

  assign out1Level3TagIn0 = c$ds4_case_scrut[47:40];

  assign out1Level3TagIn1 = c$ds4_case_scrut[39:32];

  assign out1Level3TagOut0 = c$ds4_case_scrut[31:24];

  assign out1Level3TagOut2 = c$ds4_case_scrut[15:8];

  assign out2Level1TagIn1 = c$out2Level1TagIn1_case_scrut[39:32];

  assign p2 = pacings[2:2];

  assign out3Level4TagIn0 = c$ds5_case_scrut[47:40];

  assign out3Level4TagOut0 = c$ds5_case_scrut[31:24];

  assign level5TagOut0 = c$ds6_case_scrut[31:24];

  assign level5TagOut2 = c$ds6_case_scrut[15:8];

  assign p4 = pacings[0:0];

  assign p3 = pacings[1:1];

  assign x_1 = $signed(result_29[63:0]);

  assign y_1 = $signed(result_30[63:0]);

  assign x_projection_19 = (x_1 + y_1);

  assign x_2 = x_projection_19;

  assign y_2 = $signed(result_31[63:0]);

  assign result_47 = {c$app_arg_22,
                      c$app_arg_21,   c$app_arg_20};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_20_register
    if ( rst) begin
      c$app_arg_20 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_20 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0,   1'b0}};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,
                                                      1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [133:0] vecArray_13 [0:2-1];
  genvar i_56;
  generate
  for (i_56=0; i_56 < 2; i_56=i_56+1) begin : mk_array_13
    assign vecArray_13[(2-1)-i_56] = buffer[i_56*134+:134];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_13[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_21_register
    if ( rst) begin
      c$app_arg_21 <= 1'b0;
    end else if (en) begin
      c$app_arg_21 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_22_register
    if ( rst) begin
      c$app_arg_22 <= 1'b0;
    end else if (en) begin
      c$app_arg_22 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_3 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[401:134] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[401:134];

  assign qData = result_2[133:0];

  assign x_3 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_3 + 64'sd1));

  assign c$tte_rhs_0 = (x_3 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_3 - 64'sd1);

  assign result = {result_46[263:4],   {qPush,
                                        qPop,   result_47[135:135],   qPopValid,
                                        result_46[3:0]}};

  assign qPopValid = result_47[134:134];

  assign qPush = result_2[134:134];

  assign qPop = result_46[264:264];

  assign result_0 = result[267:8];

  assign result_1 = result[7:0];

  assign result_0_0 = result_0[259:195];

  assign result_0_1 = result_0[194:130];

  assign result_0_2 = result_0[129:65];

  assign result_0_3 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[7:7];

  assign result_1_1 = result_1[6:6];

  assign result_1_2 = result_1[5:5];

  assign result_1_3 = result_1[4:4];

  assign result_1_4_12 = result_1[3:0];

  assign result_1_4_0 = result_1_4_12[3:3];

  assign result_1_4_1 = result_1_4_12[2:2];

  assign result_1_4_2 = result_1_4_12[1:1];

  assign result_1_4_3 = result_1_4_12[0:0];


endmodule


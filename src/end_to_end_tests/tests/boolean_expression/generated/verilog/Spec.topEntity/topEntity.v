/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire  result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [70:0] result_4;
  // spec.hs:(239,1)-(241,31)
  wire  hasInput0;
  // spec.hs:(239,1)-(241,31)
  wire  timer0Over;
  wire [76:0] result_5;
  wire [5:0] c$app_arg;
  wire  result_6;
  wire [8:0] result_7;
  // spec.hs:(573,1)-(580,29)
  reg [8:0] result_8 = {8'd5,   1'b0};
  // spec.hs:(573,1)-(580,29)
  wire  b;
  // spec.hs:(573,1)-(580,29)
  wire [8:0] t;
  // spec.hs:294:1-63
  wire [21:0] c$ws_app_arg;
  // spec.hs:294:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [8:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire  result_9;
  // spec.hs:294:1-63
  wire [0:0] i;
  // spec.hs:294:1-63
  wire [5:0] ws;
  // spec.hs:286:1-65
  wire [21:0] c$ws_app_arg_1;
  // spec.hs:286:1-65
  wire [3:0] c$ws_app_arg_2;
  wire [8:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire  result_10;
  wire [7:0] result_11;
  wire [7:0] c$app_arg_0;
  // spec.hs:286:1-65
  wire [0:0] i_0;
  // spec.hs:286:1-65
  wire [5:0] ws_0;
  // spec.hs:286:1-65
  wire [21:0] c$ws_app_arg_3;
  // spec.hs:286:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [8:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire  result_12;
  wire [7:0] result_13;
  wire [7:0] c$app_arg_1;
  // spec.hs:286:1-65
  wire [0:0] i_1;
  // spec.hs:286:1-65
  wire [5:0] ws_1;
  // spec.hs:294:1-63
  wire [21:0] c$ws_app_arg_5;
  // spec.hs:294:1-63
  wire [3:0] c$ws_app_arg_6;
  wire [8:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire  result_14;
  // spec.hs:294:1-63
  wire [0:0] i_2;
  // spec.hs:294:1-63
  wire [5:0] ws_2;
  // spec.hs:294:1-63
  wire [21:0] c$ws_app_arg_7;
  // spec.hs:294:1-63
  wire [3:0] c$ws_app_arg_8;
  wire [8:0] c$case_scrut_7;
  wire [1:0] c$case_scrut_8;
  wire  result_15;
  // spec.hs:294:1-63
  wire [0:0] i_3;
  // spec.hs:294:1-63
  wire [5:0] ws_3;
  wire [5:0] c$app_arg_2;
  wire  result_16;
  // spec.hs:294:1-63
  wire [21:0] c$ws_app_arg_9;
  // spec.hs:294:1-63
  wire [3:0] c$ws_app_arg_10;
  wire [8:0] c$case_scrut_9;
  wire [1:0] c$case_scrut_10;
  wire  result_17;
  // spec.hs:294:1-63
  wire [0:0] i_4;
  // spec.hs:294:1-63
  wire [5:0] ws_4;
  wire [5:0] c$app_arg_3;
  wire  result_18;
  // spec.hs:294:1-63
  wire [224:0] c$ws_app_arg_11;
  // spec.hs:294:1-63
  wire [8:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [2:0] c$case_scrut_12;
  wire signed [63:0] result_19;
  // spec.hs:294:1-63
  wire [1:0] i_5;
  // spec.hs:294:1-63
  wire [11:0] ws_5;
  wire [5:0] c$app_arg_4;
  wire  result_20;
  wire [17:0] result_21;
  // spec.hs:(558,1)-(563,37)
  reg [17:0] result_22 = {{8'd5,   1'b0},   {8'd5,   1'b0}};
  // spec.hs:(558,1)-(563,37)
  wire  b_0;
  // spec.hs:(558,1)-(563,37)
  wire [17:0] t_0;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  wire [17:0] result_23;
  // spec.hs:(543,1)-(548,37)
  reg [17:0] result_24 = {{8'd5,   1'b0},   {8'd5,   1'b0}};
  // spec.hs:(543,1)-(548,37)
  wire  b_1;
  // spec.hs:(543,1)-(548,37)
  wire [17:0] t_1;
  wire signed [63:0] x_1;
  wire signed [63:0] y_0;
  // spec.hs:286:1-65
  wire [224:0] c$ws_app_arg_13;
  // spec.hs:286:1-65
  wire [8:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_13;
  wire [2:0] c$case_scrut_14;
  wire signed [63:0] result_25;
  wire [7:0] result_26;
  wire [7:0] c$app_arg_5;
  // spec.hs:286:1-65
  wire [1:0] i_6;
  // spec.hs:286:1-65
  wire [11:0] ws_6;
  // spec.hs:294:1-63
  wire [224:0] c$ws_app_arg_15;
  // spec.hs:294:1-63
  wire [8:0] c$ws_app_arg_16;
  wire [71:0] c$case_scrut_15;
  wire [2:0] c$case_scrut_16;
  wire signed [63:0] result_27;
  // spec.hs:294:1-63
  wire [1:0] i_7;
  // spec.hs:294:1-63
  wire [11:0] ws_7;
  wire [215:0] result_28;
  // spec.hs:(529,1)-(533,36)
  reg [215:0] result_29 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:(529,1)-(533,36)
  wire  b_2;
  // spec.hs:(529,1)-(533,36)
  wire [215:0] t_2;
  // spec.hs:(338,1)-(340,51)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:316:1-46
  wire signed [63:0] dta;
  // spec.hs:316:1-46
  wire [7:0] tag;
  wire [71:0] result_30;
  // spec.hs:(518,1)-(522,28)
  reg [71:0] result_31 = {8'd5,   64'sd0};
  // spec.hs:(518,1)-(522,28)
  wire  b_3;
  // spec.hs:316:1-46
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [79:0] c$app_arg_6;
  wire [39:0] result_32;
  wire [4:0] c$app_arg_7;
  wire  result_33;
  wire [199:0] c$app_arg_8;
  wire [39:0] result_34;
  wire [159:0] c$app_arg_9;
  wire [39:0] result_35;
  wire [119:0] c$app_arg_10;
  wire [39:0] result_36;
  // spec.hs:(506,9)-(508,29)
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_37;
  // spec.hs:(506,9)-(508,29)
  wire  b_4;
  // spec.hs:(506,9)-(508,29)
  wire [7:0] f1;
  wire [7:0] result_38;
  // spec.hs:(338,1)-(340,51)
  wire  pOut3;
  // spec.hs:(506,9)-(508,29)
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_39;
  // spec.hs:(506,9)-(508,29)
  wire  b_5;
  // spec.hs:(506,9)-(508,29)
  wire [7:0] f1_0;
  wire [7:0] result_40;
  // spec.hs:(506,9)-(508,29)
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_41;
  // spec.hs:(506,9)-(508,29)
  wire  b_6;
  // spec.hs:(506,9)-(508,29)
  wire [7:0] f1_1;
  wire [7:0] result_42;
  // spec.hs:(506,9)-(508,29)
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_43;
  // spec.hs:(506,9)-(508,29)
  wire  b_7;
  // spec.hs:(506,9)-(508,29)
  wire [7:0] f1_2;
  wire [7:0] result_44;
  wire [3:0] c$app_arg_11;
  wire  result_45;
  // spec.hs:(338,1)-(340,51)
  wire  pOut2;
  wire [3:0] c$app_arg_12;
  wire  result_46;
  // spec.hs:(338,1)-(340,51)
  wire  pOut1;
  wire [2:0] c$app_arg_13;
  wire  result_47;
  // spec.hs:(338,1)-(340,51)
  wire  pOut0;
  wire [1:0] c$app_arg_14;
  wire  result_48;
  // spec.hs:(506,9)-(508,29)
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_49;
  // spec.hs:(506,9)-(508,29)
  wire  b_8;
  // spec.hs:(506,9)-(508,29)
  wire [7:0] f1_3;
  wire [7:0] result_50;
  // spec.hs:(338,1)-(340,51)
  wire  pIn0;
  // spec.hs:(338,1)-(340,51)
  wire [4:0] pacings;
  wire [71:0] result_51;
  reg [69:0] c$app_arg_15 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
  wire [69:0] c$case_alt;
  wire [69:0] c$case_alt_0;
  wire [69:0] c$case_alt_1;
  reg [69:0] c$case_alt_2;
  reg [69:0] c$case_alt_3;
  wire [69:0] c$case_alt_4;
  reg  c$app_arg_16 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_17 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(156,1)-(158,25)
  reg [139:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,
                                                                   1'b0},
                                                                  {1'b0,
                                                                   1'b0,
                                                                   1'b0,
                                                                   1'b0,
                                                                   1'b0}}};
  // spec.hs:(156,1)-(158,25)
  wire [139:0] c$buffer_case_alt;
  // spec.hs:(156,1)-(158,25)
  wire [139:0] c$buffer_case_alt_0;
  // spec.hs:(156,1)-(158,25)
  wire [139:0] c$buffer_case_alt_1;
  // spec.hs:(156,1)-(158,25)
  wire [69:0] qData;
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] x_2;
  // spec.hs:(156,1)-(158,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(156,1)-(158,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(156,1)-(158,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(156,1)-(158,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(596,1)-(598,80)
  wire  qPopValid;
  // spec.hs:(596,1)-(598,80)
  wire  qPush;
  // spec.hs:(596,1)-(598,80)
  wire  qPop;
  wire [64:0] inputs;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [3:0] c$vec2_2;
  wire [3:0] c$vec2_3;
  wire [3:0] c$vec2_4;
  wire [8:0] c$vec2_5;
  wire [26:0] t_projection_6;
  wire [26:0] t_projection_7;
  wire [8:0] c$vec2_6;
  wire [8:0] c$vec2_7;
  wire [287:0] t_projection_10;
  wire signed [63:0] c$tte_rhs;
  wire [209:0] c$buffer_case_alt_sel_alt_t_1;
  wire [209:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [79:0] result;
  wire [70:0] result_0;
  wire [64:0] result_0_0;
  wire [1:0] result_0_1;
  wire [1:0] result_0_2;
  wire [1:0] result_0_3;
  wire [8:0] result_1;
  wire [4:0] result_1_4_13;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {hasInput0 | timer0Over,
                     {inputs,   {hasInput0,   timer0Over,
                                 timer0Over,   timer0Over,   timer0Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_3 >= (64'sd500000);

  assign result_5 = {{1'b1,   {{result_19,
                                result_20},   {result_17,   result_18},
                               {result_15,   result_16},   {result_8[0:0],
                                                            result_6}}},   {result_48,   result_47,
                                                                            result_46,   result_45,   result_33}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  assign iterateI_ho1_0_arg0 = pOut3;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  assign c$app_arg = {pOut3,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res};



  assign result_6 = c$app_arg[1-1:0];

  assign result_7 = b ? t : result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd5,   1'b0};
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign b = result_33;

  assign t = {result_35[7:0],
              (result_14 & result_12) | (result_10 & result_9)};

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_8;
  generate
  for (i_8 = 0; i_8 < 2; i_8 = i_8 + 1) begin : zipWith
    wire [8:0] zipWith_in1;
    assign zipWith_in1 = result_22[i_8*9+:9];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_8*2+:2];
    wire [10:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_8*11+:11] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 2; i_9 = i_9 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [10:0] map_in;
    assign map_in = c$ws_app_arg[i_9*11+:11];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_9[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:294:1-63
    wire [7:0] t_9;
    // spec.hs:294:1-63
    wire [8:0] x_4;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_9 == result_35[15:8]) ? {1'b1,map_index} : map_in[1:0];

    assign t_9 = x_4[8:1];

    assign x_4 = map_in[10:2];


    assign c$ws_app_arg_0[i_9*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray [0:2-1];
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10=i_10+1) begin : mk_array
    assign vecArray[(2-1)-i_10] = result_22[i_10*9+:9];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_9 = c$case_scrut_0[1:1] ? c$case_scrut[0:0] : 1'b0;

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 2; i_12 = i_12 + 1) begin : zipWith_0
    wire [8:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_24[i_12*9+:9];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_12*2+:2];
    wire [10:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_12*11+:11] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 2; i_13 = i_13 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [10:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_13*11+:11];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_13[0+:1];
    wire [1:0] c$case_alt_14;
    // spec.hs:294:1-63
    wire [7:0] t_10;
    // spec.hs:294:1-63
    wire [8:0] x_5;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_10 == result_11) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_10 = x_5[8:1];

    assign x_5 = map_in_0[10:2];


    assign c$ws_app_arg_2[i_13*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_0 [0:2-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 2; i_14=i_14+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_14] = result_24[i_14*9+:9];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_10 = c$case_scrut_2[1:1] ? c$case_scrut_1[0:0] : 1'b0;

  assign result_11 = (result_35[23:16] > 8'd1) ? c$app_arg_0 : (c$app_arg_0 + 8'd4);

  assign c$app_arg_0 = result_35[23:16] - 8'd1;

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 2; i_15 = i_15 + 1) begin : zipWith_1
    wire [8:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_22[i_15*9+:9];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_15*2+:2];
    wire [10:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_15*11+:11] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16 = i_16 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [10:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_16*11+:11];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_16[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:294:1-63
    wire [7:0] t_11;
    // spec.hs:294:1-63
    wire [8:0] x_6;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_11 == result_13) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_11 = x_6[8:1];

    assign x_6 = map_in_1[10:2];


    assign c$ws_app_arg_4[i_16*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_1 [0:2-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 2; i_17=i_17+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_17] = result_22[i_17*9+:9];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_12 = c$case_scrut_4[1:1] ? c$case_scrut_3[0:0] : 1'b0;

  assign result_13 = (result_35[15:8] > 8'd1) ? c$app_arg_1 : (c$app_arg_1 + 8'd4);

  assign c$app_arg_1 = result_35[15:8] - 8'd1;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 2; i_18 = i_18 + 1) begin : zipWith_2
    wire [8:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_24[i_18*9+:9];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_18*2+:2];
    wire [10:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_18*11+:11] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 2; i_19 = i_19 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [10:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_19*11+:11];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_19[0+:1];
    wire [1:0] c$case_alt_16;
    // spec.hs:294:1-63
    wire [7:0] t_12;
    // spec.hs:294:1-63
    wire [8:0] x_7;
    assign map_out_2 = c$case_alt_16;

    assign c$case_alt_16 = (t_12 == result_35[23:16]) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_12 = x_7[8:1];

    assign x_7 = map_in_2[10:2];


    assign c$ws_app_arg_6[i_19*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_2 [0:2-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 2; i_20=i_20+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_20] = result_24[i_20*9+:9];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_14 = c$case_scrut_6[1:1] ? c$case_scrut_5[0:0] : 1'b0;

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  assign c$vec2_3 = (ws_3[4-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 2; i_21 = i_21 + 1) begin : zipWith_3
    wire [8:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_22[i_21*9+:9];
    wire [1:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_21*2+:2];
    wire [10:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_21*11+:11] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 2; i_22 = i_22 + 1) begin : imap_3
    wire [1-1:0] map_index_3;
    wire [10:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_22*11+:11];
    wire [1:0] map_out_3;

    assign map_index_3 = 1'd1 - i_22[0+:1];
    wire [1:0] c$case_alt_17;
    // spec.hs:294:1-63
    wire [7:0] t_13;
    // spec.hs:294:1-63
    wire [8:0] x_8;
    assign map_out_3 = c$case_alt_17;

    assign c$case_alt_17 = (t_13 == result_34[15:8]) ? {1'b1,map_index_3} : map_in_3[1:0];

    assign t_13 = x_8[8:1];

    assign x_8 = map_in_3[10:2];


    assign c$ws_app_arg_8[i_22*2+:2] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_3 [0:2-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 2; i_23=i_23+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_23] = result_22[i_23*9+:9];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-1) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[6-1 -: 2];

  assign result_15 = c$case_scrut_8[1:1] ? c$case_scrut_7[0:0] : 1'b0;

  assign i_3 = c$case_scrut_8[0:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut2;

  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_8;



  assign c$app_arg_2 = {pOut2,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0};



  assign result_16 = c$app_arg_2[1-1:0];

  assign c$vec2_4 = (ws_4[4-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 2; i_24 = i_24 + 1) begin : zipWith_4
    wire [8:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_24[i_24*9+:9];
    wire [1:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_24*2+:2];
    wire [10:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_24*11+:11] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 2; i_25 = i_25 + 1) begin : imap_4
    wire [1-1:0] map_index_4;
    wire [10:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_25*11+:11];
    wire [1:0] map_out_4;

    assign map_index_4 = 1'd1 - i_25[0+:1];
    wire [1:0] c$case_alt_18;
    // spec.hs:294:1-63
    wire [7:0] t_14;
    // spec.hs:294:1-63
    wire [8:0] x_9;
    assign map_out_4 = c$case_alt_18;

    assign c$case_alt_18 = (t_14 == result_34[23:16]) ? {1'b1,map_index_4} : map_in_4[1:0];

    assign t_14 = x_9[8:1];

    assign x_9 = map_in_4[10:2];


    assign c$ws_app_arg_10[i_25*2+:2] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_4 [0:2-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 2; i_26=i_26+1) begin : mk_array_4
    assign vecArray_4[(2-1)-i_26] = result_24[i_26*9+:9];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-1) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[6-1 -: 2];

  assign result_17 = c$case_scrut_10[1:1] ? c$case_scrut_9[0:0] : 1'b0;

  assign i_4 = c$case_scrut_10[0:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut1;

  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_13;



  assign c$app_arg_3 = {pOut1,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1};



  assign result_18 = c$app_arg_3[1-1:0];

  assign c$vec2_5 = (ws_5[9-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 3; i_27 = i_27 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_29[i_27*72+:72];
    wire [2:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_27*3+:3];
    wire [74:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_27*75+:75] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 3; i_28 = i_28 + 1) begin : imap_5
    wire [2-1:0] map_index_5;
    wire [74:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_28*75+:75];
    wire [2:0] map_out_5;

    assign map_index_5 = 2'd2 - i_28[0+:2];
    wire [2:0] c$case_alt_19;
    // spec.hs:294:1-63
    wire [7:0] t_15;
    // spec.hs:294:1-63
    wire [71:0] x_10;
    assign map_out_5 = c$case_alt_19;

    assign c$case_alt_19 = (t_15 == result_34[31:24]) ? {1'b1,map_index_5} : map_in_5[2:0];

    assign t_15 = x_10[71:64];

    assign x_10 = map_in_5[74:3];


    assign c$ws_app_arg_12[i_28*3+:3] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:3-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 3; i_29=i_29+1) begin : mk_array_5
    assign vecArray_5[(3-1)-i_29] = result_29[i_29*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-2) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[12-1 -: 3];

  assign result_19 = c$case_scrut_12[2:2] ? $signed(c$case_scrut_11[63:0]) : (64'sd0);

  assign i_5 = c$case_scrut_12[1:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  assign iterateI_ho1_0_arg0_2 = pOut0;

  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_18;



  assign c$app_arg_4 = {pOut0,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2};



  assign result_20 = c$app_arg_4[1-1:0];

  assign result_21 = b_0 ? t_0 : result_22;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_22_register
    if ( rst) begin
      result_22 <= {{8'd5,   1'b0},   {8'd5,   1'b0}};
    end else if (en) begin
      result_22 <= result_21;
    end
  end
  // register end

  assign b_0 = result_45;

  assign t_projection_6 = ({result_22,{result_36[15:8],   ((x_0 - y)) < (-64'sd5)}});

  assign t_0 = t_projection_6[17:0];

  assign x_0 = result_27;

  assign y = result_25;

  assign result_23 = b_1 ? t_1 : result_24;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_24_register
    if ( rst) begin
      result_24 <= {{8'd5,   1'b0},   {8'd5,   1'b0}};
    end else if (en) begin
      result_24 <= result_23;
    end
  end
  // register end

  assign b_1 = result_46;

  assign t_projection_7 = ({result_24,{result_36[23:16],   ((x_1 - y_0)) > (64'sd5)}});

  assign t_1 = t_projection_7[17:0];

  assign x_1 = result_27;

  assign y_0 = result_25;

  assign c$vec2_6 = (ws_6[9-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 3; i_30 = i_30 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_29[i_30*72+:72];
    wire [2:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_30*3+:3];
    wire [74:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_30*75+:75] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 3; i_31 = i_31 + 1) begin : imap_6
    wire [2-1:0] map_index_6;
    wire [74:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_31*75+:75];
    wire [2:0] map_out_6;

    assign map_index_6 = 2'd2 - i_31[0+:2];
    wire [2:0] c$case_alt_20;
    // spec.hs:294:1-63
    wire [7:0] t_16;
    // spec.hs:294:1-63
    wire [71:0] x_11;
    assign map_out_6 = c$case_alt_20;

    assign c$case_alt_20 = (t_16 == result_26) ? {1'b1,map_index_6} : map_in_6[2:0];

    assign t_16 = x_11[71:64];

    assign x_11 = map_in_6[74:3];


    assign c$ws_app_arg_14[i_31*3+:3] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:3-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 3; i_32=i_32+1) begin : mk_array_6
    assign vecArray_6[(3-1)-i_32] = result_29[i_32*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-2) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[12-1 -: 3];

  assign result_25 = c$case_scrut_14[2:2] ? $signed(c$case_scrut_13[63:0]) : result_27;

  assign result_26 = (result_36[31:24] > 8'd1) ? c$app_arg_5 : (c$app_arg_5 + 8'd4);

  assign c$app_arg_5 = result_36[31:24] - 8'd1;

  assign i_6 = c$case_scrut_14[1:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,2'bxx}};

  assign c$vec2_7 = (ws_7[9-1 : 0]);

  // zipWith start
  genvar i_33;
  generate
  for (i_33 = 0; i_33 < 3; i_33 = i_33 + 1) begin : zipWith_7
    wire [71:0] zipWith_in1_7;
    assign zipWith_in1_7 = result_29[i_33*72+:72];
    wire [2:0] zipWith_in2_7;
    assign zipWith_in2_7 = c$vec2_7[i_33*3+:3];
    wire [74:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_15[i_33*75+:75] = c$n_7;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_34;
  generate
  for (i_34=0; i_34 < 3; i_34 = i_34 + 1) begin : imap_7
    wire [2-1:0] map_index_7;
    wire [74:0] map_in_7;
    assign map_in_7 = c$ws_app_arg_15[i_34*75+:75];
    wire [2:0] map_out_7;

    assign map_index_7 = 2'd2 - i_34[0+:2];
    wire [2:0] c$case_alt_21;
    // spec.hs:294:1-63
    wire [7:0] t_17;
    // spec.hs:294:1-63
    wire [71:0] x_12;
    assign map_out_7 = c$case_alt_21;

    assign c$case_alt_21 = (t_17 == result_36[31:24]) ? {1'b1,map_index_7} : map_in_7[2:0];

    assign t_17 = x_12[71:64];

    assign x_12 = map_in_7[74:3];


    assign c$ws_app_arg_16[i_34*3+:3] = map_out_7;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_7 [0:3-1];
  genvar i_35;
  generate
  for (i_35=0; i_35 < 3; i_35=i_35+1) begin : mk_array_7
    assign vecArray_7[(3-1)-i_35] = result_29[i_35*72+:72];
  end
  endgenerate
  assign c$case_scrut_15 = vecArray_7[($unsigned({{(64-2) {1'b0}},i_7}))];
  // index end

  assign c$case_scrut_16 = ws_7[12-1 -: 3];

  assign result_27 = c$case_scrut_16[2:2] ? $signed(c$case_scrut_15[63:0]) : (64'sd0);

  assign i_7 = c$case_scrut_16[1:0];

  assign ws_7 = {c$ws_app_arg_16,{1'b0,2'bxx}};

  assign result_28 = b_2 ? t_2 : result_29;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_29 <= result_28;
    end
  end
  // register end

  assign b_2 = result_47;

  assign t_projection_10 = ({result_29,{result_32[31:24],   c$out0_case_alt}});

  assign t_2 = t_projection_10[215:0];

  assign c$out0_case_alt = (tag == 8'd5) ? (64'sd0) : dta;

  assign dta = $signed(result_31[63:0]);

  assign tag = result_31[71:64];

  assign result_30 = b_3 ? {t_7,
                            c$ds_app_arg} : result_31;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_31_register
    if ( rst) begin
      result_31 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_31 <= result_30;
    end
  end
  // register end

  assign b_3 = result_48;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(result_51[69:6]);
    end
  end
  // delay end

  wire [39:0] iterateI_ho1_0_arg0_3;
  wire [39:0] iterateI_ho1_0_res_3;
  assign iterateI_ho1_0_arg0_3 = {t_7,   t_6,
                                  t_5,   t_4,   t_3};

  reg [39:0] c$bb_res_res_19 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_19;



  assign c$app_arg_6 = {{t_7,   t_6,   t_5,
                         t_4,   t_3},   iterateI_ho1_0_res_3};



  assign result_32 = c$app_arg_6[40-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_23;



  assign c$app_arg_7 = {pOut3,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3};



  assign result_33 = c$app_arg_7[1-1:0];

  wire [39:0] iterateI_ho1_0_arg0_4;
  wire [39:0] iterateI_ho1_0_res_5;
  wire [39:0] iterateI_ho1_1_res_4;
  wire [39:0] iterateI_ho1_2_res_4;
  wire [39:0] iterateI_ho1_3_res_4;
  assign iterateI_ho1_0_arg0_4 = {t_7,   t_6,
                                  t_5,   t_4,   t_3};

  reg [39:0] c$bb_res_res_24 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_24;



  reg [39:0] c$bb_res_res_25 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_25;



  reg [39:0] c$bb_res_res_26 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_26;



  reg [39:0] c$bb_res_res_27 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_27;



  assign c$app_arg_8 = {{t_7,   t_6,   t_5,
                         t_4,   t_3},   iterateI_ho1_0_res_5,
                        iterateI_ho1_1_res_4,   iterateI_ho1_2_res_4,
                        iterateI_ho1_3_res_4};



  assign result_34 = c$app_arg_8[40-1:0];

  wire [39:0] iterateI_ho1_0_arg0_5;
  wire [39:0] iterateI_ho1_0_res_6;
  wire [39:0] iterateI_ho1_1_res_5;
  wire [39:0] iterateI_ho1_2_res_5;
  assign iterateI_ho1_0_arg0_5 = {t_7,   t_6,
                                  t_5,   t_4,   t_3};

  reg [39:0] c$bb_res_res_28 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_28;



  reg [39:0] c$bb_res_res_29 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_29;



  reg [39:0] c$bb_res_res_30 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_30;



  assign c$app_arg_9 = {{t_7,   t_6,   t_5,
                         t_4,   t_3},   iterateI_ho1_0_res_6,
                        iterateI_ho1_1_res_5,   iterateI_ho1_2_res_5};



  assign result_35 = c$app_arg_9[40-1:0];

  wire [39:0] iterateI_ho1_0_arg0_6;
  wire [39:0] iterateI_ho1_0_res_7;
  wire [39:0] iterateI_ho1_1_res_6;
  assign iterateI_ho1_0_arg0_6 = {t_7,   t_6,
                                  t_5,   t_4,   t_3};

  reg [39:0] c$bb_res_res_31 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_31;



  reg [39:0] c$bb_res_res_32 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_32;



  assign c$app_arg_10 = {{t_7,   t_6,   t_5,
                          t_4,   t_3},   iterateI_ho1_0_res_7,
                         iterateI_ho1_1_res_6};



  assign result_36 = c$app_arg_10[40-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_37;
    end
  end
  // register end

  assign result_37 = pOut3 ? result_38 : t_3;

  assign b_4 = t_3 == 8'd4;

  assign f1 = t_3 + 8'd1;

  assign result_38 = b_4 ? 8'd1 : f1;

  assign pOut3 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_39;
    end
  end
  // register end

  assign result_39 = pOut2 ? result_40 : t_4;

  assign b_5 = t_4 == 8'd4;

  assign f1_0 = t_4 + 8'd1;

  assign result_40 = b_5 ? 8'd1 : f1_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_41;
    end
  end
  // register end

  assign result_41 = pOut1 ? result_42 : t_5;

  assign b_6 = t_5 == 8'd4;

  assign f1_1 = t_5 + 8'd1;

  assign result_42 = b_6 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_43;
    end
  end
  // register end

  assign result_43 = pOut0 ? result_44 : t_6;

  assign b_7 = t_6 == 8'd4;

  assign f1_2 = t_6 + 8'd1;

  assign result_44 = b_7 ? 8'd1 : f1_2;

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_6;
  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_35;



  assign c$app_arg_11 = {pOut2,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_7,
                         iterateI_ho1_2_res_6};



  assign result_45 = c$app_arg_11[1-1:0];

  assign pOut2 = pacings[1:1];

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_7;
  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_38;



  assign c$app_arg_12 = {pOut1,
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_7};



  assign result_46 = c$app_arg_12[1-1:0];

  assign pOut1 = pacings[2:2];

  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_9;
  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_40;



  assign c$app_arg_13 = {pOut0,
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_9};



  assign result_47 = c$app_arg_13[1-1:0];

  assign pOut0 = pacings[3:3];

  wire  iterateI_ho1_0_res_11;
  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= pIn0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_41;



  assign c$app_arg_14 = {pIn0,
                         iterateI_ho1_0_res_11};



  assign result_48 = c$app_arg_14[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_49;
    end
  end
  // register end

  assign result_49 = pIn0 ? result_50 : t_7;

  assign b_8 = t_7 == 8'd4;

  assign f1_3 = t_7 + 8'd1;

  assign result_50 = b_8 ? 8'd1 : f1_3;

  assign pIn0 = pacings[4:4];

  assign pacings = result_51[4:0];

  assign result_51 = {c$app_arg_17,
                      c$app_arg_16,   c$app_arg_15};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_15_register
    if ( rst) begin
      c$app_arg_15 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_15 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0}};

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [69:0] vecArray_8 [0:2-1];
  genvar i_36;
  generate
  for (i_36=0; i_36 < 2; i_36=i_36+1) begin : mk_array_8
    assign vecArray_8[(2-1)-i_36] = buffer[i_36*70+:70];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_8[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_16_register
    if ( rst) begin
      c$app_arg_16 <= 1'b0;
    end else if (en) begin
      c$app_arg_16 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_17_register
    if ( rst) begin
      c$app_arg_17 <= 1'b0;
    end else if (en) begin
      c$app_arg_17 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_2 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,
                                                                     1'b0},
                                                                    {1'b0,
                                                                     1'b0,
                                                                     1'b0,
                                                                     1'b0,
                                                                     1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[209:70] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[209:70];

  assign qData = result_4[69:0];

  assign x_2 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_2 + 64'sd1));

  assign c$tte_rhs_0 = (x_2 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_2)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_2 - 64'sd1);

  assign result = {result_5[75:5],   {qPush,
                                      qPop,   result_51[71:71],   qPopValid,
                                      result_5[4:0]}};

  assign qPopValid = result_51[70:70];

  assign qPush = result_4[70:70];

  assign qPop = result_5[76:76];

  assign result_0 = result[79:9];

  assign result_1 = result[8:0];

  assign result_0_0 = result_0[70:6];

  assign result_0_1 = result_0[5:4];

  assign result_0_2 = result_0[3:2];

  assign result_0_3 = result_0[1:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = result_0_1[1:1];

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = result_0_2[1:1];

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = result_0_3[1:1];

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[8:8];

  assign result_1_1 = result_1[7:7];

  assign result_1_2 = result_1[6:6];

  assign result_1_3 = result_1[5:5];

  assign result_1_4_13 = result_1[4:0];

  assign result_1_4_0 = result_1_4_13[4:4];

  assign result_1_4_1 = result_1_4_13[3:3];

  assign result_1_4_2 = result_1_4_13[2:2];

  assign result_1_4_3 = result_1_4_13[1:1];

  assign result_1_4_4 = result_1_4_13[0:0];


endmodule


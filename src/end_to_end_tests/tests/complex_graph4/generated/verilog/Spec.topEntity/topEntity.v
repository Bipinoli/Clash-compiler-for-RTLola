/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire signed [63:0] result_0_7_0
    , output wire  result_0_7_1
    , output wire signed [63:0] result_0_8_0
    , output wire  result_0_8_1
    , output wire signed [63:0] result_0_9_0
    , output wire  result_0_9_1
    , output wire signed [63:0] result_0_10_0
    , output wire  result_0_10_1
    , output wire signed [63:0] result_0_11_0
    , output wire  result_0_11_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_4_7_0
    , output wire  result_1_4_7_1
    , output wire  result_1_4_8_0
    , output wire  result_1_4_8_1
    , output wire  result_1_4_9_0
    , output wire  result_1_4_9_1
    , output wire  result_1_4_10
    , output wire  result_1_4_11
    , output wire  result_1_4_12
    , output wire  result_1_4_13
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [149:0] result_6;
  // spec.hs:305:1-82
  wire  pIn0;
  // spec.hs:305:1-82
  wire  pIn1;
  // spec.hs:305:1-82
  wire  timer0Over;
  // spec.hs:305:1-82
  wire  timer1Over;
  wire [799:0] result_7;
  wire [9:0] c$app_arg;
  wire  result_8;
  wire [9:0] c$app_arg_0;
  wire  result_9;
  wire [9:0] c$app_arg_1;
  wire  result_10;
  wire [9:0] c$app_arg_2;
  wire  result_11;
  wire [9:0] c$app_arg_3;
  wire  result_12;
  wire [9:0] c$app_arg_4;
  wire  result_13;
  wire [9:0] c$app_arg_5;
  wire  result_14;
  wire [9:0] c$app_arg_6;
  wire  result_15;
  // spec.hs:366:1-63
  wire [147:0] c$ws_app_arg;
  // spec.hs:366:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_16;
  // spec.hs:366:1-63
  wire [0:0] i;
  // spec.hs:366:1-63
  wire [5:0] ws;
  wire [9:0] c$app_arg_7;
  wire  result_17;
  wire [1151:0] c$app_arg_8;
  wire [127:0] result_18;
  wire [9:0] c$app_arg_9;
  wire  result_19;
  wire [9:0] c$app_arg_10;
  wire  result_20;
  wire [9:0] c$app_arg_11;
  wire  result_21;
  // spec.hs:750:1-157
  wire signed [63:0] y;
  // spec.hs:750:1-157
  wire signed [63:0] x_1;
  // spec.hs:750:1-157
  wire [127:0] win;
  // spec.hs:750:1-157
  reg [135:0] window = {8'd5,   {64'sd0,   64'sd0}};
  wire [135:0] result_22;
  // spec.hs:750:1-157
  wire [135:0] t;
  wire [127:0] result_23;
  // spec.hs:750:1-157
  wire [127:0] c$t_case_alt;
  // spec.hs:750:1-157
  wire [127:0] c$t_case_alt_0;
  // spec.hs:750:1-157
  wire [127:0] lastBucketUpdated;
  // spec.hs:750:1-157
  wire  b;
  // spec.hs:750:1-157
  wire  c$b_case_alt;
  // spec.hs:146:34-42
  wire  x1;
  // spec.hs:146:34-42
  wire  x0;
  // spec.hs:373:1-55
  wire signed [63:0] winData;
  wire [71:0] result_24;
  // spec.hs:146:34-42
  wire  x0_0;
  // spec.hs:146:34-42
  wire  x1_0;
  // spec.hs:682:1-183
  reg [71:0] result_25 = {8'd5,   64'sd0};
  // spec.hs:682:1-183
  wire [71:0] t_0;
  wire signed [63:0] x_2;
  wire signed [63:0] y_0;
  wire signed [63:0] x_3;
  wire signed [63:0] x_4;
  wire signed [63:0] y_1;
  wire signed [63:0] y_2;
  // spec.hs:400:1-112
  wire signed [63:0] c$out5_case_alt;
  // spec.hs:379:1-53
  wire signed [63:0] dta;
  // spec.hs:379:1-53
  wire [7:0] tag;
  wire [71:0] result_26;
  // spec.hs:148:34-42
  wire  x0_1;
  // spec.hs:148:34-42
  wire  x1_1;
  // spec.hs:698:1-165
  reg [71:0] result_27 = {8'd5,   64'sd0};
  // spec.hs:698:1-165
  wire [71:0] t_1;
  wire signed [63:0] x_5;
  wire signed [63:0] y_3;
  wire signed [63:0] x_6;
  wire signed [63:0] y_4;
  // spec.hs:400:1-112
  wire signed [63:0] c$out7_case_alt;
  // spec.hs:387:1-46
  wire signed [63:0] dta_0;
  // spec.hs:387:1-46
  wire [7:0] tag_0;
  wire [71:0] result_28;
  // spec.hs:730:1-165
  reg [71:0] result_29 = {8'd5,   64'sd0};
  // spec.hs:730:1-165
  wire  b_0;
  // spec.hs:730:1-165
  wire [71:0] t_2;
  wire signed [63:0] x_7;
  wire signed [63:0] y_5;
  // spec.hs:400:1-112
  wire signed [63:0] c$out7_case_alt_0;
  wire signed [63:0] y_6;
  wire signed [63:0] x_8;
  // spec.hs:400:1-112
  wire signed [63:0] c$out7_case_alt_1;
  // spec.hs:379:1-53
  wire signed [63:0] dta_1;
  // spec.hs:379:1-53
  wire [7:0] tag_1;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch;
  wire [9:0] c$app_arg_12;
  wire [1:0] result_30;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:400:1-112
  wire signed [63:0] c$out5_case_alt_0;
  // spec.hs:373:1-55
  wire [7:0] winTag;
  wire [7:0] result_31;
  wire [7:0] c$app_arg_13;
  // spec.hs:400:1-112
  wire signed [63:0] c$out5_case_alt_1;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_1;
  // spec.hs:400:1-112
  wire signed [63:0] c$out5_case_alt_2;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_2;
  wire [11:0] c$app_arg_14;
  wire [1:0] result_32;
  wire [767:0] c$app_arg_15;
  wire [127:0] result_33;
  wire [6:0] c$app_arg_16;
  wire  result_34;
  wire [13:0] c$app_arg_17;
  wire [1:0] result_35;
  // spec.hs:768:1-157
  wire signed [63:0] y_7;
  // spec.hs:768:1-157
  wire signed [63:0] x_9;
  // spec.hs:768:1-157
  wire [127:0] win_0;
  // spec.hs:768:1-157
  reg [135:0] window_0 = {8'd5,   {64'sd0,   64'sd0}};
  wire [135:0] result_36;
  // spec.hs:768:1-157
  wire [135:0] t_3;
  wire [127:0] result_37;
  // spec.hs:768:1-157
  wire [127:0] c$t_case_alt_1;
  // spec.hs:768:1-157
  wire [127:0] c$t_case_alt_2;
  // spec.hs:768:1-157
  wire [127:0] lastBucketUpdated_0;
  // spec.hs:768:1-157
  wire  b_1;
  // spec.hs:142:34-42
  wire  x_10;
  wire [4:0] c$app_arg_18;
  wire  result_38;
  // spec.hs:400:1-112
  wire [1:0] slides;
  wire [4:0] c$app_arg_19;
  wire  result_39;
  wire [7:0] c$app_arg_20;
  wire  result_40;
  wire [71:0] result_41;
  // spec.hs:147:34-42
  wire  x0_2;
  // spec.hs:147:34-42
  wire  x1_2;
  // spec.hs:690:1-165
  reg [71:0] result_42 = {8'd5,   64'sd0};
  // spec.hs:690:1-165
  wire [71:0] t_4;
  wire signed [63:0] x_11;
  wire signed [63:0] y_8;
  wire signed [63:0] x_12;
  wire signed [63:0] y_9;
  // spec.hs:400:1-112
  wire signed [63:0] c$out6_case_alt;
  // spec.hs:379:1-53
  wire signed [63:0] dta_2;
  // spec.hs:379:1-53
  wire [7:0] tag_2;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_3;
  // spec.hs:400:1-112
  wire signed [63:0] c$out6_case_alt_0;
  // spec.hs:379:1-53
  wire [7:0] tag_3;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_4;
  // spec.hs:400:1-112
  wire signed [63:0] c$out6_case_alt_1;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_5;
  wire [5:0] c$app_arg_21;
  wire [1:0] result_43;
  wire [71:0] result_44;
  // spec.hs:149:34-42
  wire  x_13;
  // spec.hs:706:1-165
  reg [71:0] result_45 = {8'd5,   64'sd0};
  // spec.hs:706:1-165
  wire [71:0] t_5;
  wire signed [63:0] x_14;
  wire signed [63:0] y_10;
  wire signed [63:0] x_15;
  wire signed [63:0] y_11;
  // spec.hs:400:1-112
  wire signed [63:0] c$out8_case_alt;
  // spec.hs:387:1-46
  wire signed [63:0] dta_3;
  // spec.hs:400:1-112
  wire  c$out8_case_scrut;
  // spec.hs:387:1-46
  wire [7:0] tag_4;
  // spec.hs:400:1-112
  wire signed [63:0] c$out8_case_alt_0;
  // spec.hs:400:1-112
  wire signed [63:0] c$out8_case_alt_1;
  // spec.hs:373:1-55
  wire signed [63:0] winData_0;
  // spec.hs:373:1-55
  wire [7:0] winTag_0;
  wire [7:0] result_46;
  wire [7:0] c$app_arg_22;
  wire [1:0] c$app_arg_23;
  wire  result_47;
  wire [71:0] result_48;
  // spec.hs:635:1-127
  reg [71:0] result_49 = {8'd5,   64'sd0};
  // spec.hs:635:1-127
  wire  b_2;
  // spec.hs:400:1-112
  reg signed [63:0] c$input1Win_app_arg = (64'sd0);
  wire [1:0] c$app_arg_24;
  wire  result_50;
  // spec.hs:379:1-53
  wire [7:0] tag_5;
  wire [71:0] result_51;
  // spec.hs:141:34-42
  wire  x_16;
  // spec.hs:641:1-147
  reg [71:0] result_52 = {8'd5,   64'sd0};
  // spec.hs:641:1-147
  wire [71:0] t_6;
  wire signed [63:0] x_17;
  wire signed [63:0] y_12;
  // spec.hs:400:1-112
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:373:1-55
  wire signed [63:0] winData_1;
  // spec.hs:373:1-55
  wire [7:0] winTag_1;
  wire [71:0] result_53;
  // spec.hs:143:34-42
  wire  x_18;
  // spec.hs:657:1-129
  reg [71:0] result_54 = {8'd5,   64'sd0};
  // spec.hs:657:1-129
  wire [71:0] t_7;
  wire signed [63:0] x_19;
  wire [7:0] result_55;
  wire [7:0] c$app_arg_25;
  // spec.hs:373:1-55
  wire [7:0] tag_6;
  // spec.hs:358:1-65
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:358:1-65
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_56;
  wire [7:0] result_57;
  wire [7:0] c$app_arg_26;
  // spec.hs:358:1-65
  wire [1:0] i_0;
  // spec.hs:358:1-65
  wire [11:0] ws_0;
  wire [71:0] result_58;
  // spec.hs:145:34-42
  wire  x_20;
  // spec.hs:674:1-147
  reg [71:0] result_59 = {8'd5,   64'sd0};
  // spec.hs:674:1-147
  wire [71:0] t_8;
  wire signed [63:0] x_21;
  wire signed [63:0] y_13;
  // spec.hs:358:1-65
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:358:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_60;
  wire [7:0] result_61;
  wire [7:0] c$app_arg_27;
  // spec.hs:358:1-65
  wire [0:0] i_1;
  // spec.hs:358:1-65
  wire [5:0] ws_1;
  wire [143:0] result_62;
  // spec.hs:144:34-42
  wire  x_22;
  // spec.hs:665:1-137
  reg [143:0] result_63 = {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:665:1-137
  wire [143:0] t_9;
  wire signed [63:0] x_23;
  wire [3:0] c$app_arg_28;
  wire  result_64;
  // spec.hs:400:1-112
  wire signed [63:0] c$out4_case_alt;
  // spec.hs:373:1-55
  wire signed [63:0] winData_2;
  // spec.hs:373:1-55
  wire [7:0] winTag_2;
  wire [71:0] result_65;
  // spec.hs:142:34-42
  wire  x_24;
  // spec.hs:649:1-147
  reg [71:0] result_66 = {8'd5,   64'sd0};
  // spec.hs:649:1-147
  wire [71:0] t_10;
  wire signed [63:0] x_25;
  wire signed [63:0] y_14;
  // spec.hs:400:1-112
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:379:1-53
  wire signed [63:0] dta_4;
  // spec.hs:366:1-63
  wire [224:0] c$ws_app_arg_5;
  // spec.hs:366:1-63
  wire [8:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire signed [63:0] result_67;
  // spec.hs:366:1-63
  wire [1:0] i_2;
  // spec.hs:366:1-63
  wire [11:0] ws_2;
  wire [3:0] c$app_arg_29;
  wire  result_68;
  wire [7:0] result_69;
  wire [7:0] c$app_arg_30;
  wire [1:0] c$app_arg_31;
  wire  result_70;
  wire [2:0] c$app_arg_32;
  wire  result_71;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_6;
  wire [3:0] c$app_arg_33;
  wire  result_72;
  wire [215:0] result_73;
  // spec.hs:630:1-135
  reg [215:0] result_74 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:630:1-135
  wire  b_3;
  // spec.hs:630:1-135
  wire [215:0] t_11;
  // spec.hs:400:1-112
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  // spec.hs:400:1-112
  wire [129:0] inputs_2;
  wire [1:0] c$app_arg_34;
  wire  result_75;
  wire [71:0] result_76;
  // spec.hs:722:1-131
  reg [71:0] result_77 = {8'd5,   64'sd0};
  // spec.hs:722:1-131
  wire  b_4;
  // spec.hs:722:1-131
  wire [71:0] t_12;
  wire signed [63:0] x_26;
  // spec.hs:400:1-112
  wire signed [63:0] c$out10_case_alt;
  // spec.hs:379:1-53
  wire [7:0] tagToMatch_7;
  wire [8:0] c$app_arg_35;
  wire  result_78;
  wire [1023:0] c$app_arg_36;
  wire [127:0] result_79;
  // spec.hs:373:1-55
  wire [7:0] winTag_3;
  wire [71:0] result_80;
  // spec.hs:714:1-129
  reg [71:0] result_81 = {8'd5,   64'sd0};
  // spec.hs:714:1-129
  wire  b_5;
  // spec.hs:714:1-129
  wire [71:0] t_13;
  wire signed [63:0] x_27;
  // spec.hs:400:1-112
  wire signed [63:0] c$out9_case_alt;
  // spec.hs:373:1-55
  wire signed [63:0] winData_3;
  wire [7:0] result_82;
  wire [7:0] c$app_arg_37;
  wire [7:0] c$app_arg_38;
  wire  result_83;
  wire [895:0] c$app_arg_39;
  wire [127:0] result_84;
  wire [639:0] c$app_arg_40;
  wire [127:0] result_85;
  wire [511:0] c$app_arg_41;
  wire [127:0] result_86;
  wire [383:0] c$app_arg_42;
  wire [127:0] result_87;
  wire [255:0] c$app_arg_43;
  wire [127:0] result_88;
  // spec.hs:614:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_89;
  // spec.hs:614:9-81
  wire  b_6;
  // spec.hs:614:9-81
  wire [7:0] f1;
  wire [7:0] result_90;
  // spec.hs:400:1-112
  wire  pOut11;
  // spec.hs:614:9-81
  reg [7:0] t_15 = 8'd1;
  wire [7:0] result_91;
  // spec.hs:614:9-81
  wire  b_7;
  // spec.hs:614:9-81
  wire [7:0] f1_0;
  wire [7:0] result_92;
  // spec.hs:400:1-112
  wire  pOut10;
  // spec.hs:614:9-81
  reg [7:0] t_16 = 8'd1;
  wire [7:0] result_93;
  // spec.hs:614:9-81
  wire  b_8;
  // spec.hs:614:9-81
  wire [7:0] f1_1;
  wire [7:0] result_94;
  // spec.hs:400:1-112
  wire  pOut9;
  // spec.hs:614:9-81
  reg [7:0] t_17 = 8'd1;
  wire [7:0] result_95;
  // spec.hs:614:9-81
  wire  b_9;
  // spec.hs:614:9-81
  wire [7:0] f1_2;
  wire [7:0] result_96;
  // spec.hs:400:1-112
  wire  c$ds11_case_alt;
  // spec.hs:148:34-42
  wire  x1_3;
  // spec.hs:148:34-42
  wire  x0_3;
  // spec.hs:400:1-112
  wire [1:0] pOut7;
  // spec.hs:614:9-81
  reg [7:0] t_18 = 8'd1;
  wire [7:0] result_97;
  // spec.hs:614:9-81
  wire  b_10;
  // spec.hs:614:9-81
  wire [7:0] f1_3;
  wire [7:0] result_98;
  // spec.hs:400:1-112
  wire  c$ds10_case_alt;
  // spec.hs:147:34-42
  wire  x1_4;
  // spec.hs:147:34-42
  wire  x0_4;
  // spec.hs:400:1-112
  wire [1:0] pOut6;
  // spec.hs:614:9-81
  reg [7:0] t_19 = 8'd1;
  wire [7:0] result_99;
  // spec.hs:614:9-81
  wire  b_11;
  // spec.hs:614:9-81
  wire [7:0] f1_4;
  wire [7:0] result_100;
  // spec.hs:400:1-112
  wire  c$ds9_case_alt;
  // spec.hs:146:34-42
  wire  x1_5;
  // spec.hs:146:34-42
  wire  x0_5;
  // spec.hs:400:1-112
  wire [1:0] pOut5;
  // spec.hs:614:9-81
  reg [7:0] t_20 = 8'd1;
  wire [7:0] result_101;
  // spec.hs:614:9-81
  wire  b_12;
  // spec.hs:614:9-81
  wire [7:0] f1_5;
  wire [7:0] result_102;
  // spec.hs:143:34-42
  wire  x_28;
  // spec.hs:400:1-112
  wire  pOut2;
  // spec.hs:614:9-81
  reg [7:0] t_21 = 8'd1;
  wire [7:0] result_103;
  // spec.hs:614:9-81
  wire  b_13;
  // spec.hs:614:9-81
  wire [7:0] f1_6;
  wire [7:0] result_104;
  // spec.hs:141:34-42
  wire  x_29;
  // spec.hs:400:1-112
  wire  pOut0;
  // spec.hs:614:9-81
  reg [7:0] t_22 = 8'd1;
  wire [7:0] result_105;
  // spec.hs:614:9-81
  wire  b_14;
  // spec.hs:614:9-81
  wire [7:0] f1_7;
  wire [7:0] result_106;
  // spec.hs:149:34-42
  wire  x_30;
  // spec.hs:400:1-112
  wire  pOut8;
  // spec.hs:614:9-81
  reg [7:0] t_23 = 8'd1;
  wire [7:0] result_107;
  // spec.hs:614:9-81
  wire  b_15;
  // spec.hs:614:9-81
  wire [7:0] f1_8;
  wire [7:0] result_108;
  // spec.hs:145:34-42
  wire  x_31;
  // spec.hs:400:1-112
  wire  pOut4;
  // spec.hs:614:9-81
  reg [7:0] t_24 = 8'd1;
  wire [7:0] result_109;
  // spec.hs:614:9-81
  wire  b_16;
  // spec.hs:614:9-81
  wire [7:0] f1_9;
  wire [7:0] result_110;
  // spec.hs:144:34-42
  wire  x_32;
  // spec.hs:400:1-112
  wire  pOut3;
  // spec.hs:614:9-81
  reg [7:0] t_25 = 8'd1;
  wire [7:0] result_111;
  // spec.hs:614:9-81
  wire  b_17;
  // spec.hs:614:9-81
  wire [7:0] f1_10;
  wire [7:0] result_112;
  // spec.hs:142:34-42
  wire  x_33;
  // spec.hs:400:1-112
  wire  pOut1;
  // spec.hs:614:9-81
  reg [7:0] t_26 = 8'd1;
  wire [7:0] result_113;
  // spec.hs:614:9-81
  wire  b_18;
  // spec.hs:614:9-81
  wire [7:0] f1_11;
  wire [7:0] result_114;
  // spec.hs:400:1-112
  wire  pIn1_0;
  // spec.hs:614:9-81
  reg [7:0] t_27 = 8'd1;
  wire [7:0] result_115;
  // spec.hs:614:9-81
  wire  b_19;
  // spec.hs:614:9-81
  wire [7:0] f1_12;
  wire [7:0] result_116;
  // spec.hs:400:1-112
  wire  pIn0_0;
  // spec.hs:400:1-112
  wire [16:0] pacings;
  // spec.hs:621:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_117;
  wire signed [63:0] result_118;
  // spec.hs:621:1-81
  wire  b_20;
  wire signed [63:0] result_119;
  wire signed [63:0] x_34;
  wire  result_120;
  // spec.hs:400:1-112
  wire  b_21;
  wire [150:0] result_121;
  reg [148:0] c$app_arg_44 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   {1'b0,
                                                                       1'b0},
                                                              {1'b0,   1'b0},
                                                              {1'b0,   1'b0},
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0}};
  wire [148:0] c$case_alt;
  wire [148:0] c$case_alt_0;
  wire [148:0] c$case_alt_1;
  reg [148:0] c$case_alt_2;
  reg [148:0] c$case_alt_3;
  wire [148:0] c$case_alt_4;
  reg  c$app_arg_45 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_46 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:236:1-78
  reg [1340:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   {1'b0,
                                                                        1'b0},
                                                               {1'b0,   1'b0},
                                                               {1'b0,   1'b0},
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}}};
  // spec.hs:236:1-78
  wire [1340:0] c$buffer_case_alt;
  // spec.hs:236:1-78
  wire [1340:0] c$buffer_case_alt_0;
  // spec.hs:236:1-78
  wire [1340:0] c$buffer_case_alt_1;
  // spec.hs:236:1-78
  wire [148:0] qData;
  // spec.hs:236:1-78
  wire signed [63:0] x_35;
  // spec.hs:236:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:236:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:236:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:236:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:236:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:236:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:236:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:236:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:791:1-136
  wire  qPopValid;
  // spec.hs:791:1-136
  wire  qPush;
  // spec.hs:791:1-136
  wire  qPop;
  wire [129:0] inputs;
  wire [3:0] c$vec2;
  wire signed [63:0] x_projection_2;
  wire [191:0] c$t_case_alt_sel_alt_t_0;
  wire [191:0] c$t_case_alt_sel_alt_f_0;
  wire signed [63:0] x_projection_4;
  wire signed [63:0] x_projection_5;
  wire signed [63:0] x_projection_7;
  wire [127:0] c$vec;
  wire [63:0] x_projection_9;
  wire [127:0] c$vec_0;
  wire [63:0] y_projection_6;
  wire signed [63:0] x_projection_11;
  wire [191:0] c$t_case_alt_sel_alt_t_3;
  wire [191:0] c$t_case_alt_sel_alt_f_3;
  wire signed [63:0] x_projection_13;
  wire signed [63:0] x_projection_17;
  wire [8:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire [8:0] c$vec2_2;
  wire [287:0] t_projection_4;
  wire signed [63:0] c$tte_rhs;
  wire [1489:0] c$buffer_case_alt_sel_alt_t_1;
  wire [1489:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [802:0] result;
  wire [779:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [64:0] result_0_7;
  wire [64:0] result_0_8;
  wire [64:0] result_0_9;
  wire [64:0] result_0_10;
  wire [64:0] result_0_11;
  wire [22:0] result_1;
  wire [16:0] result_1_4;
  wire [1:0] result_1_4_7;
  wire [1:0] result_1_4_8;
  wire [1:0] result_1_4_9;
  wire [1:0] result_1_5;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {inputs[65:65] | (inputs[0:0] | (timer0Over | timer1Over)),
                     {inputs,   {timer0Over,   timer1Over},
                      {pIn0,   pIn1,   pIn0,   pIn0,   pIn0,   pIn0,
                       pIn0,   {pIn0,   pIn1},   {pIn0,   pIn1},
                       {pIn0,   pIn1},   pIn1,   timer0Over,
                       timer0Over,   timer1Over}}};

  assign pIn0 = inputs[65:65];

  assign pIn1 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd1000000);

  assign timer1Over = result_3 >= (64'sd2000000);

  assign result_7 = {{result_117 & (~ result_120),
                      {{dta_4,   result_21},   {winData_2,
                                                result_20},   {winData_1,   result_19},
                       {result_16,   result_17},
                       {$signed(result_59[63:0]),   result_15},
                       {winData,   result_14},   {dta_1,
                                                  result_13},   {dta,   result_12},   {dta_2,
                                                                                       result_11},   {winData_3,
                                                                                                      result_10},
                       {dta_3,   result_9},   {dta_0,   result_8}}},
                     {pacings,   slides}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  wire  iterateI_ho1_6_res;
  wire  iterateI_ho1_7_res;
  wire  iterateI_ho1_8_res;
  assign iterateI_ho1_0_arg0 = pOut11;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_5_res;
    end
  end
  // delay end

  assign iterateI_ho1_6_res = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_6_res;
    end
  end
  // delay end

  assign iterateI_ho1_7_res = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_7_res;
    end
  end
  // delay end

  assign iterateI_ho1_8_res = c$bb_res_res_7;



  assign c$app_arg = {pOut11,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res,
                      iterateI_ho1_6_res,   iterateI_ho1_7_res,
                      iterateI_ho1_8_res};



  assign result_8 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  wire  iterateI_ho1_6_res_0;
  wire  iterateI_ho1_7_res_0;
  wire  iterateI_ho1_8_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut10;

  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_5_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_0 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_6_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_0 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_7_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_0 = c$bb_res_res_16;



  assign c$app_arg_0 = {pOut10,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0,
                        iterateI_ho1_6_res_0,   iterateI_ho1_7_res_0,
                        iterateI_ho1_8_res_0};



  assign result_9 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  wire  iterateI_ho1_6_res_1;
  wire  iterateI_ho1_7_res_1;
  wire  iterateI_ho1_8_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut9;

  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_5_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_1 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_6_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_1 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_7_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_1 = c$bb_res_res_25;



  assign c$app_arg_1 = {pOut9,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_1,
                        iterateI_ho1_6_res_1,   iterateI_ho1_7_res_1,
                        iterateI_ho1_8_res_1};



  assign result_10 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  wire  iterateI_ho1_5_res_2;
  wire  iterateI_ho1_6_res_2;
  wire  iterateI_ho1_7_res_2;
  wire  iterateI_ho1_8_res_2;
  assign iterateI_ho1_0_arg0_2 = x_30;

  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_4_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_5_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_2 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_6_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_2 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_7_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_2 = c$bb_res_res_34;



  assign c$app_arg_2 = {x_30,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2,   iterateI_ho1_5_res_2,
                        iterateI_ho1_6_res_2,   iterateI_ho1_7_res_2,
                        iterateI_ho1_8_res_2};



  assign result_11 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_3;
  wire  iterateI_ho1_6_res_3;
  wire  iterateI_ho1_7_res_3;
  wire  iterateI_ho1_8_res_3;
  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= c$ds11_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_5_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_3 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_6_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_3 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_7_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_3 = c$bb_res_res_43;



  assign c$app_arg_3 = {c$ds11_case_alt,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_3,
                        iterateI_ho1_6_res_3,   iterateI_ho1_7_res_3,
                        iterateI_ho1_8_res_3};



  assign result_12 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_4;
  wire  iterateI_ho1_6_res_4;
  wire  iterateI_ho1_7_res_4;
  wire  iterateI_ho1_8_res_4;
  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= c$ds10_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_5_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_4 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_6_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_4 = c$bb_res_res_51;



  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_7_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_4 = c$bb_res_res_52;



  assign c$app_arg_4 = {c$ds10_case_alt,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4,   iterateI_ho1_5_res_4,
                        iterateI_ho1_6_res_4,   iterateI_ho1_7_res_4,
                        iterateI_ho1_8_res_4};



  assign result_13 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_5;
  wire  iterateI_ho1_5_res_5;
  wire  iterateI_ho1_6_res_5;
  wire  iterateI_ho1_7_res_5;
  wire  iterateI_ho1_8_res_5;
  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= c$ds9_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_57;



  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_4_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_5 = c$bb_res_res_58;



  reg  c$bb_res_res_59 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_5_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_5 = c$bb_res_res_59;



  reg  c$bb_res_res_60 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_6_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_5 = c$bb_res_res_60;



  reg  c$bb_res_res_61 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_7_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_5 = c$bb_res_res_61;



  assign c$app_arg_5 = {c$ds9_case_alt,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_5,   iterateI_ho1_5_res_5,
                        iterateI_ho1_6_res_5,   iterateI_ho1_7_res_5,
                        iterateI_ho1_8_res_5};



  assign result_14 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_6;
  wire  iterateI_ho1_5_res_6;
  wire  iterateI_ho1_6_res_6;
  wire  iterateI_ho1_7_res_6;
  wire  iterateI_ho1_8_res_6;
  assign iterateI_ho1_0_arg0_3 = x_31;

  reg  c$bb_res_res_62 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_62;



  reg  c$bb_res_res_63 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_63;



  reg  c$bb_res_res_64 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_64;



  reg  c$bb_res_res_65 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_65;



  reg  c$bb_res_res_66 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_66;



  reg  c$bb_res_res_67 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= iterateI_ho1_4_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_6 = c$bb_res_res_67;



  reg  c$bb_res_res_68 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= iterateI_ho1_5_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_6 = c$bb_res_res_68;



  reg  c$bb_res_res_69 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_6_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_6 = c$bb_res_res_69;



  reg  c$bb_res_res_70 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= iterateI_ho1_7_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_6 = c$bb_res_res_70;



  assign c$app_arg_6 = {x_31,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_6,   iterateI_ho1_5_res_6,
                        iterateI_ho1_6_res_6,   iterateI_ho1_7_res_6,
                        iterateI_ho1_8_res_6};



  assign result_15 = c$app_arg_6[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_3;
  generate
  for (i_3 = 0; i_3 < 2; i_3 = i_3 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_63[i_3*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_3*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_3*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4 = i_4 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_4*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_4[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:366:1-63
    wire [7:0] t_28;
    // spec.hs:366:1-63
    wire [71:0] x_37;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_28 == result_18[87:80]) ? {1'b1,map_index} : map_in[1:0];

    assign t_28 = x_37[71:64];

    assign x_37 = map_in[73:2];


    assign c$ws_app_arg_0[i_4*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_5;
  generate
  for (i_5=0; i_5 < 2; i_5=i_5+1) begin : mk_array
    assign vecArray[(2-1)-i_5] = result_63[i_5*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_16 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  wire  iterateI_ho1_4_res_7;
  wire  iterateI_ho1_5_res_7;
  wire  iterateI_ho1_6_res_7;
  wire  iterateI_ho1_7_res_7;
  wire  iterateI_ho1_8_res_7;
  assign iterateI_ho1_0_arg0_4 = x_32;

  reg  c$bb_res_res_71 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_71;



  reg  c$bb_res_res_72 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_72;



  reg  c$bb_res_res_73 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_73;



  reg  c$bb_res_res_74 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_74;



  reg  c$bb_res_res_75 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_75;



  reg  c$bb_res_res_76 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= iterateI_ho1_4_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_7 = c$bb_res_res_76;



  reg  c$bb_res_res_77 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= iterateI_ho1_5_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_7 = c$bb_res_res_77;



  reg  c$bb_res_res_78 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= iterateI_ho1_6_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_7 = c$bb_res_res_78;



  reg  c$bb_res_res_79 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_7_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_7 = c$bb_res_res_79;



  assign c$app_arg_7 = {x_32,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7,
                        iterateI_ho1_4_res_7,   iterateI_ho1_5_res_7,
                        iterateI_ho1_6_res_7,   iterateI_ho1_7_res_7,
                        iterateI_ho1_8_res_7};



  assign result_17 = c$app_arg_7[1-1:0];

  wire [127:0] iterateI_ho1_0_arg0_5;
  wire [127:0] iterateI_ho1_0_res_8;
  wire [127:0] iterateI_ho1_1_res_8;
  wire [127:0] iterateI_ho1_2_res_8;
  wire [127:0] iterateI_ho1_3_res_8;
  wire [127:0] iterateI_ho1_4_res_8;
  wire [127:0] iterateI_ho1_5_res_8;
  wire [127:0] iterateI_ho1_6_res_8;
  wire [127:0] iterateI_ho1_7_res_8;
  assign iterateI_ho1_0_arg0_5 = {t_27,   t_26,
                                  t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                  t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                  t_19,   t_25};

  reg [127:0] c$bb_res_res_80 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_80;



  reg [127:0] c$bb_res_res_81 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_81;



  reg [127:0] c$bb_res_res_82 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_82;



  reg [127:0] c$bb_res_res_83 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_83;



  reg [127:0] c$bb_res_res_84 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_8 = c$bb_res_res_84;



  reg [127:0] c$bb_res_res_85 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= iterateI_ho1_4_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_8 = c$bb_res_res_85;



  reg [127:0] c$bb_res_res_86 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= iterateI_ho1_5_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_8 = c$bb_res_res_86;



  reg [127:0] c$bb_res_res_87 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_87_delay
    if (en) begin
      c$bb_res_res_87 <= iterateI_ho1_6_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_8 = c$bb_res_res_87;



  assign c$app_arg_8 = {{t_27,   t_26,   t_21,
                         t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                         t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                         t_25},   iterateI_ho1_0_res_8,
                        iterateI_ho1_1_res_8,   iterateI_ho1_2_res_8,
                        iterateI_ho1_3_res_8,   iterateI_ho1_4_res_8,
                        iterateI_ho1_5_res_8,   iterateI_ho1_6_res_8,
                        iterateI_ho1_7_res_8};



  assign result_18 = c$app_arg_8[128-1:0];

  wire  iterateI_ho1_0_arg0_6;
  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_9;
  wire  iterateI_ho1_4_res_9;
  wire  iterateI_ho1_5_res_9;
  wire  iterateI_ho1_6_res_9;
  wire  iterateI_ho1_7_res_9;
  wire  iterateI_ho1_8_res_8;
  assign iterateI_ho1_0_arg0_6 = x_28;

  reg  c$bb_res_res_88 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_88_delay
    if (en) begin
      c$bb_res_res_88 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_88;



  reg  c$bb_res_res_89 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_89_delay
    if (en) begin
      c$bb_res_res_89 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_89;



  reg  c$bb_res_res_90 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_90_delay
    if (en) begin
      c$bb_res_res_90 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_90;



  reg  c$bb_res_res_91 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_91_delay
    if (en) begin
      c$bb_res_res_91 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_91;



  reg  c$bb_res_res_92 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_92_delay
    if (en) begin
      c$bb_res_res_92 <= iterateI_ho1_3_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_9 = c$bb_res_res_92;



  reg  c$bb_res_res_93 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_93_delay
    if (en) begin
      c$bb_res_res_93 <= iterateI_ho1_4_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_9 = c$bb_res_res_93;



  reg  c$bb_res_res_94 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_94_delay
    if (en) begin
      c$bb_res_res_94 <= iterateI_ho1_5_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_9 = c$bb_res_res_94;



  reg  c$bb_res_res_95 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_95_delay
    if (en) begin
      c$bb_res_res_95 <= iterateI_ho1_6_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_9 = c$bb_res_res_95;



  reg  c$bb_res_res_96 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_96_delay
    if (en) begin
      c$bb_res_res_96 <= iterateI_ho1_7_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_8 = c$bb_res_res_96;



  assign c$app_arg_9 = {x_28,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                        iterateI_ho1_2_res_9,   iterateI_ho1_3_res_9,
                        iterateI_ho1_4_res_9,   iterateI_ho1_5_res_9,
                        iterateI_ho1_6_res_9,   iterateI_ho1_7_res_9,
                        iterateI_ho1_8_res_8};



  assign result_19 = c$app_arg_9[1-1:0];

  wire  iterateI_ho1_0_arg0_7;
  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_10;
  wire  iterateI_ho1_3_res_10;
  wire  iterateI_ho1_4_res_10;
  wire  iterateI_ho1_5_res_10;
  wire  iterateI_ho1_6_res_10;
  wire  iterateI_ho1_7_res_10;
  wire  iterateI_ho1_8_res_9;
  assign iterateI_ho1_0_arg0_7 = x_33;

  reg  c$bb_res_res_97 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_97_delay
    if (en) begin
      c$bb_res_res_97 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_97;



  reg  c$bb_res_res_98 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_98_delay
    if (en) begin
      c$bb_res_res_98 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_98;



  reg  c$bb_res_res_99 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_99_delay
    if (en) begin
      c$bb_res_res_99 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_99;



  reg  c$bb_res_res_100 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_100_delay
    if (en) begin
      c$bb_res_res_100 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_10 = c$bb_res_res_100;



  reg  c$bb_res_res_101 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_101_delay
    if (en) begin
      c$bb_res_res_101 <= iterateI_ho1_3_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_10 = c$bb_res_res_101;



  reg  c$bb_res_res_102 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_102_delay
    if (en) begin
      c$bb_res_res_102 <= iterateI_ho1_4_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_10 = c$bb_res_res_102;



  reg  c$bb_res_res_103 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_103_delay
    if (en) begin
      c$bb_res_res_103 <= iterateI_ho1_5_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_10 = c$bb_res_res_103;



  reg  c$bb_res_res_104 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_104_delay
    if (en) begin
      c$bb_res_res_104 <= iterateI_ho1_6_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_10 = c$bb_res_res_104;



  reg  c$bb_res_res_105 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_105_delay
    if (en) begin
      c$bb_res_res_105 <= iterateI_ho1_7_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_9 = c$bb_res_res_105;



  assign c$app_arg_10 = {x_33,
                         iterateI_ho1_0_res_10,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10,
                         iterateI_ho1_3_res_10,
                         iterateI_ho1_4_res_10,
                         iterateI_ho1_5_res_10,
                         iterateI_ho1_6_res_10,
                         iterateI_ho1_7_res_10,   iterateI_ho1_8_res_9};



  assign result_20 = c$app_arg_10[1-1:0];

  wire  iterateI_ho1_0_arg0_8;
  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_11;
  wire  iterateI_ho1_3_res_11;
  wire  iterateI_ho1_4_res_11;
  wire  iterateI_ho1_5_res_11;
  wire  iterateI_ho1_6_res_11;
  wire  iterateI_ho1_7_res_11;
  wire  iterateI_ho1_8_res_10;
  assign iterateI_ho1_0_arg0_8 = x_29;

  reg  c$bb_res_res_106 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_106_delay
    if (en) begin
      c$bb_res_res_106 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_106;



  reg  c$bb_res_res_107 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_107_delay
    if (en) begin
      c$bb_res_res_107 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_107;



  reg  c$bb_res_res_108 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_108_delay
    if (en) begin
      c$bb_res_res_108 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_108;



  reg  c$bb_res_res_109 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_109_delay
    if (en) begin
      c$bb_res_res_109 <= iterateI_ho1_2_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_11 = c$bb_res_res_109;



  reg  c$bb_res_res_110 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_110_delay
    if (en) begin
      c$bb_res_res_110 <= iterateI_ho1_3_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_11 = c$bb_res_res_110;



  reg  c$bb_res_res_111 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_111_delay
    if (en) begin
      c$bb_res_res_111 <= iterateI_ho1_4_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_11 = c$bb_res_res_111;



  reg  c$bb_res_res_112 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_112_delay
    if (en) begin
      c$bb_res_res_112 <= iterateI_ho1_5_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_11 = c$bb_res_res_112;



  reg  c$bb_res_res_113 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_113_delay
    if (en) begin
      c$bb_res_res_113 <= iterateI_ho1_6_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_11 = c$bb_res_res_113;



  reg  c$bb_res_res_114 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_114_delay
    if (en) begin
      c$bb_res_res_114 <= iterateI_ho1_7_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_8_res_10 = c$bb_res_res_114;



  assign c$app_arg_11 = {x_29,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11,
                         iterateI_ho1_3_res_11,
                         iterateI_ho1_4_res_11,
                         iterateI_ho1_5_res_11,
                         iterateI_ho1_6_res_11,
                         iterateI_ho1_7_res_11,
                         iterateI_ho1_8_res_10};



  assign result_21 = c$app_arg_11[1-1:0];

  assign y = winData;

  assign x_projection_2 = $signed(win[128-1 -: 64]);

  assign x_1 = x_projection_2;

  assign win = window[127:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd5,   {64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_22;
    end
  end
  // register end

  assign result_22 = b ? t : window;

  assign t = {result_33[15:8],   result_23};

  assign result_23 = result_34 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = c$b_case_alt ? c$t_case_alt_sel_alt_t_0[191:64] : c$t_case_alt_sel_alt_f_0[191:64];

  assign c$t_case_alt_0 = c$b_case_alt ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_7;
  generate
  for (i_7=0;i_7<2;i_7=i_7+1) begin : vector_replace
    assign lastBucketUpdated[(1-i_7)*64+:64] = (64'sd0) == i_7 ? ((x_1 + y)) : win[(1-i_7)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b = c$b_case_alt | result_34;

  assign c$b_case_alt = x0 & x1;

  assign x1 = result_35[0:0];

  assign x0 = result_35[1:1];

  assign winData = $signed(result_25[63:0]);

  assign result_24 = (x0_0 & x1_0) ? t_0 : result_25;

  assign x0_0 = result_32[1:1];

  assign x1_0 = result_32[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign t_0 = {result_85[71:64],   (x_4 + y_2)};

  assign x_2 = c$out5_case_alt_0;

  assign y_0 = c$out5_case_alt_1;

  assign x_projection_4 = (x_2 + y_0);

  assign x_3 = x_projection_4;

  assign x_projection_5 = (x_3 + y_1);

  assign x_4 = x_projection_5;

  assign y_1 = c$out5_case_alt_2;

  assign y_2 = c$out5_case_alt;

  assign c$out5_case_alt = (tag == tagToMatch_0) ? dta : (64'sd0);

  assign dta = $signed(result_27[63:0]);

  assign tag = result_27[71:64];

  assign result_26 = (x0_1 & x1_1) ? t_1 : result_27;

  assign x0_1 = result_30[1:1];

  assign x1_1 = result_30[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_27 <= result_26;
    end
  end
  // register end

  assign t_1 = {result_86[55:48],   (x_6 + y_4)};

  assign x_5 = c$out7_case_alt_1;

  assign y_3 = c$out7_case_alt_0;

  assign x_projection_7 = (x_5 + y_3);

  assign x_6 = x_projection_7;

  assign y_4 = c$out7_case_alt;

  assign c$out7_case_alt = (tag_0 == 8'd5) ? (64'sd0) : dta_0;

  assign dta_0 = $signed(result_29[63:0]);

  assign tag_0 = result_29[71:64];

  assign result_28 = b_0 ? t_2 : result_29;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_29 <= result_28;
    end
  end
  // register end

  assign b_0 = result_40;

  assign t_2 = {result_84[23:16],   (x_7 + y_5)};

  assign c$vec = window[127:0];

  assign x_projection_9 = c$vec[64-1 : 0];

  assign x_7 = $signed(x_projection_9[63:0]);

  assign c$vec_0 = window_0[127:0];

  assign y_projection_6 = c$vec_0[64-1 : 0];

  assign y_5 = $signed(y_projection_6[63:0]);

  assign c$out7_case_alt_0 = c$out8_case_scrut ? ((x_8 + y_6)) : dta_3;

  assign y_6 = winData_2;

  assign x_8 = dta_4;

  assign c$out7_case_alt_1 = (tag_1 == tagToMatch) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_42[63:0]);

  assign tag_1 = result_42[71:64];

  assign tagToMatch = result_86[63:56];

  wire [1:0] iterateI_ho1_0_res_12;
  wire [1:0] iterateI_ho1_1_res_12;
  wire [1:0] iterateI_ho1_2_res_12;
  wire [1:0] iterateI_ho1_3_res_12;
  reg [1:0] c$bb_res_res_115 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_115_delay
    if (en) begin
      c$bb_res_res_115 <= pOut7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_115;



  reg [1:0] c$bb_res_res_116 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_116_delay
    if (en) begin
      c$bb_res_res_116 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_116;



  reg [1:0] c$bb_res_res_117 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_117_delay
    if (en) begin
      c$bb_res_res_117 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_117;



  reg [1:0] c$bb_res_res_118 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_118_delay
    if (en) begin
      c$bb_res_res_118 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_12 = c$bb_res_res_118;



  assign c$app_arg_12 = {pOut7,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_12,
                         iterateI_ho1_3_res_12};



  assign result_30 = c$app_arg_12[2-1:0];

  assign tagToMatch_0 = result_85[55:48];

  assign c$out5_case_alt_0 = (result_31 == winTag) ? winData : (64'sd0);

  assign winTag = result_25[71:64];

  assign result_31 = (result_85[71:64] > 8'd1) ? c$app_arg_13 : (c$app_arg_13 + 8'd4);

  assign c$app_arg_13 = result_85[71:64] - 8'd1;

  assign c$out5_case_alt_1 = (tag_3 == tagToMatch_1) ? $signed(result_59[63:0]) : (64'sd0);

  assign tagToMatch_1 = result_85[79:72];

  assign c$out5_case_alt_2 = (winTag_2 == tagToMatch_2) ? winData_2 : (64'sd0);

  assign tagToMatch_2 = result_85[103:96];

  wire [1:0] iterateI_ho1_0_res_13;
  wire [1:0] iterateI_ho1_1_res_13;
  wire [1:0] iterateI_ho1_2_res_13;
  wire [1:0] iterateI_ho1_3_res_13;
  wire [1:0] iterateI_ho1_4_res_12;
  reg [1:0] c$bb_res_res_119 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_119_delay
    if (en) begin
      c$bb_res_res_119 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_119;



  reg [1:0] c$bb_res_res_120 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_120_delay
    if (en) begin
      c$bb_res_res_120 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_120;



  reg [1:0] c$bb_res_res_121 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_121_delay
    if (en) begin
      c$bb_res_res_121 <= iterateI_ho1_1_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_121;



  reg [1:0] c$bb_res_res_122 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_122_delay
    if (en) begin
      c$bb_res_res_122 <= iterateI_ho1_2_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_13 = c$bb_res_res_122;



  reg [1:0] c$bb_res_res_123 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_123_delay
    if (en) begin
      c$bb_res_res_123 <= iterateI_ho1_3_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_12 = c$bb_res_res_123;



  assign c$app_arg_14 = {pOut5,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_13,
                         iterateI_ho1_2_res_13,
                         iterateI_ho1_3_res_13,
                         iterateI_ho1_4_res_12};



  assign result_32 = c$app_arg_14[2-1:0];

  wire [127:0] iterateI_ho1_0_arg0_9;
  wire [127:0] iterateI_ho1_0_res_14;
  wire [127:0] iterateI_ho1_1_res_14;
  wire [127:0] iterateI_ho1_2_res_14;
  wire [127:0] iterateI_ho1_3_res_14;
  wire [127:0] iterateI_ho1_4_res_13;
  assign iterateI_ho1_0_arg0_9 = {t_27,   t_26,
                                  t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                  t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                  t_19,   t_25};

  reg [127:0] c$bb_res_res_124 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_124_delay
    if (en) begin
      c$bb_res_res_124 <= iterateI_ho1_0_arg0_9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_124;



  reg [127:0] c$bb_res_res_125 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_125_delay
    if (en) begin
      c$bb_res_res_125 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_125;



  reg [127:0] c$bb_res_res_126 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_126_delay
    if (en) begin
      c$bb_res_res_126 <= iterateI_ho1_1_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_126;



  reg [127:0] c$bb_res_res_127 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_127_delay
    if (en) begin
      c$bb_res_res_127 <= iterateI_ho1_2_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_14 = c$bb_res_res_127;



  reg [127:0] c$bb_res_res_128 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_128_delay
    if (en) begin
      c$bb_res_res_128 <= iterateI_ho1_3_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_13 = c$bb_res_res_128;



  assign c$app_arg_15 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_14,
                         iterateI_ho1_2_res_14,
                         iterateI_ho1_3_res_14,
                         iterateI_ho1_4_res_13};



  assign result_33 = c$app_arg_15[128-1:0];

  wire  iterateI_ho1_0_arg0_10;
  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_15;
  wire  iterateI_ho1_2_res_15;
  wire  iterateI_ho1_3_res_15;
  wire  iterateI_ho1_4_res_14;
  wire  iterateI_ho1_5_res_12;
  assign iterateI_ho1_0_arg0_10 = slides[1:1];

  reg  c$bb_res_res_129 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_129_delay
    if (en) begin
      c$bb_res_res_129 <= iterateI_ho1_0_arg0_10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_129;



  reg  c$bb_res_res_130 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_130_delay
    if (en) begin
      c$bb_res_res_130 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_130;



  reg  c$bb_res_res_131 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_131_delay
    if (en) begin
      c$bb_res_res_131 <= iterateI_ho1_1_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_15 = c$bb_res_res_131;



  reg  c$bb_res_res_132 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_132_delay
    if (en) begin
      c$bb_res_res_132 <= iterateI_ho1_2_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_15 = c$bb_res_res_132;



  reg  c$bb_res_res_133 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_133_delay
    if (en) begin
      c$bb_res_res_133 <= iterateI_ho1_3_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_14 = c$bb_res_res_133;



  reg  c$bb_res_res_134 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_134_delay
    if (en) begin
      c$bb_res_res_134 <= iterateI_ho1_4_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_12 = c$bb_res_res_134;



  assign c$app_arg_16 = {slides[1:1],
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_15,
                         iterateI_ho1_2_res_15,
                         iterateI_ho1_3_res_15,
                         iterateI_ho1_4_res_14,
                         iterateI_ho1_5_res_12};



  assign result_34 = c$app_arg_16[1-1:0];

  wire [1:0] iterateI_ho1_0_res_16;
  wire [1:0] iterateI_ho1_1_res_16;
  wire [1:0] iterateI_ho1_2_res_16;
  wire [1:0] iterateI_ho1_3_res_16;
  wire [1:0] iterateI_ho1_4_res_15;
  wire [1:0] iterateI_ho1_5_res_13;
  reg [1:0] c$bb_res_res_135 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_135_delay
    if (en) begin
      c$bb_res_res_135 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_135;



  reg [1:0] c$bb_res_res_136 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_136_delay
    if (en) begin
      c$bb_res_res_136 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_136;



  reg [1:0] c$bb_res_res_137 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_137_delay
    if (en) begin
      c$bb_res_res_137 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_16 = c$bb_res_res_137;



  reg [1:0] c$bb_res_res_138 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_138_delay
    if (en) begin
      c$bb_res_res_138 <= iterateI_ho1_2_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_16 = c$bb_res_res_138;



  reg [1:0] c$bb_res_res_139 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_139_delay
    if (en) begin
      c$bb_res_res_139 <= iterateI_ho1_3_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_15 = c$bb_res_res_139;



  reg [1:0] c$bb_res_res_140 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_140_delay
    if (en) begin
      c$bb_res_res_140 <= iterateI_ho1_4_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_13 = c$bb_res_res_140;



  assign c$app_arg_17 = {pOut5,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_16,
                         iterateI_ho1_3_res_16,
                         iterateI_ho1_4_res_15,
                         iterateI_ho1_5_res_13};



  assign result_35 = c$app_arg_17[2-1:0];

  assign y_7 = winData_2;

  assign x_projection_11 = $signed(win_0[128-1 -: 64]);

  assign x_9 = x_projection_11;

  assign win_0 = window_0[127:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd5,   {64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_36;
    end
  end
  // register end

  assign result_36 = b_1 ? t_3 : window_0;

  assign t_3 = {result_86[7:0],   result_37};

  assign result_37 = result_38 ? c$t_case_alt_1 : c$t_case_alt_2;

  assign c$t_case_alt_sel_alt_t_3 = ({64'sd0,lastBucketUpdated_0});

  assign c$t_case_alt_sel_alt_f_3 = ({64'sd0,win_0});

  assign c$t_case_alt_1 = x_10 ? c$t_case_alt_sel_alt_t_3[191:64] : c$t_case_alt_sel_alt_f_3[191:64];

  assign c$t_case_alt_2 = x_10 ? lastBucketUpdated_0 : win_0;

  // vector replace begin
  genvar i_8;
  generate
  for (i_8=0;i_8<2;i_8=i_8+1) begin : vector_replace_0
    assign lastBucketUpdated_0[(1-i_8)*64+:64] = (64'sd0) == i_8 ? ((x_9 + y_7)) : win_0[(1-i_8)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_1 = x_10 | result_38;

  assign x_10 = result_39;

  wire  iterateI_ho1_0_arg0_11;
  wire  iterateI_ho1_0_res_17;
  wire  iterateI_ho1_1_res_17;
  wire  iterateI_ho1_2_res_17;
  wire  iterateI_ho1_3_res_17;
  assign iterateI_ho1_0_arg0_11 = slides[0:0];

  reg  c$bb_res_res_141 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_141_delay
    if (en) begin
      c$bb_res_res_141 <= iterateI_ho1_0_arg0_11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_141;



  reg  c$bb_res_res_142 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_142_delay
    if (en) begin
      c$bb_res_res_142 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_142;



  reg  c$bb_res_res_143 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_143_delay
    if (en) begin
      c$bb_res_res_143 <= iterateI_ho1_1_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_17 = c$bb_res_res_143;



  reg  c$bb_res_res_144 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_144_delay
    if (en) begin
      c$bb_res_res_144 <= iterateI_ho1_2_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_17 = c$bb_res_res_144;



  assign c$app_arg_18 = {slides[0:0],
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_17,
                         iterateI_ho1_2_res_17,
                         iterateI_ho1_3_res_17};



  assign result_38 = c$app_arg_18[1-1:0];

  assign slides = result_121[18:17];

  wire  iterateI_ho1_0_res_18;
  wire  iterateI_ho1_1_res_18;
  wire  iterateI_ho1_2_res_18;
  wire  iterateI_ho1_3_res_18;
  reg  c$bb_res_res_145 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_145_delay
    if (en) begin
      c$bb_res_res_145 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_145;



  reg  c$bb_res_res_146 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_146_delay
    if (en) begin
      c$bb_res_res_146 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_18 = c$bb_res_res_146;



  reg  c$bb_res_res_147 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_147_delay
    if (en) begin
      c$bb_res_res_147 <= iterateI_ho1_1_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_18 = c$bb_res_res_147;



  reg  c$bb_res_res_148 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_148_delay
    if (en) begin
      c$bb_res_res_148 <= iterateI_ho1_2_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_18 = c$bb_res_res_148;



  assign c$app_arg_19 = {pOut1,
                         iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_18,
                         iterateI_ho1_2_res_18,
                         iterateI_ho1_3_res_18};



  assign result_39 = c$app_arg_19[1-1:0];

  wire  iterateI_ho1_0_res_19;
  wire  iterateI_ho1_1_res_19;
  wire  iterateI_ho1_2_res_19;
  wire  iterateI_ho1_3_res_19;
  wire  iterateI_ho1_4_res_16;
  wire  iterateI_ho1_5_res_14;
  wire  iterateI_ho1_6_res_12;
  reg  c$bb_res_res_149 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_149_delay
    if (en) begin
      c$bb_res_res_149 <= pOut11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_149;



  reg  c$bb_res_res_150 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_150_delay
    if (en) begin
      c$bb_res_res_150 <= iterateI_ho1_0_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_19 = c$bb_res_res_150;



  reg  c$bb_res_res_151 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_151_delay
    if (en) begin
      c$bb_res_res_151 <= iterateI_ho1_1_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_19 = c$bb_res_res_151;



  reg  c$bb_res_res_152 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_152_delay
    if (en) begin
      c$bb_res_res_152 <= iterateI_ho1_2_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_19 = c$bb_res_res_152;



  reg  c$bb_res_res_153 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_153_delay
    if (en) begin
      c$bb_res_res_153 <= iterateI_ho1_3_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_16 = c$bb_res_res_153;



  reg  c$bb_res_res_154 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_154_delay
    if (en) begin
      c$bb_res_res_154 <= iterateI_ho1_4_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_14 = c$bb_res_res_154;



  reg  c$bb_res_res_155 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_155_delay
    if (en) begin
      c$bb_res_res_155 <= iterateI_ho1_5_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_12 = c$bb_res_res_155;



  assign c$app_arg_20 = {pOut11,
                         iterateI_ho1_0_res_19,
                         iterateI_ho1_1_res_19,
                         iterateI_ho1_2_res_19,
                         iterateI_ho1_3_res_19,
                         iterateI_ho1_4_res_16,
                         iterateI_ho1_5_res_14,
                         iterateI_ho1_6_res_12};



  assign result_40 = c$app_arg_20[1-1:0];

  assign result_41 = (x0_2 & x1_2) ? t_4 : result_42;

  assign x0_2 = result_43[1:1];

  assign x1_2 = result_43[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_4 = {result_88[63:56],   (x_11 + y_8)};

  assign x_projection_13 = (x_12 - y_9);

  assign x_11 = x_projection_13;

  assign y_8 = c$out6_case_alt;

  assign x_12 = c$out6_case_alt_0;

  assign y_9 = c$out6_case_alt_1;

  assign c$out6_case_alt = (tag_2 == tagToMatch_3) ? dta_2 : (64'sd0);

  assign dta_2 = $signed(result_45[63:0]);

  assign tag_2 = result_45[71:64];

  assign tagToMatch_3 = result_88[47:40];

  assign c$out6_case_alt_0 = (tag_3 == tagToMatch_4) ? $signed(result_59[63:0]) : (64'sd0);

  assign tag_3 = result_59[71:64];

  assign tagToMatch_4 = result_88[79:72];

  assign c$out6_case_alt_1 = (winTag_0 == tagToMatch_5) ? winData_0 : (64'sd0);

  assign tagToMatch_5 = result_88[119:112];

  wire [1:0] iterateI_ho1_0_res_20;
  wire [1:0] iterateI_ho1_1_res_20;
  reg [1:0] c$bb_res_res_156 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_156_delay
    if (en) begin
      c$bb_res_res_156 <= pOut6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_20 = c$bb_res_res_156;



  reg [1:0] c$bb_res_res_157 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_157_delay
    if (en) begin
      c$bb_res_res_157 <= iterateI_ho1_0_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_20 = c$bb_res_res_157;



  assign c$app_arg_21 = {pOut6,
                         iterateI_ho1_0_res_20,
                         iterateI_ho1_1_res_20};



  assign result_43 = c$app_arg_21[2-1:0];

  assign result_44 = x_13 ? t_5 : result_45;

  assign x_13 = result_47;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_45_register
    if ( rst) begin
      result_45 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_45 <= result_44;
    end
  end
  // register end

  assign t_5 = {t_22,   (x_15 + y_11)};

  assign x_14 = c$out8_case_alt_1;

  assign y_10 = c$out8_case_alt_0;

  assign x_projection_17 = (x_14 + y_10);

  assign x_15 = x_projection_17;

  assign y_11 = c$out8_case_alt;

  assign c$out8_case_alt = c$out8_case_scrut ? (64'sd10) : dta_3;

  assign dta_3 = $signed(result_77[63:0]);

  assign c$out8_case_scrut = tag_4 == 8'd5;

  assign tag_4 = result_77[71:64];

  assign c$out8_case_alt_0 = (winTag_3 == 8'd5) ? (64'sd0) : winData_3;

  assign c$out8_case_alt_1 = (result_46 == winTag_0) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_49[63:0]);

  assign winTag_0 = result_49[71:64];

  assign result_46 = (t_26 > 8'd1) ? c$app_arg_22 : (c$app_arg_22 + 8'd4);

  assign c$app_arg_22 = t_26 - 8'd1;

  wire  iterateI_ho1_0_res_21;
  reg  c$bb_res_res_158 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_158_delay
    if (en) begin
      c$bb_res_res_158 <= pOut8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_21 = c$bb_res_res_158;



  assign c$app_arg_23 = {pOut8,
                         iterateI_ho1_0_res_21};



  assign result_47 = c$app_arg_23[1-1:0];

  assign result_48 = b_2 ? {t_26,
                            c$input1Win_app_arg} : result_49;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_49_register
    if ( rst) begin
      result_49 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_49 <= result_48;
    end
  end
  // register end

  assign b_2 = result_50;

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_22;
  reg  c$bb_res_res_159 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_159_delay
    if (en) begin
      c$bb_res_res_159 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_22 = c$bb_res_res_159;



  assign c$app_arg_24 = {pIn1_0,
                         iterateI_ho1_0_res_22};



  assign result_50 = c$app_arg_24[1-1:0];

  assign tag_5 = result_52[71:64];

  assign result_51 = x_16 ? t_6 : result_52;

  assign x_16 = result_71;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_52_register
    if ( rst) begin
      result_52 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_52 <= result_51;
    end
  end
  // register end

  assign t_6 = {result_88[111:104],
                (x_17 + y_12)};

  assign x_17 = result_56;

  assign y_12 = c$out0_case_alt;

  assign c$out0_case_alt = (result_55 == winTag_1) ? winData_1 : (64'sd10);

  assign winData_1 = $signed(result_54[63:0]);

  assign winTag_1 = result_54[71:64];

  assign result_53 = x_18 ? t_7 : result_54;

  assign x_18 = result_72;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_54_register
    if ( rst) begin
      result_54 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_54 <= result_53;
    end
  end
  // register end

  assign t_7 = {result_87[95:88],
                (x_19 + 64'sd1)};

  assign x_19 = c$out1_case_alt;

  assign result_55 = (tag_6 > 8'd1) ? c$app_arg_25 : (c$app_arg_25 + 8'd4);

  assign c$app_arg_25 = tag_6 - 8'd1;

  assign tag_6 = result_88[95:88];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 3; i_9 = i_9 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_74[i_9*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_9*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_9*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 3; i_10 = i_10 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_10*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_10[0+:2];
    wire [2:0] c$case_alt_14;
    // spec.hs:358:1-65
    wire [7:0] t_30;
    // spec.hs:358:1-65
    wire [71:0] x_38;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_30 == result_57) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_30 = x_38[71:64];

    assign x_38 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_10*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 3; i_11=i_11+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_11] = result_74[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_56 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : $signed(result_59[63:0]);

  assign result_57 = (result_88[127:120] > 8'd2) ? c$app_arg_26 : (c$app_arg_26 + 8'd4);

  assign c$app_arg_26 = result_88[127:120] - 8'd2;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign result_58 = x_20 ? t_8 : result_59;

  assign x_20 = result_70;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_59_register
    if ( rst) begin
      result_59 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_59 <= result_58;
    end
  end
  // register end

  assign t_8 = {t_23,   (x_21 + y_13)};

  assign x_21 = c$out4_case_alt;

  assign y_13 = result_60;

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 2; i_12 = i_12 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_63[i_12*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_12*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_12*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 2; i_13 = i_13 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_13*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_13[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:366:1-63
    wire [7:0] t_31;
    // spec.hs:366:1-63
    wire [71:0] x_39;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_31 == result_61) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_31 = x_39[71:64];

    assign x_39 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_13*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 2; i_14=i_14+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_14] = result_63[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_60 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (-64'sd10);

  assign result_61 = (t_24 > 8'd2) ? c$app_arg_27 : (c$app_arg_27 + 8'd4);

  assign c$app_arg_27 = t_24 - 8'd2;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign result_62 = x_22 ? t_9 : result_63;

  assign x_22 = result_64;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_63_register
    if ( rst) begin
      result_63 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_63 <= result_62;
    end
  end
  // register end

  assign t_projection_2 = ({result_63,{result_87[87:80],   (x_23 + 64'sd2)}});

  assign t_9 = t_projection_2[143:0];

  assign x_23 = c$out1_case_alt;

  wire  iterateI_ho1_0_res_23;
  wire  iterateI_ho1_1_res_21;
  wire  iterateI_ho1_2_res_20;
  reg  c$bb_res_res_160 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_160_delay
    if (en) begin
      c$bb_res_res_160 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_23 = c$bb_res_res_160;



  reg  c$bb_res_res_161 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_161_delay
    if (en) begin
      c$bb_res_res_161 <= iterateI_ho1_0_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_21 = c$bb_res_res_161;



  reg  c$bb_res_res_162 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_162_delay
    if (en) begin
      c$bb_res_res_162 <= iterateI_ho1_1_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_20 = c$bb_res_res_162;



  assign c$app_arg_28 = {pOut3,
                         iterateI_ho1_0_res_23,
                         iterateI_ho1_1_res_21,
                         iterateI_ho1_2_res_20};



  assign result_64 = c$app_arg_28[1-1:0];

  assign c$out4_case_alt = (result_69 == winTag_2) ? winData_2 : (64'sd10);

  assign winData_2 = $signed(result_66[63:0]);

  assign winTag_2 = result_66[71:64];

  assign result_65 = x_24 ? t_10 : result_66;

  assign x_24 = result_68;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_66_register
    if ( rst) begin
      result_66 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_66 <= result_65;
    end
  end
  // register end

  assign t_10 = {result_87[103:96],
                 (x_25 + y_14)};

  assign x_25 = result_67;

  assign y_14 = c$out1_case_alt;

  assign c$out1_case_alt = (tag_5 == tagToMatch_6) ? dta_4 : (64'sd0);

  assign dta_4 = $signed(result_52[63:0]);

  assign c$vec2_2 = (ws_2[9-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 3; i_15 = i_15 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_74[i_15*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_15*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_15*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16 = i_16 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_16*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd2 - i_16[0+:2];
    wire [2:0] c$case_alt_16;
    // spec.hs:358:1-65
    wire [7:0] t_32;
    // spec.hs:358:1-65
    wire [71:0] x_40;
    assign map_out_2 = c$case_alt_16;

    assign c$case_alt_16 = (t_32 == result_87[127:120]) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_32 = x_40[71:64];

    assign x_40 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_16*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:3-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 3; i_17=i_17+1) begin : mk_array_2
    assign vecArray_2[(3-1)-i_17] = result_74[i_17*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[12-1 -: 3];

  assign result_67 = c$case_scrut_6[2:2] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_24;
  wire  iterateI_ho1_1_res_22;
  wire  iterateI_ho1_2_res_21;
  reg  c$bb_res_res_163 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_163_delay
    if (en) begin
      c$bb_res_res_163 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_24 = c$bb_res_res_163;



  reg  c$bb_res_res_164 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_164_delay
    if (en) begin
      c$bb_res_res_164 <= iterateI_ho1_0_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_22 = c$bb_res_res_164;



  reg  c$bb_res_res_165 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_165_delay
    if (en) begin
      c$bb_res_res_165 <= iterateI_ho1_1_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_21 = c$bb_res_res_165;



  assign c$app_arg_29 = {pOut1,
                         iterateI_ho1_0_res_24,
                         iterateI_ho1_1_res_22,
                         iterateI_ho1_2_res_21};



  assign result_68 = c$app_arg_29[1-1:0];

  assign result_69 = (t_25 > 8'd1) ? c$app_arg_30 : (c$app_arg_30 + 8'd4);

  assign c$app_arg_30 = t_25 - 8'd1;

  wire  iterateI_ho1_0_res_25;
  reg  c$bb_res_res_166 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_166_delay
    if (en) begin
      c$bb_res_res_166 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_25 = c$bb_res_res_166;



  assign c$app_arg_31 = {pOut4,
                         iterateI_ho1_0_res_25};



  assign result_70 = c$app_arg_31[1-1:0];

  wire  iterateI_ho1_0_res_26;
  wire  iterateI_ho1_1_res_23;
  reg  c$bb_res_res_167 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_167_delay
    if (en) begin
      c$bb_res_res_167 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_26 = c$bb_res_res_167;



  reg  c$bb_res_res_168 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_168_delay
    if (en) begin
      c$bb_res_res_168 <= iterateI_ho1_0_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_23 = c$bb_res_res_168;



  assign c$app_arg_32 = {pOut0,
                         iterateI_ho1_0_res_26,
                         iterateI_ho1_1_res_23};



  assign result_71 = c$app_arg_32[1-1:0];

  assign tagToMatch_6 = result_87[111:104];

  wire  iterateI_ho1_0_res_27;
  wire  iterateI_ho1_1_res_24;
  wire  iterateI_ho1_2_res_22;
  reg  c$bb_res_res_169 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_169_delay
    if (en) begin
      c$bb_res_res_169 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_27 = c$bb_res_res_169;



  reg  c$bb_res_res_170 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_170_delay
    if (en) begin
      c$bb_res_res_170 <= iterateI_ho1_0_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_24 = c$bb_res_res_170;



  reg  c$bb_res_res_171 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_171_delay
    if (en) begin
      c$bb_res_res_171 <= iterateI_ho1_1_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_22 = c$bb_res_res_171;



  assign c$app_arg_33 = {pOut2,
                         iterateI_ho1_0_res_27,
                         iterateI_ho1_1_res_24,
                         iterateI_ho1_2_res_22};



  assign result_72 = c$app_arg_33[1-1:0];

  assign result_73 = b_3 ? t_11 : result_74;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_74_register
    if ( rst) begin
      result_74 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_74 <= result_73;
    end
  end
  // register end

  assign b_3 = result_75;

  assign t_projection_4 = ({result_74,{t_27,   c$input0Win_app_arg}});

  assign t_11 = t_projection_4[215:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(inputs_2[129:66]);
    end
  end
  // delay end

  assign inputs_2 = result_121[148:19];

  wire  iterateI_ho1_0_res_28;
  reg  c$bb_res_res_172 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_172_delay
    if (en) begin
      c$bb_res_res_172 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_28 = c$bb_res_res_172;



  assign c$app_arg_34 = {pIn0_0,
                         iterateI_ho1_0_res_28};



  assign result_75 = c$app_arg_34[1-1:0];

  assign result_76 = b_4 ? t_12 : result_77;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_77_register
    if ( rst) begin
      result_77 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_77 <= result_76;
    end
  end
  // register end

  assign b_4 = result_78;

  assign t_12 = {result_79[31:24],
                 (x_26 + 64'sd1)};

  assign x_26 = c$out10_case_alt;

  assign c$out10_case_alt = (winTag_3 == tagToMatch_7) ? winData_3 : (64'sd0);

  assign tagToMatch_7 = result_79[39:32];

  wire  iterateI_ho1_0_res_29;
  wire  iterateI_ho1_1_res_25;
  wire  iterateI_ho1_2_res_23;
  wire  iterateI_ho1_3_res_20;
  wire  iterateI_ho1_4_res_17;
  wire  iterateI_ho1_5_res_15;
  wire  iterateI_ho1_6_res_13;
  wire  iterateI_ho1_7_res_12;
  reg  c$bb_res_res_173 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_173_delay
    if (en) begin
      c$bb_res_res_173 <= pOut10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_29 = c$bb_res_res_173;



  reg  c$bb_res_res_174 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_174_delay
    if (en) begin
      c$bb_res_res_174 <= iterateI_ho1_0_res_29;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_25 = c$bb_res_res_174;



  reg  c$bb_res_res_175 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_175_delay
    if (en) begin
      c$bb_res_res_175 <= iterateI_ho1_1_res_25;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_23 = c$bb_res_res_175;



  reg  c$bb_res_res_176 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_176_delay
    if (en) begin
      c$bb_res_res_176 <= iterateI_ho1_2_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_20 = c$bb_res_res_176;



  reg  c$bb_res_res_177 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_177_delay
    if (en) begin
      c$bb_res_res_177 <= iterateI_ho1_3_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_17 = c$bb_res_res_177;



  reg  c$bb_res_res_178 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_178_delay
    if (en) begin
      c$bb_res_res_178 <= iterateI_ho1_4_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_15 = c$bb_res_res_178;



  reg  c$bb_res_res_179 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_179_delay
    if (en) begin
      c$bb_res_res_179 <= iterateI_ho1_5_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_13 = c$bb_res_res_179;



  reg  c$bb_res_res_180 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_180_delay
    if (en) begin
      c$bb_res_res_180 <= iterateI_ho1_6_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_7_res_12 = c$bb_res_res_180;



  assign c$app_arg_35 = {pOut10,
                         iterateI_ho1_0_res_29,
                         iterateI_ho1_1_res_25,
                         iterateI_ho1_2_res_23,
                         iterateI_ho1_3_res_20,
                         iterateI_ho1_4_res_17,
                         iterateI_ho1_5_res_15,
                         iterateI_ho1_6_res_13,
                         iterateI_ho1_7_res_12};



  assign result_78 = c$app_arg_35[1-1:0];

  wire [127:0] iterateI_ho1_0_arg0_12;
  wire [127:0] iterateI_ho1_0_res_30;
  wire [127:0] iterateI_ho1_1_res_26;
  wire [127:0] iterateI_ho1_2_res_24;
  wire [127:0] iterateI_ho1_3_res_21;
  wire [127:0] iterateI_ho1_4_res_18;
  wire [127:0] iterateI_ho1_5_res_16;
  wire [127:0] iterateI_ho1_6_res_14;
  assign iterateI_ho1_0_arg0_12 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_181 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_181_delay
    if (en) begin
      c$bb_res_res_181 <= iterateI_ho1_0_arg0_12;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_30 = c$bb_res_res_181;



  reg [127:0] c$bb_res_res_182 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_182_delay
    if (en) begin
      c$bb_res_res_182 <= iterateI_ho1_0_res_30;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_26 = c$bb_res_res_182;



  reg [127:0] c$bb_res_res_183 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_183_delay
    if (en) begin
      c$bb_res_res_183 <= iterateI_ho1_1_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_24 = c$bb_res_res_183;



  reg [127:0] c$bb_res_res_184 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_184_delay
    if (en) begin
      c$bb_res_res_184 <= iterateI_ho1_2_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_21 = c$bb_res_res_184;



  reg [127:0] c$bb_res_res_185 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_185_delay
    if (en) begin
      c$bb_res_res_185 <= iterateI_ho1_3_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_18 = c$bb_res_res_185;



  reg [127:0] c$bb_res_res_186 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_186_delay
    if (en) begin
      c$bb_res_res_186 <= iterateI_ho1_4_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_16 = c$bb_res_res_186;



  reg [127:0] c$bb_res_res_187 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_187_delay
    if (en) begin
      c$bb_res_res_187 <= iterateI_ho1_5_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_14 = c$bb_res_res_187;



  assign c$app_arg_36 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_30,
                         iterateI_ho1_1_res_26,
                         iterateI_ho1_2_res_24,
                         iterateI_ho1_3_res_21,
                         iterateI_ho1_4_res_18,
                         iterateI_ho1_5_res_16,
                         iterateI_ho1_6_res_14};



  assign result_79 = c$app_arg_36[128-1:0];

  assign winTag_3 = result_81[71:64];

  assign result_80 = b_5 ? t_13 : result_81;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_81_register
    if ( rst) begin
      result_81 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_81 <= result_80;
    end
  end
  // register end

  assign b_5 = result_83;

  assign t_13 = {result_84[39:32],
                 (x_27 + 64'sd1)};

  assign x_27 = c$out9_case_alt;

  assign c$out9_case_alt = (result_82 == winTag_3) ? winData_3 : (64'sd0);

  assign winData_3 = $signed(result_81[63:0]);

  assign result_82 = (result_84[39:32] > 8'd1) ? c$app_arg_37 : (c$app_arg_37 + 8'd4);

  assign c$app_arg_37 = result_84[39:32] - 8'd1;

  wire  iterateI_ho1_0_res_31;
  wire  iterateI_ho1_1_res_27;
  wire  iterateI_ho1_2_res_25;
  wire  iterateI_ho1_3_res_22;
  wire  iterateI_ho1_4_res_19;
  wire  iterateI_ho1_5_res_17;
  wire  iterateI_ho1_6_res_15;
  reg  c$bb_res_res_188 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_188_delay
    if (en) begin
      c$bb_res_res_188 <= pOut9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_31 = c$bb_res_res_188;



  reg  c$bb_res_res_189 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_189_delay
    if (en) begin
      c$bb_res_res_189 <= iterateI_ho1_0_res_31;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_27 = c$bb_res_res_189;



  reg  c$bb_res_res_190 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_190_delay
    if (en) begin
      c$bb_res_res_190 <= iterateI_ho1_1_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_25 = c$bb_res_res_190;



  reg  c$bb_res_res_191 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_191_delay
    if (en) begin
      c$bb_res_res_191 <= iterateI_ho1_2_res_25;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_22 = c$bb_res_res_191;



  reg  c$bb_res_res_192 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_192_delay
    if (en) begin
      c$bb_res_res_192 <= iterateI_ho1_3_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_19 = c$bb_res_res_192;



  reg  c$bb_res_res_193 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_193_delay
    if (en) begin
      c$bb_res_res_193 <= iterateI_ho1_4_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_17 = c$bb_res_res_193;



  reg  c$bb_res_res_194 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_194_delay
    if (en) begin
      c$bb_res_res_194 <= iterateI_ho1_5_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_15 = c$bb_res_res_194;



  assign c$app_arg_38 = {pOut9,
                         iterateI_ho1_0_res_31,
                         iterateI_ho1_1_res_27,
                         iterateI_ho1_2_res_25,
                         iterateI_ho1_3_res_22,
                         iterateI_ho1_4_res_19,
                         iterateI_ho1_5_res_17,
                         iterateI_ho1_6_res_15};



  assign result_83 = c$app_arg_38[1-1:0];

  wire [127:0] iterateI_ho1_0_arg0_13;
  wire [127:0] iterateI_ho1_0_res_32;
  wire [127:0] iterateI_ho1_1_res_28;
  wire [127:0] iterateI_ho1_2_res_26;
  wire [127:0] iterateI_ho1_3_res_23;
  wire [127:0] iterateI_ho1_4_res_20;
  wire [127:0] iterateI_ho1_5_res_18;
  assign iterateI_ho1_0_arg0_13 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_195 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_195_delay
    if (en) begin
      c$bb_res_res_195 <= iterateI_ho1_0_arg0_13;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_32 = c$bb_res_res_195;



  reg [127:0] c$bb_res_res_196 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_196_delay
    if (en) begin
      c$bb_res_res_196 <= iterateI_ho1_0_res_32;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_28 = c$bb_res_res_196;



  reg [127:0] c$bb_res_res_197 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_197_delay
    if (en) begin
      c$bb_res_res_197 <= iterateI_ho1_1_res_28;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_26 = c$bb_res_res_197;



  reg [127:0] c$bb_res_res_198 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_198_delay
    if (en) begin
      c$bb_res_res_198 <= iterateI_ho1_2_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_23 = c$bb_res_res_198;



  reg [127:0] c$bb_res_res_199 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_199_delay
    if (en) begin
      c$bb_res_res_199 <= iterateI_ho1_3_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_20 = c$bb_res_res_199;



  reg [127:0] c$bb_res_res_200 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_200_delay
    if (en) begin
      c$bb_res_res_200 <= iterateI_ho1_4_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_18 = c$bb_res_res_200;



  assign c$app_arg_39 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_32,
                         iterateI_ho1_1_res_28,
                         iterateI_ho1_2_res_26,
                         iterateI_ho1_3_res_23,
                         iterateI_ho1_4_res_20,
                         iterateI_ho1_5_res_18};



  assign result_84 = c$app_arg_39[128-1:0];

  wire [127:0] iterateI_ho1_0_arg0_14;
  wire [127:0] iterateI_ho1_0_res_33;
  wire [127:0] iterateI_ho1_1_res_29;
  wire [127:0] iterateI_ho1_2_res_27;
  wire [127:0] iterateI_ho1_3_res_24;
  assign iterateI_ho1_0_arg0_14 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_201 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_201_delay
    if (en) begin
      c$bb_res_res_201 <= iterateI_ho1_0_arg0_14;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_33 = c$bb_res_res_201;



  reg [127:0] c$bb_res_res_202 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_202_delay
    if (en) begin
      c$bb_res_res_202 <= iterateI_ho1_0_res_33;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_29 = c$bb_res_res_202;



  reg [127:0] c$bb_res_res_203 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_203_delay
    if (en) begin
      c$bb_res_res_203 <= iterateI_ho1_1_res_29;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_27 = c$bb_res_res_203;



  reg [127:0] c$bb_res_res_204 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_204_delay
    if (en) begin
      c$bb_res_res_204 <= iterateI_ho1_2_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_24 = c$bb_res_res_204;



  assign c$app_arg_40 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_33,
                         iterateI_ho1_1_res_29,
                         iterateI_ho1_2_res_27,
                         iterateI_ho1_3_res_24};



  assign result_85 = c$app_arg_40[128-1:0];

  wire [127:0] iterateI_ho1_0_arg0_15;
  wire [127:0] iterateI_ho1_0_res_34;
  wire [127:0] iterateI_ho1_1_res_30;
  wire [127:0] iterateI_ho1_2_res_28;
  assign iterateI_ho1_0_arg0_15 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_205 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_205_delay
    if (en) begin
      c$bb_res_res_205 <= iterateI_ho1_0_arg0_15;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_34 = c$bb_res_res_205;



  reg [127:0] c$bb_res_res_206 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_206_delay
    if (en) begin
      c$bb_res_res_206 <= iterateI_ho1_0_res_34;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_30 = c$bb_res_res_206;



  reg [127:0] c$bb_res_res_207 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_207_delay
    if (en) begin
      c$bb_res_res_207 <= iterateI_ho1_1_res_30;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_28 = c$bb_res_res_207;



  assign c$app_arg_41 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_34,
                         iterateI_ho1_1_res_30,
                         iterateI_ho1_2_res_28};



  assign result_86 = c$app_arg_41[128-1:0];

  wire [127:0] iterateI_ho1_0_arg0_16;
  wire [127:0] iterateI_ho1_0_res_35;
  wire [127:0] iterateI_ho1_1_res_31;
  assign iterateI_ho1_0_arg0_16 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_208 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_208_delay
    if (en) begin
      c$bb_res_res_208 <= iterateI_ho1_0_arg0_16;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_35 = c$bb_res_res_208;



  reg [127:0] c$bb_res_res_209 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_209_delay
    if (en) begin
      c$bb_res_res_209 <= iterateI_ho1_0_res_35;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_31 = c$bb_res_res_209;



  assign c$app_arg_42 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_35,
                         iterateI_ho1_1_res_31};



  assign result_87 = c$app_arg_42[128-1:0];

  wire [127:0] iterateI_ho1_0_arg0_17;
  wire [127:0] iterateI_ho1_0_res_36;
  assign iterateI_ho1_0_arg0_17 = {t_27,   t_26,
                                   t_21,   t_25,   t_20,   t_24,   t_23,   t_19,
                                   t_18,   t_17,   t_22,   t_16,   t_15,   t_14,
                                   t_19,   t_25};

  reg [127:0] c$bb_res_res_210 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,
   8'd5,   8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_210_delay
    if (en) begin
      c$bb_res_res_210 <= iterateI_ho1_0_arg0_17;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_36 = c$bb_res_res_210;



  assign c$app_arg_43 = {{t_27,   t_26,   t_21,
                          t_25,   t_20,   t_24,   t_23,   t_19,   t_18,
                          t_17,   t_22,   t_16,   t_15,   t_14,   t_19,
                          t_25},   iterateI_ho1_0_res_36};



  assign result_88 = c$app_arg_43[128-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_89;
    end
  end
  // register end

  assign result_89 = pOut11 ? result_90 : t_14;

  assign b_6 = t_14 == 8'd4;

  assign f1 = t_14 + 8'd1;

  assign result_90 = b_6 ? 8'd1 : f1;

  assign pOut11 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_15_register
    if ( rst) begin
      t_15 <= 8'd1;
    end else if (en) begin
      t_15 <= result_91;
    end
  end
  // register end

  assign result_91 = pOut10 ? result_92 : t_15;

  assign b_7 = t_15 == 8'd4;

  assign f1_0 = t_15 + 8'd1;

  assign result_92 = b_7 ? 8'd1 : f1_0;

  assign pOut10 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_16_register
    if ( rst) begin
      t_16 <= 8'd1;
    end else if (en) begin
      t_16 <= result_93;
    end
  end
  // register end

  assign result_93 = pOut9 ? result_94 : t_16;

  assign b_8 = t_16 == 8'd4;

  assign f1_1 = t_16 + 8'd1;

  assign result_94 = b_8 ? 8'd1 : f1_1;

  assign pOut9 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_17_register
    if ( rst) begin
      t_17 <= 8'd1;
    end else if (en) begin
      t_17 <= result_95;
    end
  end
  // register end

  assign result_95 = c$ds11_case_alt ? result_96 : t_17;

  assign b_9 = t_17 == 8'd4;

  assign f1_2 = t_17 + 8'd1;

  assign result_96 = b_9 ? 8'd1 : f1_2;

  assign c$ds11_case_alt = x0_3 & x1_3;

  assign x1_3 = pOut7[0:0];

  assign x0_3 = pOut7[1:1];

  assign pOut7 = pacings[5:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_18_register
    if ( rst) begin
      t_18 <= 8'd1;
    end else if (en) begin
      t_18 <= result_97;
    end
  end
  // register end

  assign result_97 = c$ds10_case_alt ? result_98 : t_18;

  assign b_10 = t_18 == 8'd4;

  assign f1_3 = t_18 + 8'd1;

  assign result_98 = b_10 ? 8'd1 : f1_3;

  assign c$ds10_case_alt = x0_4 & x1_4;

  assign x1_4 = pOut6[0:0];

  assign x0_4 = pOut6[1:1];

  assign pOut6 = pacings[7:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_19_register
    if ( rst) begin
      t_19 <= 8'd1;
    end else if (en) begin
      t_19 <= result_99;
    end
  end
  // register end

  assign result_99 = c$ds9_case_alt ? result_100 : t_19;

  assign b_11 = t_19 == 8'd4;

  assign f1_4 = t_19 + 8'd1;

  assign result_100 = b_11 ? 8'd1 : f1_4;

  assign c$ds9_case_alt = x0_5 & x1_5;

  assign x1_5 = pOut5[0:0];

  assign x0_5 = pOut5[1:1];

  assign pOut5 = pacings[9:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_20_register
    if ( rst) begin
      t_20 <= 8'd1;
    end else if (en) begin
      t_20 <= result_101;
    end
  end
  // register end

  assign result_101 = x_28 ? result_102 : t_20;

  assign b_12 = t_20 == 8'd4;

  assign f1_5 = t_20 + 8'd1;

  assign result_102 = b_12 ? 8'd1 : f1_5;

  assign x_28 = pOut2;

  assign pOut2 = pacings[12:12];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_21_register
    if ( rst) begin
      t_21 <= 8'd1;
    end else if (en) begin
      t_21 <= result_103;
    end
  end
  // register end

  assign result_103 = x_29 ? result_104 : t_21;

  assign b_13 = t_21 == 8'd4;

  assign f1_6 = t_21 + 8'd1;

  assign result_104 = b_13 ? 8'd1 : f1_6;

  assign x_29 = pOut0;

  assign pOut0 = pacings[14:14];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_22_register
    if ( rst) begin
      t_22 <= 8'd1;
    end else if (en) begin
      t_22 <= result_105;
    end
  end
  // register end

  assign result_105 = x_30 ? result_106 : t_22;

  assign b_14 = t_22 == 8'd4;

  assign f1_7 = t_22 + 8'd1;

  assign result_106 = b_14 ? 8'd1 : f1_7;

  assign x_30 = pOut8;

  assign pOut8 = pacings[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_23_register
    if ( rst) begin
      t_23 <= 8'd1;
    end else if (en) begin
      t_23 <= result_107;
    end
  end
  // register end

  assign result_107 = x_31 ? result_108 : t_23;

  assign b_15 = t_23 == 8'd4;

  assign f1_8 = t_23 + 8'd1;

  assign result_108 = b_15 ? 8'd1 : f1_8;

  assign x_31 = pOut4;

  assign pOut4 = pacings[10:10];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_24_register
    if ( rst) begin
      t_24 <= 8'd1;
    end else if (en) begin
      t_24 <= result_109;
    end
  end
  // register end

  assign result_109 = x_32 ? result_110 : t_24;

  assign b_16 = t_24 == 8'd4;

  assign f1_9 = t_24 + 8'd1;

  assign result_110 = b_16 ? 8'd1 : f1_9;

  assign x_32 = pOut3;

  assign pOut3 = pacings[11:11];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_25_register
    if ( rst) begin
      t_25 <= 8'd1;
    end else if (en) begin
      t_25 <= result_111;
    end
  end
  // register end

  assign result_111 = x_33 ? result_112 : t_25;

  assign b_17 = t_25 == 8'd4;

  assign f1_10 = t_25 + 8'd1;

  assign result_112 = b_17 ? 8'd1 : f1_10;

  assign x_33 = pOut1;

  assign pOut1 = pacings[13:13];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_26_register
    if ( rst) begin
      t_26 <= 8'd1;
    end else if (en) begin
      t_26 <= result_113;
    end
  end
  // register end

  assign result_113 = pIn1_0 ? result_114 : t_26;

  assign b_18 = t_26 == 8'd4;

  assign f1_11 = t_26 + 8'd1;

  assign result_114 = b_18 ? 8'd1 : f1_11;

  assign pIn1_0 = pacings[15:15];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_27_register
    if ( rst) begin
      t_27 <= 8'd1;
    end else if (en) begin
      t_27 <= result_115;
    end
  end
  // register end

  assign result_115 = pIn0_0 ? result_116 : t_27;

  assign b_19 = t_27 == 8'd4;

  assign f1_12 = t_27 + 8'd1;

  assign result_116 = b_19 ? 8'd1 : f1_12;

  assign pIn0_0 = pacings[16:16];

  assign pacings = result_121[16:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_118;
    end
  end
  // register end

  assign result_117 = toWait == (64'sd0);

  assign result_118 = result_120 ? (64'sd7) : result_119;

  assign b_20 = toWait > (64'sd0);

  assign result_119 = b_20 ? ((x_34 - 64'sd1)) : toWait;

  assign x_34 = toWait;

  assign result_120 = b_21 ? 1'b1 : 1'b0;

  assign b_21 = result_117 & qPopValid;

  assign result_121 = {c$app_arg_46,
                       c$app_arg_45,   c$app_arg_44};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_44_register
    if ( rst) begin
      c$app_arg_44 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   {1'b0,
                                                                         1'b0},
                                                                {1'b0,   1'b0},
                                                                {1'b0,   1'b0},
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_44 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},
                                                {1'b0,   1'b0},   1'b0,   1'b0,   1'b0,
                                                1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},
                                                {1'b0,   1'b0},   1'b0,   1'b0,   1'b0,
                                                1'b0}};

  always @(*) begin
    case(x_35)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_35)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                                        {1'b0,   1'b0},   {1'b0,   1'b0},   {1'b0,
                                                                                                             1'b0},
                                                                        1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [148:0] vecArray_3 [0:9-1];
  genvar i_18;
  generate
  for (i_18=0; i_18 < 9; i_18=i_18+1) begin : mk_array_3
    assign vecArray_3[(9-1)-i_18] = buffer[i_18*149+:149];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_3[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_45_register
    if ( rst) begin
      c$app_arg_45 <= 1'b0;
    end else if (en) begin
      c$app_arg_45 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_35)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_46_register
    if ( rst) begin
      c$app_arg_46 <= 1'b0;
    end else if (en) begin
      c$app_arg_46 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_35 != 64'sd9) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 {1'b0,   1'b0},
                                                                 {1'b0,   1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[1489:149] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[1489:149];

  assign qData = result_6[148:0];

  assign x_35 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_35 + 64'sd1));

  assign c$tte_rhs_0 = (x_35 == 64'sd9) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_35)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_35 - 64'sd1);

  assign result = {result_7[798:19],   {qPush,
                                        qPop,   result_121[150:150],   qPopValid,
                                        result_7[18:2],   result_7[1:0]}};

  assign qPopValid = result_121[149:149];

  assign qPush = result_6[149:149];

  assign qPop = result_7[799:799];

  assign result_0 = result[802:23];

  assign result_1 = result[22:0];

  assign result_0_0 = result_0[779:715];

  assign result_0_1 = result_0[714:650];

  assign result_0_2 = result_0[649:585];

  assign result_0_3 = result_0[584:520];

  assign result_0_4 = result_0[519:455];

  assign result_0_5 = result_0[454:390];

  assign result_0_6 = result_0[389:325];

  assign result_0_7 = result_0[324:260];

  assign result_0_8 = result_0[259:195];

  assign result_0_9 = result_0[194:130];

  assign result_0_10 = result_0[129:65];

  assign result_0_11 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_0_7_0 = $signed(result_0_7[64:1]);

  assign result_0_7_1 = result_0_7[0:0];

  assign result_0_8_0 = $signed(result_0_8[64:1]);

  assign result_0_8_1 = result_0_8[0:0];

  assign result_0_9_0 = $signed(result_0_9[64:1]);

  assign result_0_9_1 = result_0_9[0:0];

  assign result_0_10_0 = $signed(result_0_10[64:1]);

  assign result_0_10_1 = result_0_10[0:0];

  assign result_0_11_0 = $signed(result_0_11[64:1]);

  assign result_0_11_1 = result_0_11[0:0];

  assign result_1_0 = result_1[22:22];

  assign result_1_1 = result_1[21:21];

  assign result_1_2 = result_1[20:20];

  assign result_1_3 = result_1[19:19];

  assign result_1_4 = result_1[18:2];

  assign result_1_5 = result_1[1:0];

  assign result_1_4_0 = result_1_4[16:16];

  assign result_1_4_1 = result_1_4[15:15];

  assign result_1_4_2 = result_1_4[14:14];

  assign result_1_4_3 = result_1_4[13:13];

  assign result_1_4_4 = result_1_4[12:12];

  assign result_1_4_5 = result_1_4[11:11];

  assign result_1_4_6 = result_1_4[10:10];

  assign result_1_4_7 = result_1_4[9:8];

  assign result_1_4_8 = result_1_4[7:6];

  assign result_1_4_9 = result_1_4[5:4];

  assign result_1_4_10 = result_1_4[3:3];

  assign result_1_4_11 = result_1_4[2:2];

  assign result_1_4_12 = result_1_4[1:1];

  assign result_1_4_13 = result_1_4[0:0];

  assign result_1_4_7_0 = result_1_4_7[1:1];

  assign result_1_4_7_1 = result_1_4_7[0:0];

  assign result_1_4_8_0 = result_1_4_8[1:1];

  assign result_1_4_8_1 = result_1_4_8[0:0];

  assign result_1_4_9_0 = result_1_4_9[1:1];

  assign result_1_4_9_1 = result_1_4_9[0:0];

  assign result_1_5_0 = result_1_5[1:1];

  assign result_1_5_1 = result_1_5[0:0];


endmodule


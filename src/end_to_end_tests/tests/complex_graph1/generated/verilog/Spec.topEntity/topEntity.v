/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire signed [63:0] result_0_7_0
    , output wire  result_0_7_1
    , output wire signed [63:0] result_0_8_0
    , output wire  result_0_8_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_4_7
    , output wire  result_1_4_8
    , output wire  result_1_4_9
    );
  wire [75:0] result_2;
  // spec.hs:242:1-82
  wire  hasInput0;
  // spec.hs:242:1-82
  wire  pIn0;
  wire [595:0] result_3;
  wire [4:0] c$app_arg;
  wire  result_4;
  wire [4:0] c$app_arg_0;
  wire  result_5;
  wire [4:0] c$app_arg_1;
  wire  result_6;
  wire [4:0] c$app_arg_2;
  wire  result_7;
  wire [4:0] c$app_arg_3;
  wire  result_8;
  wire [4:0] c$app_arg_4;
  wire  result_9;
  wire [4:0] c$app_arg_5;
  wire  result_10;
  wire [4:0] c$app_arg_6;
  wire  result_11;
  wire [4:0] c$app_arg_7;
  wire  result_12;
  // spec.hs:297:1-53
  wire [7:0] tagToMatch;
  // spec.hs:297:1-53
  wire [7:0] tag;
  wire [71:0] result_13;
  // spec.hs:102:34-42
  wire  x;
  // spec.hs:484:1-165
  reg [71:0] result_14 = {8'd4,   64'sd0};
  // spec.hs:484:1-165
  wire [71:0] t;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  wire signed [63:0] x_1;
  wire signed [63:0] y_0;
  // spec.hs:318:1-104
  wire signed [63:0] c$out0_case_alt;
  wire [71:0] result_15;
  // spec.hs:108:34-42
  wire  x_2;
  // spec.hs:532:1-183
  reg [71:0] result_16 = {8'd4,   64'sd0};
  // spec.hs:532:1-183
  wire [71:0] t_0;
  wire signed [63:0] x_3;
  wire signed [63:0] y_1;
  wire signed [63:0] x_4;
  wire signed [63:0] x_5;
  wire signed [63:0] y_2;
  wire signed [63:0] y_3;
  // spec.hs:318:1-104
  wire signed [63:0] c$out6_case_alt;
  // spec.hs:297:1-53
  wire signed [63:0] dta;
  // spec.hs:297:1-53
  wire [7:0] tag_0;
  // spec.hs:297:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:318:1-104
  wire signed [63:0] c$out6_case_alt_0;
  // spec.hs:297:1-53
  wire signed [63:0] dta_0;
  // spec.hs:297:1-53
  wire [7:0] tag_1;
  // spec.hs:297:1-53
  wire [7:0] tagToMatch_1;
  // spec.hs:318:1-104
  wire signed [63:0] c$out6_case_alt_1;
  // spec.hs:291:1-55
  wire signed [63:0] winData;
  // spec.hs:291:1-55
  wire [7:0] winTag;
  wire [7:0] result_17;
  wire [7:0] c$app_arg_8;
  // spec.hs:318:1-104
  wire signed [63:0] c$out6_case_alt_2;
  // spec.hs:297:1-53
  wire signed [63:0] dta_1;
  // spec.hs:297:1-53
  wire [7:0] tag_2;
  wire [71:0] result_18;
  // spec.hs:107:34-42
  wire  x_6;
  // spec.hs:524:1-147
  reg [71:0] result_19 = {8'd4,   64'sd0};
  // spec.hs:524:1-147
  wire [71:0] t_1;
  wire signed [63:0] x_7;
  wire signed [63:0] y_4;
  // spec.hs:318:1-104
  wire signed [63:0] c$out5_case_alt;
  // spec.hs:291:1-55
  wire signed [63:0] winData_0;
  // spec.hs:291:1-55
  wire [7:0] winTag_0;
  wire [71:0] result_20;
  // spec.hs:106:34-42
  wire  x_8;
  // spec.hs:516:1-129
  reg [71:0] result_21 = {8'd4,   64'sd0};
  // spec.hs:516:1-129
  wire [71:0] t_2;
  wire signed [63:0] x_9;
  wire [3:0] c$app_arg_9;
  wire  result_22;
  wire [7:0] result_23;
  wire [7:0] c$app_arg_10;
  // spec.hs:318:1-104
  wire signed [63:0] c$out5_case_alt_0;
  // spec.hs:291:1-55
  wire signed [63:0] winData_1;
  // spec.hs:291:1-55
  wire [7:0] winTag_1;
  wire [71:0] result_24;
  // spec.hs:105:34-42
  wire  x_10;
  // spec.hs:508:1-129
  reg [71:0] result_25 = {8'd4,   64'sd0};
  // spec.hs:508:1-129
  wire [71:0] t_3;
  wire signed [63:0] x_11;
  wire [3:0] c$app_arg_11;
  wire  result_26;
  wire [7:0] result_27;
  wire [7:0] c$app_arg_12;
  wire [1:0] c$app_arg_13;
  wire  result_28;
  // spec.hs:297:1-53
  wire [7:0] tagToMatch_2;
  wire [3:0] c$app_arg_14;
  wire  result_29;
  wire [7:0] result_30;
  wire [7:0] c$app_arg_15;
  // spec.hs:318:1-104
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:291:1-55
  wire signed [63:0] winData_2;
  // spec.hs:291:1-55
  wire [7:0] winTag_2;
  wire [71:0] result_31;
  // spec.hs:104:34-42
  wire  x_12;
  // spec.hs:500:1-129
  reg [71:0] result_32 = {8'd4,   64'sd0};
  // spec.hs:500:1-129
  wire [71:0] t_4;
  wire signed [63:0] x_13;
  // spec.hs:318:1-104
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:297:1-53
  wire signed [63:0] dta_2;
  // spec.hs:297:1-53
  wire [7:0] tag_3;
  wire [71:0] result_33;
  // spec.hs:103:34-42
  wire  x_14;
  // spec.hs:492:1-129
  reg [71:0] result_34 = {8'd4,   64'sd0};
  // spec.hs:492:1-129
  wire [71:0] t_5;
  wire signed [63:0] x_15;
  // spec.hs:318:1-104
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:297:1-53
  wire signed [63:0] dta_3;
  // spec.hs:297:1-53
  wire [7:0] tagToMatch_3;
  wire [3:0] c$app_arg_16;
  wire  result_35;
  wire [7:0] result_36;
  wire [7:0] c$app_arg_17;
  // spec.hs:276:1-65
  wire [147:0] c$ws_app_arg;
  // spec.hs:276:1-65
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_37;
  wire [7:0] result_38;
  wire [7:0] c$app_arg_18;
  // spec.hs:276:1-65
  wire [0:0] i;
  // spec.hs:276:1-65
  wire [5:0] ws;
  wire [1:0] c$app_arg_19;
  wire  result_39;
  wire [2:0] c$app_arg_20;
  wire  result_40;
  wire [71:0] result_41;
  // spec.hs:110:34-42
  wire  x_16;
  // spec.hs:548:1-129
  reg [71:0] result_42 = {8'd4,   64'sd0};
  // spec.hs:548:1-129
  wire [71:0] t_6;
  wire signed [63:0] x_17;
  // spec.hs:276:1-65
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:276:1-65
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire signed [63:0] result_43;
  wire [7:0] result_44;
  wire [7:0] c$app_arg_21;
  // spec.hs:276:1-65
  wire [0:0] i_0;
  // spec.hs:276:1-65
  wire [5:0] ws_0;
  wire [1:0] c$app_arg_22;
  wire  result_45;
  wire [71:0] result_46;
  // spec.hs:109:34-42
  wire  x_18;
  // spec.hs:540:1-129
  reg [71:0] result_47 = {8'd4,   64'sd0};
  // spec.hs:540:1-129
  wire [71:0] t_7;
  wire signed [63:0] x_19;
  // spec.hs:284:1-63
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:284:1-63
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_48;
  // spec.hs:284:1-63
  wire [0:0] i_1;
  // spec.hs:284:1-63
  wire [5:0] ws_1;
  wire [2:0] c$app_arg_23;
  wire  result_49;
  wire [143:0] result_50;
  // spec.hs:478:1-135
  reg [143:0] result_51 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:478:1-135
  wire  b;
  // spec.hs:478:1-135
  wire [143:0] t_8;
  // spec.hs:318:1-104
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  wire [1:0] c$app_arg_24;
  wire  result_52;
  wire [239:0] c$app_arg_25;
  wire [79:0] result_53;
  wire [159:0] c$app_arg_26;
  wire [79:0] result_54;
  // spec.hs:462:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_55;
  // spec.hs:462:9-81
  wire  b_0;
  // spec.hs:462:9-81
  wire [7:0] f1;
  wire [7:0] result_56;
  // spec.hs:109:34-42
  wire  x_20;
  // spec.hs:318:1-104
  wire  pOut7;
  // spec.hs:462:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_57;
  // spec.hs:462:9-81
  wire  b_1;
  // spec.hs:462:9-81
  wire [7:0] f1_0;
  wire [7:0] result_58;
  // spec.hs:103:34-42
  wire  x_21;
  // spec.hs:318:1-104
  wire  pOut1;
  // spec.hs:462:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_59;
  // spec.hs:462:9-81
  wire  b_2;
  // spec.hs:462:9-81
  wire [7:0] f1_1;
  wire [7:0] result_60;
  // spec.hs:110:34-42
  wire  x_22;
  // spec.hs:318:1-104
  wire  pOut8;
  // spec.hs:462:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_61;
  // spec.hs:462:9-81
  wire  b_3;
  // spec.hs:462:9-81
  wire [7:0] f1_2;
  wire [7:0] result_62;
  // spec.hs:108:34-42
  wire  x_23;
  // spec.hs:318:1-104
  wire  pOut6;
  // spec.hs:462:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_63;
  // spec.hs:462:9-81
  wire  b_4;
  // spec.hs:462:9-81
  wire [7:0] f1_3;
  wire [7:0] result_64;
  // spec.hs:107:34-42
  wire  x_24;
  // spec.hs:318:1-104
  wire  pOut5;
  // spec.hs:462:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_65;
  // spec.hs:462:9-81
  wire  b_5;
  // spec.hs:462:9-81
  wire [7:0] f1_4;
  wire [7:0] result_66;
  // spec.hs:106:34-42
  wire  x_25;
  // spec.hs:318:1-104
  wire  pOut4;
  // spec.hs:462:9-81
  reg [7:0] t_15 = 8'd1;
  wire [7:0] result_67;
  // spec.hs:462:9-81
  wire  b_6;
  // spec.hs:462:9-81
  wire [7:0] f1_5;
  wire [7:0] result_68;
  // spec.hs:105:34-42
  wire  x_26;
  // spec.hs:318:1-104
  wire  pOut3;
  // spec.hs:462:9-81
  reg [7:0] t_16 = 8'd1;
  wire [7:0] result_69;
  // spec.hs:462:9-81
  wire  b_7;
  // spec.hs:462:9-81
  wire [7:0] f1_6;
  wire [7:0] result_70;
  // spec.hs:104:34-42
  wire  x_27;
  // spec.hs:318:1-104
  wire  pOut2;
  // spec.hs:462:9-81
  reg [7:0] t_17 = 8'd1;
  wire [7:0] result_71;
  // spec.hs:462:9-81
  wire  b_8;
  // spec.hs:462:9-81
  wire [7:0] f1_7;
  wire [7:0] result_72;
  // spec.hs:102:34-42
  wire  x_28;
  // spec.hs:318:1-104
  wire  pOut0;
  // spec.hs:462:9-81
  reg [7:0] t_18 = 8'd1;
  wire [7:0] result_73;
  // spec.hs:462:9-81
  wire  b_9;
  // spec.hs:462:9-81
  wire [7:0] f1_8;
  wire [7:0] result_74;
  // spec.hs:318:1-104
  wire  pIn0_0;
  // spec.hs:318:1-104
  wire [9:0] pacings;
  // spec.hs:469:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_75;
  wire signed [63:0] result_76;
  // spec.hs:469:1-81
  wire  b_10;
  wire signed [63:0] result_77;
  wire signed [63:0] x_29;
  wire  result_78;
  // spec.hs:318:1-104
  wire  b_11;
  wire [76:0] result_79;
  reg [74:0] c$app_arg_27 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                      1'b0,   1'b0,   1'b0}};
  wire [74:0] c$case_alt;
  wire [74:0] c$case_alt_0;
  wire [74:0] c$case_alt_1;
  reg [74:0] c$case_alt_2;
  reg [74:0] c$case_alt_3;
  wire [74:0] c$case_alt_4;
  reg  c$app_arg_28 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_29 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:175:1-78
  reg [299:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0}}};
  // spec.hs:175:1-78
  wire [299:0] c$buffer_case_alt;
  // spec.hs:175:1-78
  wire [299:0] c$buffer_case_alt_0;
  // spec.hs:175:1-78
  wire [299:0] c$buffer_case_alt_1;
  // spec.hs:175:1-78
  wire [74:0] qData;
  // spec.hs:175:1-78
  wire signed [63:0] x_30;
  // spec.hs:175:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:175:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:175:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:563:1-129
  wire  qPopValid;
  // spec.hs:563:1-129
  wire  qPush;
  // spec.hs:563:1-129
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] x_projection_1;
  wire signed [63:0] x_projection_4;
  wire signed [63:0] x_projection_5;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [374:0] c$buffer_case_alt_sel_alt_t_1;
  wire [374:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [598:0] result;
  wire [584:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [64:0] result_0_7;
  wire [64:0] result_0_8;
  wire [13:0] result_1;
  wire [9:0] result_1_4;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = {hasInput0,   {inputs,
                                   {pIn0,   pIn0,   pIn0,   pIn0,   pIn0,   pIn0,
                                    pIn0,   pIn0,   pIn0,   pIn0}}};

  assign hasInput0 = inputs[0:0];

  assign pIn0 = hasInput0;

  assign result_3 = {{result_75 & (~ result_78),
                      {{dta_3,   result_12},   {dta_2,   result_11},
                       {winData_2,   result_10},   {winData_1,
                                                    result_9},   {winData_0,   result_8},
                       {dta_1,   result_7},   {winData,   result_6},
                       {dta_0,   result_5},   {dta,   result_4}}},
                     pacings};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  assign iterateI_ho1_0_arg0 = x_22;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  assign c$app_arg = {x_22,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res};



  assign result_4 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  assign iterateI_ho1_0_arg0_0 = x_20;

  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {x_20,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_5 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  assign iterateI_ho1_0_arg0_1 = x_23;

  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_10;



  assign c$app_arg_1 = {x_23,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1};



  assign result_6 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  assign iterateI_ho1_0_arg0_2 = x_24;

  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_14;



  assign c$app_arg_2 = {x_24,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2};



  assign result_7 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  assign iterateI_ho1_0_arg0_3 = x_25;

  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_18;



  assign c$app_arg_3 = {x_25,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3};



  assign result_8 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  assign iterateI_ho1_0_arg0_4 = x_26;

  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_22;



  assign c$app_arg_4 = {x_26,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4};



  assign result_9 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_arg0_5;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  assign iterateI_ho1_0_arg0_5 = x_27;

  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_26;



  assign c$app_arg_5 = {x_27,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5};



  assign result_10 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_arg0_6;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  assign iterateI_ho1_0_arg0_6 = x_21;

  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_30;



  assign c$app_arg_6 = {x_21,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6};



  assign result_11 = c$app_arg_6[1-1:0];

  wire  iterateI_ho1_0_arg0_7;
  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  assign iterateI_ho1_0_arg0_7 = x_28;

  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_34;



  assign c$app_arg_7 = {x_28,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7};



  assign result_12 = c$app_arg_7[1-1:0];

  assign tagToMatch = result_54[71:64];

  assign tag = result_14[71:64];

  assign result_13 = x ? t : result_14;

  assign x = result_39;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_14_register
    if ( rst) begin
      result_14 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_14 <= result_13;
    end
  end
  // register end

  assign t = {t_17,   (x_1 + y_0)};

  assign x_0 = result_37;

  assign y = c$out0_case_alt;

  assign x_projection_1 = (x_0 + y);

  assign x_1 = x_projection_1;

  assign y_0 = c$out0_case_alt_0;

  assign c$out0_case_alt = (result_30 == winTag) ? winData : (64'sd0);

  assign result_15 = x_2 ? t_0 : result_16;

  assign x_2 = result_29;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_16 <= result_15;
    end
  end
  // register end

  assign t_0 = {result_53[23:16],   (x_5 + y_3)};

  assign x_3 = c$out6_case_alt_2;

  assign y_1 = c$out6_case_alt_1;

  assign x_projection_4 = (x_3 + y_1);

  assign x_4 = x_projection_4;

  assign x_projection_5 = (x_4 + y_2);

  assign x_5 = x_projection_5;

  assign y_2 = c$out6_case_alt_0;

  assign y_3 = c$out6_case_alt;

  assign c$out6_case_alt = (tag_0 == tagToMatch_0) ? dta : (64'sd0);

  assign dta = $signed(result_42[63:0]);

  assign tag_0 = result_42[71:64];

  assign tagToMatch_0 = result_53[7:0];

  assign c$out6_case_alt_0 = (tag_1 == tagToMatch_1) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_47[63:0]);

  assign tag_1 = result_47[71:64];

  assign tagToMatch_1 = result_53[15:8];

  assign c$out6_case_alt_1 = (result_17 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_16[63:0]);

  assign winTag = result_16[71:64];

  assign result_17 = (result_53[23:16] > 8'd1) ? c$app_arg_8 : (c$app_arg_8 + 8'd3);

  assign c$app_arg_8 = result_53[23:16] - 8'd1;

  assign c$out6_case_alt_2 = (tag_2 == tagToMatch_2) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_19[63:0]);

  assign tag_2 = result_19[71:64];

  assign result_18 = x_6 ? t_1 : result_19;

  assign x_6 = result_28;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_19 <= result_18;
    end
  end
  // register end

  assign t_1 = {t_13,   (x_7 + y_4)};

  assign x_7 = c$out5_case_alt_0;

  assign y_4 = c$out5_case_alt;

  assign c$out5_case_alt = (result_23 == winTag_0) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_21[63:0]);

  assign winTag_0 = result_21[71:64];

  assign result_20 = x_8 ? t_2 : result_21;

  assign x_8 = result_22;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_2 = {result_53[39:32],
                (x_9 + 64'sd1)};

  assign x_9 = c$out2_case_alt;

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_37;



  assign c$app_arg_9 = {pOut4,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8};



  assign result_22 = c$app_arg_9[1-1:0];

  assign result_23 = (t_14 > 8'd1) ? c$app_arg_10 : (c$app_arg_10 + 8'd3);

  assign c$app_arg_10 = t_14 - 8'd1;

  assign c$out5_case_alt_0 = (result_27 == winTag_1) ? winData_1 : (64'sd0);

  assign winData_1 = $signed(result_25[63:0]);

  assign winTag_1 = result_25[71:64];

  assign result_24 = x_10 ? t_3 : result_25;

  assign x_10 = result_26;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign t_3 = {result_53[47:40],
                (x_11 + 64'sd1)};

  assign x_11 = c$out2_case_alt;

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_40;



  assign c$app_arg_11 = {pOut3,
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_9};



  assign result_26 = c$app_arg_11[1-1:0];

  assign result_27 = (t_15 > 8'd1) ? c$app_arg_12 : (c$app_arg_12 + 8'd3);

  assign c$app_arg_12 = t_15 - 8'd1;

  wire  iterateI_ho1_0_res_10;
  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_41;



  assign c$app_arg_13 = {pOut5,
                         iterateI_ho1_0_res_10};



  assign result_28 = c$app_arg_13[1-1:0];

  assign tagToMatch_2 = result_53[31:24];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_10;
  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= pOut6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_44;



  assign c$app_arg_14 = {pOut6,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10};



  assign result_29 = c$app_arg_14[1-1:0];

  assign result_30 = (t_12 > 8'd1) ? c$app_arg_15 : (c$app_arg_15 + 8'd3);

  assign c$app_arg_15 = t_12 - 8'd1;

  assign c$out0_case_alt_0 = (result_36 == winTag_2) ? winData_2 : (64'sd0);

  assign winData_2 = $signed(result_32[63:0]);

  assign winTag_2 = result_32[71:64];

  assign result_31 = x_12 ? t_4 : result_32;

  assign x_12 = result_35;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_32_register
    if ( rst) begin
      result_32 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_32 <= result_31;
    end
  end
  // register end

  assign t_4 = {result_53[55:48],
                (x_13 + 64'sd1)};

  assign x_13 = c$out2_case_alt;

  assign c$out2_case_alt = (tag_3 == tagToMatch_3) ? dta_2 : (64'sd0);

  assign dta_2 = $signed(result_34[63:0]);

  assign tag_3 = result_34[71:64];

  assign result_33 = x_14 ? t_5 : result_34;

  assign x_14 = result_40;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_34_register
    if ( rst) begin
      result_34 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_34 <= result_33;
    end
  end
  // register end

  assign t_5 = {result_54[63:56],
                (x_15 + 64'sd1)};

  assign x_15 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == tagToMatch) ? dta_3 : (64'sd0);

  assign dta_3 = $signed(result_14[63:0]);

  assign tagToMatch_3 = result_53[63:56];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_11;
  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_47;



  assign c$app_arg_16 = {pOut2,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11};



  assign result_35 = c$app_arg_16[1-1:0];

  assign result_36 = (t_16 > 8'd1) ? c$app_arg_17 : (c$app_arg_17 + 8'd3);

  assign c$app_arg_17 = t_16 - 8'd1;

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_51[i_2*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_2*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_3*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_3[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:276:1-65
    wire [7:0] t_20;
    // spec.hs:276:1-65
    wire [71:0] x_32;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_20 == result_38) ? {1'b1,map_index} : map_in[1:0];

    assign t_20 = x_32[71:64];

    assign x_32 = map_in[73:2];


    assign c$ws_app_arg_0[i_3*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array
    assign vecArray[(2-1)-i_4] = result_51[i_4*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_37 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign result_38 = (t_18 > 8'd2) ? c$app_arg_18 : (c$app_arg_18 + 8'd3);

  assign c$app_arg_18 = t_18 - 8'd2;

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_13;
  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_48;



  assign c$app_arg_19 = {pOut0,
                         iterateI_ho1_0_res_13};



  assign result_39 = c$app_arg_19[1-1:0];

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_12;
  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_50;



  assign c$app_arg_20 = {pOut1,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_12};



  assign result_40 = c$app_arg_20[1-1:0];

  assign result_41 = x_16 ? t_6 : result_42;

  assign x_16 = result_45;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_6 = {t_11,   (x_17 + 64'sd1)};

  assign x_17 = result_43;

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 2; i_6 = i_6 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_51[i_6*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_6*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_6*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_7*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_7[0+:1];
    wire [1:0] c$case_alt_14;
    // spec.hs:276:1-65
    wire [7:0] t_21;
    // spec.hs:276:1-65
    wire [71:0] x_33;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_21 == result_44) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_21 = x_33[71:64];

    assign x_33 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_7*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_8] = result_51[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_43 = c$case_scrut_2[1:1] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign result_44 = (t_18 > 8'd1) ? c$app_arg_21 : (c$app_arg_21 + 8'd3);

  assign c$app_arg_21 = t_18 - 8'd1;

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_15;
  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= pOut8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_51;



  assign c$app_arg_22 = {pOut8,
                         iterateI_ho1_0_res_15};



  assign result_45 = c$app_arg_22[1-1:0];

  assign result_46 = x_18 ? t_7 : result_47;

  assign x_18 = result_49;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_47_register
    if ( rst) begin
      result_47 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_47 <= result_46;
    end
  end
  // register end

  assign t_7 = {result_54[15:8],
                (x_19 + 64'sd1)};

  assign x_19 = result_48;

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 2; i_9 = i_9 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_51[i_9*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_9*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_9*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_10*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_10[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:276:1-65
    wire [7:0] t_22;
    // spec.hs:276:1-65
    wire [71:0] x_34;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_22 == result_54[79:72]) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_22 = x_34[71:64];

    assign x_34 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_10*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11=i_11+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_11] = result_51[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_48 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_16;
  wire  iterateI_ho1_1_res_13;
  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= pOut7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_52;



  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_53;



  assign c$app_arg_23 = {pOut7,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_13};



  assign result_49 = c$app_arg_23[1-1:0];

  assign result_50 = b ? t_8 : result_51;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_51_register
    if ( rst) begin
      result_51 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_51 <= result_50;
    end
  end
  // register end

  assign b = result_52;

  assign t_projection_2 = ({result_51,{t_18,   c$input0Win_app_arg}});

  assign t_8 = t_projection_2[143:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(result_79[74:11]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_17;
  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_54;



  assign c$app_arg_24 = {pIn0_0,
                         iterateI_ho1_0_res_17};



  assign result_52 = c$app_arg_24[1-1:0];

  wire [79:0] iterateI_ho1_0_arg0_8;
  wire [79:0] iterateI_ho1_0_res_18;
  wire [79:0] iterateI_ho1_1_res_14;
  assign iterateI_ho1_0_arg0_8 = {t_18,   t_17,
                                  t_10,   t_16,   t_15,   t_14,   t_13,   t_12,
                                  t_9,   t_11};

  reg [79:0] c$bb_res_res_55 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_55;



  reg [79:0] c$bb_res_res_56 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_56;



  assign c$app_arg_25 = {{t_18,   t_17,   t_10,
                          t_16,   t_15,   t_14,   t_13,   t_12,   t_9,
                          t_11},   iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_14};



  assign result_53 = c$app_arg_25[80-1:0];

  wire [79:0] iterateI_ho1_0_arg0_9;
  wire [79:0] iterateI_ho1_0_res_19;
  assign iterateI_ho1_0_arg0_9 = {t_18,   t_17,
                                  t_10,   t_16,   t_15,   t_14,   t_13,   t_12,
                                  t_9,   t_11};

  reg [79:0] c$bb_res_res_57 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_0_arg0_9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_57;



  assign c$app_arg_26 = {{t_18,   t_17,   t_10,
                          t_16,   t_15,   t_14,   t_13,   t_12,   t_9,
                          t_11},   iterateI_ho1_0_res_19};



  assign result_54 = c$app_arg_26[80-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_55;
    end
  end
  // register end

  assign result_55 = x_20 ? result_56 : t_9;

  assign b_0 = t_9 == 8'd3;

  assign f1 = t_9 + 8'd1;

  assign result_56 = b_0 ? 8'd1 : f1;

  assign x_20 = pOut7;

  assign pOut7 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_57;
    end
  end
  // register end

  assign result_57 = x_21 ? result_58 : t_10;

  assign b_1 = t_10 == 8'd3;

  assign f1_0 = t_10 + 8'd1;

  assign result_58 = b_1 ? 8'd1 : f1_0;

  assign x_21 = pOut1;

  assign pOut1 = pacings[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_59;
    end
  end
  // register end

  assign result_59 = x_22 ? result_60 : t_11;

  assign b_2 = t_11 == 8'd3;

  assign f1_1 = t_11 + 8'd1;

  assign result_60 = b_2 ? 8'd1 : f1_1;

  assign x_22 = pOut8;

  assign pOut8 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_61;
    end
  end
  // register end

  assign result_61 = x_23 ? result_62 : t_12;

  assign b_3 = t_12 == 8'd3;

  assign f1_2 = t_12 + 8'd1;

  assign result_62 = b_3 ? 8'd1 : f1_2;

  assign x_23 = pOut6;

  assign pOut6 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_63;
    end
  end
  // register end

  assign result_63 = x_24 ? result_64 : t_13;

  assign b_4 = t_13 == 8'd3;

  assign f1_3 = t_13 + 8'd1;

  assign result_64 = b_4 ? 8'd1 : f1_3;

  assign x_24 = pOut5;

  assign pOut5 = pacings[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_65;
    end
  end
  // register end

  assign result_65 = x_25 ? result_66 : t_14;

  assign b_5 = t_14 == 8'd3;

  assign f1_4 = t_14 + 8'd1;

  assign result_66 = b_5 ? 8'd1 : f1_4;

  assign x_25 = pOut4;

  assign pOut4 = pacings[4:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_15_register
    if ( rst) begin
      t_15 <= 8'd1;
    end else if (en) begin
      t_15 <= result_67;
    end
  end
  // register end

  assign result_67 = x_26 ? result_68 : t_15;

  assign b_6 = t_15 == 8'd3;

  assign f1_5 = t_15 + 8'd1;

  assign result_68 = b_6 ? 8'd1 : f1_5;

  assign x_26 = pOut3;

  assign pOut3 = pacings[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_16_register
    if ( rst) begin
      t_16 <= 8'd1;
    end else if (en) begin
      t_16 <= result_69;
    end
  end
  // register end

  assign result_69 = x_27 ? result_70 : t_16;

  assign b_7 = t_16 == 8'd3;

  assign f1_6 = t_16 + 8'd1;

  assign result_70 = b_7 ? 8'd1 : f1_6;

  assign x_27 = pOut2;

  assign pOut2 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_17_register
    if ( rst) begin
      t_17 <= 8'd1;
    end else if (en) begin
      t_17 <= result_71;
    end
  end
  // register end

  assign result_71 = x_28 ? result_72 : t_17;

  assign b_8 = t_17 == 8'd3;

  assign f1_7 = t_17 + 8'd1;

  assign result_72 = b_8 ? 8'd1 : f1_7;

  assign x_28 = pOut0;

  assign pOut0 = pacings[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_18_register
    if ( rst) begin
      t_18 <= 8'd1;
    end else if (en) begin
      t_18 <= result_73;
    end
  end
  // register end

  assign result_73 = pIn0_0 ? result_74 : t_18;

  assign b_9 = t_18 == 8'd3;

  assign f1_8 = t_18 + 8'd1;

  assign result_74 = b_9 ? 8'd1 : f1_8;

  assign pIn0_0 = pacings[9:9];

  assign pacings = result_79[9:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_76;
    end
  end
  // register end

  assign result_75 = toWait == (64'sd0);

  assign result_76 = result_78 ? (64'sd2) : result_77;

  assign b_10 = toWait > (64'sd0);

  assign result_77 = b_10 ? ((x_29 - 64'sd1)) : toWait;

  assign x_29 = toWait;

  assign result_78 = b_11 ? 1'b1 : 1'b0;

  assign b_11 = result_75 & qPopValid;

  assign result_79 = {c$app_arg_29,
                      c$app_arg_28,   c$app_arg_27};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_27_register
    if ( rst) begin
      c$app_arg_27 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                        1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_27 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_30)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_30)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [74:0] vecArray_2 [0:4-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 4; i_12=i_12+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_12] = buffer[i_12*75+:75];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_2[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_28_register
    if ( rst) begin
      c$app_arg_28 <= 1'b0;
    end else if (en) begin
      c$app_arg_28 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_30)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_29_register
    if ( rst) begin
      c$app_arg_29 <= 1'b0;
    end else if (en) begin
      c$app_arg_29 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_30 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[374:75] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[374:75];

  assign qData = result_2[74:0];

  assign x_30 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_30 + 64'sd1));

  assign c$tte_rhs_0 = (x_30 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_30)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_30 - 64'sd1);

  assign result = {result_3[594:10],   {qPush,
                                        qPop,   result_79[76:76],   qPopValid,
                                        result_3[9:0]}};

  assign qPopValid = result_79[75:75];

  assign qPush = result_2[75:75];

  assign qPop = result_3[595:595];

  assign result_0 = result[598:14];

  assign result_1 = result[13:0];

  assign result_0_0 = result_0[584:520];

  assign result_0_1 = result_0[519:455];

  assign result_0_2 = result_0[454:390];

  assign result_0_3 = result_0[389:325];

  assign result_0_4 = result_0[324:260];

  assign result_0_5 = result_0[259:195];

  assign result_0_6 = result_0[194:130];

  assign result_0_7 = result_0[129:65];

  assign result_0_8 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_0_7_0 = $signed(result_0_7[64:1]);

  assign result_0_7_1 = result_0_7[0:0];

  assign result_0_8_0 = $signed(result_0_8[64:1]);

  assign result_0_8_1 = result_0_8[0:0];

  assign result_1_0 = result_1[13:13];

  assign result_1_1 = result_1[12:12];

  assign result_1_2 = result_1[11:11];

  assign result_1_3 = result_1[10:10];

  assign result_1_4 = result_1[9:0];

  assign result_1_4_0 = result_1_4[9:9];

  assign result_1_4_1 = result_1_4[8:8];

  assign result_1_4_2 = result_1_4[7:7];

  assign result_1_4_3 = result_1_4[6:6];

  assign result_1_4_4 = result_1_4[5:5];

  assign result_1_4_5 = result_1_4[4:4];

  assign result_1_4_6 = result_1_4[3:3];

  assign result_1_4_7 = result_1_4[2:2];

  assign result_1_4_8 = result_1_4[1:1];

  assign result_1_4_9 = result_1_4[0:0];


endmodule


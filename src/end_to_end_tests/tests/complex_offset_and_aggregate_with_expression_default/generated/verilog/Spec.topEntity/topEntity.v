/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    );
  wire [132:0] result_2;
  // spec.hs:147:1-82
  wire  hasInput1;
  // spec.hs:147:1-82
  wire  pacing0;
  wire [132:0] result_3;
  reg  c$app_arg = 1'b0;
  reg  c$app_arg_0 = 1'b0;
  wire [71:0] result_4;
  // spec.hs:283:1-137
  reg [71:0] result_5 = {8'd3,   64'sd0};
  // spec.hs:283:1-137
  wire [71:0] t;
  wire signed [63:0] x;
  wire signed [63:0] y;
  wire signed [63:0] x_0;
  // spec.hs:190:1-62
  wire [7:0] winTag;
  // spec.hs:190:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_6;
  wire [7:0] c$app_arg_1;
  // spec.hs:190:1-62
  wire [7:0] winTag_0;
  // spec.hs:190:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_7;
  wire [7:0] c$app_arg_2;
  // spec.hs:272:1-111
  reg [71:0] result_8 = {8'd3,   64'sd0};
  // spec.hs:272:1-111
  wire [71:0] c$result_app_arg;
  reg [64:0] c$case_scrut = {64'sd0,   1'b0};
  reg  c$app_arg_3 = 1'b0;
  reg  c$app_arg_4 = 1'b0;
  reg  c$app_arg_5 = 1'b0;
  // spec.hs:293:1-112
  wire [71:0] c$result_app_arg_0;
  // spec.hs:293:1-112
  reg [71:0] result_9 = {8'd3,   64'sd0};
  // spec.hs:277:1-111
  reg [71:0] result_10 = {8'd3,   64'sd0};
  // spec.hs:277:1-111
  wire [71:0] c$result_app_arg_1;
  // spec.hs:200:1-109
  reg [64:0] c$out1_case_scrut = {64'sd0,   1'b0};
  // spec.hs:200:1-109
  reg  c$out1_app_arg = 1'b0;
  // spec.hs:200:1-109
  reg  c$out1_app_arg_0 = 1'b0;
  // spec.hs:200:1-109
  reg  c$out1_app_arg_1 = 1'b0;
  // spec.hs:200:1-109
  wire [7:0] out0Level1TagOut1;
  // spec.hs:200:1-109
  wire [7:0] out0Level1TagIn0;
  // spec.hs:200:1-109
  reg [31:0] c$ds3_case_scrut = {8'd3,   8'd3,   8'd3,   8'd3};
  // spec.hs:262:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_11;
  // spec.hs:262:9-81
  wire  b;
  // spec.hs:262:9-81
  wire [7:0] f1;
  wire [7:0] result_12;
  // spec.hs:200:1-109
  wire  p2;
  // spec.hs:262:9-81
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_13;
  // spec.hs:262:9-81
  wire  b_0;
  // spec.hs:262:9-81
  wire [7:0] f1_0;
  wire [7:0] result_14;
  // spec.hs:200:1-109
  wire  p0;
  // spec.hs:200:1-109
  wire [1:0] pacings;
  // spec.hs:262:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_15;
  // spec.hs:262:9-81
  wire  b_1;
  // spec.hs:262:9-81
  wire [7:0] f1_1;
  wire [7:0] result_16;
  // spec.hs:200:1-109
  wire  input1HasData;
  // spec.hs:200:1-109
  wire [64:0] input2;
  // spec.hs:262:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_17;
  // spec.hs:262:9-81
  wire  b_2;
  // spec.hs:262:9-81
  wire [7:0] f1_2;
  wire [7:0] result_18;
  // spec.hs:200:1-109
  wire  input0HasData;
  // spec.hs:200:1-109
  wire [64:0] input0;
  wire [133:0] result_19;
  reg [131:0] c$app_arg_6 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}};
  wire [131:0] c$case_alt_1;
  wire [131:0] c$case_alt_2;
  wire [131:0] c$case_alt_3;
  reg [131:0] c$case_alt_4;
  reg [131:0] c$case_alt_5;
  wire [131:0] c$case_alt_6;
  reg  c$app_arg_7 = 1'b0;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  reg  c$case_alt_11;
  reg  c$app_arg_8 = 1'b0;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  // spec.hs:80:1-78
  reg [263:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}},   {{{64'sd0,
                                                                  1'b0},
                                                                 {64'sd0,
                                                                  1'b0}},
                                                                {1'b0,   1'b0}}};
  // spec.hs:80:1-78
  wire [263:0] c$buffer_case_alt;
  // spec.hs:80:1-78
  wire [263:0] c$buffer_case_alt_0;
  // spec.hs:80:1-78
  wire [263:0] c$buffer_case_alt_1;
  // spec.hs:80:1-78
  wire [131:0] qData;
  // spec.hs:80:1-78
  wire signed [63:0] x_1;
  // spec.hs:80:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:80:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:80:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:80:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:80:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:80:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:80:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:80:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:308:1-134
  wire  qPopValid;
  // spec.hs:308:1-134
  wire  qPush;
  // spec.hs:308:1-134
  wire  qPop;
  wire [129:0] inputs;
  wire signed [63:0] x_projection_1;
  wire signed [63:0] c$tte_rhs;
  wire [395:0] c$buffer_case_alt_sel_alt_t_1;
  wire [395:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [135:0] result;
  wire [129:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [5:0] result_1;
  wire [1:0] result_1_4_6;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {pacing0 | hasInput1,
                     {inputs,   {pacing0,   hasInput1}}};

  assign hasInput1 = inputs[0:0];

  assign pacing0 = inputs[65:65] & hasInput1;

  assign result_3 = {{1'b1,
                      {{$signed(result_5[63:0]),   c$app_arg_0},
                       {$signed(result_9[63:0]),   c$app_arg}}},
                     pacings};

  // delay begin
  always @(posedge clk) begin : c$app_arg_delay
    if (en) begin
      c$app_arg <= c$out1_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_0_delay
    if (en) begin
      c$app_arg_0 <= c$app_arg_4;
    end
  end
  // delay end

  assign result_4 = c$app_arg_4 ? t : result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign t = {c$case_alt_0[71:64],   (x_0 + y)};

  assign x = $signed(c$case_alt_0[63:0]);

  assign y = $signed(c$case_alt[63:0]);

  assign x_projection_1 = (x + 64'sd1);

  assign x_0 = x_projection_1;

  assign winTag = result_9[71:64];

  assign winData = $signed(result_9[63:0]);

  assign c$case_alt = (result_6 == winTag) ? {out0Level1TagOut1,
                                              winData} : {out0Level1TagOut1,   64'sd0};

  assign result_6 = (out0Level1TagOut1 > 8'd1) ? c$app_arg_1 : (c$app_arg_1 + 8'd2);

  assign c$app_arg_1 = out0Level1TagOut1 - 8'd1;

  assign winTag_0 = result_8[71:64];

  assign winData_0 = $signed(result_8[63:0]);

  assign c$case_alt_0 = (result_7 == winTag_0) ? {out0Level1TagIn0,
                                                  winData_0} : {out0Level1TagIn0,   64'sd1000};

  assign result_7 = (out0Level1TagIn0 > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd2);

  assign c$app_arg_2 = out0Level1TagIn0 - 8'd1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_8 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = c$app_arg_3 ? {t_3,
                                           $signed(c$case_scrut[64:1])} : result_8;

  // delay begin
  always @(posedge clk) begin : c$case_scrut_delay
    if (en) begin
      c$case_scrut <= input0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_3_delay
    if (en) begin
      c$app_arg_3 <= input0HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$app_arg_5;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_5_delay
    if (en) begin
      c$app_arg_5 <= p0;
    end
  end
  // delay end

  assign c$result_app_arg_0 = c$out1_app_arg_0 ? {result_10[71:64],
                                                  $signed(result_10[63:0])} : result_9;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_9 <= c$result_app_arg_0;
    end
  end
  // register end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_10 <= c$result_app_arg_1;
    end
  end
  // register end

  assign c$result_app_arg_1 = c$out1_app_arg ? {t_2,
                                                $signed(c$out1_case_scrut[64:1])} : result_10;

  // delay begin
  always @(posedge clk) begin : c$out1_case_scrut_delay
    if (en) begin
      c$out1_case_scrut <= input2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= input1HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_0_delay
    if (en) begin
      c$out1_app_arg_0 <= c$out1_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_1_delay
    if (en) begin
      c$out1_app_arg_1 <= p2;
    end
  end
  // delay end

  assign out0Level1TagOut1 = c$ds3_case_scrut[7:0];

  assign out0Level1TagIn0 = c$ds3_case_scrut[31:24];

  // delay begin
  always @(posedge clk) begin : c$ds3_case_scrut_delay
    if (en) begin
      c$ds3_case_scrut <= {t_3,   t_2,   t_1,   t_0};
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_11;
    end
  end
  // register end

  assign result_11 = p2 ? result_12 : t_0;

  assign b = t_0 == 8'd2;

  assign f1 = t_0 + 8'd1;

  assign result_12 = b ? 8'd1 : f1;

  assign p2 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_13;
    end
  end
  // register end

  assign result_13 = p0 ? result_14 : t_1;

  assign b_0 = t_1 == 8'd2;

  assign f1_0 = t_1 + 8'd1;

  assign result_14 = b_0 ? 8'd1 : f1_0;

  assign p0 = pacings[1:1];

  assign pacings = result_19[1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_15;
    end
  end
  // register end

  assign result_15 = input1HasData ? result_16 : t_2;

  assign b_1 = t_2 == 8'd2;

  assign f1_1 = t_2 + 8'd1;

  assign result_16 = b_1 ? 8'd1 : f1_1;

  assign input1HasData = input2[0:0];

  assign input2 = result_19[66:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_17;
    end
  end
  // register end

  assign result_17 = input0HasData ? result_18 : t_3;

  assign b_2 = t_3 == 8'd2;

  assign f1_2 = t_3 + 8'd1;

  assign result_18 = b_2 ? 8'd1 : f1_2;

  assign input0HasData = input0[0:0];

  assign input0 = result_19[131:67];

  assign result_19 = {c$app_arg_8,   c$app_arg_7,
                      c$app_arg_6};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_6_register
    if ( rst) begin
      c$app_arg_6 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_6 <= c$case_alt_1;
    end
  end
  // register end

  assign c$case_alt_1 = qPush ? c$case_alt_2 : c$case_alt_3;

  assign c$case_alt_2 = qPop ? c$case_alt_4 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}};

  assign c$case_alt_3 = qPop ? c$case_alt_5 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}};

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_4 = qData;
      default : c$case_alt_4 = c$case_alt_6;
    endcase
  end

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_5 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0}};
      default : c$case_alt_5 = c$case_alt_6;
    endcase
  end

  // index begin
  wire [131:0] vecArray [0:2-1];
  genvar i;
  generate
  for (i=0; i < 2; i=i+1) begin : mk_array
    assign vecArray[(2-1)-i] = buffer[i*132+:132];
  end
  endgenerate
  assign c$case_alt_6 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_7_register
    if ( rst) begin
      c$app_arg_7 <= 1'b0;
    end else if (en) begin
      c$app_arg_7 <= c$case_alt_7;
    end
  end
  // register end

  assign c$case_alt_7 = qPush ? c$case_alt_8 : c$case_alt_9;

  assign c$case_alt_8 = qPop ? 1'b1 : c$case_alt_10;

  assign c$case_alt_9 = qPop ? c$case_alt_11 : c$case_alt_10;

  assign c$case_alt_10 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_11 = 1'b0;
      default : c$case_alt_11 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= 1'b0;
    end else if (en) begin
      c$app_arg_8 <= c$case_alt_12;
    end
  end
  // register end

  assign c$case_alt_12 = qPush ? c$case_alt_13 : 1'b0;

  assign c$case_alt_13 = qPop ? 1'b1 : c$case_alt_14;

  assign c$tte_rhs = (x_1 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_14 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0}},   {{{64'sd0,
                                                                    1'b0},
                                                                   {64'sd0,
                                                                    1'b0}},
                                                                  {1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[395:132] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[395:132];

  assign qData = result_2[131:0];

  assign x_1 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_1 + 64'sd1));

  assign c$tte_rhs_0 = (x_1 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_1)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_1 - 64'sd1);

  assign result = {result_3[131:2],   {qPush,
                                       qPop,   result_19[133:133],   qPopValid,
                                       result_3[1:0]}};

  assign qPopValid = result_19[132:132];

  assign qPush = result_2[132:132];

  assign qPop = result_3[132:132];

  assign result_0 = result[135:6];

  assign result_1 = result[5:0];

  assign result_0_0 = result_0[129:65];

  assign result_0_1 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_1_0 = result_1[5:5];

  assign result_1_1 = result_1[4:4];

  assign result_1_2 = result_1[3:3];

  assign result_1_3 = result_1[2:2];

  assign result_1_4_6 = result_1[1:0];

  assign result_1_4_0 = result_1_4_6[1:1];

  assign result_1_4_1 = result_1_4_6[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire signed [63:0] result_0_7_0
    , output wire  result_0_7_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_4_7
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    );
  wire [140:0] result_2;
  // spec.hs:182:1-82
  wire  pacing3;
  // spec.hs:182:1-82
  wire  hasInput1;
  // spec.hs:182:1-82
  wire  hasInput0;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  // spec.hs:182:1-82
  wire  timer0Over;
  wire signed [63:0] result_5;
  wire signed [63:0] x_0;
  reg signed [63:0] result_6 = (64'sd0);
  // spec.hs:182:1-82
  wire  timer1Over;
  // spec.hs:428:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_7;
  wire signed [63:0] result_8;
  // spec.hs:428:1-81
  wire  b;
  wire signed [63:0] result_9;
  wire signed [63:0] x_1;
  wire  result_10;
  // spec.hs:421:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_11;
  // spec.hs:421:9-81
  wire  b_0;
  // spec.hs:421:9-81
  wire [7:0] f1;
  wire [7:0] result_12;
  // spec.hs:421:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_13;
  // spec.hs:421:9-81
  wire  b_1;
  // spec.hs:421:9-81
  wire [7:0] f1_0;
  wire [7:0] result_14;
  // spec.hs:258:1-159
  reg  c$input0Win_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg [64:0] c$input0Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:437:1-130
  reg [215:0] result_15 = {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
  // spec.hs:437:1-130
  wire [215:0] t_1;
  wire [215:0] result_16;
  // spec.hs:258:1-159
  reg  c$input1Win_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg [64:0] c$input1Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:442:1-122
  reg [71:0] result_17 = {8'd6,   64'sd0};
  // spec.hs:442:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:421:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_18;
  // spec.hs:421:9-81
  wire  b_2;
  // spec.hs:421:9-81
  wire [7:0] f1_1;
  wire [7:0] result_19;
  // spec.hs:421:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_20;
  // spec.hs:421:9-81
  wire  b_3;
  // spec.hs:421:9-81
  wire [7:0] f1_2;
  wire [7:0] result_21;
  // spec.hs:421:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_22;
  // spec.hs:421:9-81
  wire  b_4;
  // spec.hs:421:9-81
  wire [7:0] f1_3;
  wire [7:0] result_23;
  // spec.hs:421:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_24;
  // spec.hs:421:9-81
  wire  b_5;
  // spec.hs:421:9-81
  wire [7:0] f1_4;
  wire [7:0] result_25;
  // spec.hs:421:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_26;
  // spec.hs:421:9-81
  wire  b_6;
  // spec.hs:421:9-81
  wire [7:0] f1_5;
  wire [7:0] result_27;
  // spec.hs:421:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_28;
  // spec.hs:421:9-81
  wire  b_7;
  // spec.hs:421:9-81
  wire [7:0] f1_6;
  wire [7:0] result_29;
  // spec.hs:421:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_30;
  // spec.hs:421:9-81
  wire  b_8;
  // spec.hs:421:9-81
  wire [7:0] f1_7;
  wire [7:0] result_31;
  // spec.hs:421:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_32;
  // spec.hs:421:9-81
  wire  b_9;
  // spec.hs:421:9-81
  wire [7:0] f1_8;
  wire [7:0] result_33;
  // spec.hs:258:1-159
  reg [95:0] c$ds9_case_scrut = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  // spec.hs:258:1-159
  reg  c$out4_app_arg = 1'b0;
  // spec.hs:230:1-72
  wire [147:0] c$ws_app_arg;
  // spec.hs:230:1-72
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_34;
  wire [7:0] result_35;
  wire [7:0] c$app_arg;
  // spec.hs:230:1-72
  wire [0:0] i;
  // spec.hs:230:1-72
  wire [5:0] ws;
  wire [143:0] result_36;
  // spec.hs:490:1-138
  reg [143:0] result_37 = {{8'd6,   64'sd0},   {8'd6,   64'sd0}};
  // spec.hs:490:1-138
  wire [143:0] t_10;
  wire signed [63:0] x_2;
  // spec.hs:258:1-159
  reg  c$out1_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg  c$out1_app_arg_0 = 1'b0;
  // spec.hs:230:1-72
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:230:1-72
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_38;
  wire [7:0] result_39;
  wire [7:0] c$app_arg_0;
  // spec.hs:230:1-72
  wire [1:0] i_0;
  // spec.hs:230:1-72
  wire [11:0] ws_0;
  wire [71:0] result_40;
  // spec.hs:458:1-130
  reg [71:0] result_41 = {8'd6,   64'sd0};
  // spec.hs:458:1-130
  wire [71:0] t_11;
  wire signed [63:0] x_3;
  // spec.hs:258:1-159
  reg  c$out5_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_0 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_1 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_2 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_3 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_4 = 1'b0;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_3;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire [71:0] result_42;
  // spec.hs:238:1-70
  wire [1:0] i_1;
  // spec.hs:238:1-70
  wire [11:0] ws_1;
  // spec.hs:258:1-159
  reg  c$out5_app_arg_5 = 1'b0;
  // spec.hs:541:1-148
  wire signed [63:0] y;
  // spec.hs:541:1-148
  wire signed [63:0] x1;
  // spec.hs:541:1-148
  wire [191:0] win;
  // spec.hs:541:1-148
  reg [199:0] window = {8'd6,   {64'sd0,   64'sd0,   64'sd0}};
  wire [199:0] result_43;
  // spec.hs:541:1-148
  wire [199:0] t_12;
  wire [191:0] result_44;
  // spec.hs:541:1-148
  wire [191:0] c$t_case_alt;
  // spec.hs:541:1-148
  wire signed [63:0] wild2;
  // spec.hs:541:1-148
  wire [191:0] c$t_case_alt_0;
  // spec.hs:541:1-148
  wire [191:0] c$t_case_alt_1;
  // spec.hs:500:1-138
  wire signed [63:0] c$t_app_arg;
  wire [71:0] result_45;
  // spec.hs:500:1-138
  reg [71:0] result_46 = {8'd6,   64'sd0};
  // spec.hs:500:1-138
  wire [71:0] t_13;
  // spec.hs:258:1-159
  reg  c$out0_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg  c$out0_app_arg_0 = 1'b0;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_5;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire [71:0] result_47;
  // spec.hs:238:1-70
  wire [1:0] i_2;
  // spec.hs:238:1-70
  wire [11:0] ws_2;
  // spec.hs:230:1-72
  wire signed [63:0] eta3;
  // spec.hs:230:1-72
  wire [224:0] c$ws_app_arg_7;
  // spec.hs:230:1-72
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire [71:0] result_48;
  wire [7:0] result_49;
  wire [7:0] c$app_arg_1;
  // spec.hs:230:1-72
  wire [1:0] i_3;
  // spec.hs:230:1-72
  wire [11:0] ws_3;
  // spec.hs:245:1-62
  wire [7:0] winTag;
  // spec.hs:245:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_50;
  wire [7:0] c$app_arg_2;
  wire [71:0] result_51;
  // spec.hs:448:1-155
  reg [71:0] result_52 = {8'd6,   64'sd0};
  // spec.hs:448:1-155
  wire [71:0] t_14;
  wire signed [63:0] x_4;
  wire signed [63:0] y_0;
  wire signed [63:0] x_5;
  // spec.hs:258:1-159
  reg  c$out2_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg  c$out2_app_arg_0 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out2_app_arg_1 = 1'b0;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_9;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire [71:0] result_53;
  // spec.hs:238:1-70
  wire [1:0] i_4;
  // spec.hs:238:1-70
  wire [11:0] ws_4;
  // spec.hs:258:1-159
  wire [71:0] c$out2_case_alt;
  // spec.hs:258:1-159
  wire [71:0] c$out2_case_alt_0;
  // spec.hs:258:1-159
  wire [71:0] c$out2_case_alt_1;
  wire [71:0] result_54;
  // spec.hs:467:1-205
  reg [71:0] result_55 = {8'd6,   64'sd0};
  // spec.hs:467:1-205
  wire [71:0] t_15;
  wire signed [63:0] x_6;
  wire signed [63:0] y_1;
  wire signed [63:0] x_7;
  wire signed [63:0] y_2;
  wire signed [63:0] x_8;
  wire signed [63:0] y_3;
  // spec.hs:258:1-159
  reg  c$out3_app_arg = 1'b0;
  // spec.hs:258:1-159
  reg  c$out3_app_arg_0 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out3_app_arg_1 = 1'b0;
  // spec.hs:258:1-159
  reg  c$out3_app_arg_2 = 1'b0;
  // spec.hs:258:1-159
  wire [71:0] c$out3_case_alt;
  // spec.hs:258:1-159
  wire [71:0] c$out3_case_alt_0;
  // spec.hs:245:1-62
  wire [7:0] winTag_0;
  // spec.hs:245:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_56;
  wire [7:0] c$app_arg_3;
  wire [71:0] result_57;
  // spec.hs:479:1-180
  reg [71:0] result_58 = {8'd6,   64'sd0};
  // spec.hs:479:1-180
  wire [71:0] t_16;
  wire signed [63:0] x_9;
  wire signed [63:0] y_4;
  wire signed [63:0] x_10;
  wire signed [63:0] y_5;
  reg  c$app_arg_4 = 1'b0;
  reg  c$app_arg_5 = 1'b0;
  reg  c$app_arg_6 = 1'b0;
  reg  c$app_arg_7 = 1'b0;
  reg  c$app_arg_8 = 1'b0;
  reg  c$app_arg_9 = 1'b0;
  reg  c$app_arg_10 = 1'b0;
  reg  c$app_arg_11 = 1'b0;
  reg  c$app_arg_12 = 1'b0;
  reg  c$app_arg_13 = 1'b0;
  reg  c$app_arg_14 = 1'b0;
  reg  c$app_arg_15 = 1'b0;
  reg  c$app_arg_16 = 1'b0;
  reg  c$app_arg_17 = 1'b0;
  reg  c$app_arg_18 = 1'b0;
  reg  c$app_arg_19 = 1'b0;
  reg  c$app_arg_20 = 1'b0;
  reg [95:0] c$app_arg_21 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  reg [95:0] c$case_scrut_11 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_11;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_12;
  wire [1:0] c$case_scrut_13;
  wire [71:0] result_59;
  // spec.hs:238:1-70
  wire [0:0] i_5;
  // spec.hs:238:1-70
  wire [5:0] ws_5;
  reg  c$app_arg_22 = 1'b0;
  reg  c$app_arg_23 = 1'b0;
  reg  c$app_arg_24 = 1'b0;
  reg  c$app_arg_25 = 1'b0;
  reg  c$app_arg_26 = 1'b0;
  reg  c$app_arg_27 = 1'b0;
  reg  c$app_arg_28 = 1'b0;
  reg  c$app_arg_29 = 1'b0;
  reg  c$app_arg_30 = 1'b0;
  reg  c$app_arg_31 = 1'b0;
  reg  c$app_arg_32 = 1'b0;
  reg  c$app_arg_33 = 1'b0;
  reg  c$app_arg_34 = 1'b0;
  reg  c$app_arg_35 = 1'b0;
  reg  c$app_arg_36 = 1'b0;
  wire [71:0] c$case_alt_1;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_13;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_14;
  wire [1:0] c$case_scrut_15;
  wire [71:0] result_60;
  // spec.hs:238:1-70
  wire [0:0] i_6;
  // spec.hs:238:1-70
  wire [5:0] ws_6;
  wire [71:0] c$case_alt_2;
  wire [71:0] result_61;
  // spec.hs:511:1-180
  reg [71:0] result_62 = {8'd6,   64'sd0};
  // spec.hs:511:1-180
  wire [71:0] t_17;
  wire signed [63:0] x_11;
  wire signed [63:0] y_6;
  wire signed [63:0] x_12;
  wire signed [63:0] y_7;
  reg  c$app_arg_37 = 1'b0;
  reg  c$app_arg_38 = 1'b0;
  reg  c$app_arg_39 = 1'b0;
  reg  c$app_arg_40 = 1'b0;
  reg  c$app_arg_41 = 1'b0;
  reg  c$app_arg_42 = 1'b0;
  reg  c$app_arg_43 = 1'b0;
  reg  c$app_arg_44 = 1'b0;
  reg  c$app_arg_45 = 1'b0;
  reg  c$app_arg_46 = 1'b0;
  reg  c$app_arg_47 = 1'b0;
  reg  c$app_arg_48 = 1'b0;
  reg  c$app_arg_49 = 1'b0;
  reg  c$app_arg_50 = 1'b0;
  reg  c$app_arg_51 = 1'b0;
  reg  c$app_arg_52 = 1'b0;
  reg  c$app_arg_53 = 1'b0;
  // spec.hs:562:1-148
  wire signed [63:0] y_8;
  // spec.hs:562:1-148
  wire signed [63:0] x1_0;
  // spec.hs:562:1-148
  wire [255:0] win_0;
  // spec.hs:562:1-148
  reg [263:0] window_0 = {8'd6,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [263:0] result_63;
  // spec.hs:562:1-148
  wire [263:0] t_18;
  wire [255:0] result_64;
  // spec.hs:562:1-148
  wire [255:0] c$t_case_alt_2;
  // spec.hs:562:1-148
  wire signed [63:0] wild2_0;
  // spec.hs:562:1-148
  wire [255:0] c$t_case_alt_3;
  // spec.hs:562:1-148
  wire [255:0] c$t_case_alt_4;
  // spec.hs:522:1-138
  wire signed [63:0] c$t_app_arg_0;
  wire [71:0] result_65;
  // spec.hs:522:1-138
  reg [71:0] result_66 = {8'd6,   64'sd0};
  // spec.hs:522:1-138
  wire [71:0] t_19;
  reg  c$app_arg_54 = 1'b0;
  wire [530:0] result_67;
  // spec.hs:251:1-60
  wire [7:0] tag;
  // spec.hs:258:1-159
  wire [1:0] slides;
  // spec.hs:258:1-159
  wire [64:0] input0;
  // spec.hs:258:1-159
  wire  input0HasData;
  // spec.hs:258:1-159
  wire  input1HasData;
  // spec.hs:258:1-159
  wire  slide0;
  // spec.hs:258:1-159
  wire [7:0] pacings;
  // spec.hs:258:1-159
  wire [95:0] curTags;
  // spec.hs:258:1-159
  reg [95:0] curTagsLevel1 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  // spec.hs:258:1-159
  reg [95:0] curTagsLevel2 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  // spec.hs:258:1-159
  wire [64:0] input2;
  // spec.hs:258:1-159
  reg [95:0] curTagsLevel4 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6,
 8'd6,   8'd6};
  // spec.hs:258:1-159
  wire [7:0] out0Level1TagIn0;
  // spec.hs:258:1-159
  wire [7:0] out0Level1TagOut0;
  // spec.hs:258:1-159
  wire [7:0] out0Level1TagOut3;
  // spec.hs:258:1-159
  wire  slide2;
  // spec.hs:258:1-159
  wire  p0;
  // spec.hs:258:1-159
  wire [7:0] out1Level1TagOut1;
  // spec.hs:258:1-159
  wire [7:0] out2Level2TagIn0;
  // spec.hs:258:1-159
  wire [7:0] out2Level2TagIn1;
  // spec.hs:258:1-159
  wire [7:0] out2Level2TagOut0;
  // spec.hs:258:1-159
  wire  p2;
  // spec.hs:258:1-159
  wire [7:0] out2Level2TagOut2;
  // spec.hs:258:1-159
  wire [7:0] out3Level3TagOut0;
  // spec.hs:258:1-159
  wire [7:0] out3Level3TagOut3;
  // spec.hs:258:1-159
  wire  p4;
  // spec.hs:258:1-159
  wire [7:0] out6Level4TagOut3;
  // spec.hs:258:1-159
  wire [7:0] out6Level4TagOut5;
  // spec.hs:258:1-159
  wire [7:0] out6Level4TagOut6;
  // spec.hs:258:1-159
  wire [7:0] sw0Level1TagSw0;
  // spec.hs:258:1-159
  wire  p6;
  // spec.hs:258:1-159
  wire  p8;
  // spec.hs:258:1-159
  wire  p3;
  // spec.hs:258:1-159
  wire  p5;
  // spec.hs:258:1-159
  wire  p7;
  // spec.hs:258:1-159
  wire [7:0] out2Level2TagOut1;
  // spec.hs:258:1-159
  wire [7:0] out3Level3TagOut2;
  // spec.hs:258:1-159
  wire [7:0] out6Level4TagOut4;
  // spec.hs:251:1-60
  wire [7:0] tag_0;
  // spec.hs:251:1-60
  wire signed [63:0] dta;
  // spec.hs:251:1-60
  wire [7:0] tag_1;
  // spec.hs:251:1-60
  wire [7:0] tag_2;
  // spec.hs:251:1-60
  wire signed [63:0] dta_0;
  // spec.hs:251:1-60
  wire signed [63:0] dta_1;
  // spec.hs:251:1-60
  wire [7:0] tag_3;
  // spec.hs:251:1-60
  wire [7:0] tag_4;
  // spec.hs:258:1-159
  wire  b_10;
  wire signed [63:0] x_13;
  wire signed [63:0] y_9;
  wire [141:0] result_68;
  reg [139:0] c$app_arg_55 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0}};
  wire [139:0] c$case_alt_3;
  wire [139:0] c$case_alt_4;
  wire [139:0] c$case_alt_5;
  reg [139:0] c$case_alt_6;
  reg [139:0] c$case_alt_7;
  wire [139:0] c$case_alt_8;
  reg  c$app_arg_56 = 1'b0;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  reg  c$case_alt_13;
  reg  c$app_arg_57 = 1'b0;
  wire  c$case_alt_14;
  wire  c$case_alt_15;
  wire  c$case_alt_16;
  // spec.hs:113:1-78
  reg [559:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}}};
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt;
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt_0;
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt_1;
  // spec.hs:113:1-78
  wire [139:0] qData;
  // spec.hs:113:1-78
  wire signed [63:0] x_14;
  // spec.hs:113:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:113:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:113:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:587:1-184
  wire  qPopValid;
  // spec.hs:587:1-184
  wire  qPush;
  // spec.hs:587:1-184
  wire  qPop;
  wire [129:0] inputs;
  wire [287:0] t_projection;
  wire [3:0] c$vec2;
  wire [215:0] t_projection_3;
  wire [8:0] c$vec2_0;
  wire [8:0] c$vec2_1;
  wire signed [63:0] x1_projection;
  wire [255:0] c$t_case_alt_sel_alt_t_0;
  wire [255:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2_2;
  wire [8:0] c$vec2_3;
  wire signed [63:0] x_projection_15;
  wire [8:0] c$vec2_4;
  wire signed [63:0] x_projection_17;
  wire signed [63:0] x_projection_18;
  wire signed [63:0] x_projection_23;
  wire [3:0] c$vec2_5;
  wire [3:0] c$vec2_6;
  wire signed [63:0] x_projection_28;
  wire signed [63:0] x1_projection_0;
  wire [319:0] c$t_case_alt_sel_alt_t_3;
  wire [319:0] c$t_case_alt_sel_alt_f_3;
  wire signed [63:0] c$tte_rhs;
  wire [699:0] c$buffer_case_alt_sel_alt_t_1;
  wire [699:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [533:0] result;
  wire [519:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [64:0] result_0_7;
  wire [13:0] result_1;
  wire [7:0] result_1_4;
  wire [1:0] result_1_5;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {hasInput0 | (hasInput1 | (pacing3 | (pacing3 | (pacing3 | (pacing3 | (timer0Over | (timer1Over | (timer1Over | (timer1Over | (timer1Over | timer1Over)))))))))),
                     {inputs,   {timer1Over,   timer1Over},
                      {pacing3,   pacing3,   pacing3,   pacing3,
                       timer0Over,   timer1Over,   timer1Over,
                       timer1Over}}};

  assign pacing3 = hasInput0 & hasInput1;

  assign hasInput1 = inputs[0:0];

  assign hasInput0 = inputs[65:65];

  assign result_3 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign timer0Over = result_4 >= (64'sd500000);

  assign result_5 = timer1Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= (64'sd0);
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign timer1Over = result_6 >= (64'sd1000000);

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_8;
    end
  end
  // register end

  assign result_7 = toWait == (64'sd0);

  assign result_8 = result_10 ? (64'sd2) : result_9;

  assign b = toWait > (64'sd0);

  assign result_9 = b ? ((x_1 - 64'sd1)) : toWait;

  assign x_1 = toWait;

  assign result_10 = b_10 ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_11;
    end
  end
  // register end

  assign result_11 = input0HasData ? result_12 : t;

  assign b_0 = t == 8'd5;

  assign f1 = t + 8'd1;

  assign result_12 = b_0 ? 8'd1 : f1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_13;
    end
  end
  // register end

  assign result_13 = input1HasData ? result_14 : t_0;

  assign b_1 = t_0 == 8'd5;

  assign f1_0 = t_0 + 8'd1;

  assign result_14 = b_1 ? 8'd1 : f1_0;

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= input0HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$input0Win_case_scrut_delay
    if (en) begin
      c$input0Win_case_scrut <= input0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
    end else if (en) begin
      result_15 <= result_16;
    end
  end
  // register end

  assign t_projection = ({result_15,{t,   $signed(c$input0Win_case_scrut[64:1])}});

  assign t_1 = t_projection[215:0];

  assign result_16 = c$input0Win_app_arg ? t_1 : result_15;

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= input1HasData;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$input1Win_case_scrut_delay
    if (en) begin
      c$input1Win_case_scrut <= input2;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_17_register
    if ( rst) begin
      result_17 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_17 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = c$input1Win_app_arg ? {t_0,
                                                   $signed(c$input1Win_case_scrut[64:1])} : result_17;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_18;
    end
  end
  // register end

  assign result_18 = p5 ? result_19 : t_2;

  assign b_2 = t_2 == 8'd5;

  assign f1_1 = t_2 + 8'd1;

  assign result_19 = b_2 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_20;
    end
  end
  // register end

  assign result_20 = p0 ? result_21 : t_3;

  assign b_3 = t_3 == 8'd5;

  assign f1_2 = t_3 + 8'd1;

  assign result_21 = b_3 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_22;
    end
  end
  // register end

  assign result_22 = p2 ? result_23 : t_4;

  assign b_4 = t_4 == 8'd5;

  assign f1_3 = t_4 + 8'd1;

  assign result_23 = b_4 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_24;
    end
  end
  // register end

  assign result_24 = p3 ? result_25 : t_5;

  assign b_5 = t_5 == 8'd5;

  assign f1_4 = t_5 + 8'd1;

  assign result_25 = b_5 ? 8'd1 : f1_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_26;
    end
  end
  // register end

  assign result_26 = p4 ? result_27 : t_6;

  assign b_6 = t_6 == 8'd5;

  assign f1_5 = t_6 + 8'd1;

  assign result_27 = b_6 ? 8'd1 : f1_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_28;
    end
  end
  // register end

  assign result_28 = p6 ? result_29 : t_7;

  assign b_7 = t_7 == 8'd5;

  assign f1_6 = t_7 + 8'd1;

  assign result_29 = b_7 ? 8'd1 : f1_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_30;
    end
  end
  // register end

  assign result_30 = p7 ? result_31 : t_8;

  assign b_8 = t_8 == 8'd5;

  assign f1_7 = t_8 + 8'd1;

  assign result_31 = b_8 ? 8'd1 : f1_7;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_32;
    end
  end
  // register end

  assign result_32 = p8 ? result_33 : t_9;

  assign b_9 = t_9 == 8'd5;

  assign f1_8 = t_9 + 8'd1;

  assign result_33 = b_9 ? 8'd1 : f1_8;

  // delay begin
  always @(posedge clk) begin : c$ds9_case_scrut_delay
    if (en) begin
      c$ds9_case_scrut <= curTagsLevel2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out4_app_arg_delay
    if (en) begin
      c$out4_app_arg <= p5;
    end
  end
  // delay end

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_7;
  generate
  for (i_7 = 0; i_7 < 2; i_7 = i_7 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_37[i_7*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_7*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_7*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8 = i_8 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_8*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_8[0+:1];
    wire [1:0] c$case_alt_17;
    // spec.hs:230:1-72
    wire [7:0] t_20;
    // spec.hs:230:1-72
    wire [71:0] x_16;
    assign map_out = c$case_alt_17;

    assign c$case_alt_17 = (t_20 == result_35) ? {1'b1,map_index} : map_in[1:0];

    assign t_20 = x_16[71:64];

    assign x_16 = map_in[73:2];


    assign c$ws_app_arg_0[i_8*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_9;
  generate
  for (i_9=0; i_9 < 2; i_9=i_9+1) begin : mk_array
    assign vecArray[(2-1)-i_9] = result_37[i_9*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_34 = c$case_scrut_0[1:1] ? {t_2,
                                            $signed(c$case_scrut[63:0])} : {t_2,   64'sd0};

  assign result_35 = (t_2 > 8'd1) ? c$app_arg : (c$app_arg + 8'd5);

  assign c$app_arg = t_2 - 8'd1;

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  assign result_36 = c$out4_app_arg ? t_10 : result_37;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_37_register
    if ( rst) begin
      result_37 <= {{8'd6,   64'sd0},   {8'd6,   64'sd0}};
    end else if (en) begin
      result_37 <= result_36;
    end
  end
  // register end

  assign t_projection_3 = ({result_37,{t_2,   (x_2 + 64'sd1)}});

  assign t_10 = t_projection_3[143:0];

  assign x_2 = $signed(result_34[63:0]);

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= p2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_0_delay
    if (en) begin
      c$out1_app_arg_0 <= c$out1_app_arg;
    end
  end
  // delay end

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 3; i_11 = i_11 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_15[i_11*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_11*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_11*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 3; i_12 = i_12 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_12*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_12[0+:2];
    wire [2:0] c$case_alt_18;
    // spec.hs:230:1-72
    wire [7:0] t_21;
    // spec.hs:230:1-72
    wire [71:0] x_17;
    assign map_out_0 = c$case_alt_18;

    assign c$case_alt_18 = (t_21 == result_39) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_21 = x_17[71:64];

    assign x_17 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_12*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13=i_13+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_13] = result_15[i_13*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_38 = c$case_scrut_2[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_1[63:0])} : {out0Level1TagIn0,
                                                                              $signed(result_17[63:0])};

  assign result_39 = (out0Level1TagIn0 > 8'd2) ? c$app_arg_0 : (c$app_arg_0 + 8'd5);

  assign c$app_arg_0 = out0Level1TagIn0 - 8'd2;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign result_40 = c$out1_app_arg_0 ? t_11 : result_41;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_41_register
    if ( rst) begin
      result_41 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_41 <= result_40;
    end
  end
  // register end

  assign t_11 = {out1Level1TagOut1,
                 (x_3 + 64'sd1)};

  assign x_3 = $signed(result_38[63:0]);

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_delay
    if (en) begin
      c$out5_app_arg <= p6;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_0_delay
    if (en) begin
      c$out5_app_arg_0 <= c$out5_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_1_delay
    if (en) begin
      c$out5_app_arg_1 <= c$out5_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_2_delay
    if (en) begin
      c$out5_app_arg_2 <= slide0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_3_delay
    if (en) begin
      c$out5_app_arg_3 <= (c$out5_app_arg_2 | p6);
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_4_delay
    if (en) begin
      c$out5_app_arg_4 <= c$out5_app_arg_2;
    end
  end
  // delay end

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_14;
  generate
  for (i_14 = 0; i_14 < 3; i_14 = i_14 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_15[i_14*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_14*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_14*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_15;
  generate
  for (i_15=0; i_15 < 3; i_15 = i_15 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_15*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_15[0+:2];
    wire [2:0] c$case_alt_19;
    // spec.hs:238:1-70
    wire [7:0] t_22;
    // spec.hs:238:1-70
    wire [71:0] x_18;
    assign map_out_1 = c$case_alt_19;

    assign c$case_alt_19 = (t_22 == out0Level1TagIn0) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_22 = x_18[71:64];

    assign x_18 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_15*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16=i_16+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_16] = result_15[i_16*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_42 = c$case_scrut_4[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_3[63:0])} : {out0Level1TagIn0,
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  // delay begin
  always @(posedge clk) begin : c$out5_app_arg_5_delay
    if (en) begin
      c$out5_app_arg_5 <= c$input0Win_app_arg;
    end
  end
  // delay end

  assign y = wild2;

  assign x1_projection = $signed(win[64-1:0]);

  assign x1 = x1_projection;

  assign win = window[191:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd6,   {64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_43;
    end
  end
  // register end

  assign result_43 = c$out5_app_arg_3 ? t_12 : window;

  assign t_12 = {sw0Level1TagSw0,   result_44};

  assign result_44 = c$out5_app_arg_4 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({win,wild2});

  assign c$t_case_alt_sel_alt_f_0 = ({win,64'sd0});

  assign c$t_case_alt = c$out5_app_arg_5 ? c$t_case_alt_sel_alt_t_0[191:0] : c$t_case_alt_sel_alt_f_0[191:0];

  assign wild2 = $signed(result_42[63:0]);

  assign c$t_case_alt_0 = c$out5_app_arg_5 ? c$t_case_alt_1 : win;

  // vector replace begin
  genvar i_17;
  generate
  for (i_17=0;i_17<3;i_17=i_17+1) begin : vector_replace
    assign c$t_case_alt_1[(2-i_17)*64+:64] = (64'sd2) == i_17 ? ((x1 + y)) : win[(2-i_17)*64+:64];
  end
  endgenerate
  // vector replace end

  wire [191:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_3;
  assign c$t_app_arg = acc_2_0;

  assign vec = window[191:0];

  assign acc_1 = $signed(vec[191:128]);

  assign acc_2 = $signed(vec[127:64]);

  assign acc_3 = $signed(vec[63:0]);

  wire signed [63:0] x_19;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_20;
  assign acc_1_0 = c$case_alt_20;

  assign x_19 = acc_1;

  assign y_11 = acc_2;

  assign c$case_alt_20 = (x_19 + y_11);



  wire signed [63:0] x_20;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_21;
  assign acc_2_0 = c$case_alt_21;

  assign x_20 = acc_1_0;

  assign y_12 = acc_3;

  assign c$case_alt_21 = (x_20 + y_12);





  assign result_45 = c$out5_app_arg_1 ? t_13 : result_46;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_46_register
    if ( rst) begin
      result_46 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_46 <= result_45;
    end
  end
  // register end

  assign t_13 = {curTagsLevel2[39:32],
                 c$t_app_arg};

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_delay
    if (en) begin
      c$out0_app_arg <= p0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out0_app_arg_0_delay
    if (en) begin
      c$out0_app_arg_0 <= c$out0_app_arg;
    end
  end
  // delay end

  assign c$vec2_2 = (ws_2[9-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 3; i_18 = i_18 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_15[i_18*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_18*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_18*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 3; i_19 = i_19 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_19*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd2 - i_19[0+:2];
    wire [2:0] c$case_alt_22;
    // spec.hs:238:1-70
    wire [7:0] t_23;
    // spec.hs:238:1-70
    wire [71:0] x_21;
    assign map_out_2 = c$case_alt_22;

    assign c$case_alt_22 = (t_23 == out0Level1TagIn0) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_23 = x_21[71:64];

    assign x_21 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_19*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:3-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 3; i_20=i_20+1) begin : mk_array_2
    assign vecArray_2[(3-1)-i_20] = result_15[i_20*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[12-1 -: 3];

  assign result_47 = c$case_scrut_6[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_5[63:0])} : {out0Level1TagIn0,
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  assign eta3 = (x_13 + y_9);

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 3; i_21 = i_21 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_15[i_21*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_21*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_21*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 3; i_22 = i_22 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_22*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_22[0+:2];
    wire [2:0] c$case_alt_23;
    // spec.hs:230:1-72
    wire [7:0] t_24;
    // spec.hs:230:1-72
    wire [71:0] x_22;
    assign map_out_3 = c$case_alt_23;

    assign c$case_alt_23 = (t_24 == result_49) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_24 = x_22[71:64];

    assign x_22 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_22*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 3; i_23=i_23+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_23] = result_15[i_23*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_48 = c$case_scrut_8[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_7[63:0])} : {out0Level1TagIn0,
                                                                              eta3};

  assign result_49 = (out0Level1TagIn0 > 8'd1) ? c$app_arg_1 : (c$app_arg_1 + 8'd5);

  assign c$app_arg_1 = out0Level1TagIn0 - 8'd1;

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  assign winTag = result_58[71:64];

  assign winData = $signed(result_58[63:0]);

  assign c$case_alt = (result_50 == winTag) ? {out0Level1TagOut3,
                                               winData} : {out0Level1TagOut3,
                                                           $signed(result_47[63:0])};

  assign result_50 = (out0Level1TagOut3 > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd5);

  assign c$app_arg_2 = out0Level1TagOut3 - 8'd1;

  assign result_51 = c$out0_app_arg_0 ? t_14 : result_52;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_52_register
    if ( rst) begin
      result_52 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_52 <= result_51;
    end
  end
  // register end

  assign t_14 = {out0Level1TagOut0,
                 (x_5 + y_0)};

  assign x_4 = $signed(result_48[63:0]);

  assign y_0 = $signed(c$case_alt[63:0]);

  assign x_projection_15 = (x_4 + 64'sd1);

  assign x_5 = x_projection_15;

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_delay
    if (en) begin
      c$out2_app_arg <= p3;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_0_delay
    if (en) begin
      c$out2_app_arg_0 <= c$out2_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out2_app_arg_1_delay
    if (en) begin
      c$out2_app_arg_1 <= c$out2_app_arg_0;
    end
  end
  // delay end

  assign c$vec2_4 = (ws_4[9-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 3; i_24 = i_24 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_15[i_24*72+:72];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_24*3+:3];
    wire [74:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_24*75+:75] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 3; i_25 = i_25 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [74:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_25*75+:75];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd2 - i_25[0+:2];
    wire [2:0] c$case_alt_27;
    // spec.hs:238:1-70
    wire [7:0] t_25;
    // spec.hs:238:1-70
    wire [71:0] x_23;
    assign map_out_4 = c$case_alt_27;

    assign c$case_alt_27 = (t_25 == out2Level2TagIn0) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_25 = x_23[71:64];

    assign x_23 = map_in_4[74:3];


    assign c$ws_app_arg_10[i_25*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:3-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 3; i_26=i_26+1) begin : mk_array_4
    assign vecArray_4[(3-1)-i_26] = result_15[i_26*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[12-1 -: 3];

  assign result_53 = c$case_scrut_10[2:2] ? {out2Level2TagIn0,
                                             $signed(c$case_scrut_9[63:0])} : {out2Level2TagIn0,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign c$out2_case_alt = (tag == out2Level2TagIn1) ? {tag,
                                                        $signed(result_17[63:0])} : {out2Level2TagIn1,
                                                                                     64'sd0};

  assign c$out2_case_alt_0 = (tag_0 == out2Level2TagOut0) ? {tag_0,
                                                             dta} : {out2Level2TagOut0,   64'sd0};

  assign c$out2_case_alt_1 = (tag_2 == out2Level2TagOut1) ? {tag_2,
                                                             dta_0} : {out2Level2TagOut1,   64'sd0};

  assign result_54 = c$out2_app_arg_1 ? t_15 : result_55;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_55_register
    if ( rst) begin
      result_55 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_55 <= result_54;
    end
  end
  // register end

  assign t_15 = {out2Level2TagOut2,
                 (x_7 + y_2)};

  assign x_projection_17 = (x_8 * y_3);

  assign x_6 = x_projection_17;

  assign y_1 = $signed(result_53[63:0]);

  assign x_projection_18 = (x_6 + y_1);

  assign x_7 = x_projection_18;

  assign y_2 = $signed(c$out2_case_alt[63:0]);

  assign x_8 = $signed(c$out2_case_alt_0[63:0]);

  assign y_3 = $signed(c$out2_case_alt_1[63:0]);

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_delay
    if (en) begin
      c$out3_app_arg <= p4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_0_delay
    if (en) begin
      c$out3_app_arg_0 <= c$out3_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_1_delay
    if (en) begin
      c$out3_app_arg_1 <= c$out3_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$out3_app_arg_2_delay
    if (en) begin
      c$out3_app_arg_2 <= c$out3_app_arg_1;
    end
  end
  // delay end

  assign c$out3_case_alt = (tag_0 == out3Level3TagOut0) ? {tag_0,
                                                           dta} : {out3Level3TagOut0,   64'sd0};

  assign c$out3_case_alt_0 = (tag_1 == out3Level3TagOut2) ? {tag_1,
                                                             dta_1} : {out3Level3TagOut2,   64'sd0};

  assign winTag_0 = result_58[71:64];

  assign winData_0 = $signed(result_58[63:0]);

  assign c$case_alt_0 = (result_56 == winTag_0) ? {out3Level3TagOut3,
                                                   winData_0} : {out3Level3TagOut3,   64'sd0};

  assign result_56 = (out3Level3TagOut3 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd5);

  assign c$app_arg_3 = out3Level3TagOut3 - 8'd1;

  assign result_57 = c$out3_app_arg_2 ? t_16 : result_58;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_58_register
    if ( rst) begin
      result_58 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_58 <= result_57;
    end
  end
  // register end

  assign t_16 = {out3Level3TagOut3,
                 (x_10 + y_5)};

  assign x_9 = $signed(c$out3_case_alt[63:0]);

  assign y_4 = $signed(c$out3_case_alt_0[63:0]);

  assign x_projection_23 = (x_9 + y_4);

  assign x_10 = x_projection_23;

  assign y_5 = $signed(c$case_alt_0[63:0]);

  // delay begin
  always @(posedge clk) begin : c$app_arg_4_delay
    if (en) begin
      c$app_arg_4 <= c$out0_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_5_delay
    if (en) begin
      c$app_arg_5 <= c$app_arg_4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_6_delay
    if (en) begin
      c$app_arg_6 <= c$app_arg_5;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_7_delay
    if (en) begin
      c$app_arg_7 <= c$app_arg_6;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_8_delay
    if (en) begin
      c$app_arg_8 <= c$app_arg_7;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_9_delay
    if (en) begin
      c$app_arg_9 <= c$out1_app_arg_0;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_10_delay
    if (en) begin
      c$app_arg_10 <= c$app_arg_9;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_11_delay
    if (en) begin
      c$app_arg_11 <= c$app_arg_10;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_12_delay
    if (en) begin
      c$app_arg_12 <= c$app_arg_11;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_13_delay
    if (en) begin
      c$app_arg_13 <= c$app_arg_12;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_14_delay
    if (en) begin
      c$app_arg_14 <= c$out2_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_15_delay
    if (en) begin
      c$app_arg_15 <= c$app_arg_14;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_16_delay
    if (en) begin
      c$app_arg_16 <= c$app_arg_15;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_17_delay
    if (en) begin
      c$app_arg_17 <= c$app_arg_16;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_18_delay
    if (en) begin
      c$app_arg_18 <= c$out3_app_arg_2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_19_delay
    if (en) begin
      c$app_arg_19 <= c$app_arg_18;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_20_delay
    if (en) begin
      c$app_arg_20 <= c$app_arg_19;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_21_delay
    if (en) begin
      c$app_arg_21 <= curTagsLevel4;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$case_scrut_11_delay
    if (en) begin
      c$case_scrut_11 <= c$app_arg_21;
    end
  end
  // delay end

  assign c$vec2_5 = (ws_5[4-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 2; i_27 = i_27 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_37[i_27*72+:72];
    wire [1:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_27*2+:2];
    wire [73:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_27*74+:74] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 2; i_28 = i_28 + 1) begin : imap_5
    wire [1-1:0] map_index_5;
    wire [73:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_28*74+:74];
    wire [1:0] map_out_5;

    assign map_index_5 = 1'd1 - i_28[0+:1];
    wire [1:0] c$case_alt_28;
    // spec.hs:238:1-70
    wire [7:0] t_26;
    // spec.hs:238:1-70
    wire [71:0] x_24;
    assign map_out_5 = c$case_alt_28;

    assign c$case_alt_28 = (t_26 == c$case_scrut_11[47:40]) ? {1'b1,map_index_5} : map_in_5[1:0];

    assign t_26 = x_24[71:64];

    assign x_24 = map_in_5[73:2];


    assign c$ws_app_arg_12[i_28*2+:2] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:2-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 2; i_29=i_29+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_29] = result_37[i_29*72+:72];
  end
  endgenerate
  assign c$case_scrut_12 = vecArray_5[($unsigned({{(64-1) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_13 = ws_5[6-1 -: 2];

  assign result_59 = c$case_scrut_13[1:1] ? {c$case_scrut_11[47:40],
                                             $signed(c$case_scrut_12[63:0])} : {c$case_scrut_11[47:40],
                                                                                64'sd0};

  assign i_5 = c$case_scrut_13[0:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,1'bx}};

  // delay begin
  always @(posedge clk) begin : c$app_arg_22_delay
    if (en) begin
      c$app_arg_22 <= c$out4_app_arg;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_23_delay
    if (en) begin
      c$app_arg_23 <= c$app_arg_22;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_24_delay
    if (en) begin
      c$app_arg_24 <= c$app_arg_23;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_25_delay
    if (en) begin
      c$app_arg_25 <= c$app_arg_24;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_26_delay
    if (en) begin
      c$app_arg_26 <= c$app_arg_25;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_27_delay
    if (en) begin
      c$app_arg_27 <= c$app_arg_26;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_28_delay
    if (en) begin
      c$app_arg_28 <= c$out5_app_arg_1;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_29_delay
    if (en) begin
      c$app_arg_29 <= c$app_arg_28;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_30_delay
    if (en) begin
      c$app_arg_30 <= c$app_arg_29;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_31_delay
    if (en) begin
      c$app_arg_31 <= c$app_arg_30;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_32_delay
    if (en) begin
      c$app_arg_32 <= p7;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_33_delay
    if (en) begin
      c$app_arg_33 <= c$app_arg_32;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_34_delay
    if (en) begin
      c$app_arg_34 <= c$app_arg_33;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_35_delay
    if (en) begin
      c$app_arg_35 <= c$app_arg_34;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_36_delay
    if (en) begin
      c$app_arg_36 <= c$app_arg_35;
    end
  end
  // delay end

  assign c$case_alt_1 = (tag_3 == out6Level4TagOut3) ? {tag_3,
                                                        $signed(result_58[63:0])} : {out6Level4TagOut3,
                                                                                     64'sd2};

  assign c$vec2_6 = (ws_6[4-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 2; i_30 = i_30 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_37[i_30*72+:72];
    wire [1:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_30*2+:2];
    wire [73:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_30*74+:74] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 2; i_31 = i_31 + 1) begin : imap_6
    wire [1-1:0] map_index_6;
    wire [73:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_31*74+:74];
    wire [1:0] map_out_6;

    assign map_index_6 = 1'd1 - i_31[0+:1];
    wire [1:0] c$case_alt_29;
    // spec.hs:238:1-70
    wire [7:0] t_27;
    // spec.hs:238:1-70
    wire [71:0] x_25;
    assign map_out_6 = c$case_alt_29;

    assign c$case_alt_29 = (t_27 == out6Level4TagOut4) ? {1'b1,map_index_6} : map_in_6[1:0];

    assign t_27 = x_25[71:64];

    assign x_25 = map_in_6[73:2];


    assign c$ws_app_arg_14[i_31*2+:2] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:2-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 2; i_32=i_32+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_32] = result_37[i_32*72+:72];
  end
  endgenerate
  assign c$case_scrut_14 = vecArray_6[($unsigned({{(64-1) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_15 = ws_6[6-1 -: 2];

  assign result_60 = c$case_scrut_15[1:1] ? {out6Level4TagOut4,
                                             $signed(c$case_scrut_14[63:0])} : {out6Level4TagOut4,
                                                                                64'sd0};

  assign i_6 = c$case_scrut_15[0:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,1'bx}};

  assign c$case_alt_2 = (tag_4 == out6Level4TagOut5) ? {tag_4,
                                                        $signed(result_46[63:0])} : {out6Level4TagOut5,
                                                                                     64'sd0};

  assign result_61 = c$app_arg_36 ? t_17 : result_62;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_62_register
    if ( rst) begin
      result_62 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_62 <= result_61;
    end
  end
  // register end

  assign t_17 = {out6Level4TagOut6,
                 (x_12 + y_7)};

  assign x_11 = $signed(result_60[63:0]);

  assign y_6 = $signed(c$case_alt_2[63:0]);

  assign x_projection_28 = (x_11 + y_6);

  assign x_12 = x_projection_28;

  assign y_7 = $signed(c$case_alt_1[63:0]);

  // delay begin
  always @(posedge clk) begin : c$app_arg_37_delay
    if (en) begin
      c$app_arg_37 <= c$app_arg_36;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_38_delay
    if (en) begin
      c$app_arg_38 <= c$app_arg_37;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_39_delay
    if (en) begin
      c$app_arg_39 <= p8;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_40_delay
    if (en) begin
      c$app_arg_40 <= c$app_arg_39;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_41_delay
    if (en) begin
      c$app_arg_41 <= c$app_arg_40;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_42_delay
    if (en) begin
      c$app_arg_42 <= c$app_arg_41;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_43_delay
    if (en) begin
      c$app_arg_43 <= c$app_arg_42;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_44_delay
    if (en) begin
      c$app_arg_44 <= c$app_arg_43;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_45_delay
    if (en) begin
      c$app_arg_45 <= slide2;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_46_delay
    if (en) begin
      c$app_arg_46 <= (c$app_arg_45 | p8);
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_47_delay
    if (en) begin
      c$app_arg_47 <= c$app_arg_46;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_48_delay
    if (en) begin
      c$app_arg_48 <= c$app_arg_47;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_49_delay
    if (en) begin
      c$app_arg_49 <= c$app_arg_48;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_50_delay
    if (en) begin
      c$app_arg_50 <= c$app_arg_45;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_51_delay
    if (en) begin
      c$app_arg_51 <= c$app_arg_50;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_52_delay
    if (en) begin
      c$app_arg_52 <= c$app_arg_51;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : c$app_arg_53_delay
    if (en) begin
      c$app_arg_53 <= c$app_arg_52;
    end
  end
  // delay end

  assign y_8 = wild2_0;

  assign x1_projection_0 = $signed(win_0[64-1:0]);

  assign x1_0 = x1_projection_0;

  assign win_0 = window_0[255:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd6,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_63;
    end
  end
  // register end

  assign result_63 = c$app_arg_49 ? t_18 : window_0;

  assign t_18 = {curTagsLevel4[7:0],   result_64};

  assign result_64 = c$app_arg_53 ? c$t_case_alt_2 : c$t_case_alt_3;

  assign c$t_case_alt_sel_alt_t_3 = ({win_0,wild2_0});

  assign c$t_case_alt_sel_alt_f_3 = ({win_0,64'sd0});

  assign c$t_case_alt_2 = c$app_arg_18 ? c$t_case_alt_sel_alt_t_3[255:0] : c$t_case_alt_sel_alt_f_3[255:0];

  assign wild2_0 = $signed(result_58[63:0]);

  assign c$t_case_alt_3 = c$app_arg_18 ? c$t_case_alt_4 : win_0;

  // vector replace begin
  genvar i_33;
  generate
  for (i_33=0;i_33<4;i_33=i_33+1) begin : vector_replace_0
    assign c$t_case_alt_4[(3-i_33)*64+:64] = (64'sd3) == i_33 ? ((x1_0 + y_8)) : win_0[(3-i_33)*64+:64];
  end
  endgenerate
  // vector replace end

  wire [255:0] vec_0;
  wire signed [63:0] acc_2_0_1;
  wire signed [63:0] acc_0_2;
  wire signed [63:0] acc_0_3;
  wire signed [63:0] acc_0_4;
  wire signed [63:0] acc_0_5;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_1_1;
  assign c$t_app_arg_0 = acc_2_0_1;

  assign vec_0 = window_0[255:0];

  assign acc_0_2 = $signed(vec_0[255:192]);

  assign acc_0_3 = $signed(vec_0[191:128]);

  assign acc_0_4 = $signed(vec_0[127:64]);

  assign acc_0_5 = $signed(vec_0[63:0]);

  wire signed [63:0] x_26;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_30;
  assign acc_1_0_0 = c$case_alt_30;

  assign x_26 = acc_0_2;

  assign y_13 = acc_0_3;

  assign c$case_alt_30 = (x_26 + y_13);



  wire signed [63:0] x_27;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_31;
  assign acc_1_1 = c$case_alt_31;

  assign x_27 = acc_0_4;

  assign y_14 = acc_0_5;

  assign c$case_alt_31 = (x_27 + y_14);



  wire signed [63:0] x_28;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_32;
  assign acc_2_0_1 = c$case_alt_32;

  assign x_28 = acc_1_0_0;

  assign y_15 = acc_1_1;

  assign c$case_alt_32 = (x_28 + y_15);





  assign result_65 = c$app_arg_44 ? t_19 : result_66;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_66_register
    if ( rst) begin
      result_66 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_66 <= result_65;
    end
  end
  // register end

  assign t_19 = {c$app_arg_21[23:16],
                 c$t_app_arg_0};

  // delay begin
  always @(posedge clk) begin : c$app_arg_54_delay
    if (en) begin
      c$app_arg_54 <= c$app_arg_44;
    end
  end
  // delay end

  assign result_67 = {{result_7 & (~ result_10),
                       {{dta,   c$app_arg_8},   {dta_0,
                                                 c$app_arg_13},   {dta_1,   c$app_arg_17},
                        {$signed(result_58[63:0]),   c$app_arg_20},
                        {$signed(result_59[63:0]),   c$app_arg_27},
                        {$signed(result_46[63:0]),   c$app_arg_31},
                        {$signed(result_62[63:0]),   c$app_arg_38},
                        {$signed(result_66[63:0]),   c$app_arg_54}}},
                      {pacings,   slides}};

  assign tag = result_17[71:64];

  assign slides = result_68[9:8];

  assign input0 = result_68[139:75];

  assign input0HasData = input0[0:0];

  assign input1HasData = input2[0:0];

  assign slide0 = slides[1:1];

  assign pacings = result_68[7:0];

  assign curTags = {t,   t_0,   t_3,   t_4,
                    t_5,   t_6,   t_2,   t_7,   t_8,   t_9,   t_3,
                    t_4};

  // delay begin
  always @(posedge clk) begin : curTagsLevel1_delay
    if (en) begin
      curTagsLevel1 <= curTags;
    end
  end
  // delay end

  // delay begin
  always @(posedge clk) begin : curTagsLevel2_delay
    if (en) begin
      curTagsLevel2 <= curTagsLevel1;
    end
  end
  // delay end

  assign input2 = result_68[74:10];

  // delay begin
  always @(posedge clk) begin : curTagsLevel4_delay
    if (en) begin
      curTagsLevel4 <= c$ds9_case_scrut;
    end
  end
  // delay end

  assign out0Level1TagIn0 = curTagsLevel1[95:88];

  assign out0Level1TagOut0 = curTagsLevel1[79:72];

  assign out0Level1TagOut3 = curTagsLevel1[55:48];

  assign slide2 = slides[0:0];

  assign p0 = pacings[7:7];

  assign out1Level1TagOut1 = curTagsLevel1[71:64];

  assign out2Level2TagIn0 = curTagsLevel2[95:88];

  assign out2Level2TagIn1 = curTagsLevel2[87:80];

  assign out2Level2TagOut0 = curTagsLevel2[79:72];

  assign p2 = pacings[6:6];

  assign out2Level2TagOut2 = curTagsLevel2[63:56];

  assign out3Level3TagOut0 = c$ds9_case_scrut[79:72];

  assign out3Level3TagOut3 = c$ds9_case_scrut[55:48];

  assign p4 = pacings[4:4];

  assign out6Level4TagOut3 = curTagsLevel4[55:48];

  assign out6Level4TagOut5 = curTagsLevel4[39:32];

  assign out6Level4TagOut6 = curTagsLevel4[31:24];

  assign sw0Level1TagSw0 = curTagsLevel1[15:8];

  assign p6 = pacings[2:2];

  assign p8 = pacings[0:0];

  assign p3 = pacings[5:5];

  assign p5 = pacings[3:3];

  assign p7 = pacings[1:1];

  assign out2Level2TagOut1 = curTagsLevel2[71:64];

  assign out3Level3TagOut2 = c$ds9_case_scrut[63:56];

  assign out6Level4TagOut4 = curTagsLevel4[47:40];

  assign tag_0 = result_52[71:64];

  assign dta = $signed(result_52[63:0]);

  assign tag_1 = result_55[71:64];

  assign tag_2 = result_41[71:64];

  assign dta_0 = $signed(result_41[63:0]);

  assign dta_1 = $signed(result_55[63:0]);

  assign tag_3 = result_58[71:64];

  assign tag_4 = result_46[71:64];

  assign b_10 = result_7 & qPopValid;

  assign x_13 = $signed(result_47[63:0]);

  assign y_9 = $signed(result_17[63:0]);

  assign result_68 = {c$app_arg_57,
                      c$app_arg_56,   c$app_arg_55};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_55_register
    if ( rst) begin
      c$app_arg_55 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_55 <= c$case_alt_3;
    end
  end
  // register end

  assign c$case_alt_3 = qPush ? c$case_alt_4 : c$case_alt_5;

  assign c$case_alt_4 = qPop ? c$case_alt_6 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0}};

  assign c$case_alt_5 = qPop ? c$case_alt_7 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0}};

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_6 = qData;
      default : c$case_alt_6 = c$case_alt_8;
    endcase
  end

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_7 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                                        1'b0}};
      default : c$case_alt_7 = c$case_alt_8;
    endcase
  end

  // index begin
  wire [139:0] vecArray_7 [0:4-1];
  genvar i_34;
  generate
  for (i_34=0; i_34 < 4; i_34=i_34+1) begin : mk_array_7
    assign vecArray_7[(4-1)-i_34] = buffer[i_34*140+:140];
  end
  endgenerate
  assign c$case_alt_8 = vecArray_7[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_56_register
    if ( rst) begin
      c$app_arg_56 <= 1'b0;
    end else if (en) begin
      c$app_arg_56 <= c$case_alt_9;
    end
  end
  // register end

  assign c$case_alt_9 = qPush ? c$case_alt_10 : c$case_alt_11;

  assign c$case_alt_10 = qPop ? 1'b1 : c$case_alt_12;

  assign c$case_alt_11 = qPop ? c$case_alt_13 : c$case_alt_12;

  assign c$case_alt_12 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_13 = 1'b0;
      default : c$case_alt_13 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_57_register
    if ( rst) begin
      c$app_arg_57 <= 1'b0;
    end else if (en) begin
      c$app_arg_57 <= c$case_alt_14;
    end
  end
  // register end

  assign c$case_alt_14 = qPush ? c$case_alt_15 : 1'b0;

  assign c$case_alt_15 = qPop ? 1'b1 : c$case_alt_16;

  assign c$tte_rhs = (x_14 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_16 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[699:140] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[699:140];

  assign qData = result_2[139:0];

  assign x_14 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_14 + 64'sd1));

  assign c$tte_rhs_0 = (x_14 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_14)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_14 - 64'sd1);

  assign result = {result_67[529:10],   {qPush,
                                         qPop,   result_68[141:141],   qPopValid,
                                         result_67[9:2],   result_67[1:0]}};

  assign qPopValid = result_68[140:140];

  assign qPush = result_2[140:140];

  assign qPop = result_67[530:530];

  assign result_0 = result[533:14];

  assign result_1 = result[13:0];

  assign result_0_0 = result_0[519:455];

  assign result_0_1 = result_0[454:390];

  assign result_0_2 = result_0[389:325];

  assign result_0_3 = result_0[324:260];

  assign result_0_4 = result_0[259:195];

  assign result_0_5 = result_0[194:130];

  assign result_0_6 = result_0[129:65];

  assign result_0_7 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_0_7_0 = $signed(result_0_7[64:1]);

  assign result_0_7_1 = result_0_7[0:0];

  assign result_1_0 = result_1[13:13];

  assign result_1_1 = result_1[12:12];

  assign result_1_2 = result_1[11:11];

  assign result_1_3 = result_1[10:10];

  assign result_1_4 = result_1[9:2];

  assign result_1_5 = result_1[1:0];

  assign result_1_4_0 = result_1_4[7:7];

  assign result_1_4_1 = result_1_4[6:6];

  assign result_1_4_2 = result_1_4[5:5];

  assign result_1_4_3 = result_1_4[4:4];

  assign result_1_4_4 = result_1_4[3:3];

  assign result_1_4_5 = result_1_4[2:2];

  assign result_1_4_6 = result_1_4[1:1];

  assign result_1_4_7 = result_1_4[0:0];

  assign result_1_5_0 = result_1_5[1:1];

  assign result_1_5_1 = result_1_5[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire signed [63:0] result_0_7_0
    , output wire  result_0_7_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_4_7
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    );
  wire [140:0] result_2;
  wire  c$app_arg;
  // spec.hs:182:1-82
  wire  hasInput0;
  // spec.hs:182:1-82
  wire  hasInput1;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  // spec.hs:182:1-82
  wire  timer0Over;
  wire signed [63:0] result_5;
  wire signed [63:0] x_0;
  reg signed [63:0] result_6 = (64'sd0);
  // spec.hs:182:1-82
  wire  timer1Over;
  // spec.hs:434:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_7;
  wire signed [63:0] result_8;
  // spec.hs:434:1-81
  wire  b;
  wire signed [63:0] result_9;
  wire signed [63:0] x_1;
  wire  result_10;
  // spec.hs:427:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_11;
  // spec.hs:427:9-81
  wire  b_0;
  // spec.hs:427:9-81
  wire [7:0] f1;
  wire [7:0] result_12;
  // spec.hs:427:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_13;
  // spec.hs:427:9-81
  wire  b_1;
  // spec.hs:427:9-81
  wire [7:0] f1_0;
  wire [7:0] result_14;
  wire [1:0] c$app_arg_0;
  wire  result_15;
  // spec.hs:264:1-159
  reg [64:0] c$input0Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:443:1-130
  reg [215:0] result_16 = {{8'd7,   64'sd0},   {8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:443:1-130
  wire [215:0] t_1;
  wire [215:0] result_17;
  wire [1:0] c$app_arg_1;
  wire  result_18;
  // spec.hs:264:1-159
  reg [64:0] c$input1Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:448:1-122
  reg [71:0] result_19 = {8'd7,   64'sd0};
  // spec.hs:448:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:427:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_20;
  // spec.hs:427:9-81
  wire  b_2;
  // spec.hs:427:9-81
  wire [7:0] f1_1;
  wire [7:0] result_21;
  // spec.hs:427:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_22;
  // spec.hs:427:9-81
  wire  b_3;
  // spec.hs:427:9-81
  wire [7:0] f1_2;
  wire [7:0] result_23;
  // spec.hs:427:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_24;
  // spec.hs:427:9-81
  wire  b_4;
  // spec.hs:427:9-81
  wire [7:0] f1_3;
  wire [7:0] result_25;
  // spec.hs:427:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_26;
  // spec.hs:427:9-81
  wire  b_5;
  // spec.hs:427:9-81
  wire [7:0] f1_4;
  wire [7:0] result_27;
  // spec.hs:427:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_28;
  // spec.hs:427:9-81
  wire  b_6;
  // spec.hs:427:9-81
  wire [7:0] f1_5;
  wire [7:0] result_29;
  // spec.hs:427:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_30;
  // spec.hs:427:9-81
  wire  b_7;
  // spec.hs:427:9-81
  wire [7:0] f1_6;
  wire [7:0] result_31;
  // spec.hs:427:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_32;
  // spec.hs:427:9-81
  wire  b_8;
  // spec.hs:427:9-81
  wire [7:0] f1_7;
  wire [7:0] result_33;
  // spec.hs:427:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_34;
  // spec.hs:427:9-81
  wire  b_9;
  // spec.hs:427:9-81
  wire [7:0] f1_8;
  wire [7:0] result_35;
  wire [191:0] c$app_arg_2;
  wire [95:0] result_36;
  wire [287:0] c$app_arg_3;
  wire [95:0] result_37;
  wire [383:0] c$app_arg_4;
  wire [95:0] result_38;
  wire [479:0] c$app_arg_5;
  wire [95:0] result_39;
  wire [671:0] c$app_arg_6;
  wire [95:0] result_40;
  wire [1:0] c$app_arg_7;
  wire  result_41;
  // spec.hs:230:1-72
  wire [147:0] c$ws_app_arg;
  // spec.hs:230:1-72
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_42;
  wire [7:0] result_43;
  wire [7:0] c$app_arg_8;
  // spec.hs:230:1-72
  wire [0:0] i;
  // spec.hs:230:1-72
  wire [5:0] ws;
  wire [143:0] result_44;
  // spec.hs:499:1-138
  reg [143:0] result_45 = {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:499:1-138
  wire [143:0] t_10;
  wire signed [63:0] x_2;
  wire [2:0] c$app_arg_9;
  wire  result_46;
  // spec.hs:230:1-72
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:230:1-72
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_47;
  wire [7:0] result_48;
  wire [7:0] c$app_arg_10;
  // spec.hs:230:1-72
  wire [1:0] i_0;
  // spec.hs:230:1-72
  wire [11:0] ws_0;
  wire [143:0] result_49;
  // spec.hs:465:1-138
  reg [143:0] result_50 = {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:465:1-138
  wire [143:0] t_11;
  wire signed [63:0] x_3;
  wire [3:0] c$app_arg_11;
  wire  result_51;
  // spec.hs:257:1-127
  wire  sig;
  wire [2:0] c$app_arg_12;
  wire  result_52;
  wire [2:0] c$app_arg_13;
  wire  result_53;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_3;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire [71:0] result_54;
  // spec.hs:238:1-70
  wire [1:0] i_1;
  // spec.hs:238:1-70
  wire [11:0] ws_1;
  wire [2:0] c$app_arg_14;
  wire  result_55;
  // spec.hs:551:1-148
  wire signed [63:0] y;
  // spec.hs:551:1-148
  wire signed [63:0] dta;
  // spec.hs:551:1-148
  wire signed [63:0] x_4;
  // spec.hs:551:1-148
  wire [255:0] win;
  // spec.hs:551:1-148
  reg [263:0] window = {8'd7,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [263:0] result_56;
  // spec.hs:551:1-148
  wire [263:0] t_12;
  wire [255:0] result_57;
  // spec.hs:551:1-148
  wire [255:0] c$t_case_alt;
  // spec.hs:551:1-148
  wire [255:0] c$t_case_alt_0;
  // spec.hs:551:1-148
  wire [255:0] lastBucketUpdated;
  // spec.hs:509:1-146
  wire signed [63:0] c$t_app_arg;
  wire [143:0] result_58;
  // spec.hs:509:1-146
  reg [143:0] result_59 = {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:509:1-146
  wire [143:0] t_13;
  wire [2:0] c$app_arg_15;
  wire  result_60;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_5;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire [71:0] result_61;
  // spec.hs:238:1-70
  wire [1:0] i_2;
  // spec.hs:238:1-70
  wire [11:0] ws_2;
  // spec.hs:230:1-72
  wire signed [63:0] eta3;
  // spec.hs:230:1-72
  wire [224:0] c$ws_app_arg_7;
  // spec.hs:230:1-72
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire [71:0] result_62;
  wire [7:0] result_63;
  wire [7:0] c$app_arg_16;
  // spec.hs:230:1-72
  wire [1:0] i_3;
  // spec.hs:230:1-72
  wire [11:0] ws_3;
  // spec.hs:245:1-62
  wire [7:0] winTag;
  // spec.hs:245:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_64;
  wire [7:0] c$app_arg_17;
  wire [143:0] result_65;
  // spec.hs:454:1-163
  reg [143:0] result_66 = {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:454:1-163
  wire [143:0] t_14;
  wire signed [63:0] x_5;
  wire signed [63:0] y_0;
  wire signed [63:0] x_6;
  wire [3:0] c$app_arg_18;
  wire  result_67;
  // spec.hs:238:1-70
  wire [224:0] c$ws_app_arg_9;
  // spec.hs:238:1-70
  wire [8:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire [71:0] result_68;
  // spec.hs:238:1-70
  wire [1:0] i_4;
  // spec.hs:238:1-70
  wire [11:0] ws_4;
  // spec.hs:264:1-159
  wire [71:0] c$out2_case_alt;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_11;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [1:0] c$case_scrut_12;
  wire [71:0] result_69;
  // spec.hs:238:1-70
  wire [0:0] i_5;
  // spec.hs:238:1-70
  wire [5:0] ws_5;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_13;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_13;
  wire [1:0] c$case_scrut_14;
  wire [71:0] result_70;
  // spec.hs:238:1-70
  wire [0:0] i_6;
  // spec.hs:238:1-70
  wire [5:0] ws_6;
  wire [143:0] result_71;
  // spec.hs:475:1-213
  reg [143:0] result_72 = {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
  // spec.hs:475:1-213
  wire [143:0] t_15;
  wire signed [63:0] x_7;
  wire signed [63:0] y_1;
  wire signed [63:0] x_8;
  wire signed [63:0] y_2;
  wire signed [63:0] x_9;
  wire signed [63:0] y_3;
  wire [4:0] c$app_arg_19;
  wire  result_73;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_15;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_16;
  wire [71:0] c$case_scrut_15;
  wire [1:0] c$case_scrut_16;
  wire [71:0] result_74;
  // spec.hs:238:1-70
  wire [0:0] i_7;
  // spec.hs:238:1-70
  wire [5:0] ws_7;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_17;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_18;
  wire [71:0] c$case_scrut_17;
  wire [1:0] c$case_scrut_18;
  wire [71:0] result_75;
  // spec.hs:238:1-70
  wire [0:0] i_8;
  // spec.hs:238:1-70
  wire [5:0] ws_8;
  // spec.hs:245:1-62
  wire [7:0] winTag_0;
  // spec.hs:245:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_76;
  wire [7:0] c$app_arg_20;
  wire [71:0] result_77;
  // spec.hs:488:1-180
  reg [71:0] result_78 = {8'd7,   64'sd0};
  // spec.hs:488:1-180
  wire [71:0] t_16;
  wire signed [63:0] x_10;
  wire signed [63:0] y_4;
  wire signed [63:0] x_11;
  wire signed [63:0] y_5;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_19;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_20;
  wire [71:0] c$case_scrut_19;
  wire [1:0] c$case_scrut_20;
  wire [71:0] result_79;
  // spec.hs:238:1-70
  wire [0:0] i_9;
  // spec.hs:238:1-70
  wire [5:0] ws_9;
  wire [7:0] c$app_arg_21;
  wire  result_80;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_21;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_22;
  wire [71:0] c$case_scrut_21;
  wire [1:0] c$case_scrut_22;
  wire [71:0] result_81;
  // spec.hs:238:1-70
  wire [0:0] i_10;
  // spec.hs:238:1-70
  wire [5:0] ws_10;
  wire [7:0] c$app_arg_22;
  wire  result_82;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_23;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_24;
  wire [71:0] c$case_scrut_23;
  wire [1:0] c$case_scrut_24;
  wire [71:0] result_83;
  // spec.hs:238:1-70
  wire [0:0] i_11;
  // spec.hs:238:1-70
  wire [5:0] ws_11;
  wire [7:0] c$app_arg_23;
  wire  result_84;
  wire [7:0] c$app_arg_24;
  wire  result_85;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_25;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_26;
  wire [71:0] c$case_scrut_25;
  wire [1:0] c$case_scrut_26;
  wire [71:0] result_86;
  // spec.hs:238:1-70
  wire [0:0] i_12;
  // spec.hs:238:1-70
  wire [5:0] ws_12;
  wire [7:0] c$app_arg_25;
  wire  result_87;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_27;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_28;
  wire [71:0] c$case_scrut_27;
  wire [1:0] c$case_scrut_28;
  wire [71:0] result_88;
  // spec.hs:238:1-70
  wire [0:0] i_13;
  // spec.hs:238:1-70
  wire [5:0] ws_13;
  wire [7:0] c$app_arg_26;
  wire  result_89;
  wire [5:0] c$app_arg_27;
  wire  result_90;
  wire [71:0] c$case_alt_1;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_29;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_30;
  wire [71:0] c$case_scrut_29;
  wire [1:0] c$case_scrut_30;
  wire [71:0] result_91;
  // spec.hs:238:1-70
  wire [0:0] i_14;
  // spec.hs:238:1-70
  wire [5:0] ws_14;
  // spec.hs:238:1-70
  wire [147:0] c$ws_app_arg_31;
  // spec.hs:238:1-70
  wire [3:0] c$ws_app_arg_32;
  wire [71:0] c$case_scrut_31;
  wire [1:0] c$case_scrut_32;
  wire [71:0] result_92;
  // spec.hs:238:1-70
  wire [0:0] i_15;
  // spec.hs:238:1-70
  wire [5:0] ws_15;
  wire [71:0] result_93;
  // spec.hs:521:1-180
  reg [71:0] result_94 = {8'd7,   64'sd0};
  // spec.hs:521:1-180
  wire [71:0] t_17;
  wire signed [63:0] x_12;
  wire signed [63:0] y_6;
  wire signed [63:0] x_13;
  wire signed [63:0] y_7;
  wire [7:0] c$app_arg_28;
  wire  result_95;
  wire [6:0] c$app_arg_29;
  wire  result_96;
  wire [575:0] c$app_arg_30;
  wire [95:0] result_97;
  // spec.hs:257:1-127
  wire  sig_0;
  wire [5:0] c$app_arg_31;
  wire  result_98;
  wire [5:0] c$app_arg_32;
  wire  result_99;
  wire [5:0] c$app_arg_33;
  wire  result_100;
  // spec.hs:570:1-148
  wire signed [63:0] y_8;
  // spec.hs:570:1-148
  wire signed [63:0] dta_0;
  // spec.hs:570:1-148
  wire signed [63:0] x_14;
  // spec.hs:570:1-148
  wire [319:0] win_0;
  // spec.hs:570:1-148
  reg [327:0] window_0 = {8'd7,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [327:0] result_101;
  // spec.hs:570:1-148
  wire [327:0] t_18;
  wire [319:0] result_102;
  // spec.hs:570:1-148
  wire [319:0] c$t_case_alt_1;
  // spec.hs:570:1-148
  wire [319:0] c$t_case_alt_2;
  // spec.hs:570:1-148
  wire [319:0] lastBucketUpdated_0;
  // spec.hs:532:1-138
  wire signed [63:0] c$t_app_arg_0;
  wire [71:0] result_103;
  // spec.hs:532:1-138
  reg [71:0] result_104 = {8'd7,   64'sd0};
  // spec.hs:532:1-138
  wire [71:0] t_19;
  wire [7:0] c$app_arg_34;
  wire  result_105;
  wire [530:0] result_106;
  // spec.hs:251:1-60
  wire [7:0] tag;
  // spec.hs:264:1-159
  wire [1:0] slides;
  // spec.hs:264:1-159
  wire [64:0] input0;
  // spec.hs:264:1-159
  wire  input0HasData;
  // spec.hs:264:1-159
  wire  input1HasData;
  // spec.hs:264:1-159
  wire  slide0;
  // spec.hs:264:1-159
  wire [7:0] pacings;
  // spec.hs:264:1-159
  wire [95:0] curTags;
  // spec.hs:264:1-159
  wire [64:0] input2;
  // spec.hs:264:1-159
  wire [7:0] out0Level1TagIn0;
  // spec.hs:264:1-159
  wire [7:0] out0Level1TagOut0;
  // spec.hs:264:1-159
  wire [7:0] out0Level1TagOut3;
  // spec.hs:264:1-159
  wire  slide2;
  // spec.hs:264:1-159
  wire [7:0] out1Level1TagOut1;
  // spec.hs:264:1-159
  wire  p0;
  // spec.hs:264:1-159
  wire [7:0] out2Level2TagIn0;
  // spec.hs:264:1-159
  wire [7:0] out2Level2TagIn1;
  // spec.hs:264:1-159
  wire [7:0] out2Level2TagOut0;
  // spec.hs:264:1-159
  wire [7:0] out2Level2TagOut1;
  // spec.hs:264:1-159
  wire  p2;
  // spec.hs:264:1-159
  wire [7:0] out3Level3TagOut0;
  // spec.hs:264:1-159
  wire [7:0] out3Level3TagOut2;
  // spec.hs:264:1-159
  wire [7:0] out3Level3TagOut3;
  // spec.hs:264:1-159
  wire [7:0] out6Level4TagOut3;
  // spec.hs:264:1-159
  wire [7:0] out6Level4TagOut5;
  // spec.hs:264:1-159
  wire  p4;
  // spec.hs:264:1-159
  wire  p6;
  // spec.hs:264:1-159
  wire [7:0] level6TagOut4;
  // spec.hs:264:1-159
  wire [7:0] level6TagOut5;
  // spec.hs:264:1-159
  wire  p8;
  // spec.hs:264:1-159
  wire  p3;
  // spec.hs:264:1-159
  wire  p5;
  // spec.hs:264:1-159
  wire  p7;
  // spec.hs:264:1-159
  wire [7:0] out2Level2TagOut2;
  // spec.hs:264:1-159
  wire [7:0] sw0Level1TagSw0;
  // spec.hs:264:1-159
  wire [7:0] out6Level4TagOut4;
  // spec.hs:264:1-159
  wire [7:0] out6Level4TagOut6;
  // spec.hs:264:1-159
  wire [7:0] level6TagOut0;
  // spec.hs:264:1-159
  wire [7:0] level6TagOut1;
  // spec.hs:264:1-159
  wire [7:0] level6TagOut2;
  // spec.hs:251:1-60
  wire [7:0] tag_0;
  // spec.hs:264:1-159
  wire  b_10;
  wire signed [63:0] x_15;
  wire signed [63:0] y_9;
  wire [141:0] result_107;
  reg [139:0] c$app_arg_35 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0,
                                                              1'b0,   1'b0}};
  wire [139:0] c$case_alt_2;
  wire [139:0] c$case_alt_3;
  wire [139:0] c$case_alt_4;
  reg [139:0] c$case_alt_5;
  reg [139:0] c$case_alt_6;
  wire [139:0] c$case_alt_7;
  reg  c$app_arg_36 = 1'b0;
  wire  c$case_alt_8;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  reg  c$case_alt_12;
  reg  c$app_arg_37 = 1'b0;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  wire  c$case_alt_15;
  // spec.hs:113:1-78
  reg [559:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0}}};
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt;
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt_0;
  // spec.hs:113:1-78
  wire [559:0] c$buffer_case_alt_1;
  // spec.hs:113:1-78
  wire [139:0] qData;
  // spec.hs:113:1-78
  wire signed [63:0] x_16;
  // spec.hs:113:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:113:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:113:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:113:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:594:1-184
  wire  qPopValid;
  // spec.hs:594:1-184
  wire  qPush;
  // spec.hs:594:1-184
  wire  qPop;
  wire [129:0] inputs;
  wire [287:0] t_projection;
  wire [3:0] c$vec2;
  wire [215:0] t_projection_3;
  wire [8:0] c$vec2_0;
  wire [215:0] t_projection_5;
  wire [8:0] c$vec2_1;
  wire signed [63:0] x_projection_9;
  wire [319:0] c$t_case_alt_sel_alt_t_0;
  wire [319:0] c$t_case_alt_sel_alt_f_0;
  wire [255:0] c$vec;
  wire [215:0] t_projection_7;
  wire [8:0] c$vec2_2;
  wire [8:0] c$vec2_3;
  wire [215:0] t_projection_10;
  wire signed [63:0] x_projection_16;
  wire [8:0] c$vec2_4;
  wire [3:0] c$vec2_5;
  wire [3:0] c$vec2_6;
  wire [215:0] t_projection_14;
  wire signed [63:0] x_projection_20;
  wire signed [63:0] x_projection_21;
  wire [3:0] c$vec2_7;
  wire [3:0] c$vec2_8;
  wire signed [63:0] x_projection_28;
  wire [3:0] c$vec2_9;
  wire [3:0] c$vec2_10;
  wire [3:0] c$vec2_11;
  wire [3:0] c$vec2_12;
  wire [3:0] c$vec2_13;
  wire [3:0] c$vec2_14;
  wire [3:0] c$vec2_15;
  wire signed [63:0] x_projection_38;
  wire signed [63:0] x_projection_39;
  wire [383:0] c$t_case_alt_sel_alt_t_3;
  wire [383:0] c$t_case_alt_sel_alt_f_3;
  wire [319:0] c$vec_0;
  wire signed [63:0] c$tte_rhs;
  wire [699:0] c$buffer_case_alt_sel_alt_t_1;
  wire [699:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [533:0] result;
  wire [519:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [64:0] result_0_7;
  wire [13:0] result_1;
  wire [7:0] result_1_4;
  wire [1:0] result_1_5;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {hasInput0 | (hasInput1 | (timer0Over | (timer1Over | (timer1Over | (timer1Over | (timer1Over | timer1Over)))))),
                     {inputs,   {timer1Over,   timer1Over},
                      {c$app_arg,   c$app_arg,   c$app_arg,
                       c$app_arg,   timer0Over,   timer1Over,
                       timer1Over,   timer1Over}}};

  assign c$app_arg = hasInput0 & hasInput1;

  assign hasInput0 = inputs[65:65];

  assign hasInput1 = inputs[0:0];

  assign result_3 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign timer0Over = result_4 >= (64'sd500000);

  assign result_5 = timer1Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= (64'sd0);
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign timer1Over = result_6 >= (64'sd1000000);

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_8;
    end
  end
  // register end

  assign result_7 = toWait == (64'sd0);

  assign result_8 = result_10 ? (64'sd2) : result_9;

  assign b = toWait > (64'sd0);

  assign result_9 = b ? ((x_1 - 64'sd1)) : toWait;

  assign x_1 = toWait;

  assign result_10 = b_10 ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_11;
    end
  end
  // register end

  assign result_11 = input0HasData ? result_12 : t;

  assign b_0 = t == 8'd6;

  assign f1 = t + 8'd1;

  assign result_12 = b_0 ? 8'd1 : f1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_13;
    end
  end
  // register end

  assign result_13 = input1HasData ? result_14 : t_0;

  assign b_1 = t_0 == 8'd6;

  assign f1_0 = t_0 + 8'd1;

  assign result_14 = b_1 ? 8'd1 : f1_0;

  wire  iterateI_ho1_0_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  assign c$app_arg_0 = {input0HasData,
                        iterateI_ho1_0_res};



  assign result_15 = c$app_arg_0[1-1:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_case_scrut_delay
    if (en) begin
      c$input0Win_case_scrut <= input0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_16 <= result_17;
    end
  end
  // register end

  assign t_projection = ({result_16,{t,   $signed(c$input0Win_case_scrut[64:1])}});

  assign t_1 = t_projection[215:0];

  assign result_17 = result_15 ? t_1 : result_16;

  wire  iterateI_ho1_0_res_0;
  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= input1HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_0;



  assign c$app_arg_1 = {input1HasData,
                        iterateI_ho1_0_res_0};



  assign result_18 = c$app_arg_1[1-1:0];

  // delay begin
  always @(posedge clk) begin : c$input1Win_case_scrut_delay
    if (en) begin
      c$input1Win_case_scrut <= input2;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= {8'd7,   64'sd0};
    end else if (en) begin
      result_19 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_18 ? {t_0,
                                         $signed(c$input1Win_case_scrut[64:1])} : result_19;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_20;
    end
  end
  // register end

  assign result_20 = p5 ? result_21 : t_2;

  assign b_2 = t_2 == 8'd6;

  assign f1_1 = t_2 + 8'd1;

  assign result_21 = b_2 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_22;
    end
  end
  // register end

  assign result_22 = p0 ? result_23 : t_3;

  assign b_3 = t_3 == 8'd6;

  assign f1_2 = t_3 + 8'd1;

  assign result_23 = b_3 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_24;
    end
  end
  // register end

  assign result_24 = p2 ? result_25 : t_4;

  assign b_4 = t_4 == 8'd6;

  assign f1_3 = t_4 + 8'd1;

  assign result_25 = b_4 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_26;
    end
  end
  // register end

  assign result_26 = p3 ? result_27 : t_5;

  assign b_5 = t_5 == 8'd6;

  assign f1_4 = t_5 + 8'd1;

  assign result_27 = b_5 ? 8'd1 : f1_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_28;
    end
  end
  // register end

  assign result_28 = p4 ? result_29 : t_6;

  assign b_6 = t_6 == 8'd6;

  assign f1_5 = t_6 + 8'd1;

  assign result_29 = b_6 ? 8'd1 : f1_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_30;
    end
  end
  // register end

  assign result_30 = p6 ? result_31 : t_7;

  assign b_7 = t_7 == 8'd6;

  assign f1_6 = t_7 + 8'd1;

  assign result_31 = b_7 ? 8'd1 : f1_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_32;
    end
  end
  // register end

  assign result_32 = p7 ? result_33 : t_8;

  assign b_8 = t_8 == 8'd6;

  assign f1_7 = t_8 + 8'd1;

  assign result_33 = b_8 ? 8'd1 : f1_7;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_34;
    end
  end
  // register end

  assign result_34 = p8 ? result_35 : t_9;

  assign b_9 = t_9 == 8'd6;

  assign f1_8 = t_9 + 8'd1;

  assign result_35 = b_9 ? 8'd1 : f1_8;

  wire [95:0] iterateI_ho1_0_res_1;
  reg [95:0] c$bb_res_res_1 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_1;



  assign c$app_arg_2 = {curTags,
                        iterateI_ho1_0_res_1};



  assign result_36 = c$app_arg_2[96-1:0];

  wire [95:0] iterateI_ho1_0_res_2;
  wire [95:0] iterateI_ho1_1_res;
  reg [95:0] c$bb_res_res_2 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_2;



  reg [95:0] c$bb_res_res_3 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_3;



  assign c$app_arg_3 = {curTags,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res};



  assign result_37 = c$app_arg_3[96-1:0];

  wire [95:0] iterateI_ho1_0_res_3;
  wire [95:0] iterateI_ho1_1_res_0;
  wire [95:0] iterateI_ho1_2_res;
  reg [95:0] c$bb_res_res_4 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_4;



  reg [95:0] c$bb_res_res_5 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_5;



  reg [95:0] c$bb_res_res_6 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_6;



  assign c$app_arg_4 = {curTags,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res};



  assign result_38 = c$app_arg_4[96-1:0];

  wire [95:0] iterateI_ho1_0_res_4;
  wire [95:0] iterateI_ho1_1_res_1;
  wire [95:0] iterateI_ho1_2_res_0;
  wire [95:0] iterateI_ho1_3_res;
  reg [95:0] c$bb_res_res_7 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_7;



  reg [95:0] c$bb_res_res_8 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg [95:0] c$bb_res_res_9 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_9;



  reg [95:0] c$bb_res_res_10 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_10;



  assign c$app_arg_5 = {curTags,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res};



  assign result_39 = c$app_arg_5[96-1:0];

  wire [95:0] iterateI_ho1_0_res_5;
  wire [95:0] iterateI_ho1_1_res_2;
  wire [95:0] iterateI_ho1_2_res_1;
  wire [95:0] iterateI_ho1_3_res_0;
  wire [95:0] iterateI_ho1_4_res;
  wire [95:0] iterateI_ho1_5_res;
  reg [95:0] c$bb_res_res_11 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_11;



  reg [95:0] c$bb_res_res_12 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_12;



  reg [95:0] c$bb_res_res_13 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_13;



  reg [95:0] c$bb_res_res_14 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_14;



  reg [95:0] c$bb_res_res_15 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_15;



  reg [95:0] c$bb_res_res_16 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_16;



  assign c$app_arg_6 = {curTags,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res,   iterateI_ho1_5_res};



  assign result_40 = c$app_arg_6[96-1:0];

  wire  iterateI_ho1_0_res_6;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_17;



  assign c$app_arg_7 = {p5,
                        iterateI_ho1_0_res_6};



  assign result_41 = c$app_arg_7[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_16;
  generate
  for (i_16 = 0; i_16 < 2; i_16 = i_16 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_45[i_16*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_16*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_16*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_17;
  generate
  for (i_17=0; i_17 < 2; i_17 = i_17 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_17*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_17[0+:1];
    wire [1:0] c$case_alt_16;
    // spec.hs:230:1-72
    wire [7:0] t_20;
    // spec.hs:230:1-72
    wire [71:0] x_18;
    assign map_out = c$case_alt_16;

    assign c$case_alt_16 = (t_20 == result_43) ? {1'b1,map_index} : map_in[1:0];

    assign t_20 = x_18[71:64];

    assign x_18 = map_in[73:2];


    assign c$ws_app_arg_0[i_17*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_18;
  generate
  for (i_18=0; i_18 < 2; i_18=i_18+1) begin : mk_array
    assign vecArray[(2-1)-i_18] = result_45[i_18*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_42 = c$case_scrut_0[1:1] ? {t_2,
                                            $signed(c$case_scrut[63:0])} : {t_2,   64'sd0};

  assign result_43 = (t_2 > 8'd1) ? c$app_arg_8 : (c$app_arg_8 + 8'd6);

  assign c$app_arg_8 = t_2 - 8'd1;

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  assign result_44 = result_41 ? t_10 : result_45;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_45_register
    if ( rst) begin
      result_45 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_45 <= result_44;
    end
  end
  // register end

  assign t_projection_3 = ({result_45,{t_2,   (x_2 + 64'sd1)}});

  assign t_10 = t_projection_3[143:0];

  assign x_2 = $signed(result_42[63:0]);

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_3;
  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_19;



  assign c$app_arg_9 = {p2,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_3};



  assign result_46 = c$app_arg_9[1-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_20;
  generate
  for (i_20 = 0; i_20 < 3; i_20 = i_20 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_16[i_20*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_20*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_20*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 3; i_21 = i_21 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_21*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_21[0+:2];
    wire [2:0] c$case_alt_17;
    // spec.hs:230:1-72
    wire [7:0] t_21;
    // spec.hs:230:1-72
    wire [71:0] x_19;
    assign map_out_0 = c$case_alt_17;

    assign c$case_alt_17 = (t_21 == result_48) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_21 = x_19[71:64];

    assign x_19 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_21*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_22;
  generate
  for (i_22=0; i_22 < 3; i_22=i_22+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_22] = result_16[i_22*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_47 = c$case_scrut_2[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_1[63:0])} : {out0Level1TagIn0,
                                                                              $signed(result_19[63:0])};

  assign result_48 = (out0Level1TagIn0 > 8'd2) ? c$app_arg_10 : (c$app_arg_10 + 8'd6);

  assign c$app_arg_10 = out0Level1TagIn0 - 8'd2;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign result_49 = result_46 ? t_11 : result_50;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_50_register
    if ( rst) begin
      result_50 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_50 <= result_49;
    end
  end
  // register end

  assign t_projection_5 = ({result_50,{out1Level1TagOut1,   (x_3 + 64'sd1)}});

  assign t_11 = t_projection_5[143:0];

  assign x_3 = $signed(result_47[63:0]);

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_2;
  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_22;



  assign c$app_arg_11 = {p6,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_4,
                         iterateI_ho1_2_res_2};



  assign result_51 = c$app_arg_11[1-1:0];

  assign sig = slide0 | input0HasData;

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_5;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= sig;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_24;



  assign c$app_arg_12 = {sig,
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_5};



  assign result_52 = c$app_arg_12[1-1:0];

  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_6;
  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= slide0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_26;



  assign c$app_arg_13 = {slide0,
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_6};



  assign result_53 = c$app_arg_13[1-1:0];

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_23;
  generate
  for (i_23 = 0; i_23 < 3; i_23 = i_23 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_16[i_23*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_23*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_23*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_24;
  generate
  for (i_24=0; i_24 < 3; i_24 = i_24 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_24*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_24[0+:2];
    wire [2:0] c$case_alt_18;
    // spec.hs:238:1-70
    wire [7:0] t_22;
    // spec.hs:238:1-70
    wire [71:0] x_20;
    assign map_out_1 = c$case_alt_18;

    assign c$case_alt_18 = (t_22 == out0Level1TagIn0) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_22 = x_20[71:64];

    assign x_20 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_24*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_25;
  generate
  for (i_25=0; i_25 < 3; i_25=i_25+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_25] = result_16[i_25*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_54 = c$case_scrut_4[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_3[63:0])} : {out0Level1TagIn0,
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_7;
  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_28;



  assign c$app_arg_14 = {input0HasData,
                         iterateI_ho1_0_res_11,   iterateI_ho1_1_res_7};



  assign result_55 = c$app_arg_14[1-1:0];

  assign y = dta;

  assign dta = $signed(result_54[63:0]);

  assign x_projection_9 = $signed(win[256-1 -: 64]);

  assign x_4 = x_projection_9;

  assign win = window[255:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd7,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_56;
    end
  end
  // register end

  assign result_56 = result_52 ? t_12 : window;

  assign t_12 = {sw0Level1TagSw0,   result_57};

  assign result_57 = result_53 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = result_55 ? c$t_case_alt_sel_alt_t_0[319:64] : c$t_case_alt_sel_alt_f_0[319:64];

  assign c$t_case_alt_0 = result_55 ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_26;
  generate
  for (i_26=0;i_26<4;i_26=i_26+1) begin : vector_replace
    assign lastBucketUpdated[(3-i_26)*64+:64] = (64'sd0) == i_26 ? ((x_4 + y)) : win[(3-i_26)*64+:64];
  end
  endgenerate
  // vector replace end

  assign c$vec = window[255:0];

  wire [191:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_3;
  assign c$t_app_arg = acc_2_0;

  assign vec = (c$vec[192-1 : 0]);

  assign acc_1 = $signed(vec[191:128]);

  assign acc_2 = $signed(vec[127:64]);

  assign acc_3 = $signed(vec[63:0]);

  wire signed [63:0] x_21;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_19;
  assign acc_1_0 = c$case_alt_19;

  assign x_21 = acc_1;

  assign y_11 = acc_2;

  assign c$case_alt_19 = (x_21 + y_11);



  wire signed [63:0] x_22;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_20;
  assign acc_2_0 = c$case_alt_20;

  assign x_22 = acc_1_0;

  assign y_12 = acc_3;

  assign c$case_alt_20 = (x_22 + y_12);





  assign result_58 = result_51 ? t_13 : result_59;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_59_register
    if ( rst) begin
      result_59 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_59 <= result_58;
    end
  end
  // register end

  assign t_projection_7 = ({result_59,{result_37[39:32],   c$t_app_arg}});

  assign t_13 = t_projection_7[143:0];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_8;
  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_30;



  assign c$app_arg_15 = {p0,
                         iterateI_ho1_0_res_12,   iterateI_ho1_1_res_8};



  assign result_60 = c$app_arg_15[1-1:0];

  assign c$vec2_2 = (ws_2[9-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 3; i_27 = i_27 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_16[i_27*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_27*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_27*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 3; i_28 = i_28 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_28*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd2 - i_28[0+:2];
    wire [2:0] c$case_alt_21;
    // spec.hs:238:1-70
    wire [7:0] t_23;
    // spec.hs:238:1-70
    wire [71:0] x_23;
    assign map_out_2 = c$case_alt_21;

    assign c$case_alt_21 = (t_23 == out0Level1TagIn0) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_23 = x_23[71:64];

    assign x_23 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_28*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:3-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 3; i_29=i_29+1) begin : mk_array_2
    assign vecArray_2[(3-1)-i_29] = result_16[i_29*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[12-1 -: 3];

  assign result_61 = c$case_scrut_6[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_5[63:0])} : {out0Level1TagIn0,
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  assign eta3 = (x_15 + y_9);

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 3; i_30 = i_30 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_16[i_30*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_30*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_30*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 3; i_31 = i_31 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_31*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_31[0+:2];
    wire [2:0] c$case_alt_22;
    // spec.hs:230:1-72
    wire [7:0] t_24;
    // spec.hs:230:1-72
    wire [71:0] x_24;
    assign map_out_3 = c$case_alt_22;

    assign c$case_alt_22 = (t_24 == result_63) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_24 = x_24[71:64];

    assign x_24 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_31*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 3; i_32=i_32+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_32] = result_16[i_32*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_62 = c$case_scrut_8[2:2] ? {out0Level1TagIn0,
                                            $signed(c$case_scrut_7[63:0])} : {out0Level1TagIn0,
                                                                              eta3};

  assign result_63 = (out0Level1TagIn0 > 8'd1) ? c$app_arg_16 : (c$app_arg_16 + 8'd6);

  assign c$app_arg_16 = out0Level1TagIn0 - 8'd1;

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  assign winTag = result_78[71:64];

  assign winData = $signed(result_78[63:0]);

  assign c$case_alt = (result_64 == winTag) ? {out0Level1TagOut3,
                                               winData} : {out0Level1TagOut3,
                                                           $signed(result_61[63:0])};

  assign result_64 = (out0Level1TagOut3 > 8'd1) ? c$app_arg_17 : (c$app_arg_17 + 8'd6);

  assign c$app_arg_17 = out0Level1TagOut3 - 8'd1;

  assign result_65 = result_60 ? t_14 : result_66;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_66_register
    if ( rst) begin
      result_66 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_66 <= result_65;
    end
  end
  // register end

  assign t_projection_10 = ({result_66,{out0Level1TagOut0,   (x_6 + y_0)}});

  assign t_14 = t_projection_10[143:0];

  assign x_5 = $signed(result_62[63:0]);

  assign y_0 = $signed(c$case_alt[63:0]);

  assign x_projection_16 = (x_5 + 64'sd1);

  assign x_6 = x_projection_16;

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_3;
  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_33;



  assign c$app_arg_18 = {p3,
                         iterateI_ho1_0_res_13,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_3};



  assign result_67 = c$app_arg_18[1-1:0];

  assign c$vec2_4 = (ws_4[9-1 : 0]);

  // zipWith start
  genvar i_33;
  generate
  for (i_33 = 0; i_33 < 3; i_33 = i_33 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_16[i_33*72+:72];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_33*3+:3];
    wire [74:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_33*75+:75] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_34;
  generate
  for (i_34=0; i_34 < 3; i_34 = i_34 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [74:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_34*75+:75];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd2 - i_34[0+:2];
    wire [2:0] c$case_alt_26;
    // spec.hs:238:1-70
    wire [7:0] t_25;
    // spec.hs:238:1-70
    wire [71:0] x_25;
    assign map_out_4 = c$case_alt_26;

    assign c$case_alt_26 = (t_25 == out2Level2TagIn0) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_25 = x_25[71:64];

    assign x_25 = map_in_4[74:3];


    assign c$ws_app_arg_10[i_34*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:3-1];
  genvar i_35;
  generate
  for (i_35=0; i_35 < 3; i_35=i_35+1) begin : mk_array_4
    assign vecArray_4[(3-1)-i_35] = result_16[i_35*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[12-1 -: 3];

  assign result_68 = c$case_scrut_10[2:2] ? {out2Level2TagIn0,
                                             $signed(c$case_scrut_9[63:0])} : {out2Level2TagIn0,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign c$out2_case_alt = (tag == out2Level2TagIn1) ? {tag,
                                                        $signed(result_19[63:0])} : {out2Level2TagIn1,
                                                                                     64'sd0};

  assign c$vec2_5 = (ws_5[4-1 : 0]);

  // zipWith start
  genvar i_36;
  generate
  for (i_36 = 0; i_36 < 2; i_36 = i_36 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_66[i_36*72+:72];
    wire [1:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_36*2+:2];
    wire [73:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_36*74+:74] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_37;
  generate
  for (i_37=0; i_37 < 2; i_37 = i_37 + 1) begin : imap_5
    wire [1-1:0] map_index_5;
    wire [73:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_37*74+:74];
    wire [1:0] map_out_5;

    assign map_index_5 = 1'd1 - i_37[0+:1];
    wire [1:0] c$case_alt_27;
    // spec.hs:238:1-70
    wire [7:0] t_26;
    // spec.hs:238:1-70
    wire [71:0] x_26;
    assign map_out_5 = c$case_alt_27;

    assign c$case_alt_27 = (t_26 == out2Level2TagOut0) ? {1'b1,map_index_5} : map_in_5[1:0];

    assign t_26 = x_26[71:64];

    assign x_26 = map_in_5[73:2];


    assign c$ws_app_arg_12[i_37*2+:2] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:2-1];
  genvar i_38;
  generate
  for (i_38=0; i_38 < 2; i_38=i_38+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_38] = result_66[i_38*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-1) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[6-1 -: 2];

  assign result_69 = c$case_scrut_12[1:1] ? {out2Level2TagOut0,
                                             $signed(c$case_scrut_11[63:0])} : {out2Level2TagOut0,
                                                                                64'sd0};

  assign i_5 = c$case_scrut_12[0:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,1'bx}};

  assign c$vec2_6 = (ws_6[4-1 : 0]);

  // zipWith start
  genvar i_39;
  generate
  for (i_39 = 0; i_39 < 2; i_39 = i_39 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_50[i_39*72+:72];
    wire [1:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_39*2+:2];
    wire [73:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_39*74+:74] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_40;
  generate
  for (i_40=0; i_40 < 2; i_40 = i_40 + 1) begin : imap_6
    wire [1-1:0] map_index_6;
    wire [73:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_40*74+:74];
    wire [1:0] map_out_6;

    assign map_index_6 = 1'd1 - i_40[0+:1];
    wire [1:0] c$case_alt_28;
    // spec.hs:238:1-70
    wire [7:0] t_27;
    // spec.hs:238:1-70
    wire [71:0] x_27;
    assign map_out_6 = c$case_alt_28;

    assign c$case_alt_28 = (t_27 == out2Level2TagOut1) ? {1'b1,map_index_6} : map_in_6[1:0];

    assign t_27 = x_27[71:64];

    assign x_27 = map_in_6[73:2];


    assign c$ws_app_arg_14[i_40*2+:2] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:2-1];
  genvar i_41;
  generate
  for (i_41=0; i_41 < 2; i_41=i_41+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_41] = result_50[i_41*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-1) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[6-1 -: 2];

  assign result_70 = c$case_scrut_14[1:1] ? {out2Level2TagOut1,
                                             $signed(c$case_scrut_13[63:0])} : {out2Level2TagOut1,
                                                                                64'sd0};

  assign i_6 = c$case_scrut_14[0:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,1'bx}};

  assign result_71 = result_67 ? t_15 : result_72;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_72_register
    if ( rst) begin
      result_72 <= {{8'd7,   64'sd0},   {8'd7,   64'sd0}};
    end else if (en) begin
      result_72 <= result_71;
    end
  end
  // register end

  assign t_projection_14 = ({result_72,{out2Level2TagOut2,   (x_8 + y_2)}});

  assign t_15 = t_projection_14[143:0];

  assign x_projection_20 = (x_9 * y_3);

  assign x_7 = x_projection_20;

  assign y_1 = $signed(result_68[63:0]);

  assign x_projection_21 = (x_7 + y_1);

  assign x_8 = x_projection_21;

  assign y_2 = $signed(c$out2_case_alt[63:0]);

  assign x_9 = $signed(result_69[63:0]);

  assign y_3 = $signed(result_70[63:0]);

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_1;
  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_37;



  assign c$app_arg_19 = {p4,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_10,   iterateI_ho1_2_res_4,
                         iterateI_ho1_3_res_1};



  assign result_73 = c$app_arg_19[1-1:0];

  assign c$vec2_7 = (ws_7[4-1 : 0]);

  // zipWith start
  genvar i_42;
  generate
  for (i_42 = 0; i_42 < 2; i_42 = i_42 + 1) begin : zipWith_7
    wire [71:0] zipWith_in1_7;
    assign zipWith_in1_7 = result_66[i_42*72+:72];
    wire [1:0] zipWith_in2_7;
    assign zipWith_in2_7 = c$vec2_7[i_42*2+:2];
    wire [73:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_15[i_42*74+:74] = c$n_7;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_43;
  generate
  for (i_43=0; i_43 < 2; i_43 = i_43 + 1) begin : imap_7
    wire [1-1:0] map_index_7;
    wire [73:0] map_in_7;
    assign map_in_7 = c$ws_app_arg_15[i_43*74+:74];
    wire [1:0] map_out_7;

    assign map_index_7 = 1'd1 - i_43[0+:1];
    wire [1:0] c$case_alt_29;
    // spec.hs:238:1-70
    wire [7:0] t_28;
    // spec.hs:238:1-70
    wire [71:0] x_28;
    assign map_out_7 = c$case_alt_29;

    assign c$case_alt_29 = (t_28 == out3Level3TagOut0) ? {1'b1,map_index_7} : map_in_7[1:0];

    assign t_28 = x_28[71:64];

    assign x_28 = map_in_7[73:2];


    assign c$ws_app_arg_16[i_43*2+:2] = map_out_7;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_7 [0:2-1];
  genvar i_44;
  generate
  for (i_44=0; i_44 < 2; i_44=i_44+1) begin : mk_array_7
    assign vecArray_7[(2-1)-i_44] = result_66[i_44*72+:72];
  end
  endgenerate
  assign c$case_scrut_15 = vecArray_7[($unsigned({{(64-1) {1'b0}},i_7}))];
  // index end

  assign c$case_scrut_16 = ws_7[6-1 -: 2];

  assign result_74 = c$case_scrut_16[1:1] ? {out3Level3TagOut0,
                                             $signed(c$case_scrut_15[63:0])} : {out3Level3TagOut0,
                                                                                64'sd0};

  assign i_7 = c$case_scrut_16[0:0];

  assign ws_7 = {c$ws_app_arg_16,{1'b0,1'bx}};

  assign c$vec2_8 = (ws_8[4-1 : 0]);

  // zipWith start
  genvar i_45;
  generate
  for (i_45 = 0; i_45 < 2; i_45 = i_45 + 1) begin : zipWith_8
    wire [71:0] zipWith_in1_8;
    assign zipWith_in1_8 = result_72[i_45*72+:72];
    wire [1:0] zipWith_in2_8;
    assign zipWith_in2_8 = c$vec2_8[i_45*2+:2];
    wire [73:0] c$n_8;
    assign c$n_8 = {zipWith_in1_8,   zipWith_in2_8};


    assign c$ws_app_arg_17[i_45*74+:74] = c$n_8;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_46;
  generate
  for (i_46=0; i_46 < 2; i_46 = i_46 + 1) begin : imap_8
    wire [1-1:0] map_index_8;
    wire [73:0] map_in_8;
    assign map_in_8 = c$ws_app_arg_17[i_46*74+:74];
    wire [1:0] map_out_8;

    assign map_index_8 = 1'd1 - i_46[0+:1];
    wire [1:0] c$case_alt_30;
    // spec.hs:238:1-70
    wire [7:0] t_29;
    // spec.hs:238:1-70
    wire [71:0] x_29;
    assign map_out_8 = c$case_alt_30;

    assign c$case_alt_30 = (t_29 == out3Level3TagOut2) ? {1'b1,map_index_8} : map_in_8[1:0];

    assign t_29 = x_29[71:64];

    assign x_29 = map_in_8[73:2];


    assign c$ws_app_arg_18[i_46*2+:2] = map_out_8;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_8 [0:2-1];
  genvar i_47;
  generate
  for (i_47=0; i_47 < 2; i_47=i_47+1) begin : mk_array_8
    assign vecArray_8[(2-1)-i_47] = result_72[i_47*72+:72];
  end
  endgenerate
  assign c$case_scrut_17 = vecArray_8[($unsigned({{(64-1) {1'b0}},i_8}))];
  // index end

  assign c$case_scrut_18 = ws_8[6-1 -: 2];

  assign result_75 = c$case_scrut_18[1:1] ? {out3Level3TagOut2,
                                             $signed(c$case_scrut_17[63:0])} : {out3Level3TagOut2,
                                                                                64'sd0};

  assign i_8 = c$case_scrut_18[0:0];

  assign ws_8 = {c$ws_app_arg_18,{1'b0,1'bx}};

  assign winTag_0 = result_78[71:64];

  assign winData_0 = $signed(result_78[63:0]);

  assign c$case_alt_0 = (result_76 == winTag_0) ? {out3Level3TagOut3,
                                                   winData_0} : {out3Level3TagOut3,   64'sd0};

  assign result_76 = (out3Level3TagOut3 > 8'd1) ? c$app_arg_20 : (c$app_arg_20 + 8'd6);

  assign c$app_arg_20 = out3Level3TagOut3 - 8'd1;

  assign result_77 = result_73 ? t_16 : result_78;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_78_register
    if ( rst) begin
      result_78 <= {8'd7,   64'sd0};
    end else if (en) begin
      result_78 <= result_77;
    end
  end
  // register end

  assign t_16 = {out3Level3TagOut3,
                 (x_11 + y_5)};

  assign x_10 = $signed(result_74[63:0]);

  assign y_4 = $signed(result_75[63:0]);

  assign x_projection_28 = (x_10 + y_4);

  assign x_11 = x_projection_28;

  assign y_5 = $signed(c$case_alt_0[63:0]);

  assign c$vec2_9 = (ws_9[4-1 : 0]);

  // zipWith start
  genvar i_48;
  generate
  for (i_48 = 0; i_48 < 2; i_48 = i_48 + 1) begin : zipWith_9
    wire [71:0] zipWith_in1_9;
    assign zipWith_in1_9 = result_66[i_48*72+:72];
    wire [1:0] zipWith_in2_9;
    assign zipWith_in2_9 = c$vec2_9[i_48*2+:2];
    wire [73:0] c$n_9;
    assign c$n_9 = {zipWith_in1_9,   zipWith_in2_9};


    assign c$ws_app_arg_19[i_48*74+:74] = c$n_9;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_49;
  generate
  for (i_49=0; i_49 < 2; i_49 = i_49 + 1) begin : imap_9
    wire [1-1:0] map_index_9;
    wire [73:0] map_in_9;
    assign map_in_9 = c$ws_app_arg_19[i_49*74+:74];
    wire [1:0] map_out_9;

    assign map_index_9 = 1'd1 - i_49[0+:1];
    wire [1:0] c$case_alt_31;
    // spec.hs:238:1-70
    wire [7:0] t_30;
    // spec.hs:238:1-70
    wire [71:0] x_30;
    assign map_out_9 = c$case_alt_31;

    assign c$case_alt_31 = (t_30 == level6TagOut0) ? {1'b1,map_index_9} : map_in_9[1:0];

    assign t_30 = x_30[71:64];

    assign x_30 = map_in_9[73:2];


    assign c$ws_app_arg_20[i_49*2+:2] = map_out_9;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_9 [0:2-1];
  genvar i_50;
  generate
  for (i_50=0; i_50 < 2; i_50=i_50+1) begin : mk_array_9
    assign vecArray_9[(2-1)-i_50] = result_66[i_50*72+:72];
  end
  endgenerate
  assign c$case_scrut_19 = vecArray_9[($unsigned({{(64-1) {1'b0}},i_9}))];
  // index end

  assign c$case_scrut_20 = ws_9[6-1 -: 2];

  assign result_79 = c$case_scrut_20[1:1] ? {level6TagOut0,
                                             $signed(c$case_scrut_19[63:0])} : {level6TagOut0,
                                                                                64'sd0};

  assign i_9 = c$case_scrut_20[0:0];

  assign ws_9 = {c$ws_app_arg_20,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  wire  iterateI_ho1_6_res;
  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_5_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_6_res = c$bb_res_res_44;



  assign c$app_arg_21 = {p0,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_11,   iterateI_ho1_2_res_5,
                         iterateI_ho1_3_res_2,   iterateI_ho1_4_res_0,
                         iterateI_ho1_5_res_0,   iterateI_ho1_6_res};



  assign result_80 = c$app_arg_21[1-1:0];

  assign c$vec2_10 = (ws_10[4-1 : 0]);

  // zipWith start
  genvar i_51;
  generate
  for (i_51 = 0; i_51 < 2; i_51 = i_51 + 1) begin : zipWith_10
    wire [71:0] zipWith_in1_10;
    assign zipWith_in1_10 = result_50[i_51*72+:72];
    wire [1:0] zipWith_in2_10;
    assign zipWith_in2_10 = c$vec2_10[i_51*2+:2];
    wire [73:0] c$n_10;
    assign c$n_10 = {zipWith_in1_10,   zipWith_in2_10};


    assign c$ws_app_arg_21[i_51*74+:74] = c$n_10;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_52;
  generate
  for (i_52=0; i_52 < 2; i_52 = i_52 + 1) begin : imap_10
    wire [1-1:0] map_index_10;
    wire [73:0] map_in_10;
    assign map_in_10 = c$ws_app_arg_21[i_52*74+:74];
    wire [1:0] map_out_10;

    assign map_index_10 = 1'd1 - i_52[0+:1];
    wire [1:0] c$case_alt_32;
    // spec.hs:238:1-70
    wire [7:0] t_31;
    // spec.hs:238:1-70
    wire [71:0] x_31;
    assign map_out_10 = c$case_alt_32;

    assign c$case_alt_32 = (t_31 == level6TagOut1) ? {1'b1,map_index_10} : map_in_10[1:0];

    assign t_31 = x_31[71:64];

    assign x_31 = map_in_10[73:2];


    assign c$ws_app_arg_22[i_52*2+:2] = map_out_10;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_10 [0:2-1];
  genvar i_53;
  generate
  for (i_53=0; i_53 < 2; i_53=i_53+1) begin : mk_array_10
    assign vecArray_10[(2-1)-i_53] = result_50[i_53*72+:72];
  end
  endgenerate
  assign c$case_scrut_21 = vecArray_10[($unsigned({{(64-1) {1'b0}},i_10}))];
  // index end

  assign c$case_scrut_22 = ws_10[6-1 -: 2];

  assign result_81 = c$case_scrut_22[1:1] ? {level6TagOut1,
                                             $signed(c$case_scrut_21[63:0])} : {level6TagOut1,
                                                                                64'sd0};

  assign i_10 = c$case_scrut_22[0:0];

  assign ws_10 = {c$ws_app_arg_22,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_16;
  wire  iterateI_ho1_1_res_12;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  wire  iterateI_ho1_6_res_0;
  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_5_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_0 = c$bb_res_res_51;



  assign c$app_arg_22 = {p2,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_12,   iterateI_ho1_2_res_6,
                         iterateI_ho1_3_res_3,   iterateI_ho1_4_res_1,
                         iterateI_ho1_5_res_1,   iterateI_ho1_6_res_0};



  assign result_82 = c$app_arg_22[1-1:0];

  assign c$vec2_11 = (ws_11[4-1 : 0]);

  // zipWith start
  genvar i_54;
  generate
  for (i_54 = 0; i_54 < 2; i_54 = i_54 + 1) begin : zipWith_11
    wire [71:0] zipWith_in1_11;
    assign zipWith_in1_11 = result_72[i_54*72+:72];
    wire [1:0] zipWith_in2_11;
    assign zipWith_in2_11 = c$vec2_11[i_54*2+:2];
    wire [73:0] c$n_11;
    assign c$n_11 = {zipWith_in1_11,   zipWith_in2_11};


    assign c$ws_app_arg_23[i_54*74+:74] = c$n_11;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_55;
  generate
  for (i_55=0; i_55 < 2; i_55 = i_55 + 1) begin : imap_11
    wire [1-1:0] map_index_11;
    wire [73:0] map_in_11;
    assign map_in_11 = c$ws_app_arg_23[i_55*74+:74];
    wire [1:0] map_out_11;

    assign map_index_11 = 1'd1 - i_55[0+:1];
    wire [1:0] c$case_alt_33;
    // spec.hs:238:1-70
    wire [7:0] t_32;
    // spec.hs:238:1-70
    wire [71:0] x_32;
    assign map_out_11 = c$case_alt_33;

    assign c$case_alt_33 = (t_32 == level6TagOut2) ? {1'b1,map_index_11} : map_in_11[1:0];

    assign t_32 = x_32[71:64];

    assign x_32 = map_in_11[73:2];


    assign c$ws_app_arg_24[i_55*2+:2] = map_out_11;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_11 [0:2-1];
  genvar i_56;
  generate
  for (i_56=0; i_56 < 2; i_56=i_56+1) begin : mk_array_11
    assign vecArray_11[(2-1)-i_56] = result_72[i_56*72+:72];
  end
  endgenerate
  assign c$case_scrut_23 = vecArray_11[($unsigned({{(64-1) {1'b0}},i_11}))];
  // index end

  assign c$case_scrut_24 = ws_11[6-1 -: 2];

  assign result_83 = c$case_scrut_24[1:1] ? {level6TagOut2,
                                             $signed(c$case_scrut_23[63:0])} : {level6TagOut2,
                                                                                64'sd0};

  assign i_11 = c$case_scrut_24[0:0];

  assign ws_11 = {c$ws_app_arg_24,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_17;
  wire  iterateI_ho1_1_res_13;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_2;
  wire  iterateI_ho1_5_res_2;
  wire  iterateI_ho1_6_res_1;
  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_52;



  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_1_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_4_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_57;



  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_5_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_1 = c$bb_res_res_58;



  assign c$app_arg_23 = {p3,
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_13,   iterateI_ho1_2_res_7,
                         iterateI_ho1_3_res_4,   iterateI_ho1_4_res_2,
                         iterateI_ho1_5_res_2,   iterateI_ho1_6_res_1};



  assign result_84 = c$app_arg_23[1-1:0];

  wire  iterateI_ho1_0_res_18;
  wire  iterateI_ho1_1_res_14;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_3;
  wire  iterateI_ho1_6_res_2;
  reg  c$bb_res_res_59 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_59;



  reg  c$bb_res_res_60 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_60;



  reg  c$bb_res_res_61 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_1_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_61;



  reg  c$bb_res_res_62 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_62;



  reg  c$bb_res_res_63 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_63;



  reg  c$bb_res_res_64 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_64;



  reg  c$bb_res_res_65 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= iterateI_ho1_5_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_2 = c$bb_res_res_65;



  assign c$app_arg_24 = {p4,
                         iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_14,   iterateI_ho1_2_res_8,
                         iterateI_ho1_3_res_5,   iterateI_ho1_4_res_3,
                         iterateI_ho1_5_res_3,   iterateI_ho1_6_res_2};



  assign result_85 = c$app_arg_24[1-1:0];

  assign c$vec2_12 = (ws_12[4-1 : 0]);

  // zipWith start
  genvar i_57;
  generate
  for (i_57 = 0; i_57 < 2; i_57 = i_57 + 1) begin : zipWith_12
    wire [71:0] zipWith_in1_12;
    assign zipWith_in1_12 = result_45[i_57*72+:72];
    wire [1:0] zipWith_in2_12;
    assign zipWith_in2_12 = c$vec2_12[i_57*2+:2];
    wire [73:0] c$n_12;
    assign c$n_12 = {zipWith_in1_12,   zipWith_in2_12};


    assign c$ws_app_arg_25[i_57*74+:74] = c$n_12;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_58;
  generate
  for (i_58=0; i_58 < 2; i_58 = i_58 + 1) begin : imap_12
    wire [1-1:0] map_index_12;
    wire [73:0] map_in_12;
    assign map_in_12 = c$ws_app_arg_25[i_58*74+:74];
    wire [1:0] map_out_12;

    assign map_index_12 = 1'd1 - i_58[0+:1];
    wire [1:0] c$case_alt_34;
    // spec.hs:238:1-70
    wire [7:0] t_33;
    // spec.hs:238:1-70
    wire [71:0] x_33;
    assign map_out_12 = c$case_alt_34;

    assign c$case_alt_34 = (t_33 == level6TagOut4) ? {1'b1,map_index_12} : map_in_12[1:0];

    assign t_33 = x_33[71:64];

    assign x_33 = map_in_12[73:2];


    assign c$ws_app_arg_26[i_58*2+:2] = map_out_12;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_12 [0:2-1];
  genvar i_59;
  generate
  for (i_59=0; i_59 < 2; i_59=i_59+1) begin : mk_array_12
    assign vecArray_12[(2-1)-i_59] = result_45[i_59*72+:72];
  end
  endgenerate
  assign c$case_scrut_25 = vecArray_12[($unsigned({{(64-1) {1'b0}},i_12}))];
  // index end

  assign c$case_scrut_26 = ws_12[6-1 -: 2];

  assign result_86 = c$case_scrut_26[1:1] ? {level6TagOut4,
                                             $signed(c$case_scrut_25[63:0])} : {level6TagOut4,
                                                                                64'sd0};

  assign i_12 = c$case_scrut_26[0:0];

  assign ws_12 = {c$ws_app_arg_26,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_19;
  wire  iterateI_ho1_1_res_15;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_4;
  wire  iterateI_ho1_6_res_3;
  reg  c$bb_res_res_66 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_66;



  reg  c$bb_res_res_67 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= iterateI_ho1_0_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_67;



  reg  c$bb_res_res_68 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= iterateI_ho1_1_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_68;



  reg  c$bb_res_res_69 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_69;



  reg  c$bb_res_res_70 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_70;



  reg  c$bb_res_res_71 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_71;



  reg  c$bb_res_res_72 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_5_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_3 = c$bb_res_res_72;



  assign c$app_arg_25 = {p5,
                         iterateI_ho1_0_res_19,
                         iterateI_ho1_1_res_15,   iterateI_ho1_2_res_9,
                         iterateI_ho1_3_res_6,   iterateI_ho1_4_res_4,
                         iterateI_ho1_5_res_4,   iterateI_ho1_6_res_3};



  assign result_87 = c$app_arg_25[1-1:0];

  assign c$vec2_13 = (ws_13[4-1 : 0]);

  // zipWith start
  genvar i_60;
  generate
  for (i_60 = 0; i_60 < 2; i_60 = i_60 + 1) begin : zipWith_13
    wire [71:0] zipWith_in1_13;
    assign zipWith_in1_13 = result_59[i_60*72+:72];
    wire [1:0] zipWith_in2_13;
    assign zipWith_in2_13 = c$vec2_13[i_60*2+:2];
    wire [73:0] c$n_13;
    assign c$n_13 = {zipWith_in1_13,   zipWith_in2_13};


    assign c$ws_app_arg_27[i_60*74+:74] = c$n_13;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_61;
  generate
  for (i_61=0; i_61 < 2; i_61 = i_61 + 1) begin : imap_13
    wire [1-1:0] map_index_13;
    wire [73:0] map_in_13;
    assign map_in_13 = c$ws_app_arg_27[i_61*74+:74];
    wire [1:0] map_out_13;

    assign map_index_13 = 1'd1 - i_61[0+:1];
    wire [1:0] c$case_alt_35;
    // spec.hs:238:1-70
    wire [7:0] t_34;
    // spec.hs:238:1-70
    wire [71:0] x_34;
    assign map_out_13 = c$case_alt_35;

    assign c$case_alt_35 = (t_34 == level6TagOut5) ? {1'b1,map_index_13} : map_in_13[1:0];

    assign t_34 = x_34[71:64];

    assign x_34 = map_in_13[73:2];


    assign c$ws_app_arg_28[i_61*2+:2] = map_out_13;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_13 [0:2-1];
  genvar i_62;
  generate
  for (i_62=0; i_62 < 2; i_62=i_62+1) begin : mk_array_13
    assign vecArray_13[(2-1)-i_62] = result_59[i_62*72+:72];
  end
  endgenerate
  assign c$case_scrut_27 = vecArray_13[($unsigned({{(64-1) {1'b0}},i_13}))];
  // index end

  assign c$case_scrut_28 = ws_13[6-1 -: 2];

  assign result_88 = c$case_scrut_28[1:1] ? {level6TagOut5,
                                             $signed(c$case_scrut_27[63:0])} : {level6TagOut5,
                                                                                64'sd0};

  assign i_13 = c$case_scrut_28[0:0];

  assign ws_13 = {c$ws_app_arg_28,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_20;
  wire  iterateI_ho1_1_res_16;
  wire  iterateI_ho1_2_res_10;
  wire  iterateI_ho1_3_res_7;
  wire  iterateI_ho1_4_res_5;
  wire  iterateI_ho1_5_res_5;
  wire  iterateI_ho1_6_res_4;
  reg  c$bb_res_res_73 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_20 = c$bb_res_res_73;



  reg  c$bb_res_res_74 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_0_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_74;



  reg  c$bb_res_res_75 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_75;



  reg  c$bb_res_res_76 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_76;



  reg  c$bb_res_res_77 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_77;



  reg  c$bb_res_res_78 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= iterateI_ho1_4_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_5 = c$bb_res_res_78;



  reg  c$bb_res_res_79 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_5_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_4 = c$bb_res_res_79;



  assign c$app_arg_26 = {p6,
                         iterateI_ho1_0_res_20,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_10,   iterateI_ho1_3_res_7,
                         iterateI_ho1_4_res_5,   iterateI_ho1_5_res_5,
                         iterateI_ho1_6_res_4};



  assign result_89 = c$app_arg_26[1-1:0];

  wire  iterateI_ho1_0_res_21;
  wire  iterateI_ho1_1_res_17;
  wire  iterateI_ho1_2_res_11;
  wire  iterateI_ho1_3_res_8;
  wire  iterateI_ho1_4_res_6;
  reg  c$bb_res_res_80 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_21 = c$bb_res_res_80;



  reg  c$bb_res_res_81 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= iterateI_ho1_0_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_81;



  reg  c$bb_res_res_82 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_1_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_82;



  reg  c$bb_res_res_83 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= iterateI_ho1_2_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_83;



  reg  c$bb_res_res_84 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_84;



  assign c$app_arg_27 = {p7,
                         iterateI_ho1_0_res_21,
                         iterateI_ho1_1_res_17,
                         iterateI_ho1_2_res_11,   iterateI_ho1_3_res_8,
                         iterateI_ho1_4_res_6};



  assign result_90 = c$app_arg_27[1-1:0];

  assign c$case_alt_1 = (tag_0 == out6Level4TagOut3) ? {tag_0,
                                                        $signed(result_78[63:0])} : {out6Level4TagOut3,
                                                                                     64'sd2};

  assign c$vec2_14 = (ws_14[4-1 : 0]);

  // zipWith start
  genvar i_63;
  generate
  for (i_63 = 0; i_63 < 2; i_63 = i_63 + 1) begin : zipWith_14
    wire [71:0] zipWith_in1_14;
    assign zipWith_in1_14 = result_45[i_63*72+:72];
    wire [1:0] zipWith_in2_14;
    assign zipWith_in2_14 = c$vec2_14[i_63*2+:2];
    wire [73:0] c$n_14;
    assign c$n_14 = {zipWith_in1_14,   zipWith_in2_14};


    assign c$ws_app_arg_29[i_63*74+:74] = c$n_14;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_64;
  generate
  for (i_64=0; i_64 < 2; i_64 = i_64 + 1) begin : imap_14
    wire [1-1:0] map_index_14;
    wire [73:0] map_in_14;
    assign map_in_14 = c$ws_app_arg_29[i_64*74+:74];
    wire [1:0] map_out_14;

    assign map_index_14 = 1'd1 - i_64[0+:1];
    wire [1:0] c$case_alt_36;
    // spec.hs:238:1-70
    wire [7:0] t_35;
    // spec.hs:238:1-70
    wire [71:0] x_35;
    assign map_out_14 = c$case_alt_36;

    assign c$case_alt_36 = (t_35 == out6Level4TagOut4) ? {1'b1,map_index_14} : map_in_14[1:0];

    assign t_35 = x_35[71:64];

    assign x_35 = map_in_14[73:2];


    assign c$ws_app_arg_30[i_64*2+:2] = map_out_14;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_14 [0:2-1];
  genvar i_65;
  generate
  for (i_65=0; i_65 < 2; i_65=i_65+1) begin : mk_array_14
    assign vecArray_14[(2-1)-i_65] = result_45[i_65*72+:72];
  end
  endgenerate
  assign c$case_scrut_29 = vecArray_14[($unsigned({{(64-1) {1'b0}},i_14}))];
  // index end

  assign c$case_scrut_30 = ws_14[6-1 -: 2];

  assign result_91 = c$case_scrut_30[1:1] ? {out6Level4TagOut4,
                                             $signed(c$case_scrut_29[63:0])} : {out6Level4TagOut4,
                                                                                64'sd0};

  assign i_14 = c$case_scrut_30[0:0];

  assign ws_14 = {c$ws_app_arg_30,{1'b0,1'bx}};

  assign c$vec2_15 = (ws_15[4-1 : 0]);

  // zipWith start
  genvar i_66;
  generate
  for (i_66 = 0; i_66 < 2; i_66 = i_66 + 1) begin : zipWith_15
    wire [71:0] zipWith_in1_15;
    assign zipWith_in1_15 = result_59[i_66*72+:72];
    wire [1:0] zipWith_in2_15;
    assign zipWith_in2_15 = c$vec2_15[i_66*2+:2];
    wire [73:0] c$n_15;
    assign c$n_15 = {zipWith_in1_15,   zipWith_in2_15};


    assign c$ws_app_arg_31[i_66*74+:74] = c$n_15;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_67;
  generate
  for (i_67=0; i_67 < 2; i_67 = i_67 + 1) begin : imap_15
    wire [1-1:0] map_index_15;
    wire [73:0] map_in_15;
    assign map_in_15 = c$ws_app_arg_31[i_67*74+:74];
    wire [1:0] map_out_15;

    assign map_index_15 = 1'd1 - i_67[0+:1];
    wire [1:0] c$case_alt_37;
    // spec.hs:238:1-70
    wire [7:0] t_36;
    // spec.hs:238:1-70
    wire [71:0] x_36;
    assign map_out_15 = c$case_alt_37;

    assign c$case_alt_37 = (t_36 == out6Level4TagOut5) ? {1'b1,map_index_15} : map_in_15[1:0];

    assign t_36 = x_36[71:64];

    assign x_36 = map_in_15[73:2];


    assign c$ws_app_arg_32[i_67*2+:2] = map_out_15;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_15 [0:2-1];
  genvar i_68;
  generate
  for (i_68=0; i_68 < 2; i_68=i_68+1) begin : mk_array_15
    assign vecArray_15[(2-1)-i_68] = result_59[i_68*72+:72];
  end
  endgenerate
  assign c$case_scrut_31 = vecArray_15[($unsigned({{(64-1) {1'b0}},i_15}))];
  // index end

  assign c$case_scrut_32 = ws_15[6-1 -: 2];

  assign result_92 = c$case_scrut_32[1:1] ? {out6Level4TagOut5,
                                             $signed(c$case_scrut_31[63:0])} : {out6Level4TagOut5,
                                                                                64'sd0};

  assign i_15 = c$case_scrut_32[0:0];

  assign ws_15 = {c$ws_app_arg_32,{1'b0,1'bx}};

  assign result_93 = result_90 ? t_17 : result_94;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_94_register
    if ( rst) begin
      result_94 <= {8'd7,   64'sd0};
    end else if (en) begin
      result_94 <= result_93;
    end
  end
  // register end

  assign t_17 = {out6Level4TagOut6,
                 (x_13 + y_7)};

  assign x_12 = $signed(result_91[63:0]);

  assign y_6 = $signed(result_92[63:0]);

  assign x_projection_38 = (x_12 + y_6);

  assign x_13 = x_projection_38;

  assign y_7 = $signed(c$case_alt_1[63:0]);

  wire  iterateI_ho1_0_res_22;
  wire  iterateI_ho1_1_res_18;
  wire  iterateI_ho1_2_res_12;
  wire  iterateI_ho1_3_res_9;
  wire  iterateI_ho1_4_res_7;
  wire  iterateI_ho1_5_res_6;
  wire  iterateI_ho1_6_res_5;
  reg  c$bb_res_res_85 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_22 = c$bb_res_res_85;



  reg  c$bb_res_res_86 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= iterateI_ho1_0_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_18 = c$bb_res_res_86;



  reg  c$bb_res_res_87 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_87_delay
    if (en) begin
      c$bb_res_res_87 <= iterateI_ho1_1_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_87;



  reg  c$bb_res_res_88 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_88_delay
    if (en) begin
      c$bb_res_res_88 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_88;



  reg  c$bb_res_res_89 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_89_delay
    if (en) begin
      c$bb_res_res_89 <= iterateI_ho1_3_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_89;



  reg  c$bb_res_res_90 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_90_delay
    if (en) begin
      c$bb_res_res_90 <= iterateI_ho1_4_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_6 = c$bb_res_res_90;



  reg  c$bb_res_res_91 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_91_delay
    if (en) begin
      c$bb_res_res_91 <= iterateI_ho1_5_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_5 = c$bb_res_res_91;



  assign c$app_arg_28 = {p7,
                         iterateI_ho1_0_res_22,
                         iterateI_ho1_1_res_18,
                         iterateI_ho1_2_res_12,   iterateI_ho1_3_res_9,
                         iterateI_ho1_4_res_7,   iterateI_ho1_5_res_6,
                         iterateI_ho1_6_res_5};



  assign result_95 = c$app_arg_28[1-1:0];

  wire  iterateI_ho1_0_res_23;
  wire  iterateI_ho1_1_res_19;
  wire  iterateI_ho1_2_res_13;
  wire  iterateI_ho1_3_res_10;
  wire  iterateI_ho1_4_res_8;
  wire  iterateI_ho1_5_res_7;
  reg  c$bb_res_res_92 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_92_delay
    if (en) begin
      c$bb_res_res_92 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_23 = c$bb_res_res_92;



  reg  c$bb_res_res_93 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_93_delay
    if (en) begin
      c$bb_res_res_93 <= iterateI_ho1_0_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_19 = c$bb_res_res_93;



  reg  c$bb_res_res_94 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_94_delay
    if (en) begin
      c$bb_res_res_94 <= iterateI_ho1_1_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_94;



  reg  c$bb_res_res_95 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_95_delay
    if (en) begin
      c$bb_res_res_95 <= iterateI_ho1_2_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_10 = c$bb_res_res_95;



  reg  c$bb_res_res_96 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_96_delay
    if (en) begin
      c$bb_res_res_96 <= iterateI_ho1_3_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_8 = c$bb_res_res_96;



  reg  c$bb_res_res_97 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_97_delay
    if (en) begin
      c$bb_res_res_97 <= iterateI_ho1_4_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_7 = c$bb_res_res_97;



  assign c$app_arg_29 = {p8,
                         iterateI_ho1_0_res_23,
                         iterateI_ho1_1_res_19,
                         iterateI_ho1_2_res_13,
                         iterateI_ho1_3_res_10,   iterateI_ho1_4_res_8,
                         iterateI_ho1_5_res_7};



  assign result_96 = c$app_arg_29[1-1:0];

  wire [95:0] iterateI_ho1_0_res_24;
  wire [95:0] iterateI_ho1_1_res_20;
  wire [95:0] iterateI_ho1_2_res_14;
  wire [95:0] iterateI_ho1_3_res_11;
  wire [95:0] iterateI_ho1_4_res_9;
  reg [95:0] c$bb_res_res_98 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_98_delay
    if (en) begin
      c$bb_res_res_98 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_24 = c$bb_res_res_98;



  reg [95:0] c$bb_res_res_99 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_99_delay
    if (en) begin
      c$bb_res_res_99 <= iterateI_ho1_0_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_20 = c$bb_res_res_99;



  reg [95:0] c$bb_res_res_100 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_100_delay
    if (en) begin
      c$bb_res_res_100 <= iterateI_ho1_1_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_100;



  reg [95:0] c$bb_res_res_101 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_101_delay
    if (en) begin
      c$bb_res_res_101 <= iterateI_ho1_2_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_11 = c$bb_res_res_101;



  reg [95:0] c$bb_res_res_102 = {8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,   8'd7,
   8'd7,   8'd7};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_102_delay
    if (en) begin
      c$bb_res_res_102 <= iterateI_ho1_3_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_9 = c$bb_res_res_102;



  assign c$app_arg_30 = {curTags,
                         iterateI_ho1_0_res_24,
                         iterateI_ho1_1_res_20,
                         iterateI_ho1_2_res_14,
                         iterateI_ho1_3_res_11,   iterateI_ho1_4_res_9};



  assign result_97 = c$app_arg_30[96-1:0];

  assign sig_0 = slide2 | p4;

  wire  iterateI_ho1_0_res_25;
  wire  iterateI_ho1_1_res_21;
  wire  iterateI_ho1_2_res_15;
  wire  iterateI_ho1_3_res_12;
  wire  iterateI_ho1_4_res_10;
  reg  c$bb_res_res_103 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_103_delay
    if (en) begin
      c$bb_res_res_103 <= sig_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_25 = c$bb_res_res_103;



  reg  c$bb_res_res_104 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_104_delay
    if (en) begin
      c$bb_res_res_104 <= iterateI_ho1_0_res_25;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_21 = c$bb_res_res_104;



  reg  c$bb_res_res_105 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_105_delay
    if (en) begin
      c$bb_res_res_105 <= iterateI_ho1_1_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_15 = c$bb_res_res_105;



  reg  c$bb_res_res_106 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_106_delay
    if (en) begin
      c$bb_res_res_106 <= iterateI_ho1_2_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_12 = c$bb_res_res_106;



  reg  c$bb_res_res_107 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_107_delay
    if (en) begin
      c$bb_res_res_107 <= iterateI_ho1_3_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_10 = c$bb_res_res_107;



  assign c$app_arg_31 = {sig_0,
                         iterateI_ho1_0_res_25,
                         iterateI_ho1_1_res_21,
                         iterateI_ho1_2_res_15,
                         iterateI_ho1_3_res_12,
                         iterateI_ho1_4_res_10};



  assign result_98 = c$app_arg_31[1-1:0];

  wire  iterateI_ho1_0_res_26;
  wire  iterateI_ho1_1_res_22;
  wire  iterateI_ho1_2_res_16;
  wire  iterateI_ho1_3_res_13;
  wire  iterateI_ho1_4_res_11;
  reg  c$bb_res_res_108 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_108_delay
    if (en) begin
      c$bb_res_res_108 <= slide2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_26 = c$bb_res_res_108;



  reg  c$bb_res_res_109 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_109_delay
    if (en) begin
      c$bb_res_res_109 <= iterateI_ho1_0_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_22 = c$bb_res_res_109;



  reg  c$bb_res_res_110 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_110_delay
    if (en) begin
      c$bb_res_res_110 <= iterateI_ho1_1_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_16 = c$bb_res_res_110;



  reg  c$bb_res_res_111 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_111_delay
    if (en) begin
      c$bb_res_res_111 <= iterateI_ho1_2_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_13 = c$bb_res_res_111;



  reg  c$bb_res_res_112 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_112_delay
    if (en) begin
      c$bb_res_res_112 <= iterateI_ho1_3_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_11 = c$bb_res_res_112;



  assign c$app_arg_32 = {slide2,
                         iterateI_ho1_0_res_26,
                         iterateI_ho1_1_res_22,
                         iterateI_ho1_2_res_16,
                         iterateI_ho1_3_res_13,
                         iterateI_ho1_4_res_11};



  assign result_99 = c$app_arg_32[1-1:0];

  wire  iterateI_ho1_0_res_27;
  wire  iterateI_ho1_1_res_23;
  wire  iterateI_ho1_2_res_17;
  wire  iterateI_ho1_3_res_14;
  wire  iterateI_ho1_4_res_12;
  reg  c$bb_res_res_113 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_113_delay
    if (en) begin
      c$bb_res_res_113 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_27 = c$bb_res_res_113;



  reg  c$bb_res_res_114 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_114_delay
    if (en) begin
      c$bb_res_res_114 <= iterateI_ho1_0_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_23 = c$bb_res_res_114;



  reg  c$bb_res_res_115 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_115_delay
    if (en) begin
      c$bb_res_res_115 <= iterateI_ho1_1_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_17 = c$bb_res_res_115;



  reg  c$bb_res_res_116 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_116_delay
    if (en) begin
      c$bb_res_res_116 <= iterateI_ho1_2_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_14 = c$bb_res_res_116;



  reg  c$bb_res_res_117 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_117_delay
    if (en) begin
      c$bb_res_res_117 <= iterateI_ho1_3_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_12 = c$bb_res_res_117;



  assign c$app_arg_33 = {p4,
                         iterateI_ho1_0_res_27,
                         iterateI_ho1_1_res_23,
                         iterateI_ho1_2_res_17,
                         iterateI_ho1_3_res_14,
                         iterateI_ho1_4_res_12};



  assign result_100 = c$app_arg_33[1-1:0];

  assign y_8 = dta_0;

  assign dta_0 = $signed(result_78[63:0]);

  assign x_projection_39 = $signed(win_0[320-1 -: 64]);

  assign x_14 = x_projection_39;

  assign win_0 = window_0[319:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd7,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_101;
    end
  end
  // register end

  assign result_101 = result_98 ? t_18 : window_0;

  assign t_18 = {result_39[7:0],   result_102};

  assign result_102 = result_99 ? c$t_case_alt_1 : c$t_case_alt_2;

  assign c$t_case_alt_sel_alt_t_3 = ({64'sd0,lastBucketUpdated_0});

  assign c$t_case_alt_sel_alt_f_3 = ({64'sd0,win_0});

  assign c$t_case_alt_1 = result_100 ? c$t_case_alt_sel_alt_t_3[383:64] : c$t_case_alt_sel_alt_f_3[383:64];

  assign c$t_case_alt_2 = result_100 ? lastBucketUpdated_0 : win_0;

  // vector replace begin
  genvar i_69;
  generate
  for (i_69=0;i_69<5;i_69=i_69+1) begin : vector_replace_0
    assign lastBucketUpdated_0[(4-i_69)*64+:64] = (64'sd0) == i_69 ? ((x_14 + y_8)) : win_0[(4-i_69)*64+:64];
  end
  endgenerate
  // vector replace end

  assign c$vec_0 = window_0[319:0];

  wire [255:0] vec_0;
  wire signed [63:0] acc_2_0_1;
  wire signed [63:0] acc_0_2;
  wire signed [63:0] acc_0_3;
  wire signed [63:0] acc_0_4;
  wire signed [63:0] acc_0_5;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_1_1;
  assign c$t_app_arg_0 = acc_2_0_1;

  assign vec_0 = (c$vec_0[256-1 : 0]);

  assign acc_0_2 = $signed(vec_0[255:192]);

  assign acc_0_3 = $signed(vec_0[191:128]);

  assign acc_0_4 = $signed(vec_0[127:64]);

  assign acc_0_5 = $signed(vec_0[63:0]);

  wire signed [63:0] x_37;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_38;
  assign acc_1_0_0 = c$case_alt_38;

  assign x_37 = acc_0_2;

  assign y_13 = acc_0_3;

  assign c$case_alt_38 = (x_37 + y_13);



  wire signed [63:0] x_38;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_39;
  assign acc_1_1 = c$case_alt_39;

  assign x_38 = acc_0_4;

  assign y_14 = acc_0_5;

  assign c$case_alt_39 = (x_38 + y_14);



  wire signed [63:0] x_39;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_40;
  assign acc_2_0_1 = c$case_alt_40;

  assign x_39 = acc_1_0_0;

  assign y_15 = acc_1_1;

  assign c$case_alt_40 = (x_39 + y_15);





  assign result_103 = result_96 ? t_19 : result_104;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_104_register
    if ( rst) begin
      result_104 <= {8'd7,   64'sd0};
    end else if (en) begin
      result_104 <= result_103;
    end
  end
  // register end

  assign t_19 = {result_97[23:16],
                 c$t_app_arg_0};

  wire  iterateI_ho1_0_res_28;
  wire  iterateI_ho1_1_res_24;
  wire  iterateI_ho1_2_res_18;
  wire  iterateI_ho1_3_res_15;
  wire  iterateI_ho1_4_res_13;
  wire  iterateI_ho1_5_res_8;
  wire  iterateI_ho1_6_res_6;
  reg  c$bb_res_res_118 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_118_delay
    if (en) begin
      c$bb_res_res_118 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_28 = c$bb_res_res_118;



  reg  c$bb_res_res_119 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_119_delay
    if (en) begin
      c$bb_res_res_119 <= iterateI_ho1_0_res_28;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_24 = c$bb_res_res_119;



  reg  c$bb_res_res_120 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_120_delay
    if (en) begin
      c$bb_res_res_120 <= iterateI_ho1_1_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_18 = c$bb_res_res_120;



  reg  c$bb_res_res_121 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_121_delay
    if (en) begin
      c$bb_res_res_121 <= iterateI_ho1_2_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_15 = c$bb_res_res_121;



  reg  c$bb_res_res_122 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_122_delay
    if (en) begin
      c$bb_res_res_122 <= iterateI_ho1_3_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_13 = c$bb_res_res_122;



  reg  c$bb_res_res_123 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_123_delay
    if (en) begin
      c$bb_res_res_123 <= iterateI_ho1_4_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_8 = c$bb_res_res_123;



  reg  c$bb_res_res_124 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_124_delay
    if (en) begin
      c$bb_res_res_124 <= iterateI_ho1_5_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_6 = c$bb_res_res_124;



  assign c$app_arg_34 = {p8,
                         iterateI_ho1_0_res_28,
                         iterateI_ho1_1_res_24,
                         iterateI_ho1_2_res_18,
                         iterateI_ho1_3_res_15,
                         iterateI_ho1_4_res_13,   iterateI_ho1_5_res_8,
                         iterateI_ho1_6_res_6};



  assign result_105 = c$app_arg_34[1-1:0];

  assign result_106 = {{result_7 & (~ result_10),
                        {{$signed(result_79[63:0]),   result_80},
                         {$signed(result_81[63:0]),   result_82},
                         {$signed(result_83[63:0]),   result_84},
                         {$signed(result_78[63:0]),   result_85},
                         {$signed(result_86[63:0]),   result_87},
                         {$signed(result_88[63:0]),   result_89},
                         {$signed(result_94[63:0]),   result_95},
                         {$signed(result_104[63:0]),   result_105}}},
                       {pacings,   slides}};

  assign tag = result_19[71:64];

  assign slides = result_107[9:8];

  assign input0 = result_107[139:75];

  assign input0HasData = input0[0:0];

  assign input1HasData = input2[0:0];

  assign slide0 = slides[1:1];

  assign pacings = result_107[7:0];

  assign curTags = {t,   t_0,   t_3,   t_4,
                    t_5,   t_6,   t_2,   t_7,   t_8,   t_9,   t_3,
                    t_4};

  assign input2 = result_107[74:10];

  assign out0Level1TagIn0 = result_36[95:88];

  assign out0Level1TagOut0 = result_36[79:72];

  assign out0Level1TagOut3 = result_36[55:48];

  assign slide2 = slides[0:0];

  assign out1Level1TagOut1 = result_36[71:64];

  assign p0 = pacings[7:7];

  assign out2Level2TagIn0 = result_37[95:88];

  assign out2Level2TagIn1 = result_37[87:80];

  assign out2Level2TagOut0 = result_37[79:72];

  assign out2Level2TagOut1 = result_37[71:64];

  assign p2 = pacings[6:6];

  assign out3Level3TagOut0 = result_38[79:72];

  assign out3Level3TagOut2 = result_38[63:56];

  assign out3Level3TagOut3 = result_38[55:48];

  assign out6Level4TagOut3 = result_39[55:48];

  assign out6Level4TagOut5 = result_39[39:32];

  assign p4 = pacings[4:4];

  assign p6 = pacings[2:2];

  assign level6TagOut4 = result_40[47:40];

  assign level6TagOut5 = result_40[39:32];

  assign p8 = pacings[0:0];

  assign p3 = pacings[5:5];

  assign p5 = pacings[3:3];

  assign p7 = pacings[1:1];

  assign out2Level2TagOut2 = result_37[63:56];

  assign sw0Level1TagSw0 = result_36[15:8];

  assign out6Level4TagOut4 = result_39[47:40];

  assign out6Level4TagOut6 = result_39[31:24];

  assign level6TagOut0 = result_40[79:72];

  assign level6TagOut1 = result_40[71:64];

  assign level6TagOut2 = result_40[63:56];

  assign tag_0 = result_78[71:64];

  assign b_10 = result_7 & qPopValid;

  assign x_15 = $signed(result_61[63:0]);

  assign y_9 = $signed(result_19[63:0]);

  assign result_107 = {c$app_arg_37,
                       c$app_arg_36,   c$app_arg_35};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_35_register
    if ( rst) begin
      c$app_arg_35 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0,
                                                                1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_35 <= c$case_alt_2;
    end
  end
  // register end

  assign c$case_alt_2 = qPush ? c$case_alt_3 : c$case_alt_4;

  assign c$case_alt_3 = qPop ? c$case_alt_5 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0}};

  assign c$case_alt_4 = qPop ? c$case_alt_6 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0}};

  always @(*) begin
    case(x_16)
      64'sd0 : c$case_alt_5 = qData;
      default : c$case_alt_5 = c$case_alt_7;
    endcase
  end

  always @(*) begin
    case(x_16)
      64'sd0 : c$case_alt_6 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,
                                                                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                                        1'b0}};
      default : c$case_alt_6 = c$case_alt_7;
    endcase
  end

  // index begin
  wire [139:0] vecArray_16 [0:4-1];
  genvar i_70;
  generate
  for (i_70=0; i_70 < 4; i_70=i_70+1) begin : mk_array_16
    assign vecArray_16[(4-1)-i_70] = buffer[i_70*140+:140];
  end
  endgenerate
  assign c$case_alt_7 = vecArray_16[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_36_register
    if ( rst) begin
      c$app_arg_36 <= 1'b0;
    end else if (en) begin
      c$app_arg_36 <= c$case_alt_8;
    end
  end
  // register end

  assign c$case_alt_8 = qPush ? c$case_alt_9 : c$case_alt_10;

  assign c$case_alt_9 = qPop ? 1'b1 : c$case_alt_11;

  assign c$case_alt_10 = qPop ? c$case_alt_12 : c$case_alt_11;

  assign c$case_alt_11 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_16)
      64'sd0 : c$case_alt_12 = 1'b0;
      default : c$case_alt_12 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_37_register
    if ( rst) begin
      c$app_arg_37 <= 1'b0;
    end else if (en) begin
      c$app_arg_37 <= c$case_alt_13;
    end
  end
  // register end

  assign c$case_alt_13 = qPush ? c$case_alt_14 : 1'b0;

  assign c$case_alt_14 = qPop ? 1'b1 : c$case_alt_15;

  assign c$tte_rhs = (x_16 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_15 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[699:140] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[699:140];

  assign qData = result_2[139:0];

  assign x_16 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_16 + 64'sd1));

  assign c$tte_rhs_0 = (x_16 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_16)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_16 - 64'sd1);

  assign result = {result_106[529:10],   {qPush,
                                          qPop,   result_107[141:141],   qPopValid,
                                          result_106[9:2],   result_106[1:0]}};

  assign qPopValid = result_107[140:140];

  assign qPush = result_2[140:140];

  assign qPop = result_106[530:530];

  assign result_0 = result[533:14];

  assign result_1 = result[13:0];

  assign result_0_0 = result_0[519:455];

  assign result_0_1 = result_0[454:390];

  assign result_0_2 = result_0[389:325];

  assign result_0_3 = result_0[324:260];

  assign result_0_4 = result_0[259:195];

  assign result_0_5 = result_0[194:130];

  assign result_0_6 = result_0[129:65];

  assign result_0_7 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_0_7_0 = $signed(result_0_7[64:1]);

  assign result_0_7_1 = result_0_7[0:0];

  assign result_1_0 = result_1[13:13];

  assign result_1_1 = result_1[12:12];

  assign result_1_2 = result_1[11:11];

  assign result_1_3 = result_1[10:10];

  assign result_1_4 = result_1[9:2];

  assign result_1_5 = result_1[1:0];

  assign result_1_4_0 = result_1_4[7:7];

  assign result_1_4_1 = result_1_4[6:6];

  assign result_1_4_2 = result_1_4[5:5];

  assign result_1_4_3 = result_1_4[4:4];

  assign result_1_4_4 = result_1_4[3:3];

  assign result_1_4_5 = result_1_4[2:2];

  assign result_1_4_6 = result_1_4[1:1];

  assign result_1_4_7 = result_1_4[0:0];

  assign result_1_5_0 = result_1_5[1:1];

  assign result_1_5_1 = result_1_5[0:0];


endmodule


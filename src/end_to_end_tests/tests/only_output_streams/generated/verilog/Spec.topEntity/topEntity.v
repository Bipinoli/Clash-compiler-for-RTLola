/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    );
  // spec.hs:(188,1)-(189,31)
  wire  timer1Over;
  // spec.hs:(188,1)-(189,31)
  wire  timer0Over;
  wire [2:0] result_2;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  wire signed [63:0] result_5;
  wire signed [63:0] x_0;
  reg signed [63:0] result_6 = (64'sd0);
  wire [132:0] result_7;
  // spec.hs:238:1-63
  wire [147:0] c$ws_app_arg;
  // spec.hs:238:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_8;
  // spec.hs:238:1-63
  wire [0:0] i;
  // spec.hs:238:1-63
  wire [5:0] ws;
  wire [2:0] c$app_arg;
  wire  result_9;
  wire [31:0] c$app_arg_0;
  wire [15:0] result_10;
  wire [2:0] c$app_arg_1;
  wire  result_11;
  // spec.hs:245:1-55
  wire [7:0] winTag;
  wire [71:0] result_12;
  // spec.hs:(382,1)-(387,28)
  reg [71:0] result_13 = {8'd4,   64'sd0};
  // spec.hs:(382,1)-(387,28)
  wire  b;
  // spec.hs:(382,1)-(387,28)
  wire [71:0] t;
  wire signed [63:0] x_1;
  wire signed [63:0] y;
  // spec.hs:230:1-65
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:230:1-65
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire signed [63:0] result_14;
  wire [7:0] result_15;
  wire [7:0] c$app_arg_2;
  // spec.hs:230:1-65
  wire [0:0] i_0;
  // spec.hs:230:1-65
  wire [5:0] ws_0;
  // spec.hs:(282,1)-(284,51)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:245:1-55
  wire signed [63:0] winData;
  wire [7:0] result_16;
  wire [7:0] c$app_arg_3;
  // spec.hs:230:1-65
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:230:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_17;
  wire [7:0] result_18;
  wire [7:0] c$app_arg_4;
  // spec.hs:230:1-65
  wire [0:0] i_1;
  // spec.hs:230:1-65
  wire [5:0] ws_1;
  wire [143:0] result_19;
  // spec.hs:(396,1)-(400,36)
  reg [143:0] result_20 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:(396,1)-(400,36)
  wire  b_0;
  // spec.hs:(396,1)-(400,36)
  wire [143:0] t_0;
  wire [1:0] c$app_arg_5;
  wire  result_21;
  // spec.hs:(369,9)-(371,29)
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_22;
  // spec.hs:(369,9)-(371,29)
  wire  b_1;
  // spec.hs:(369,9)-(371,29)
  wire [7:0] f1;
  wire [7:0] result_23;
  // spec.hs:(282,1)-(284,51)
  wire  pOut1;
  wire [1:0] c$app_arg_6;
  wire  result_24;
  // spec.hs:(369,9)-(371,29)
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_25;
  // spec.hs:(369,9)-(371,29)
  wire  b_2;
  // spec.hs:(369,9)-(371,29)
  wire [7:0] f1_0;
  wire [7:0] result_26;
  // spec.hs:(282,1)-(284,51)
  wire  pOut0;
  // spec.hs:(282,1)-(284,51)
  wire [1:0] pacings;
  wire [3:0] result_27;
  reg [1:0] c$app_arg_7 = {1'b0,   1'b0};
  wire [1:0] c$case_alt;
  wire [1:0] c$case_alt_0;
  wire [1:0] c$case_alt_1;
  reg [1:0] c$case_alt_2;
  reg [1:0] c$case_alt_3;
  wire [1:0] c$case_alt_4;
  reg  c$app_arg_8 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_9 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(105,1)-(107,25)
  reg [3:0] buffer = {{1'b0,   1'b0},   {1'b0,   1'b0}};
  // spec.hs:(105,1)-(107,25)
  wire [3:0] c$buffer_case_alt;
  // spec.hs:(105,1)-(107,25)
  wire [3:0] c$buffer_case_alt_0;
  // spec.hs:(105,1)-(107,25)
  wire [3:0] c$buffer_case_alt_1;
  // spec.hs:(105,1)-(107,25)
  wire [1:0] qData;
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] x_2;
  // spec.hs:(105,1)-(107,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(105,1)-(107,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(105,1)-(107,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(105,1)-(107,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(417,1)-(418,80)
  wire  qPopValid;
  // spec.hs:(417,1)-(418,80)
  wire  qPush;
  // spec.hs:(417,1)-(418,80)
  wire  qPop;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [5:0] c$buffer_case_alt_sel_alt_t_1;
  wire [5:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [135:0] result;
  wire [129:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [5:0] result_1;
  wire [1:0] result_1_4_6;

  assign timer1Over = result_6 >= (64'sd1000000);

  assign timer0Over = result_4 >= (64'sd500000);

  assign result_2 = {timer0Over | timer1Over,
                     {timer1Over,   timer0Over}};

  assign result_3 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign result_5 = timer1Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_6;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= (64'sd0);
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign result_7 = {{1'b1,   {{winData,
                                result_11},   {result_8,   result_9}}},
                     {result_24,   result_21}};

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_20[i_2*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_2*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_3*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_3[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:238:1-63
    wire [7:0] t_3;
    // spec.hs:238:1-63
    wire [71:0] x_4;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_3 == result_10[7:0]) ? {1'b1,map_index} : map_in[1:0];

    assign t_3 = x_4[71:64];

    assign x_4 = map_in[73:2];


    assign c$ws_app_arg_0[i_3*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array
    assign vecArray[(2-1)-i_4] = result_20[i_4*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_8 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  assign iterateI_ho1_0_arg0 = pOut1;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  assign c$app_arg = {pOut1,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res};



  assign result_9 = c$app_arg[1-1:0];

  wire [15:0] iterateI_ho1_0_arg0_0;
  wire [15:0] iterateI_ho1_0_res_0;
  assign iterateI_ho1_0_arg0_0 = {t_2,   t_1};

  reg [15:0] c$bb_res_res_1 = {8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_1;



  assign c$app_arg_0 = {{t_2,   t_1},
                        iterateI_ho1_0_res_0};



  assign result_10 = c$app_arg_0[16-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_0;
  assign iterateI_ho1_0_arg0_1 = pOut0;

  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_3;



  assign c$app_arg_1 = {pOut0,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_0};



  assign result_11 = c$app_arg_1[1-1:0];

  assign winTag = result_13[71:64];

  assign result_12 = b ? t : result_13;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_13_register
    if ( rst) begin
      result_13 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_13 <= result_12;
    end
  end
  // register end

  assign b = result_24;

  assign t = {t_2,   (x_1 + y)};

  assign x_1 = c$out0_case_alt;

  assign y = result_14;

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 2; i_6 = i_6 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_20[i_6*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_6*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_6*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_7*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_7[0+:1];
    wire [1:0] c$case_alt_14;
    // spec.hs:238:1-63
    wire [7:0] t_5;
    // spec.hs:238:1-63
    wire [71:0] x_5;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_5 == result_15) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_5 = x_5[71:64];

    assign x_5 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_7*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_8] = result_20[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_14 = c$case_scrut_2[1:1] ? $signed(c$case_scrut_1[63:0]) : (64'sd10);

  assign result_15 = (t_1 > 8'd2) ? c$app_arg_2 : (c$app_arg_2 + 8'd3);

  assign c$app_arg_2 = t_1 - 8'd2;

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  assign c$out0_case_alt = (result_16 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_13[63:0]);

  assign result_16 = (t_2 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd3);

  assign c$app_arg_3 = t_2 - 8'd1;

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 2; i_9 = i_9 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_20[i_9*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_9*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_9*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_10*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_10[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:238:1-63
    wire [7:0] t_6;
    // spec.hs:238:1-63
    wire [71:0] x_6;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_6 == result_18) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_6 = x_6[71:64];

    assign x_6 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_10*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11=i_11+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_11] = result_20[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_17 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd100);

  assign result_18 = (t_1 > 8'd2) ? c$app_arg_4 : (c$app_arg_4 + 8'd3);

  assign c$app_arg_4 = t_1 - 8'd2;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign result_19 = b_0 ? t_0 : result_20;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_20_register
    if ( rst) begin
      result_20 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_20 <= result_19;
    end
  end
  // register end

  assign b_0 = result_21;

  assign t_projection_2 = ({result_20,{t_1,   result_17}});

  assign t_0 = t_projection_2[143:0];

  wire  iterateI_ho1_0_res_2;
  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_4;



  assign c$app_arg_5 = {pOut1,
                        iterateI_ho1_0_res_2};



  assign result_21 = c$app_arg_5[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_22;
    end
  end
  // register end

  assign result_22 = pOut1 ? result_23 : t_1;

  assign b_1 = t_1 == 8'd3;

  assign f1 = t_1 + 8'd1;

  assign result_23 = b_1 ? 8'd1 : f1;

  assign pOut1 = pacings[0:0];

  wire  iterateI_ho1_0_res_3;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_5;



  assign c$app_arg_6 = {pOut0,
                        iterateI_ho1_0_res_3};



  assign result_24 = c$app_arg_6[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_25;
    end
  end
  // register end

  assign result_25 = pOut0 ? result_26 : t_2;

  assign b_2 = t_2 == 8'd3;

  assign f1_0 = t_2 + 8'd1;

  assign result_26 = b_2 ? 8'd1 : f1_0;

  assign pOut0 = pacings[1:1];

  assign pacings = result_27[1:0];

  assign result_27 = {c$app_arg_9,   c$app_arg_8,
                      c$app_arg_7};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_7_register
    if ( rst) begin
      c$app_arg_7 <= {1'b0,   1'b0};
    end else if (en) begin
      c$app_arg_7 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {1'b0,
                                               1'b0};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {1'b0,
                                               1'b0};

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_3 = {1'b0,   1'b0};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [1:0] vecArray_2 [0:2-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 2; i_12=i_12+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_12] = buffer[i_12*2+:2];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_2[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= 1'b0;
    end else if (en) begin
      c$app_arg_8 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_2)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_9_register
    if ( rst) begin
      c$app_arg_9 <= 1'b0;
    end else if (en) begin
      c$app_arg_9 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_2 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{1'b0,   1'b0},   {1'b0,   1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[5:2] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[5:2];

  assign qData = result_2[1:0];

  assign x_2 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_2 + 64'sd1));

  assign c$tte_rhs_0 = (x_2 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_2)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_2 - 64'sd1);

  assign result = {result_7[131:2],   {qPush,
                                       qPop,   result_27[3:3],   qPopValid,
                                       result_7[1:0]}};

  assign qPopValid = result_27[2:2];

  assign qPush = result_2[2:2];

  assign qPop = result_7[132:132];

  assign result_0 = result[135:6];

  assign result_1 = result[5:0];

  assign result_0_0 = result_0[129:65];

  assign result_0_1 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_1_0 = result_1[5:5];

  assign result_1_1 = result_1[4:4];

  assign result_1_2 = result_1[3:3];

  assign result_1_3 = result_1[2:2];

  assign result_1_4_6 = result_1[1:0];

  assign result_1_4_0 = result_1_4_6[1:1];

  assign result_1_4_1 = result_1_4_6[0:0];


endmodule


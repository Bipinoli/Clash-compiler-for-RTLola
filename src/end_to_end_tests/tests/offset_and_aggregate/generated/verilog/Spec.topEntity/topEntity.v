/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    , output wire  result_1_5_2
    , output wire  result_1_5_3
    , output wire  result_1_5_4
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [138:0] result_4;
  // spec.hs:219:1-82
  wire  pIn0;
  // spec.hs:219:1-82
  wire  pIn1;
  // spec.hs:219:1-82
  wire  timer0Over;
  wire [201:0] result_5;
  // spec.hs:84:34-42
  wire  x1;
  // spec.hs:84:34-42
  wire  x0;
  // spec.hs:83:34-42
  wire  x1_0;
  // spec.hs:83:34-42
  wire  x0_0;
  wire [6:0] c$app_arg;
  wire  result_6;
  wire [71:0] result_7;
  // spec.hs:436:1-155
  reg [71:0] result_8 = {8'd6,   64'sd0};
  // spec.hs:436:1-155
  wire  b;
  // spec.hs:436:1-155
  wire [71:0] t;
  wire signed [63:0] ds1;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // spec.hs:454:1-157
  wire signed [63:0] y_0;
  // spec.hs:454:1-157
  wire signed [63:0] x_1;
  // spec.hs:454:1-157
  wire [255:0] win;
  // spec.hs:454:1-157
  reg [263:0] window = {8'd6,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [263:0] result_9;
  // spec.hs:454:1-157
  wire [263:0] t_0;
  wire [255:0] result_10;
  // spec.hs:454:1-157
  wire [255:0] c$t_case_alt;
  // spec.hs:454:1-157
  wire [255:0] c$t_case_alt_0;
  // spec.hs:454:1-157
  wire [255:0] lastBucketUpdated;
  // spec.hs:454:1-157
  wire  b_0;
  // spec.hs:454:1-157
  wire  c$b_case_alt;
  // spec.hs:84:34-42
  wire  x1_1;
  // spec.hs:84:34-42
  wire  x0_1;
  // spec.hs:267:1-63
  wire [224:0] c$ws_app_arg;
  // spec.hs:267:1-63
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire signed [63:0] result_11;
  // spec.hs:267:1-63
  wire [1:0] i;
  // spec.hs:267:1-63
  wire [11:0] ws;
  wire [4:0] c$app_arg_0;
  wire  result_12;
  // spec.hs:301:1-117
  wire  slides;
  wire [9:0] c$app_arg_1;
  wire [1:0] result_13;
  // spec.hs:301:1-117
  wire signed [63:0] c$ds1_case_alt;
  // spec.hs:301:1-117
  wire signed [63:0] dta;
  // spec.hs:301:1-117
  wire [7:0] tag;
  // spec.hs:301:1-117
  wire [71:0] c$ds1_case_scrut;
  wire [239:0] c$app_arg_2;
  wire [47:0] result_14;
  // spec.hs:267:1-63
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:267:1-63
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_15;
  // spec.hs:267:1-63
  wire [1:0] i_0;
  // spec.hs:267:1-63
  wire [11:0] ws_0;
  wire [6:0] c$app_arg_3;
  wire  result_16;
  // spec.hs:267:1-63
  wire [299:0] c$ws_app_arg_3;
  // spec.hs:267:1-63
  wire [11:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire signed [63:0] result_17;
  // spec.hs:267:1-63
  wire [1:0] i_1;
  // spec.hs:267:1-63
  wire [14:0] ws_1;
  wire [6:0] c$app_arg_4;
  wire  result_18;
  // spec.hs:267:1-63
  wire [299:0] c$ws_app_arg_5;
  // spec.hs:267:1-63
  wire [11:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire signed [63:0] result_19;
  // spec.hs:267:1-63
  wire [1:0] i_2;
  // spec.hs:267:1-63
  wire [14:0] ws_2;
  wire [287:0] result_20;
  // spec.hs:83:34-42
  wire  x0_2;
  // spec.hs:83:34-42
  wire  x1_2;
  // spec.hs:418:1-155
  reg [287:0] result_21 = {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
  // spec.hs:418:1-155
  wire [287:0] t_1;
  wire signed [63:0] x_2;
  wire signed [63:0] y_1;
  // spec.hs:259:1-65
  wire [224:0] c$ws_app_arg_7;
  // spec.hs:259:1-65
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire signed [63:0] result_22;
  wire [7:0] result_23;
  wire [7:0] c$app_arg_5;
  // spec.hs:259:1-65
  wire [1:0] i_3;
  // spec.hs:259:1-65
  wire [11:0] ws_3;
  wire [215:0] result_24;
  // spec.hs:84:34-42
  wire  x0_3;
  // spec.hs:84:34-42
  wire  x1_3;
  // spec.hs:427:1-155
  reg [215:0] result_25 = {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
  // spec.hs:427:1-155
  wire [215:0] t_2;
  wire signed [63:0] x_3;
  wire signed [63:0] y_2;
  // spec.hs:267:1-63
  wire [147:0] c$ws_app_arg_9;
  // spec.hs:267:1-63
  wire [3:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [1:0] c$case_scrut_10;
  wire signed [63:0] result_26;
  // spec.hs:267:1-63
  wire [0:0] i_4;
  // spec.hs:267:1-63
  wire [5:0] ws_4;
  wire [143:0] result_27;
  // spec.hs:412:1-135
  reg [143:0] result_28 = {{8'd6,   64'sd0},   {8'd6,   64'sd0}};
  // spec.hs:412:1-135
  wire  b_1;
  // spec.hs:412:1-135
  wire [143:0] t_3;
  // spec.hs:301:1-117
  reg signed [63:0] c$out1_app_arg = (64'sd0);
  // spec.hs:301:1-117
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:280:1-53
  wire signed [63:0] dta_0;
  // spec.hs:280:1-53
  wire [7:0] tagToMatch;
  // spec.hs:280:1-53
  wire [7:0] tag_0;
  wire [71:0] result_29;
  // spec.hs:407:1-127
  reg [71:0] result_30 = {8'd6,   64'sd0};
  // spec.hs:407:1-127
  wire  b_2;
  // spec.hs:280:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  // spec.hs:301:1-117
  wire [129:0] inputs_2;
  wire [5:0] c$app_arg_6;
  wire  result_31;
  wire [287:0] c$app_arg_7;
  wire [47:0] result_32;
  wire [191:0] c$app_arg_8;
  wire [47:0] result_33;
  wire [143:0] c$app_arg_9;
  wire [47:0] result_34;
  wire [95:0] c$app_arg_10;
  wire [47:0] result_35;
  // spec.hs:397:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_36;
  // spec.hs:397:9-81
  wire  b_3;
  // spec.hs:397:9-81
  wire [7:0] f1;
  wire [7:0] result_37;
  // spec.hs:301:1-117
  wire  pOut2;
  // spec.hs:397:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_38;
  // spec.hs:397:9-81
  wire  b_4;
  // spec.hs:397:9-81
  wire [7:0] f1_0;
  wire [7:0] result_39;
  // spec.hs:301:1-117
  wire  c$ds4_case_alt;
  // spec.hs:84:34-42
  wire  x1_4;
  // spec.hs:84:34-42
  wire  x0_4;
  // spec.hs:397:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_40;
  // spec.hs:397:9-81
  wire  b_5;
  // spec.hs:397:9-81
  wire [7:0] f1_1;
  wire [7:0] result_41;
  // spec.hs:301:1-117
  wire  c$ds3_case_alt;
  // spec.hs:83:34-42
  wire  x1_5;
  // spec.hs:83:34-42
  wire  x0_5;
  wire [7:0] c$app_arg_11;
  wire [1:0] result_42;
  // spec.hs:301:1-117
  wire [1:0] pOut1;
  wire [5:0] c$app_arg_12;
  wire [1:0] result_43;
  // spec.hs:301:1-117
  wire [1:0] pOut0;
  wire [1:0] c$app_arg_13;
  wire  result_44;
  // spec.hs:397:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_45;
  // spec.hs:397:9-81
  wire  b_6;
  // spec.hs:397:9-81
  wire [7:0] f1_2;
  wire [7:0] result_46;
  // spec.hs:301:1-117
  wire  pIn1_0;
  wire [1:0] c$app_arg_14;
  wire  result_47;
  // spec.hs:397:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_48;
  // spec.hs:397:9-81
  wire  b_7;
  // spec.hs:397:9-81
  wire [7:0] f1_3;
  wire [7:0] result_49;
  // spec.hs:301:1-117
  wire  pIn0_0;
  // spec.hs:301:1-117
  wire [6:0] pacings;
  wire [139:0] result_50;
  reg [137:0] c$app_arg_15 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                     1'b0},
                                                    {1'b0,   1'b0},   1'b0}};
  wire [137:0] c$case_alt;
  wire [137:0] c$case_alt_0;
  wire [137:0] c$case_alt_1;
  reg [137:0] c$case_alt_2;
  reg [137:0] c$case_alt_3;
  wire [137:0] c$case_alt_4;
  reg  c$app_arg_16 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_17 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:150:1-78
  reg [275:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                      1'b0},
                                                     {1'b0,   1'b0},   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                      1'b0},
                                                     {1'b0,   1'b0},   1'b0}}};
  // spec.hs:150:1-78
  wire [275:0] c$buffer_case_alt;
  // spec.hs:150:1-78
  wire [275:0] c$buffer_case_alt_0;
  // spec.hs:150:1-78
  wire [275:0] c$buffer_case_alt_1;
  // spec.hs:150:1-78
  wire [137:0] qData;
  // spec.hs:150:1-78
  wire signed [63:0] x_4;
  // spec.hs:150:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:150:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:150:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:150:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:150:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:150:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:150:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:150:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:477:1-141
  wire  qPopValid;
  // spec.hs:477:1-141
  wire  qPush;
  // spec.hs:477:1-141
  wire  qPop;
  wire [129:0] inputs;
  wire [255:0] c$vec;
  wire signed [63:0] x_projection_3;
  wire [319:0] c$t_case_alt_sel_alt_t_0;
  wire [319:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [11:0] c$vec2_1;
  wire [11:0] c$vec2_2;
  wire [359:0] t_projection_3;
  wire [8:0] c$vec2_3;
  wire [287:0] t_projection_5;
  wire [3:0] c$vec2_4;
  wire [215:0] t_projection_7;
  wire signed [63:0] c$tte_rhs;
  wire [413:0] c$buffer_case_alt_sel_alt_t_1;
  wire [413:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [204:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [9:0] result_1;
  wire [4:0] result_1_5_11;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {inputs[65:65] | (inputs[0:0] | timer0Over),
                     {inputs,   timer0Over,   {pIn0,   pIn1,
                                               {pIn0,   pIn1},   {pIn0,   pIn1},
                                               timer0Over}}};

  assign pIn0 = inputs[65:65];

  assign pIn1 = inputs[0:0];

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{1'b1,   {{result_17,
                                result_18},   {result_15,   result_16},
                               {$signed(result_8[63:0]),   result_6}}},
                     {slides,   {result_47,   result_44,
                                 x0_0 & x1_0,   x0 & x1,   result_31}}};

  assign x1 = result_42[0:0];

  assign x0 = result_42[1:1];

  assign x1_0 = result_43[0:0];

  assign x0_0 = result_43[1:1];

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  assign iterateI_ho1_0_arg0 = pOut2;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  assign c$app_arg = {pOut2,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res};



  assign result_6 = c$app_arg[1-1:0];

  assign result_7 = b ? t : result_8;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_8 <= result_7;
    end
  end
  // register end

  assign b = result_31;

  assign t = {result_14[15:8],   (x_0 + y)};

  assign c$vec = window[255:0];

  wire [191:0] vec;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_3;
  assign ds1 = acc_2_0;

  assign vec = (c$vec[192-1 : 0]);

  assign acc_1 = $signed(vec[191:128]);

  assign acc_2 = $signed(vec[127:64]);

  assign acc_3 = $signed(vec[63:0]);

  wire signed [63:0] x_6;
  wire signed [63:0] y_3;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_6 = acc_1;

  assign y_3 = acc_2;

  assign c$case_alt_13 = (x_6 + y_3);



  wire signed [63:0] x_7;
  wire signed [63:0] y_4;
  wire signed [63:0] c$case_alt_14;
  assign acc_2_0 = c$case_alt_14;

  assign x_7 = acc_1_0;

  assign y_4 = acc_3;

  assign c$case_alt_14 = (x_7 + y_4);





  assign x_0 = c$ds1_case_alt;

  assign y = ds1;

  assign y_0 = result_11;

  assign x_projection_3 = $signed(win[256-1 -: 64]);

  assign x_1 = x_projection_3;

  assign win = window[255:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd6,   {64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_9;
    end
  end
  // register end

  assign result_9 = b_0 ? t_0 : window;

  assign t_0 = {result_33[7:0],   result_10};

  assign result_10 = result_12 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = c$b_case_alt ? c$t_case_alt_sel_alt_t_0[319:64] : c$t_case_alt_sel_alt_f_0[319:64];

  assign c$t_case_alt_0 = c$b_case_alt ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_5;
  generate
  for (i_5=0;i_5<4;i_5=i_5+1) begin : vector_replace
    assign lastBucketUpdated[(3-i_5)*64+:64] = (64'sd0) == i_5 ? ((x_1 + y_0)) : win[(3-i_5)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_0 = c$b_case_alt | result_12;

  assign c$b_case_alt = x0_1 & x1_1;

  assign x1_1 = result_13[0:0];

  assign x0_1 = result_13[1:1];

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 3; i_6 = i_6 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_25[i_6*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_6*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_6*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 3; i_7 = i_7 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_7*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_7[0+:2];
    wire [2:0] c$case_alt_15;
    // spec.hs:267:1-63
    wire [7:0] t_10;
    // spec.hs:267:1-63
    wire [71:0] x_8;
    assign map_out = c$case_alt_15;

    assign c$case_alt_15 = (t_10 == result_33[23:16]) ? {1'b1,map_index} : map_in[2:0];

    assign t_10 = x_8[71:64];

    assign x_8 = map_in[74:3];


    assign c$ws_app_arg_0[i_7*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 3; i_8=i_8+1) begin : mk_array
    assign vecArray[(3-1)-i_8] = result_25[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_11 = c$case_scrut_0[2:2] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= slides;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  assign c$app_arg_0 = {slides,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_12 = c$app_arg_0[1-1:0];

  assign slides = result_50[7:7];

  wire [1:0] iterateI_ho1_0_res_1;
  wire [1:0] iterateI_ho1_1_res_1;
  wire [1:0] iterateI_ho1_2_res_1;
  wire [1:0] iterateI_ho1_3_res_1;
  reg [1:0] c$bb_res_res_9 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_9;



  reg [1:0] c$bb_res_res_10 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_10;



  reg [1:0] c$bb_res_res_11 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_11;



  reg [1:0] c$bb_res_res_12 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_12;



  assign c$app_arg_1 = {pOut1,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1};



  assign result_13 = c$app_arg_1[2-1:0];

  assign c$ds1_case_alt = (tag == 8'd6) ? (64'sd1) : dta;

  assign dta = $signed(c$ds1_case_scrut[63:0]);

  assign tag = c$ds1_case_scrut[71:64];

  assign c$ds1_case_scrut = result_21[72-1:0];

  wire [47:0] iterateI_ho1_0_arg0_0;
  wire [47:0] iterateI_ho1_0_res_2;
  wire [47:0] iterateI_ho1_1_res_2;
  wire [47:0] iterateI_ho1_2_res_2;
  wire [47:0] iterateI_ho1_3_res_2;
  assign iterateI_ho1_0_arg0_0 = {t_8,   t_7,
                                  t_6,   t_5,   t_4,   t_5};

  reg [47:0] c$bb_res_res_13 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_13;



  reg [47:0] c$bb_res_res_14 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_14;



  reg [47:0] c$bb_res_res_15 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_15;



  reg [47:0] c$bb_res_res_16 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_16;



  assign c$app_arg_2 = {{t_8,   t_7,   t_6,
                         t_5,   t_4,   t_5},   iterateI_ho1_0_res_2,
                        iterateI_ho1_1_res_2,   iterateI_ho1_2_res_2,
                        iterateI_ho1_3_res_2};



  assign result_14 = c$app_arg_2[48-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 3; i_10 = i_10 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_25[i_10*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_10*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_10*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_11;
  generate
  for (i_11=0; i_11 < 3; i_11 = i_11 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_11*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_11[0+:2];
    wire [2:0] c$case_alt_16;
    // spec.hs:267:1-63
    wire [7:0] t_11;
    // spec.hs:267:1-63
    wire [71:0] x_9;
    assign map_out_0 = c$case_alt_16;

    assign c$case_alt_16 = (t_11 == result_32[23:16]) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_11 = x_9[71:64];

    assign x_9 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_11*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 3; i_12=i_12+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_12] = result_25[i_12*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_15 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= c$ds4_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_22;



  assign c$app_arg_3 = {c$ds4_case_alt,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0};



  assign result_16 = c$app_arg_3[1-1:0];

  assign c$vec2_1 = (ws_1[12-1 : 0]);

  // zipWith start
  genvar i_13;
  generate
  for (i_13 = 0; i_13 < 4; i_13 = i_13 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_21[i_13*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_13*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_13*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_14;
  generate
  for (i_14=0; i_14 < 4; i_14 = i_14 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_14*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd3 - i_14[0+:2];
    wire [2:0] c$case_alt_17;
    // spec.hs:267:1-63
    wire [7:0] t_12;
    // spec.hs:267:1-63
    wire [71:0] x_10;
    assign map_out_1 = c$case_alt_17;

    assign c$case_alt_17 = (t_12 == result_32[31:24]) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_12 = x_10[71:64];

    assign x_10 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_14*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:4-1];
  genvar i_15;
  generate
  for (i_15=0; i_15 < 4; i_15=i_15+1) begin : mk_array_1
    assign vecArray_1[(4-1)-i_15] = result_21[i_15*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[15-1 -: 3];

  assign result_17 = c$case_scrut_4[2:2] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= c$ds3_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_28;



  assign c$app_arg_4 = {c$ds3_case_alt,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_1};



  assign result_18 = c$app_arg_4[1-1:0];

  assign c$vec2_2 = (ws_2[12-1 : 0]);

  // zipWith start
  genvar i_16;
  generate
  for (i_16 = 0; i_16 < 4; i_16 = i_16 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_21[i_16*72+:72];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_16*3+:3];
    wire [74:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_16*75+:75] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_17;
  generate
  for (i_17=0; i_17 < 4; i_17 = i_17 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [74:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_17*75+:75];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd3 - i_17[0+:2];
    wire [2:0] c$case_alt_18;
    // spec.hs:267:1-63
    wire [7:0] t_13;
    // spec.hs:267:1-63
    wire [71:0] x_11;
    assign map_out_2 = c$case_alt_18;

    assign c$case_alt_18 = (t_13 == result_34[31:24]) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_13 = x_11[71:64];

    assign x_11 = map_in_2[74:3];


    assign c$ws_app_arg_6[i_17*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:4-1];
  genvar i_18;
  generate
  for (i_18=0; i_18 < 4; i_18=i_18+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_18] = result_21[i_18*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[15-1 -: 3];

  assign result_19 = c$case_scrut_6[2:2] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  assign result_20 = (x0_2 & x1_2) ? t_1 : result_21;

  assign x0_2 = result_43[1:1];

  assign x1_2 = result_43[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_projection_3 = ({result_21,{result_35[31:24],   (x_2 + y_1)}});

  assign t_1 = t_projection_3[287:0];

  assign x_2 = c$out0_case_alt;

  assign y_1 = result_22;

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_19;
  generate
  for (i_19 = 0; i_19 < 3; i_19 = i_19 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_25[i_19*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_19*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_19*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_20;
  generate
  for (i_20=0; i_20 < 3; i_20 = i_20 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_20*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_20[0+:2];
    wire [2:0] c$case_alt_19;
    // spec.hs:267:1-63
    wire [7:0] t_14;
    // spec.hs:267:1-63
    wire [71:0] x_12;
    assign map_out_3 = c$case_alt_19;

    assign c$case_alt_19 = (t_14 == result_23) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_14 = x_12[71:64];

    assign x_12 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_20*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_21;
  generate
  for (i_21=0; i_21 < 3; i_21=i_21+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_21] = result_25[i_21*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_22 = c$case_scrut_8[2:2] ? $signed(c$case_scrut_7[63:0]) : (64'sd2);

  assign result_23 = (result_35[23:16] > 8'd3) ? c$app_arg_5 : (c$app_arg_5 + 8'd5);

  assign c$app_arg_5 = result_35[23:16] - 8'd3;

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  assign result_24 = (x0_3 & x1_3) ? t_2 : result_25;

  assign x0_3 = result_42[1:1];

  assign x1_3 = result_42[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {{8'd6,   64'sd0},   {8'd6,   64'sd0},   {8'd6,   64'sd0}};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign t_projection_5 = ({result_25,{result_34[23:16],   (x_3 + y_2)}});

  assign t_2 = t_projection_5[215:0];

  assign x_3 = result_19;

  assign y_2 = result_26;

  assign c$vec2_4 = (ws_4[4-1 : 0]);

  // zipWith start
  genvar i_22;
  generate
  for (i_22 = 0; i_22 < 2; i_22 = i_22 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_28[i_22*72+:72];
    wire [1:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_22*2+:2];
    wire [73:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_22*74+:74] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_23;
  generate
  for (i_23=0; i_23 < 2; i_23 = i_23 + 1) begin : imap_4
    wire [1-1:0] map_index_4;
    wire [73:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_23*74+:74];
    wire [1:0] map_out_4;

    assign map_index_4 = 1'd1 - i_23[0+:1];
    wire [1:0] c$case_alt_20;
    // spec.hs:267:1-63
    wire [7:0] t_15;
    // spec.hs:267:1-63
    wire [71:0] x_13;
    assign map_out_4 = c$case_alt_20;

    assign c$case_alt_20 = (t_15 == result_34[39:32]) ? {1'b1,map_index_4} : map_in_4[1:0];

    assign t_15 = x_13[71:64];

    assign x_13 = map_in_4[73:2];


    assign c$ws_app_arg_10[i_23*2+:2] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:2-1];
  genvar i_24;
  generate
  for (i_24=0; i_24 < 2; i_24=i_24+1) begin : mk_array_4
    assign vecArray_4[(2-1)-i_24] = result_28[i_24*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-1) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[6-1 -: 2];

  assign result_26 = c$case_scrut_10[1:1] ? $signed(c$case_scrut_9[63:0]) : (64'sd0);

  assign i_4 = c$case_scrut_10[0:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,1'bx}};

  assign result_27 = b_1 ? t_3 : result_28;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_28_register
    if ( rst) begin
      result_28 <= {{8'd6,   64'sd0},   {8'd6,   64'sd0}};
    end else if (en) begin
      result_28 <= result_27;
    end
  end
  // register end

  assign b_1 = result_44;

  assign t_projection_7 = ({result_28,{t_7,   c$out1_app_arg}});

  assign t_3 = t_projection_7[143:0];

  // delay begin
  always @(posedge clk) begin : c$out1_app_arg_delay
    if (en) begin
      c$out1_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  assign c$out0_case_alt = (tag_0 == tagToMatch) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_30[63:0]);

  assign tagToMatch = result_35[47:40];

  assign tag_0 = result_30[71:64];

  assign result_29 = b_2 ? {t_8,
                            c$ds_app_arg} : result_30;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_30_register
    if ( rst) begin
      result_30 <= {8'd6,   64'sd0};
    end else if (en) begin
      result_30 <= result_29;
    end
  end
  // register end

  assign b_2 = result_47;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_2[129:66]);
    end
  end
  // delay end

  assign inputs_2 = result_50[137:8];

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_2;
  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_33;



  assign c$app_arg_6 = {pOut2,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_2};



  assign result_31 = c$app_arg_6[1-1:0];

  wire [47:0] iterateI_ho1_0_arg0_1;
  wire [47:0] iterateI_ho1_0_res_6;
  wire [47:0] iterateI_ho1_1_res_6;
  wire [47:0] iterateI_ho1_2_res_6;
  wire [47:0] iterateI_ho1_3_res_6;
  wire [47:0] iterateI_ho1_4_res_3;
  assign iterateI_ho1_0_arg0_1 = {t_8,   t_7,
                                  t_6,   t_5,   t_4,   t_5};

  reg [47:0] c$bb_res_res_34 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_34;



  reg [47:0] c$bb_res_res_35 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_35;



  reg [47:0] c$bb_res_res_36 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_36;



  reg [47:0] c$bb_res_res_37 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_37;



  reg [47:0] c$bb_res_res_38 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_38;



  assign c$app_arg_7 = {{t_8,   t_7,   t_6,
                         t_5,   t_4,   t_5},   iterateI_ho1_0_res_6,
                        iterateI_ho1_1_res_6,   iterateI_ho1_2_res_6,
                        iterateI_ho1_3_res_6,   iterateI_ho1_4_res_3};



  assign result_32 = c$app_arg_7[48-1:0];

  wire [47:0] iterateI_ho1_0_arg0_2;
  wire [47:0] iterateI_ho1_0_res_7;
  wire [47:0] iterateI_ho1_1_res_7;
  wire [47:0] iterateI_ho1_2_res_7;
  assign iterateI_ho1_0_arg0_2 = {t_8,   t_7,
                                  t_6,   t_5,   t_4,   t_5};

  reg [47:0] c$bb_res_res_39 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_39;



  reg [47:0] c$bb_res_res_40 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_40;



  reg [47:0] c$bb_res_res_41 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_41;



  assign c$app_arg_8 = {{t_8,   t_7,   t_6,
                         t_5,   t_4,   t_5},   iterateI_ho1_0_res_7,
                        iterateI_ho1_1_res_7,   iterateI_ho1_2_res_7};



  assign result_33 = c$app_arg_8[48-1:0];

  wire [47:0] iterateI_ho1_0_arg0_3;
  wire [47:0] iterateI_ho1_0_res_8;
  wire [47:0] iterateI_ho1_1_res_8;
  assign iterateI_ho1_0_arg0_3 = {t_8,   t_7,
                                  t_6,   t_5,   t_4,   t_5};

  reg [47:0] c$bb_res_res_42 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_42;



  reg [47:0] c$bb_res_res_43 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_43;



  assign c$app_arg_9 = {{t_8,   t_7,   t_6,
                         t_5,   t_4,   t_5},   iterateI_ho1_0_res_8,
                        iterateI_ho1_1_res_8};



  assign result_34 = c$app_arg_9[48-1:0];

  wire [47:0] iterateI_ho1_0_arg0_4;
  wire [47:0] iterateI_ho1_0_res_9;
  assign iterateI_ho1_0_arg0_4 = {t_8,   t_7,
                                  t_6,   t_5,   t_4,   t_5};

  reg [47:0] c$bb_res_res_44 = {8'd6,   8'd6,   8'd6,   8'd6,   8'd6,   8'd6};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_44;



  assign c$app_arg_10 = {{t_8,   t_7,   t_6,
                          t_5,   t_4,   t_5},   iterateI_ho1_0_res_9};



  assign result_35 = c$app_arg_10[48-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_36;
    end
  end
  // register end

  assign result_36 = pOut2 ? result_37 : t_4;

  assign b_3 = t_4 == 8'd5;

  assign f1 = t_4 + 8'd1;

  assign result_37 = b_3 ? 8'd1 : f1;

  assign pOut2 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_38;
    end
  end
  // register end

  assign result_38 = c$ds4_case_alt ? result_39 : t_5;

  assign b_4 = t_5 == 8'd5;

  assign f1_0 = t_5 + 8'd1;

  assign result_39 = b_4 ? 8'd1 : f1_0;

  assign c$ds4_case_alt = x0_4 & x1_4;

  assign x1_4 = pOut1[0:0];

  assign x0_4 = pOut1[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_40;
    end
  end
  // register end

  assign result_40 = c$ds3_case_alt ? result_41 : t_6;

  assign b_5 = t_6 == 8'd5;

  assign f1_1 = t_6 + 8'd1;

  assign result_41 = b_5 ? 8'd1 : f1_1;

  assign c$ds3_case_alt = x0_5 & x1_5;

  assign x1_5 = pOut0[0:0];

  assign x0_5 = pOut0[1:1];

  wire [1:0] iterateI_ho1_0_res_10;
  wire [1:0] iterateI_ho1_1_res_9;
  wire [1:0] iterateI_ho1_2_res_8;
  reg [1:0] c$bb_res_res_45 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_45;



  reg [1:0] c$bb_res_res_46 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_46;



  reg [1:0] c$bb_res_res_47 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_47;



  assign c$app_arg_11 = {pOut1,
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_8};



  assign result_42 = c$app_arg_11[2-1:0];

  assign pOut1 = pacings[2:1];

  wire [1:0] iterateI_ho1_0_res_11;
  wire [1:0] iterateI_ho1_1_res_10;
  reg [1:0] c$bb_res_res_48 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_48;



  reg [1:0] c$bb_res_res_49 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_49;



  assign c$app_arg_12 = {pOut0,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_10};



  assign result_43 = c$app_arg_12[2-1:0];

  assign pOut0 = pacings[4:3];

  wire  iterateI_ho1_0_res_12;
  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_50;



  assign c$app_arg_13 = {pIn1_0,
                         iterateI_ho1_0_res_12};



  assign result_44 = c$app_arg_13[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_45;
    end
  end
  // register end

  assign result_45 = pIn1_0 ? result_46 : t_7;

  assign b_6 = t_7 == 8'd5;

  assign f1_2 = t_7 + 8'd1;

  assign result_46 = b_6 ? 8'd1 : f1_2;

  assign pIn1_0 = pacings[5:5];

  wire  iterateI_ho1_0_res_13;
  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_51;



  assign c$app_arg_14 = {pIn0_0,
                         iterateI_ho1_0_res_13};



  assign result_47 = c$app_arg_14[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_48;
    end
  end
  // register end

  assign result_48 = pIn0_0 ? result_49 : t_8;

  assign b_7 = t_8 == 8'd5;

  assign f1_3 = t_8 + 8'd1;

  assign result_49 = b_7 ? 8'd1 : f1_3;

  assign pIn0_0 = pacings[6:6];

  assign pacings = result_50[6:0];

  assign result_50 = {c$app_arg_17,
                      c$app_arg_16,   c$app_arg_15};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_15_register
    if ( rst) begin
      c$app_arg_15 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                       1'b0},
                                                      {1'b0,   1'b0},   1'b0}};
    end else if (en) begin
      c$app_arg_15 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                                        1'b0,   {1'b0,   1'b0},
                                                                                        {1'b0,   1'b0},   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,
                                                                                        1'b0,   {1'b0,   1'b0},
                                                                                        {1'b0,   1'b0},   1'b0}};

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,
                                                              {1'b0,   1'b0},   {1'b0,   1'b0},   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [137:0] vecArray_5 [0:2-1];
  genvar i_25;
  generate
  for (i_25=0; i_25 < 2; i_25=i_25+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_25] = buffer[i_25*138+:138];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_5[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_16_register
    if ( rst) begin
      c$app_arg_16 <= 1'b0;
    end else if (en) begin
      c$app_arg_16 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_17_register
    if ( rst) begin
      c$app_arg_17 <= 1'b0;
    end else if (en) begin
      c$app_arg_17 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_4 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                        1'b0},
                                                       {1'b0,   1'b0},   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   1'b0,   {1'b0,   1'b0,   {1'b0,
                                                                        1'b0},
                                                       {1'b0,   1'b0},   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[413:138] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[413:138];

  assign qData = result_4[137:0];

  assign x_4 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_4 + 64'sd1));

  assign c$tte_rhs_0 = (x_4 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_4)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_4 - 64'sd1);

  assign result = {result_5[200:6],   {qPush,
                                       qPop,   result_50[139:139],   qPopValid,
                                       result_5[5:5],   result_5[4:0]}};

  assign qPopValid = result_50[138:138];

  assign qPush = result_4[138:138];

  assign qPop = result_5[201:201];

  assign result_0 = result[204:10];

  assign result_1 = result[9:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[9:9];

  assign result_1_1 = result_1[8:8];

  assign result_1_2 = result_1[7:7];

  assign result_1_3 = result_1[6:6];

  assign result_1_4 = result_1[5:5];

  assign result_1_5_11 = result_1[4:0];

  assign result_1_5_0 = result_1_5_11[4:4];

  assign result_1_5_1 = result_1_5_11[3:3];

  assign result_1_5_2 = result_1_5_11[2:2];

  assign result_1_5_3 = result_1_5_11[1:1];

  assign result_1_5_4 = result_1_5_11[0:0];


endmodule


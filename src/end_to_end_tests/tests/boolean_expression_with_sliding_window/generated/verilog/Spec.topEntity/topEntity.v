/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire  result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire  result_0_5_0
    , output wire  result_0_5_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    , output wire  result_1_5_2
    , output wire  result_1_5_3
    , output wire  result_1_5_4
    , output wire  result_1_5_5
    , output wire  result_1_5_6
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [73:0] result_6;
  // spec.hs:(277,1)-(279,31)
  wire  hasInput0;
  // spec.hs:(277,1)-(279,31)
  wire  timer0Over;
  // spec.hs:(277,1)-(279,31)
  wire  timer1Over;
  wire [146:0] result_7;
  wire [7:0] c$app_arg;
  wire  result_8;
  wire [8:0] result_9;
  // spec.hs:(708,1)-(712,29)
  reg [8:0] result_10 = {8'd23,   1'b0};
  // spec.hs:(708,1)-(712,29)
  wire  b;
  // spec.hs:(708,1)-(712,29)
  wire [8:0] t;
  wire [7:0] c$app_arg_0;
  wire  result_11;
  // spec.hs:(693,1)-(697,28)
  wire signed [63:0] c$t_app_arg;
  wire [71:0] result_12;
  // spec.hs:(693,1)-(697,28)
  reg [71:0] result_13 = {8'd23,   64'sd0};
  // spec.hs:(693,1)-(697,28)
  wire  b_0;
  // spec.hs:(693,1)-(697,28)
  wire [71:0] t_0;
  // spec.hs:(729,1)-(734,37)
  wire signed [63:0] x_1;
  // spec.hs:(729,1)-(734,37)
  wire [1343:0] win;
  // spec.hs:(729,1)-(734,37)
  reg [1351:0] window = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [1351:0] result_14;
  // spec.hs:(729,1)-(734,37)
  wire [1351:0] t_1;
  wire [1343:0] result_15;
  // spec.hs:(729,1)-(734,37)
  wire [1343:0] c$t_case_alt;
  // spec.hs:(729,1)-(734,37)
  wire [1343:0] c$t_case_alt_0;
  // spec.hs:(729,1)-(734,37)
  wire [1343:0] lastBucketUpdated;
  // spec.hs:(729,1)-(734,37)
  wire  b_1;
  // spec.hs:341:1-63
  wire [35:0] c$ws_app_arg;
  // spec.hs:341:1-63
  wire [8:0] c$ws_app_arg_0;
  wire [8:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire  result_16;
  // spec.hs:341:1-63
  wire [1:0] i;
  // spec.hs:341:1-63
  wire [11:0] ws;
  wire [5:0] c$app_arg_1;
  wire  result_17;
  // spec.hs:(385,1)-(387,59)
  wire  slides;
  wire [5:0] c$app_arg_2;
  wire  result_18;
  // spec.hs:341:1-63
  wire [35:0] c$ws_app_arg_1;
  // spec.hs:341:1-63
  wire [8:0] c$ws_app_arg_2;
  wire [8:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire  result_19;
  // spec.hs:341:1-63
  wire [1:0] i_0;
  // spec.hs:341:1-63
  wire [11:0] ws_0;
  wire [7:0] c$app_arg_3;
  wire  result_20;
  // spec.hs:341:1-63
  wire [47:0] c$ws_app_arg_3;
  // spec.hs:341:1-63
  wire [11:0] c$ws_app_arg_4;
  wire [8:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire  result_21;
  // spec.hs:341:1-63
  wire [1:0] i_1;
  // spec.hs:341:1-63
  wire [14:0] ws_1;
  wire [7:0] c$app_arg_4;
  wire  result_22;
  // spec.hs:341:1-63
  wire [47:0] c$ws_app_arg_5;
  // spec.hs:341:1-63
  wire [11:0] c$ws_app_arg_6;
  wire [8:0] c$case_scrut_5;
  wire [2:0] c$case_scrut_6;
  wire  result_23;
  // spec.hs:341:1-63
  wire [1:0] i_2;
  // spec.hs:341:1-63
  wire [14:0] ws_2;
  wire [7:0] c$app_arg_5;
  wire  result_24;
  // spec.hs:341:1-63
  wire [379:0] c$ws_app_arg_7;
  // spec.hs:341:1-63
  wire [19:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [3:0] c$case_scrut_8;
  wire signed [63:0] result_25;
  // spec.hs:341:1-63
  wire [2:0] i_3;
  // spec.hs:341:1-63
  wire [23:0] ws_3;
  wire [7:0] c$app_arg_6;
  wire  result_26;
  wire [26:0] result_27;
  // spec.hs:(676,1)-(683,37)
  reg [26:0] result_28 = {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
  // spec.hs:(676,1)-(683,37)
  wire  b_2;
  // spec.hs:(676,1)-(683,37)
  wire [26:0] t_2;
  // spec.hs:341:1-63
  wire [47:0] c$ws_app_arg_9;
  // spec.hs:341:1-63
  wire [11:0] c$ws_app_arg_10;
  wire [8:0] c$case_scrut_9;
  wire [2:0] c$case_scrut_10;
  wire  result_29;
  // spec.hs:341:1-63
  wire [1:0] i_4;
  // spec.hs:341:1-63
  wire [14:0] ws_4;
  // spec.hs:333:1-65
  wire [47:0] c$ws_app_arg_11;
  // spec.hs:333:1-65
  wire [11:0] c$ws_app_arg_12;
  wire [8:0] c$case_scrut_11;
  wire [2:0] c$case_scrut_12;
  wire  result_30;
  wire [7:0] result_31;
  wire [7:0] c$app_arg_7;
  // spec.hs:333:1-65
  wire [1:0] i_5;
  // spec.hs:333:1-65
  wire [14:0] ws_5;
  // spec.hs:333:1-65
  wire [47:0] c$ws_app_arg_13;
  // spec.hs:333:1-65
  wire [11:0] c$ws_app_arg_14;
  wire [8:0] c$case_scrut_13;
  wire [2:0] c$case_scrut_14;
  wire  result_32;
  wire [7:0] result_33;
  wire [7:0] c$app_arg_8;
  // spec.hs:333:1-65
  wire [1:0] i_6;
  // spec.hs:333:1-65
  wire [14:0] ws_6;
  // spec.hs:341:1-63
  wire [47:0] c$ws_app_arg_15;
  // spec.hs:341:1-63
  wire [11:0] c$ws_app_arg_16;
  wire [8:0] c$case_scrut_15;
  wire [2:0] c$case_scrut_16;
  wire  result_34;
  // spec.hs:341:1-63
  wire [1:0] i_7;
  // spec.hs:341:1-63
  wire [14:0] ws_7;
  wire [35:0] result_35;
  // spec.hs:(661,1)-(666,37)
  reg [35:0] result_36 = {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
  // spec.hs:(661,1)-(666,37)
  wire  b_3;
  // spec.hs:(661,1)-(666,37)
  wire [35:0] t_3;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  wire [35:0] result_37;
  // spec.hs:(646,1)-(651,37)
  reg [35:0] result_38 = {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
  // spec.hs:(646,1)-(651,37)
  wire  b_4;
  // spec.hs:(646,1)-(651,37)
  wire [35:0] t_4;
  wire signed [63:0] x_3;
  wire signed [63:0] y_0;
  // spec.hs:333:1-65
  wire [379:0] c$ws_app_arg_17;
  // spec.hs:333:1-65
  wire [19:0] c$ws_app_arg_18;
  wire [71:0] c$case_scrut_17;
  wire [3:0] c$case_scrut_18;
  wire signed [63:0] result_39;
  wire [7:0] result_40;
  wire [7:0] c$app_arg_9;
  // spec.hs:333:1-65
  wire [2:0] i_8;
  // spec.hs:333:1-65
  wire [23:0] ws_8;
  // spec.hs:341:1-63
  wire [379:0] c$ws_app_arg_19;
  // spec.hs:341:1-63
  wire [19:0] c$ws_app_arg_20;
  wire [71:0] c$case_scrut_19;
  wire [3:0] c$case_scrut_20;
  wire signed [63:0] result_41;
  // spec.hs:341:1-63
  wire [2:0] i_9;
  // spec.hs:341:1-63
  wire [23:0] ws_9;
  wire [359:0] result_42;
  // spec.hs:(632,1)-(636,36)
  reg [359:0] result_43 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                 64'sd0},
 {8'd23,   64'sd0}};
  // spec.hs:(632,1)-(636,36)
  wire  b_5;
  // spec.hs:(632,1)-(636,36)
  wire [359:0] t_5;
  // spec.hs:(385,1)-(387,59)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:(385,1)-(387,59)
  wire signed [63:0] dta;
  // spec.hs:(385,1)-(387,59)
  wire [7:0] tag;
  // spec.hs:(385,1)-(387,59)
  wire [71:0] c$out0_case_scrut;
  wire [127:0] c$app_arg_10;
  wire [63:0] result_44;
  wire [359:0] result_45;
  // spec.hs:(619,1)-(623,36)
  reg [359:0] result_46 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                 64'sd0},
 {8'd23,   64'sd0}};
  // spec.hs:(619,1)-(623,36)
  wire  b_6;
  // spec.hs:(619,1)-(623,36)
  wire [359:0] t_6;
  // spec.hs:(385,1)-(387,59)
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  wire [6:0] c$app_arg_11;
  wire  result_47;
  wire [447:0] c$app_arg_12;
  wire [63:0] result_48;
  wire [383:0] c$app_arg_13;
  wire [63:0] result_49;
  wire [319:0] c$app_arg_14;
  wire [63:0] result_50;
  wire [255:0] c$app_arg_15;
  wire [63:0] result_51;
  wire [191:0] c$app_arg_16;
  wire [63:0] result_52;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_53;
  // spec.hs:(607,9)-(609,29)
  wire  b_7;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1;
  wire [7:0] result_54;
  // spec.hs:(385,1)-(387,59)
  wire  pOut5;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_55;
  // spec.hs:(607,9)-(609,29)
  wire  b_8;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_0;
  wire [7:0] result_56;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_57;
  // spec.hs:(607,9)-(609,29)
  wire  b_9;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_1;
  wire [7:0] result_58;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_59;
  // spec.hs:(607,9)-(609,29)
  wire  b_10;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_2;
  wire [7:0] result_60;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_61;
  // spec.hs:(607,9)-(609,29)
  wire  b_11;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_3;
  wire [7:0] result_62;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_63;
  // spec.hs:(607,9)-(609,29)
  wire  b_12;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_4;
  wire [7:0] result_64;
  wire [6:0] c$app_arg_17;
  wire  result_65;
  // spec.hs:(385,1)-(387,59)
  wire  pOut4;
  wire [4:0] c$app_arg_18;
  wire  result_66;
  // spec.hs:(385,1)-(387,59)
  wire  pOut3;
  wire [3:0] c$app_arg_19;
  wire  result_67;
  // spec.hs:(385,1)-(387,59)
  wire  pOut2;
  wire [3:0] c$app_arg_20;
  wire  result_68;
  // spec.hs:(385,1)-(387,59)
  wire  pOut1;
  wire [2:0] c$app_arg_21;
  wire  result_69;
  // spec.hs:(385,1)-(387,59)
  wire  pOut0;
  wire [1:0] c$app_arg_22;
  wire  result_70;
  // spec.hs:(607,9)-(609,29)
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_71;
  // spec.hs:(607,9)-(609,29)
  wire  b_13;
  // spec.hs:(607,9)-(609,29)
  wire [7:0] f1_5;
  wire [7:0] result_72;
  // spec.hs:(385,1)-(387,59)
  wire  pIn0;
  // spec.hs:(385,1)-(387,59)
  wire [6:0] pacings;
  wire [74:0] result_73;
  reg [72:0] c$app_arg_23 = {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                              1'b0}};
  wire [72:0] c$case_alt;
  wire [72:0] c$case_alt_0;
  wire [72:0] c$case_alt_1;
  reg [72:0] c$case_alt_2;
  reg [72:0] c$case_alt_3;
  wire [72:0] c$case_alt_4;
  reg  c$app_arg_24 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_25 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(194,1)-(196,25)
  reg [145:0] buffer = {{{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                               1'b0}},   {{64'sd0,   1'b0},   1'b0,   {1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0,
                                                                       1'b0}}};
  // spec.hs:(194,1)-(196,25)
  wire [145:0] c$buffer_case_alt;
  // spec.hs:(194,1)-(196,25)
  wire [145:0] c$buffer_case_alt_0;
  // spec.hs:(194,1)-(196,25)
  wire [145:0] c$buffer_case_alt_1;
  // spec.hs:(194,1)-(196,25)
  wire [72:0] qData;
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] x_4;
  // spec.hs:(194,1)-(196,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(194,1)-(196,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(194,1)-(196,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(194,1)-(196,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(763,1)-(765,87)
  wire  qPopValid;
  // spec.hs:(763,1)-(765,87)
  wire  qPush;
  // spec.hs:(763,1)-(765,87)
  wire  qPop;
  wire [64:0] inputs;
  wire [1343:0] c$vec;
  wire signed [63:0] x_projection_20;
  wire [1407:0] c$t_case_alt_sel_alt_t_0;
  wire [1407:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [11:0] c$vec2_1;
  wire [11:0] c$vec2_2;
  wire [19:0] c$vec2_3;
  wire [35:0] t_projection_4;
  wire [11:0] c$vec2_4;
  wire [11:0] c$vec2_5;
  wire [11:0] c$vec2_6;
  wire [11:0] c$vec2_7;
  wire [44:0] t_projection_9;
  wire [44:0] t_projection_10;
  wire [19:0] c$vec2_8;
  wire [19:0] c$vec2_9;
  wire [431:0] t_projection_13;
  wire [431:0] t_projection_14;
  wire signed [63:0] c$tte_rhs;
  wire [218:0] c$buffer_case_alt_sel_alt_t_1;
  wire [218:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [149:0] result;
  wire [137:0] result_0;
  wire [64:0] result_0_0;
  wire [1:0] result_0_1;
  wire [1:0] result_0_2;
  wire [1:0] result_0_3;
  wire [64:0] result_0_4;
  wire [1:0] result_0_5;
  wire [11:0] result_1;
  wire [6:0] result_1_5;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {hasInput0 | (timer0Over | timer1Over),
                     {inputs,   timer0Over,   {hasInput0,
                                               timer0Over,   timer0Over,   timer0Over,
                                               timer0Over,   timer0Over,   timer1Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd500000);

  assign timer1Over = result_3 >= (64'sd1000000);

  assign result_7 = {{1'b1,   {{result_25,
                                result_26},   {result_23,   result_24},
                               {result_21,   result_22},   {result_19,
                                                            result_20},   {$signed(result_13[63:0]),
                                                                           result_11},   {result_10[0:0],
                                                                                          result_8}}},   {slides,
                                                                                                          {result_70,
                                                                                                           result_69,
                                                                                                           result_68,
                                                                                                           result_67,
                                                                                                           result_66,
                                                                                                           result_65,
                                                                                                           result_47}}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  wire  iterateI_ho1_6_res;
  assign iterateI_ho1_0_arg0 = pOut5;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_5_res;
    end
  end
  // delay end

  assign iterateI_ho1_6_res = c$bb_res_res_5;



  assign c$app_arg = {pOut5,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res,
                      iterateI_ho1_6_res};



  assign result_8 = c$app_arg[1-1:0];

  assign result_9 = b ? t : result_10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd23,   1'b0};
    end else if (en) begin
      result_10 <= result_9;
    end
  end
  // register end

  assign b = result_47;

  assign t = {result_49[15:8],
              c$out0_case_alt < (64'sd0)};

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  wire  iterateI_ho1_6_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut4;

  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_5_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_0 = c$bb_res_res_12;



  assign c$app_arg_0 = {pOut4,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0,
                        iterateI_ho1_6_res_0};



  assign result_11 = c$app_arg_0[1-1:0];

  assign c$vec = window[1343:0];

  wire [1279:0] vec;
  wire signed [63:0] acc_5_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_5;
  wire signed [63:0] acc_6;
  wire signed [63:0] acc_7;
  wire signed [63:0] acc_8;
  wire signed [63:0] acc_9;
  wire signed [63:0] acc_10;
  wire signed [63:0] acc_11;
  wire signed [63:0] acc_12;
  wire signed [63:0] acc_13;
  wire signed [63:0] acc_14;
  wire signed [63:0] acc_15;
  wire signed [63:0] acc_16;
  wire signed [63:0] acc_17;
  wire signed [63:0] acc_18;
  wire signed [63:0] acc_19;
  wire signed [63:0] acc_20;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  wire signed [63:0] acc_1_2;
  wire signed [63:0] acc_1_3;
  wire signed [63:0] acc_1_4;
  wire signed [63:0] acc_1_5;
  wire signed [63:0] acc_1_6;
  wire signed [63:0] acc_1_7;
  wire signed [63:0] acc_1_8;
  wire signed [63:0] acc_1_9;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_2_1;
  wire signed [63:0] acc_2_2;
  wire signed [63:0] acc_2_3;
  wire signed [63:0] acc_3_0;
  wire signed [63:0] acc_3_1;
  wire signed [63:0] acc_4_0;
  wire signed [63:0] acc_2_4;
  assign c$t_app_arg = acc_5_0;

  assign vec = (c$vec[1280-1 : 0]);

  assign acc_1 = $signed(vec[1279:1216]);

  assign acc_2 = $signed(vec[1215:1152]);

  assign acc_3 = $signed(vec[1151:1088]);

  assign acc_4 = $signed(vec[1087:1024]);

  assign acc_5 = $signed(vec[1023:960]);

  assign acc_6 = $signed(vec[959:896]);

  assign acc_7 = $signed(vec[895:832]);

  assign acc_8 = $signed(vec[831:768]);

  assign acc_9 = $signed(vec[767:704]);

  assign acc_10 = $signed(vec[703:640]);

  assign acc_11 = $signed(vec[639:576]);

  assign acc_12 = $signed(vec[575:512]);

  assign acc_13 = $signed(vec[511:448]);

  assign acc_14 = $signed(vec[447:384]);

  assign acc_15 = $signed(vec[383:320]);

  assign acc_16 = $signed(vec[319:256]);

  assign acc_17 = $signed(vec[255:192]);

  assign acc_18 = $signed(vec[191:128]);

  assign acc_19 = $signed(vec[127:64]);

  assign acc_20 = $signed(vec[63:0]);

  wire signed [63:0] x_6;
  wire signed [63:0] y_1;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_6 = acc_1;

  assign y_1 = acc_2;

  assign c$case_alt_13 = (x_6 + y_1);



  wire signed [63:0] x_7;
  wire signed [63:0] y_2;
  wire signed [63:0] c$case_alt_14;
  assign acc_1_1 = c$case_alt_14;

  assign x_7 = acc_3;

  assign y_2 = acc_4;

  assign c$case_alt_14 = (x_7 + y_2);



  wire signed [63:0] x_8;
  wire signed [63:0] y_3;
  wire signed [63:0] c$case_alt_15;
  assign acc_1_2 = c$case_alt_15;

  assign x_8 = acc_5;

  assign y_3 = acc_6;

  assign c$case_alt_15 = (x_8 + y_3);



  wire signed [63:0] x_9;
  wire signed [63:0] y_4;
  wire signed [63:0] c$case_alt_16;
  assign acc_1_3 = c$case_alt_16;

  assign x_9 = acc_7;

  assign y_4 = acc_8;

  assign c$case_alt_16 = (x_9 + y_4);



  wire signed [63:0] x_10;
  wire signed [63:0] y_5;
  wire signed [63:0] c$case_alt_17;
  assign acc_1_4 = c$case_alt_17;

  assign x_10 = acc_9;

  assign y_5 = acc_10;

  assign c$case_alt_17 = (x_10 + y_5);



  wire signed [63:0] x_11;
  wire signed [63:0] y_6;
  wire signed [63:0] c$case_alt_18;
  assign acc_1_5 = c$case_alt_18;

  assign x_11 = acc_11;

  assign y_6 = acc_12;

  assign c$case_alt_18 = (x_11 + y_6);



  wire signed [63:0] x_12;
  wire signed [63:0] y_7;
  wire signed [63:0] c$case_alt_19;
  assign acc_1_6 = c$case_alt_19;

  assign x_12 = acc_13;

  assign y_7 = acc_14;

  assign c$case_alt_19 = (x_12 + y_7);



  wire signed [63:0] x_13;
  wire signed [63:0] y_8;
  wire signed [63:0] c$case_alt_20;
  assign acc_1_7 = c$case_alt_20;

  assign x_13 = acc_15;

  assign y_8 = acc_16;

  assign c$case_alt_20 = (x_13 + y_8);



  wire signed [63:0] x_14;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_21;
  assign acc_1_8 = c$case_alt_21;

  assign x_14 = acc_17;

  assign y_9 = acc_18;

  assign c$case_alt_21 = (x_14 + y_9);



  wire signed [63:0] x_15;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_22;
  assign acc_1_9 = c$case_alt_22;

  assign x_15 = acc_19;

  assign y_10 = acc_20;

  assign c$case_alt_22 = (x_15 + y_10);



  wire signed [63:0] x_16;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_23;
  assign acc_2_0 = c$case_alt_23;

  assign x_16 = acc_1_0;

  assign y_11 = acc_1_1;

  assign c$case_alt_23 = (x_16 + y_11);



  wire signed [63:0] x_17;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_24;
  assign acc_2_1 = c$case_alt_24;

  assign x_17 = acc_1_2;

  assign y_12 = acc_1_3;

  assign c$case_alt_24 = (x_17 + y_12);



  wire signed [63:0] x_18;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_25;
  assign acc_2_2 = c$case_alt_25;

  assign x_18 = acc_1_4;

  assign y_13 = acc_1_5;

  assign c$case_alt_25 = (x_18 + y_13);



  wire signed [63:0] x_19;
  wire signed [63:0] y_14;
  wire signed [63:0] c$case_alt_26;
  assign acc_2_3 = c$case_alt_26;

  assign x_19 = acc_1_6;

  assign y_14 = acc_1_7;

  assign c$case_alt_26 = (x_19 + y_14);



  wire signed [63:0] x_20;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_27;
  assign acc_2_4 = c$case_alt_27;

  assign x_20 = acc_1_8;

  assign y_15 = acc_1_9;

  assign c$case_alt_27 = (x_20 + y_15);



  wire signed [63:0] x_21;
  wire signed [63:0] y_16;
  wire signed [63:0] c$case_alt_28;
  assign acc_3_0 = c$case_alt_28;

  assign x_21 = acc_2_0;

  assign y_16 = acc_2_1;

  assign c$case_alt_28 = (x_21 + y_16);



  wire signed [63:0] x_22;
  wire signed [63:0] y_17;
  wire signed [63:0] c$case_alt_29;
  assign acc_3_1 = c$case_alt_29;

  assign x_22 = acc_2_2;

  assign y_17 = acc_2_3;

  assign c$case_alt_29 = (x_22 + y_17);



  wire signed [63:0] x_23;
  wire signed [63:0] y_18;
  wire signed [63:0] c$case_alt_30;
  assign acc_4_0 = c$case_alt_30;

  assign x_23 = acc_3_0;

  assign y_18 = acc_3_1;

  assign c$case_alt_30 = (x_23 + y_18);



  wire signed [63:0] x_24;
  wire signed [63:0] y_19;
  wire signed [63:0] c$case_alt_31;
  assign acc_5_0 = c$case_alt_31;

  assign x_24 = acc_4_0;

  assign y_19 = acc_2_4;

  assign c$case_alt_31 = (x_24 + y_19);





  assign result_12 = b_0 ? t_0 : result_13;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_13_register
    if ( rst) begin
      result_13 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_13 <= result_12;
    end
  end
  // register end

  assign b_0 = result_65;

  assign t_0 = {result_49[23:16],   c$t_app_arg};

  assign x_projection_20 = $signed(win[1344-1 -: 64]);

  assign x_1 = x_projection_20;

  assign win = window[1343:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_14;
    end
  end
  // register end

  assign result_14 = b_1 ? t_1 : window;

  assign t_1 = {result_50[7:0],   result_15};

  assign result_15 = result_17 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = result_18 ? c$t_case_alt_sel_alt_t_0[1407:64] : c$t_case_alt_sel_alt_f_0[1407:64];

  assign c$t_case_alt_0 = result_18 ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_10;
  generate
  for (i_10=0;i_10<21;i_10=i_10+1) begin : vector_replace
    assign lastBucketUpdated[(20-i_10)*64+:64] = (64'sd0) == i_10 ? ((x_1 + 64'sd1)) : win[(20-i_10)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_1 = result_18 | result_17;

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 3; i_11 = i_11 + 1) begin : zipWith
    wire [8:0] zipWith_in1;
    assign zipWith_in1 = result_28[i_11*9+:9];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_11*3+:3];
    wire [11:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_11*12+:12] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 3; i_12 = i_12 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [11:0] map_in;
    assign map_in = c$ws_app_arg[i_12*12+:12];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_12[0+:2];
    wire [2:0] c$case_alt_32;
    // spec.hs:341:1-63
    wire [7:0] t_15;
    // spec.hs:341:1-63
    wire [8:0] x_25;
    assign map_out = c$case_alt_32;

    assign c$case_alt_32 = (t_15 == result_50[31:24]) ? {1'b1,map_index} : map_in[2:0];

    assign t_15 = x_25[8:1];

    assign x_25 = map_in[11:3];


    assign c$ws_app_arg_0[i_12*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray [0:3-1];
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13=i_13+1) begin : mk_array
    assign vecArray[(3-1)-i_13] = result_28[i_13*9+:9];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_16 = c$case_scrut_0[2:2] ? c$case_scrut[0:0] : 1'b0;

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= slides;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_17;



  assign c$app_arg_1 = {slides,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1};



  assign result_17 = c$app_arg_1[1-1:0];

  assign slides = result_73[7:7];

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_22;



  assign c$app_arg_2 = {pOut3,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2};



  assign result_18 = c$app_arg_2[1-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 3; i_15 = i_15 + 1) begin : zipWith_0
    wire [8:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_28[i_15*9+:9];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_15*3+:3];
    wire [11:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_15*12+:12] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 3; i_16 = i_16 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [11:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_16*12+:12];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_16[0+:2];
    wire [2:0] c$case_alt_33;
    // spec.hs:341:1-63
    wire [7:0] t_16;
    // spec.hs:341:1-63
    wire [8:0] x_26;
    assign map_out_0 = c$case_alt_33;

    assign c$case_alt_33 = (t_16 == result_48[31:24]) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_16 = x_26[8:1];

    assign x_26 = map_in_0[11:3];


    assign c$ws_app_arg_2[i_16*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_0 [0:3-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 3; i_17=i_17+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_17] = result_28[i_17*9+:9];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_19 = c$case_scrut_2[2:2] ? c$case_scrut_1[0:0] : 1'b0;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_1;
  wire  iterateI_ho1_6_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut3;

  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_5_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_1 = c$bb_res_res_29;



  assign c$app_arg_3 = {pOut3,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_1,
                        iterateI_ho1_6_res_1};



  assign result_20 = c$app_arg_3[1-1:0];

  assign c$vec2_1 = (ws_1[12-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 4; i_18 = i_18 + 1) begin : zipWith_1
    wire [8:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_36[i_18*9+:9];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_18*3+:3];
    wire [11:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_18*12+:12] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 4; i_19 = i_19 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [11:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_19*12+:12];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd3 - i_19[0+:2];
    wire [2:0] c$case_alt_34;
    // spec.hs:341:1-63
    wire [7:0] t_17;
    // spec.hs:341:1-63
    wire [8:0] x_27;
    assign map_out_1 = c$case_alt_34;

    assign c$case_alt_34 = (t_17 == result_48[39:32]) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_17 = x_27[8:1];

    assign x_27 = map_in_1[11:3];


    assign c$ws_app_arg_4[i_19*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_1 [0:4-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 4; i_20=i_20+1) begin : mk_array_1
    assign vecArray_1[(4-1)-i_20] = result_36[i_20*9+:9];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[15-1 -: 3];

  assign result_21 = c$case_scrut_4[2:2] ? c$case_scrut_3[0:0] : 1'b0;

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_2;
  wire  iterateI_ho1_6_res_2;
  assign iterateI_ho1_0_arg0_2 = pOut2;

  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_5_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_2 = c$bb_res_res_36;



  assign c$app_arg_4 = {pOut2,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4,   iterateI_ho1_5_res_2,
                        iterateI_ho1_6_res_2};



  assign result_22 = c$app_arg_4[1-1:0];

  assign c$vec2_2 = (ws_2[12-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 4; i_21 = i_21 + 1) begin : zipWith_2
    wire [8:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_38[i_21*9+:9];
    wire [2:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_21*3+:3];
    wire [11:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_21*12+:12] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 4; i_22 = i_22 + 1) begin : imap_2
    wire [2-1:0] map_index_2;
    wire [11:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_22*12+:12];
    wire [2:0] map_out_2;

    assign map_index_2 = 2'd3 - i_22[0+:2];
    wire [2:0] c$case_alt_35;
    // spec.hs:341:1-63
    wire [7:0] t_18;
    // spec.hs:341:1-63
    wire [8:0] x_28;
    assign map_out_2 = c$case_alt_35;

    assign c$case_alt_35 = (t_18 == result_48[47:40]) ? {1'b1,map_index_2} : map_in_2[2:0];

    assign t_18 = x_28[8:1];

    assign x_28 = map_in_2[11:3];


    assign c$ws_app_arg_6[i_22*3+:3] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_2 [0:4-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 4; i_23=i_23+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_23] = result_38[i_23*9+:9];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-2) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[15-1 -: 3];

  assign result_23 = c$case_scrut_6[2:2] ? c$case_scrut_5[0:0] : 1'b0;

  assign i_2 = c$case_scrut_6[1:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_5;
  wire  iterateI_ho1_5_res_3;
  wire  iterateI_ho1_6_res_3;
  assign iterateI_ho1_0_arg0_3 = pOut1;

  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_4_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_5_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_3 = c$bb_res_res_43;



  assign c$app_arg_5 = {pOut1,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_5,   iterateI_ho1_5_res_3,
                        iterateI_ho1_6_res_3};



  assign result_24 = c$app_arg_5[1-1:0];

  assign c$vec2_3 = (ws_3[20-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 5; i_24 = i_24 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_43[i_24*72+:72];
    wire [3:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_24*4+:4];
    wire [75:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_24*76+:76] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 5; i_25 = i_25 + 1) begin : imap_3
    wire [3-1:0] map_index_3;
    wire [75:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_25*76+:76];
    wire [3:0] map_out_3;

    assign map_index_3 = 3'd4 - i_25[0+:3];
    wire [3:0] c$case_alt_36;
    // spec.hs:341:1-63
    wire [7:0] t_19;
    // spec.hs:341:1-63
    wire [71:0] x_29;
    assign map_out_3 = c$case_alt_36;

    assign c$case_alt_36 = (t_19 == result_48[55:48]) ? {1'b1,map_index_3} : map_in_3[3:0];

    assign t_19 = x_29[71:64];

    assign x_29 = map_in_3[75:4];


    assign c$ws_app_arg_8[i_25*4+:4] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:5-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 5; i_26=i_26+1) begin : mk_array_3
    assign vecArray_3[(5-1)-i_26] = result_43[i_26*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-3) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[24-1 -: 4];

  assign result_25 = c$case_scrut_8[3:3] ? $signed(c$case_scrut_7[63:0]) : (64'sd0);

  assign i_3 = c$case_scrut_8[2:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,3'bxxx}};

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_6;
  wire  iterateI_ho1_5_res_4;
  wire  iterateI_ho1_6_res_4;
  assign iterateI_ho1_0_arg0_4 = pOut0;

  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_4_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_5_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_4 = c$bb_res_res_50;



  assign c$app_arg_6 = {pOut0,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_6,   iterateI_ho1_5_res_4,
                        iterateI_ho1_6_res_4};



  assign result_26 = c$app_arg_6[1-1:0];

  assign result_27 = b_2 ? t_2 : result_28;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_28_register
    if ( rst) begin
      result_28 <= {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
    end else if (en) begin
      result_28 <= result_27;
    end
  end
  // register end

  assign b_2 = result_66;

  assign t_projection_4 = ({result_28,{result_51[31:24],   (result_34 & result_32) | (result_30 & result_29)}});

  assign t_2 = t_projection_4[26:0];

  assign c$vec2_4 = (ws_4[12-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 4; i_27 = i_27 + 1) begin : zipWith_4
    wire [8:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_36[i_27*9+:9];
    wire [2:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_27*3+:3];
    wire [11:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_27*12+:12] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 4; i_28 = i_28 + 1) begin : imap_4
    wire [2-1:0] map_index_4;
    wire [11:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_28*12+:12];
    wire [2:0] map_out_4;

    assign map_index_4 = 2'd3 - i_28[0+:2];
    wire [2:0] c$case_alt_37;
    // spec.hs:341:1-63
    wire [7:0] t_20;
    // spec.hs:341:1-63
    wire [8:0] x_30;
    assign map_out_4 = c$case_alt_37;

    assign c$case_alt_37 = (t_20 == result_51[39:32]) ? {1'b1,map_index_4} : map_in_4[2:0];

    assign t_20 = x_30[8:1];

    assign x_30 = map_in_4[11:3];


    assign c$ws_app_arg_10[i_28*3+:3] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_4 [0:4-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 4; i_29=i_29+1) begin : mk_array_4
    assign vecArray_4[(4-1)-i_29] = result_36[i_29*9+:9];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-2) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[15-1 -: 3];

  assign result_29 = c$case_scrut_10[2:2] ? c$case_scrut_9[0:0] : 1'b0;

  assign i_4 = c$case_scrut_10[1:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,2'bxx}};

  assign c$vec2_5 = (ws_5[12-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 4; i_30 = i_30 + 1) begin : zipWith_5
    wire [8:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_38[i_30*9+:9];
    wire [2:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_30*3+:3];
    wire [11:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_30*12+:12] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 4; i_31 = i_31 + 1) begin : imap_5
    wire [2-1:0] map_index_5;
    wire [11:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_31*12+:12];
    wire [2:0] map_out_5;

    assign map_index_5 = 2'd3 - i_31[0+:2];
    wire [2:0] c$case_alt_38;
    // spec.hs:341:1-63
    wire [7:0] t_21;
    // spec.hs:341:1-63
    wire [8:0] x_31;
    assign map_out_5 = c$case_alt_38;

    assign c$case_alt_38 = (t_21 == result_31) ? {1'b1,map_index_5} : map_in_5[2:0];

    assign t_21 = x_31[8:1];

    assign x_31 = map_in_5[11:3];


    assign c$ws_app_arg_12[i_31*3+:3] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_5 [0:4-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 4; i_32=i_32+1) begin : mk_array_5
    assign vecArray_5[(4-1)-i_32] = result_38[i_32*9+:9];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-2) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[15-1 -: 3];

  assign result_30 = c$case_scrut_12[2:2] ? c$case_scrut_11[0:0] : 1'b0;

  assign result_31 = (result_51[47:40] > 8'd1) ? c$app_arg_7 : (c$app_arg_7 + 8'd22);

  assign c$app_arg_7 = result_51[47:40] - 8'd1;

  assign i_5 = c$case_scrut_12[1:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,2'bxx}};

  assign c$vec2_6 = (ws_6[12-1 : 0]);

  // zipWith start
  genvar i_33;
  generate
  for (i_33 = 0; i_33 < 4; i_33 = i_33 + 1) begin : zipWith_6
    wire [8:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_36[i_33*9+:9];
    wire [2:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_33*3+:3];
    wire [11:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_33*12+:12] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_34;
  generate
  for (i_34=0; i_34 < 4; i_34 = i_34 + 1) begin : imap_6
    wire [2-1:0] map_index_6;
    wire [11:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_34*12+:12];
    wire [2:0] map_out_6;

    assign map_index_6 = 2'd3 - i_34[0+:2];
    wire [2:0] c$case_alt_39;
    // spec.hs:341:1-63
    wire [7:0] t_22;
    // spec.hs:341:1-63
    wire [8:0] x_32;
    assign map_out_6 = c$case_alt_39;

    assign c$case_alt_39 = (t_22 == result_33) ? {1'b1,map_index_6} : map_in_6[2:0];

    assign t_22 = x_32[8:1];

    assign x_32 = map_in_6[11:3];


    assign c$ws_app_arg_14[i_34*3+:3] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_6 [0:4-1];
  genvar i_35;
  generate
  for (i_35=0; i_35 < 4; i_35=i_35+1) begin : mk_array_6
    assign vecArray_6[(4-1)-i_35] = result_36[i_35*9+:9];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-2) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[15-1 -: 3];

  assign result_32 = c$case_scrut_14[2:2] ? c$case_scrut_13[0:0] : 1'b0;

  assign result_33 = (result_51[39:32] > 8'd1) ? c$app_arg_8 : (c$app_arg_8 + 8'd22);

  assign c$app_arg_8 = result_51[39:32] - 8'd1;

  assign i_6 = c$case_scrut_14[1:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,2'bxx}};

  assign c$vec2_7 = (ws_7[12-1 : 0]);

  // zipWith start
  genvar i_36;
  generate
  for (i_36 = 0; i_36 < 4; i_36 = i_36 + 1) begin : zipWith_7
    wire [8:0] zipWith_in1_7;
    assign zipWith_in1_7 = result_38[i_36*9+:9];
    wire [2:0] zipWith_in2_7;
    assign zipWith_in2_7 = c$vec2_7[i_36*3+:3];
    wire [11:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_15[i_36*12+:12] = c$n_7;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_37;
  generate
  for (i_37=0; i_37 < 4; i_37 = i_37 + 1) begin : imap_7
    wire [2-1:0] map_index_7;
    wire [11:0] map_in_7;
    assign map_in_7 = c$ws_app_arg_15[i_37*12+:12];
    wire [2:0] map_out_7;

    assign map_index_7 = 2'd3 - i_37[0+:2];
    wire [2:0] c$case_alt_40;
    // spec.hs:341:1-63
    wire [7:0] t_23;
    // spec.hs:341:1-63
    wire [8:0] x_33;
    assign map_out_7 = c$case_alt_40;

    assign c$case_alt_40 = (t_23 == result_51[47:40]) ? {1'b1,map_index_7} : map_in_7[2:0];

    assign t_23 = x_33[8:1];

    assign x_33 = map_in_7[11:3];


    assign c$ws_app_arg_16[i_37*3+:3] = map_out_7;
  end
  endgenerate
  // imap end

  // index begin
  wire [8:0] vecArray_7 [0:4-1];
  genvar i_38;
  generate
  for (i_38=0; i_38 < 4; i_38=i_38+1) begin : mk_array_7
    assign vecArray_7[(4-1)-i_38] = result_38[i_38*9+:9];
  end
  endgenerate
  assign c$case_scrut_15 = vecArray_7[($unsigned({{(64-2) {1'b0}},i_7}))];
  // index end

  assign c$case_scrut_16 = ws_7[15-1 -: 3];

  assign result_34 = c$case_scrut_16[2:2] ? c$case_scrut_15[0:0] : 1'b0;

  assign i_7 = c$case_scrut_16[1:0];

  assign ws_7 = {c$ws_app_arg_16,{1'b0,2'bxx}};

  assign result_35 = b_3 ? t_3 : result_36;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_36_register
    if ( rst) begin
      result_36 <= {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
    end else if (en) begin
      result_36 <= result_35;
    end
  end
  // register end

  assign b_3 = result_67;

  assign t_projection_9 = ({result_36,{result_52[39:32],   ((x_2 - y)) < (-64'sd5)}});

  assign t_3 = t_projection_9[35:0];

  assign x_2 = result_41;

  assign y = result_39;

  assign result_37 = b_4 ? t_4 : result_38;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {{8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0},   {8'd23,   1'b0}};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign b_4 = result_68;

  assign t_projection_10 = ({result_38,{result_52[47:40],   ((x_3 - y_0)) > (64'sd5)}});

  assign t_4 = t_projection_10[35:0];

  assign x_3 = result_41;

  assign y_0 = result_39;

  assign c$vec2_8 = (ws_8[20-1 : 0]);

  // zipWith start
  genvar i_39;
  generate
  for (i_39 = 0; i_39 < 5; i_39 = i_39 + 1) begin : zipWith_8
    wire [71:0] zipWith_in1_8;
    assign zipWith_in1_8 = result_43[i_39*72+:72];
    wire [3:0] zipWith_in2_8;
    assign zipWith_in2_8 = c$vec2_8[i_39*4+:4];
    wire [75:0] c$n_8;
    assign c$n_8 = {zipWith_in1_8,   zipWith_in2_8};


    assign c$ws_app_arg_17[i_39*76+:76] = c$n_8;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_40;
  generate
  for (i_40=0; i_40 < 5; i_40 = i_40 + 1) begin : imap_8
    wire [3-1:0] map_index_8;
    wire [75:0] map_in_8;
    assign map_in_8 = c$ws_app_arg_17[i_40*76+:76];
    wire [3:0] map_out_8;

    assign map_index_8 = 3'd4 - i_40[0+:3];
    wire [3:0] c$case_alt_41;
    // spec.hs:341:1-63
    wire [7:0] t_24;
    // spec.hs:341:1-63
    wire [71:0] x_34;
    assign map_out_8 = c$case_alt_41;

    assign c$case_alt_41 = (t_24 == result_40) ? {1'b1,map_index_8} : map_in_8[3:0];

    assign t_24 = x_34[71:64];

    assign x_34 = map_in_8[75:4];


    assign c$ws_app_arg_18[i_40*4+:4] = map_out_8;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_8 [0:5-1];
  genvar i_41;
  generate
  for (i_41=0; i_41 < 5; i_41=i_41+1) begin : mk_array_8
    assign vecArray_8[(5-1)-i_41] = result_43[i_41*72+:72];
  end
  endgenerate
  assign c$case_scrut_17 = vecArray_8[($unsigned({{(64-3) {1'b0}},i_8}))];
  // index end

  assign c$case_scrut_18 = ws_8[24-1 -: 4];

  assign result_39 = c$case_scrut_18[3:3] ? $signed(c$case_scrut_17[63:0]) : result_41;

  assign result_40 = (result_52[55:48] > 8'd1) ? c$app_arg_9 : (c$app_arg_9 + 8'd22);

  assign c$app_arg_9 = result_52[55:48] - 8'd1;

  assign i_8 = c$case_scrut_18[2:0];

  assign ws_8 = {c$ws_app_arg_18,{1'b0,3'bxxx}};

  assign c$vec2_9 = (ws_9[20-1 : 0]);

  // zipWith start
  genvar i_42;
  generate
  for (i_42 = 0; i_42 < 5; i_42 = i_42 + 1) begin : zipWith_9
    wire [71:0] zipWith_in1_9;
    assign zipWith_in1_9 = result_43[i_42*72+:72];
    wire [3:0] zipWith_in2_9;
    assign zipWith_in2_9 = c$vec2_9[i_42*4+:4];
    wire [75:0] c$n_9;
    assign c$n_9 = {zipWith_in1_9,   zipWith_in2_9};


    assign c$ws_app_arg_19[i_42*76+:76] = c$n_9;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_43;
  generate
  for (i_43=0; i_43 < 5; i_43 = i_43 + 1) begin : imap_9
    wire [3-1:0] map_index_9;
    wire [75:0] map_in_9;
    assign map_in_9 = c$ws_app_arg_19[i_43*76+:76];
    wire [3:0] map_out_9;

    assign map_index_9 = 3'd4 - i_43[0+:3];
    wire [3:0] c$case_alt_42;
    // spec.hs:341:1-63
    wire [7:0] t_25;
    // spec.hs:341:1-63
    wire [71:0] x_35;
    assign map_out_9 = c$case_alt_42;

    assign c$case_alt_42 = (t_25 == result_52[55:48]) ? {1'b1,map_index_9} : map_in_9[3:0];

    assign t_25 = x_35[71:64];

    assign x_35 = map_in_9[75:4];


    assign c$ws_app_arg_20[i_43*4+:4] = map_out_9;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_9 [0:5-1];
  genvar i_44;
  generate
  for (i_44=0; i_44 < 5; i_44=i_44+1) begin : mk_array_9
    assign vecArray_9[(5-1)-i_44] = result_43[i_44*72+:72];
  end
  endgenerate
  assign c$case_scrut_19 = vecArray_9[($unsigned({{(64-3) {1'b0}},i_9}))];
  // index end

  assign c$case_scrut_20 = ws_9[24-1 -: 4];

  assign result_41 = c$case_scrut_20[3:3] ? $signed(c$case_scrut_19[63:0]) : (64'sd0);

  assign i_9 = c$case_scrut_20[2:0];

  assign ws_9 = {c$ws_app_arg_20,{1'b0,3'bxxx}};

  assign result_42 = b_5 ? t_5 : result_43;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_43_register
    if ( rst) begin
      result_43 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                   64'sd0},
   {8'd23,   64'sd0}};
    end else if (en) begin
      result_43 <= result_42;
    end
  end
  // register end

  assign b_5 = result_69;

  assign t_projection_13 = ({result_43,{result_44[55:48],   c$out0_case_alt}});

  assign t_5 = t_projection_13[359:0];

  assign c$out0_case_alt = (tag == 8'd23) ? (64'sd0) : dta;

  assign dta = $signed(c$out0_case_scrut[63:0]);

  assign tag = c$out0_case_scrut[71:64];

  assign c$out0_case_scrut = result_46[72-1:0];

  wire [63:0] iterateI_ho1_0_arg0_5;
  wire [63:0] iterateI_ho1_0_res_7;
  assign iterateI_ho1_0_arg0_5 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_51 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_51;



  assign c$app_arg_10 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_7};



  assign result_44 = c$app_arg_10[64-1:0];

  assign result_45 = b_6 ? t_6 : result_46;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_46_register
    if ( rst) begin
      result_46 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                   64'sd0},
   {8'd23,   64'sd0}};
    end else if (en) begin
      result_46 <= result_45;
    end
  end
  // register end

  assign b_6 = result_70;

  assign t_projection_14 = ({result_46,{t_13,   c$input0Win_app_arg}});

  assign t_6 = t_projection_14[359:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(result_73[72:9]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  wire  iterateI_ho1_4_res_7;
  wire  iterateI_ho1_5_res_5;
  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_52;



  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_4_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_5 = c$bb_res_res_57;



  assign c$app_arg_11 = {pOut5,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_7,
                         iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7,
                         iterateI_ho1_4_res_7,   iterateI_ho1_5_res_5};



  assign result_47 = c$app_arg_11[1-1:0];

  wire [63:0] iterateI_ho1_0_arg0_6;
  wire [63:0] iterateI_ho1_0_res_9;
  wire [63:0] iterateI_ho1_1_res_8;
  wire [63:0] iterateI_ho1_2_res_8;
  wire [63:0] iterateI_ho1_3_res_8;
  wire [63:0] iterateI_ho1_4_res_8;
  wire [63:0] iterateI_ho1_5_res_6;
  assign iterateI_ho1_0_arg0_6 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_58 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_58;



  reg [63:0] c$bb_res_res_59 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_59;



  reg [63:0] c$bb_res_res_60 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_60;



  reg [63:0] c$bb_res_res_61 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_61;



  reg [63:0] c$bb_res_res_62 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_8 = c$bb_res_res_62;



  reg [63:0] c$bb_res_res_63 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_4_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_6 = c$bb_res_res_63;



  assign c$app_arg_12 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_8,   iterateI_ho1_3_res_8,
                         iterateI_ho1_4_res_8,   iterateI_ho1_5_res_6};



  assign result_48 = c$app_arg_12[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_7;
  wire [63:0] iterateI_ho1_0_res_10;
  wire [63:0] iterateI_ho1_1_res_9;
  wire [63:0] iterateI_ho1_2_res_9;
  wire [63:0] iterateI_ho1_3_res_9;
  wire [63:0] iterateI_ho1_4_res_9;
  assign iterateI_ho1_0_arg0_7 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_64 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_64;



  reg [63:0] c$bb_res_res_65 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_65;



  reg [63:0] c$bb_res_res_66 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_66;



  reg [63:0] c$bb_res_res_67 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_67;



  reg [63:0] c$bb_res_res_68 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= iterateI_ho1_3_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_9 = c$bb_res_res_68;



  assign c$app_arg_13 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_9,   iterateI_ho1_3_res_9,
                         iterateI_ho1_4_res_9};



  assign result_49 = c$app_arg_13[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_8;
  wire [63:0] iterateI_ho1_0_res_11;
  wire [63:0] iterateI_ho1_1_res_10;
  wire [63:0] iterateI_ho1_2_res_10;
  wire [63:0] iterateI_ho1_3_res_10;
  assign iterateI_ho1_0_arg0_8 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_69 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_69;



  reg [63:0] c$bb_res_res_70 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_70;



  reg [63:0] c$bb_res_res_71 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_71;



  reg [63:0] c$bb_res_res_72 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_10 = c$bb_res_res_72;



  assign c$app_arg_14 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10,
                         iterateI_ho1_3_res_10};



  assign result_50 = c$app_arg_14[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_9;
  wire [63:0] iterateI_ho1_0_res_12;
  wire [63:0] iterateI_ho1_1_res_11;
  wire [63:0] iterateI_ho1_2_res_11;
  assign iterateI_ho1_0_arg0_9 = {t_13,   t_12,
                                  t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_73 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= iterateI_ho1_0_arg0_9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_73;



  reg [63:0] c$bb_res_res_74 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_74;



  reg [63:0] c$bb_res_res_75 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_75;



  assign c$app_arg_15 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11};



  assign result_51 = c$app_arg_15[64-1:0];

  wire [63:0] iterateI_ho1_0_arg0_10;
  wire [63:0] iterateI_ho1_0_res_13;
  wire [63:0] iterateI_ho1_1_res_12;
  assign iterateI_ho1_0_arg0_10 = {t_13,   t_12,
                                   t_11,   t_10,   t_9,   t_8,   t_7,   t_9};

  reg [63:0] c$bb_res_res_76 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= iterateI_ho1_0_arg0_10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_76;



  reg [63:0] c$bb_res_res_77 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_77;



  assign c$app_arg_16 = {{t_13,   t_12,   t_11,
                          t_10,   t_9,   t_8,   t_7,   t_9},
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_12};



  assign result_52 = c$app_arg_16[64-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_53;
    end
  end
  // register end

  assign result_53 = pOut5 ? result_54 : t_7;

  assign b_7 = t_7 == 8'd22;

  assign f1 = t_7 + 8'd1;

  assign result_54 = b_7 ? 8'd1 : f1;

  assign pOut5 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_55;
    end
  end
  // register end

  assign result_55 = pOut4 ? result_56 : t_8;

  assign b_8 = t_8 == 8'd22;

  assign f1_0 = t_8 + 8'd1;

  assign result_56 = b_8 ? 8'd1 : f1_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_57;
    end
  end
  // register end

  assign result_57 = pOut3 ? result_58 : t_9;

  assign b_9 = t_9 == 8'd22;

  assign f1_1 = t_9 + 8'd1;

  assign result_58 = b_9 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_59;
    end
  end
  // register end

  assign result_59 = pOut2 ? result_60 : t_10;

  assign b_10 = t_10 == 8'd22;

  assign f1_2 = t_10 + 8'd1;

  assign result_60 = b_10 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_61;
    end
  end
  // register end

  assign result_61 = pOut1 ? result_62 : t_11;

  assign b_11 = t_11 == 8'd22;

  assign f1_3 = t_11 + 8'd1;

  assign result_62 = b_11 ? 8'd1 : f1_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_63;
    end
  end
  // register end

  assign result_63 = pOut0 ? result_64 : t_12;

  assign b_12 = t_12 == 8'd22;

  assign f1_4 = t_12 + 8'd1;

  assign result_64 = b_12 ? 8'd1 : f1_4;

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_13;
  wire  iterateI_ho1_2_res_12;
  wire  iterateI_ho1_3_res_11;
  wire  iterateI_ho1_4_res_10;
  wire  iterateI_ho1_5_res_7;
  reg  c$bb_res_res_78 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_78;



  reg  c$bb_res_res_79 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_79;



  reg  c$bb_res_res_80 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= iterateI_ho1_1_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_80;



  reg  c$bb_res_res_81 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_11 = c$bb_res_res_81;



  reg  c$bb_res_res_82 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_3_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_10 = c$bb_res_res_82;



  reg  c$bb_res_res_83 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= iterateI_ho1_4_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_7 = c$bb_res_res_83;



  assign c$app_arg_17 = {pOut4,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_13,
                         iterateI_ho1_2_res_12,
                         iterateI_ho1_3_res_11,
                         iterateI_ho1_4_res_10,   iterateI_ho1_5_res_7};



  assign result_65 = c$app_arg_17[1-1:0];

  assign pOut4 = pacings[1:1];

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_14;
  wire  iterateI_ho1_2_res_13;
  wire  iterateI_ho1_3_res_12;
  reg  c$bb_res_res_84 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_84;



  reg  c$bb_res_res_85 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_85;



  reg  c$bb_res_res_86 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= iterateI_ho1_1_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_86;



  reg  c$bb_res_res_87 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_87_delay
    if (en) begin
      c$bb_res_res_87 <= iterateI_ho1_2_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_12 = c$bb_res_res_87;



  assign c$app_arg_18 = {pOut3,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_14,
                         iterateI_ho1_2_res_13,
                         iterateI_ho1_3_res_12};



  assign result_66 = c$app_arg_18[1-1:0];

  assign pOut3 = pacings[2:2];

  wire  iterateI_ho1_0_res_16;
  wire  iterateI_ho1_1_res_15;
  wire  iterateI_ho1_2_res_14;
  reg  c$bb_res_res_88 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_88_delay
    if (en) begin
      c$bb_res_res_88 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_88;



  reg  c$bb_res_res_89 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_89_delay
    if (en) begin
      c$bb_res_res_89 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_89;



  reg  c$bb_res_res_90 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_90_delay
    if (en) begin
      c$bb_res_res_90 <= iterateI_ho1_1_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_90;



  assign c$app_arg_19 = {pOut2,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_15,
                         iterateI_ho1_2_res_14};



  assign result_67 = c$app_arg_19[1-1:0];

  assign pOut2 = pacings[3:3];

  wire  iterateI_ho1_0_res_17;
  wire  iterateI_ho1_1_res_16;
  wire  iterateI_ho1_2_res_15;
  reg  c$bb_res_res_91 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_91_delay
    if (en) begin
      c$bb_res_res_91 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_91;



  reg  c$bb_res_res_92 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_92_delay
    if (en) begin
      c$bb_res_res_92 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_92;



  reg  c$bb_res_res_93 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_93_delay
    if (en) begin
      c$bb_res_res_93 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_15 = c$bb_res_res_93;



  assign c$app_arg_20 = {pOut1,
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_15};



  assign result_68 = c$app_arg_20[1-1:0];

  assign pOut1 = pacings[4:4];

  wire  iterateI_ho1_0_res_18;
  wire  iterateI_ho1_1_res_17;
  reg  c$bb_res_res_94 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_94_delay
    if (en) begin
      c$bb_res_res_94 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_94;



  reg  c$bb_res_res_95 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_95_delay
    if (en) begin
      c$bb_res_res_95 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_95;



  assign c$app_arg_21 = {pOut0,
                         iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_17};



  assign result_69 = c$app_arg_21[1-1:0];

  assign pOut0 = pacings[5:5];

  wire  iterateI_ho1_0_res_19;
  reg  c$bb_res_res_96 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_96_delay
    if (en) begin
      c$bb_res_res_96 <= pIn0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_96;



  assign c$app_arg_22 = {pIn0,
                         iterateI_ho1_0_res_19};



  assign result_70 = c$app_arg_22[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_71;
    end
  end
  // register end

  assign result_71 = pIn0 ? result_72 : t_13;

  assign b_13 = t_13 == 8'd22;

  assign f1_5 = t_13 + 8'd1;

  assign result_72 = b_13 ? 8'd1 : f1_5;

  assign pIn0 = pacings[6:6];

  assign pacings = result_73[6:0];

  assign result_73 = {c$app_arg_25,
                      c$app_arg_24,   c$app_arg_23};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_23_register
    if ( rst) begin
      c$app_arg_23 <= {{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0}};
    end else if (en) begin
      c$app_arg_23 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,
                                                                  1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,
                                                                  1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                        1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [72:0] vecArray_10 [0:2-1];
  genvar i_45;
  generate
  for (i_45=0; i_45 < 2; i_45=i_45+1) begin : mk_array_10
    assign vecArray_10[(2-1)-i_45] = buffer[i_45*73+:73];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_10[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_24_register
    if ( rst) begin
      c$app_arg_24 <= 1'b0;
    end else if (en) begin
      c$app_arg_24 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_4)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_25_register
    if ( rst) begin
      c$app_arg_25 <= 1'b0;
    end else if (en) begin
      c$app_arg_25 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_4 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                 1'b0}},   {{64'sd0,   1'b0},   1'b0,   {1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0,
                                                                         1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[218:73] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[218:73];

  assign qData = result_6[72:0];

  assign x_4 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_4 + 64'sd1));

  assign c$tte_rhs_0 = (x_4 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_4)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_4 - 64'sd1);

  assign result = {result_7[145:8],   {qPush,
                                       qPop,   result_73[74:74],   qPopValid,
                                       result_7[7:7],   result_7[6:0]}};

  assign qPopValid = result_73[73:73];

  assign qPush = result_6[73:73];

  assign qPop = result_7[146:146];

  assign result_0 = result[149:12];

  assign result_1 = result[11:0];

  assign result_0_0 = result_0[137:73];

  assign result_0_1 = result_0[72:71];

  assign result_0_2 = result_0[70:69];

  assign result_0_3 = result_0[68:67];

  assign result_0_4 = result_0[66:2];

  assign result_0_5 = result_0[1:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = result_0_1[1:1];

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = result_0_2[1:1];

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = result_0_3[1:1];

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = result_0_5[1:1];

  assign result_0_5_1 = result_0_5[0:0];

  assign result_1_0 = result_1[11:11];

  assign result_1_1 = result_1[10:10];

  assign result_1_2 = result_1[9:9];

  assign result_1_3 = result_1[8:8];

  assign result_1_4 = result_1[7:7];

  assign result_1_5 = result_1[6:0];

  assign result_1_5_0 = result_1_5[6:6];

  assign result_1_5_1 = result_1_5[5:5];

  assign result_1_5_2 = result_1_5[4:4];

  assign result_1_5_3 = result_1_5[3:3];

  assign result_1_5_4 = result_1_5[2:2];

  assign result_1_5_5 = result_1_5[1:1];

  assign result_1_5_6 = result_1_5[0:0];


endmodule


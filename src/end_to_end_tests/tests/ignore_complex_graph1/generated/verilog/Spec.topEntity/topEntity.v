/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire signed [63:0] result_1_0
    , output wire  result_1_1
    , output wire signed [63:0] result_2_0
    , output wire  result_2_1
    , output wire signed [63:0] result_3_0
    , output wire  result_3_1
    , output wire signed [63:0] result_4_0
    , output wire  result_4_1
    , output wire signed [63:0] result_5_0
    , output wire  result_5_1
    , output wire signed [63:0] result_6_0
    , output wire  result_6_1
    , output wire signed [63:0] result_7_0
    , output wire  result_7_1
    , output wire signed [63:0] result_8_0
    , output wire  result_8_1
    );
  wire [74:0] result_9;
  // spec.hs:166:1-82
  wire  hasInput0;
  wire [585:0] result_10;
  wire [4:0] c$app_arg;
  wire  result_11;
  wire [4:0] c$app_arg_0;
  wire  result_12;
  wire [4:0] c$app_arg_1;
  wire  result_13;
  wire [4:0] c$app_arg_2;
  wire  result_14;
  wire [4:0] c$app_arg_3;
  wire  result_15;
  wire [4:0] c$app_arg_4;
  wire  result_16;
  wire [4:0] c$app_arg_5;
  wire  result_17;
  wire [4:0] c$app_arg_6;
  wire  result_18;
  wire [4:0] c$app_arg_7;
  wire  result_19;
  // spec.hs:220:1-60
  wire [7:0] tag;
  wire [71:0] result_20;
  // spec.hs:393:1-180
  reg [71:0] result_21 = {8'd4,   64'sd0};
  // spec.hs:393:1-180
  wire [71:0] t;
  wire signed [63:0] x;
  wire signed [63:0] y;
  wire signed [63:0] x_0;
  wire signed [63:0] y_0;
  // spec.hs:214:1-62
  wire [7:0] winTag;
  // spec.hs:214:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_22;
  wire [7:0] c$app_arg_8;
  wire [71:0] result_23;
  // spec.hs:450:1-205
  reg [71:0] result_24 = {8'd4,   64'sd0};
  // spec.hs:450:1-205
  wire [71:0] t_0;
  wire signed [63:0] x_1;
  wire signed [63:0] y_1;
  wire signed [63:0] x_2;
  wire signed [63:0] x_3;
  wire signed [63:0] y_2;
  wire signed [63:0] y_3;
  // spec.hs:233:1-91
  wire [71:0] c$out6_case_alt;
  // spec.hs:220:1-60
  wire signed [63:0] dta;
  // spec.hs:220:1-60
  wire [7:0] tag_0;
  // spec.hs:233:1-91
  wire [71:0] c$out6_case_alt_0;
  // spec.hs:220:1-60
  wire signed [63:0] dta_0;
  // spec.hs:220:1-60
  wire [7:0] tag_1;
  // spec.hs:214:1-62
  wire [7:0] winTag_0;
  // spec.hs:214:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_25;
  wire [7:0] c$app_arg_9;
  // spec.hs:233:1-91
  wire [71:0] c$out6_case_alt_1;
  // spec.hs:220:1-60
  wire signed [63:0] dta_1;
  // spec.hs:220:1-60
  wire [7:0] tag_2;
  wire [71:0] result_26;
  // spec.hs:440:1-155
  reg [71:0] result_27 = {8'd4,   64'sd0};
  // spec.hs:440:1-155
  wire [71:0] t_1;
  wire signed [63:0] x_4;
  wire signed [63:0] y_4;
  // spec.hs:214:1-62
  wire [7:0] winTag_1;
  // spec.hs:214:1-62
  wire signed [63:0] winData_1;
  wire [71:0] c$case_alt_1;
  wire [7:0] result_28;
  wire [7:0] c$app_arg_10;
  wire [71:0] result_29;
  // spec.hs:431:1-130
  reg [71:0] result_30 = {8'd4,   64'sd0};
  // spec.hs:431:1-130
  wire [71:0] t_2;
  wire signed [63:0] x_5;
  // spec.hs:233:1-91
  wire [71:0] c$out4_case_alt;
  wire [3:0] c$app_arg_11;
  wire  result_31;
  // spec.hs:214:1-62
  wire [7:0] winTag_2;
  // spec.hs:214:1-62
  wire signed [63:0] winData_2;
  wire [71:0] c$case_alt_2;
  wire [7:0] result_32;
  wire [7:0] c$app_arg_12;
  wire [71:0] result_33;
  // spec.hs:422:1-130
  reg [71:0] result_34 = {8'd4,   64'sd0};
  // spec.hs:422:1-130
  wire [71:0] t_3;
  wire signed [63:0] x_6;
  // spec.hs:233:1-91
  wire [71:0] c$out3_case_alt;
  wire [3:0] c$app_arg_13;
  wire  result_35;
  wire [1:0] c$app_arg_14;
  wire  result_36;
  wire [3:0] c$app_arg_15;
  wire  result_37;
  // spec.hs:214:1-62
  wire [7:0] winTag_3;
  // spec.hs:214:1-62
  wire signed [63:0] winData_3;
  wire [71:0] c$case_alt_3;
  wire [7:0] result_38;
  wire [7:0] c$app_arg_16;
  wire [71:0] result_39;
  // spec.hs:413:1-130
  reg [71:0] result_40 = {8'd4,   64'sd0};
  // spec.hs:413:1-130
  wire [71:0] t_4;
  wire signed [63:0] x_7;
  // spec.hs:233:1-91
  wire [71:0] c$out2_case_alt;
  // spec.hs:220:1-60
  wire signed [63:0] dta_2;
  // spec.hs:220:1-60
  wire [7:0] tag_3;
  wire [71:0] result_41;
  // spec.hs:404:1-130
  reg [71:0] result_42 = {8'd4,   64'sd0};
  // spec.hs:404:1-130
  wire [71:0] t_5;
  wire signed [63:0] x_8;
  // spec.hs:233:1-91
  wire [71:0] c$out1_case_alt;
  // spec.hs:220:1-60
  wire signed [63:0] dta_3;
  wire [3:0] c$app_arg_17;
  wire  result_43;
  // spec.hs:199:1-72
  wire [147:0] c$ws_app_arg;
  // spec.hs:199:1-72
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_44;
  wire [7:0] result_45;
  wire [7:0] c$app_arg_18;
  // spec.hs:199:1-72
  wire [0:0] i;
  // spec.hs:199:1-72
  wire [5:0] ws;
  wire [1:0] c$app_arg_19;
  wire  result_46;
  wire [2:0] c$app_arg_20;
  wire  result_47;
  wire [71:0] result_48;
  // spec.hs:462:1-130
  reg [71:0] result_49 = {8'd4,   64'sd0};
  // spec.hs:462:1-130
  wire [71:0] t_6;
  wire signed [63:0] x_9;
  // spec.hs:207:1-70
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:207:1-70
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire [71:0] result_50;
  // spec.hs:207:1-70
  wire [0:0] i_0;
  // spec.hs:207:1-70
  wire [5:0] ws_0;
  wire [2:0] c$app_arg_21;
  wire  result_51;
  wire [71:0] result_52;
  // spec.hs:471:1-130
  reg [71:0] result_53 = {8'd4,   64'sd0};
  // spec.hs:471:1-130
  wire [71:0] t_7;
  wire signed [63:0] x_10;
  // spec.hs:199:1-72
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:199:1-72
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire [71:0] result_54;
  wire [7:0] result_55;
  wire [7:0] c$app_arg_22;
  // spec.hs:199:1-72
  wire [0:0] i_1;
  // spec.hs:199:1-72
  wire [5:0] ws_1;
  wire [1:0] c$app_arg_23;
  wire  result_56;
  // spec.hs:233:1-91
  wire [7:0] out6Level2TagOut7;
  // spec.hs:233:1-91
  wire [7:0] out6Level2TagOut5;
  // spec.hs:233:1-91
  wire [7:0] out6Level2TagOut8;
  // spec.hs:233:1-91
  wire [7:0] out6Level2TagOut6;
  // spec.hs:233:1-91
  wire [7:0] out4Level2TagOut4;
  // spec.hs:233:1-91
  wire [7:0] out3Level2TagOut3;
  // spec.hs:233:1-91
  wire [7:0] out2Level2TagOut2;
  // spec.hs:233:1-91
  wire [7:0] out2Level2TagOut1;
  wire [239:0] c$app_arg_24;
  wire [79:0] result_57;
  // spec.hs:233:1-91
  wire [7:0] out7Level1TagIn0;
  // spec.hs:233:1-91
  wire [7:0] out7Level1TagOut7;
  // spec.hs:233:1-91
  wire [7:0] out1Level1TagOut1;
  // spec.hs:233:1-91
  wire [7:0] out1Level1TagOut0;
  wire [159:0] c$app_arg_25;
  wire [79:0] result_58;
  // spec.hs:233:1-91
  wire [79:0] curTags;
  // spec.hs:371:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_59;
  // spec.hs:371:9-81
  wire  b;
  // spec.hs:371:9-81
  wire [7:0] f1;
  wire [7:0] result_60;
  // spec.hs:233:1-91
  wire  p8;
  // spec.hs:371:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_61;
  // spec.hs:371:9-81
  wire  b_0;
  // spec.hs:371:9-81
  wire [7:0] f1_0;
  wire [7:0] result_62;
  // spec.hs:233:1-91
  wire  p2;
  // spec.hs:371:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_63;
  // spec.hs:371:9-81
  wire  b_1;
  // spec.hs:371:9-81
  wire [7:0] f1_1;
  wire [7:0] result_64;
  // spec.hs:233:1-91
  wire  p3;
  // spec.hs:371:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_65;
  // spec.hs:371:9-81
  wire  b_2;
  // spec.hs:371:9-81
  wire [7:0] f1_2;
  wire [7:0] result_66;
  // spec.hs:233:1-91
  wire  p4;
  // spec.hs:371:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_67;
  // spec.hs:371:9-81
  wire  b_3;
  // spec.hs:371:9-81
  wire [7:0] f1_3;
  wire [7:0] result_68;
  // spec.hs:233:1-91
  wire  p5;
  // spec.hs:371:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_69;
  // spec.hs:371:9-81
  wire  b_4;
  // spec.hs:371:9-81
  wire [7:0] f1_4;
  wire [7:0] result_70;
  // spec.hs:233:1-91
  wire  p7;
  // spec.hs:371:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_71;
  // spec.hs:371:9-81
  wire  b_5;
  // spec.hs:371:9-81
  wire [7:0] f1_5;
  wire [7:0] result_72;
  // spec.hs:233:1-91
  wire  p0;
  // spec.hs:371:9-81
  reg [7:0] t_15 = 8'd1;
  wire [7:0] result_73;
  // spec.hs:371:9-81
  wire  b_6;
  // spec.hs:371:9-81
  wire [7:0] f1_6;
  wire [7:0] result_74;
  // spec.hs:233:1-91
  wire  p9;
  // spec.hs:371:9-81
  reg [7:0] t_16 = 8'd1;
  wire [7:0] result_75;
  // spec.hs:371:9-81
  wire  b_7;
  // spec.hs:371:9-81
  wire [7:0] f1_7;
  wire [7:0] result_76;
  // spec.hs:233:1-91
  wire  p6;
  // spec.hs:387:1-130
  reg [143:0] result_77 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:387:1-130
  wire [143:0] t_17;
  wire [143:0] result_78;
  // spec.hs:233:1-91
  reg [64:0] c$input0Win_case_scrut = {64'sd0,   1'b0};
  wire [1:0] c$app_arg_26;
  wire  result_79;
  // spec.hs:371:9-81
  reg [7:0] t_18 = 8'd1;
  wire [7:0] result_80;
  // spec.hs:371:9-81
  wire  b_8;
  // spec.hs:371:9-81
  wire [7:0] f1_8;
  wire [7:0] result_81;
  // spec.hs:233:1-91
  wire  input0HasData;
  // spec.hs:233:1-91
  wire [64:0] input0;
  // spec.hs:378:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_82;
  wire signed [63:0] result_83;
  // spec.hs:378:1-81
  wire  b_9;
  wire signed [63:0] result_84;
  wire signed [63:0] x_11;
  wire  result_85;
  // spec.hs:233:1-91
  wire  b_10;
  wire [75:0] result_86;
  reg [73:0] c$app_arg_27 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                      1'b0,   1'b0}};
  wire [73:0] c$case_alt_4;
  wire [73:0] c$case_alt_5;
  wire [73:0] c$case_alt_6;
  reg [73:0] c$case_alt_7;
  reg [73:0] c$case_alt_8;
  wire [73:0] c$case_alt_9;
  reg  c$app_arg_28 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  reg  c$case_alt_14;
  reg  c$app_arg_29 = 1'b0;
  wire  c$case_alt_15;
  wire  c$case_alt_16;
  wire  c$case_alt_17;
  // spec.hs:99:1-78
  reg [295:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0,   1'b0,
                                                               1'b0}}};
  // spec.hs:99:1-78
  wire [295:0] c$buffer_case_alt;
  // spec.hs:99:1-78
  wire [295:0] c$buffer_case_alt_0;
  // spec.hs:99:1-78
  wire [295:0] c$buffer_case_alt_1;
  // spec.hs:99:1-78
  wire [73:0] qData;
  // spec.hs:99:1-78
  wire signed [63:0] x_12;
  // spec.hs:99:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:99:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:99:1-78
  wire  push;
  // spec.hs:99:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:99:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:99:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:99:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:99:1-78
  wire  pop;
  // spec.hs:99:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:99:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  wire [64:0] inputs;
  wire signed [63:0] x_projection_1;
  wire signed [63:0] x_projection_4;
  wire signed [63:0] x_projection_5;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [369:0] c$buffer_case_alt_sel_alt_t_1;
  wire [369:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [584:0] result;
  wire [64:0] result_0;
  wire [64:0] result_1;
  wire [64:0] result_2;
  wire [64:0] result_3;
  wire [64:0] result_4;
  wire [64:0] result_5;
  wire [64:0] result_6;
  wire [64:0] result_7;
  wire [64:0] result_8;

  assign inputs = {inputs_0,   inputs_1};

  assign result_9 = {hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | (hasInput0 | hasInput0)))))))),
                     {inputs,   {hasInput0,   hasInput0,
                                 hasInput0,   hasInput0,   hasInput0,
                                 hasInput0,   hasInput0,   hasInput0,
                                 hasInput0}}};

  assign hasInput0 = inputs[0:0];

  assign result_10 = {result_82 & (~ result_85),
                      {{dta_3,   result_19},   {dta_2,   result_18},
                       {$signed(result_40[63:0]),   result_17},
                       {$signed(result_34[63:0]),   result_16},
                       {$signed(result_30[63:0]),   result_15},
                       {dta_1,   result_14},
                       {$signed(result_24[63:0]),   result_13},
                       {dta_0,   result_12},   {dta,   result_11}}};

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= p9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  assign c$app_arg = {p9,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res};



  assign result_11 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {p8,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_12 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_10;



  assign c$app_arg_1 = {p7,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1};



  assign result_13 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_14;



  assign c$app_arg_2 = {p6,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2};



  assign result_14 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_16;



  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_18;



  assign c$app_arg_3 = {p5,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3};



  assign result_15 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_22;



  assign c$app_arg_4 = {p4,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4};



  assign result_16 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_26;



  assign c$app_arg_5 = {p3,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5};



  assign result_17 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_30;



  assign c$app_arg_6 = {p2,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6};



  assign result_18 = c$app_arg_6[1-1:0];

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_34;



  assign c$app_arg_7 = {p0,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7};



  assign result_19 = c$app_arg_7[1-1:0];

  assign tag = result_21[71:64];

  assign result_20 = result_46 ? t : result_21;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t = {t_14,   (x_0 + y_0)};

  assign x = $signed(result_44[63:0]);

  assign y = $signed(c$case_alt[63:0]);

  assign x_projection_1 = (x + y);

  assign x_0 = x_projection_1;

  assign y_0 = $signed(c$case_alt_3[63:0]);

  assign winTag = result_24[71:64];

  assign winData = $signed(result_24[63:0]);

  assign c$case_alt = (result_22 == winTag) ? {t_13,
                                               winData} : {t_13,   64'sd0};

  assign result_22 = (t_13 > 8'd1) ? c$app_arg_8 : (c$app_arg_8 + 8'd3);

  assign c$app_arg_8 = t_13 - 8'd1;

  assign result_23 = result_37 ? t_0 : result_24;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_24_register
    if ( rst) begin
      result_24 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_24 <= result_23;
    end
  end
  // register end

  assign t_0 = {out6Level2TagOut6,   (x_3 + y_3)};

  assign x_1 = $signed(c$out6_case_alt_1[63:0]);

  assign y_1 = $signed(c$case_alt_0[63:0]);

  assign x_projection_4 = (x_1 + y_1);

  assign x_2 = x_projection_4;

  assign x_projection_5 = (x_2 + y_2);

  assign x_3 = x_projection_5;

  assign y_2 = $signed(c$out6_case_alt_0[63:0]);

  assign y_3 = $signed(c$out6_case_alt[63:0]);

  assign c$out6_case_alt = (tag_0 == out6Level2TagOut8) ? {tag_0,
                                                           dta} : {out6Level2TagOut8,   64'sd0};

  assign dta = $signed(result_53[63:0]);

  assign tag_0 = result_53[71:64];

  assign c$out6_case_alt_0 = (tag_1 == out6Level2TagOut7) ? {tag_1,
                                                             dta_0} : {out6Level2TagOut7,   64'sd0};

  assign dta_0 = $signed(result_49[63:0]);

  assign tag_1 = result_49[71:64];

  assign winTag_0 = result_24[71:64];

  assign winData_0 = $signed(result_24[63:0]);

  assign c$case_alt_0 = (result_25 == winTag_0) ? {out6Level2TagOut6,
                                                   winData_0} : {out6Level2TagOut6,   64'sd0};

  assign result_25 = (out6Level2TagOut6 > 8'd1) ? c$app_arg_9 : (c$app_arg_9 + 8'd3);

  assign c$app_arg_9 = out6Level2TagOut6 - 8'd1;

  assign c$out6_case_alt_1 = (tag_2 == out6Level2TagOut5) ? {tag_2,
                                                             dta_1} : {out6Level2TagOut5,   64'sd0};

  assign dta_1 = $signed(result_27[63:0]);

  assign tag_2 = result_27[71:64];

  assign result_26 = result_36 ? t_1 : result_27;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_27 <= result_26;
    end
  end
  // register end

  assign t_1 = {t_16,   (x_4 + y_4)};

  assign x_4 = $signed(c$case_alt_2[63:0]);

  assign y_4 = $signed(c$case_alt_1[63:0]);

  assign winTag_1 = result_30[71:64];

  assign winData_1 = $signed(result_30[63:0]);

  assign c$case_alt_1 = (result_28 == winTag_1) ? {t_12,
                                                   winData_1} : {t_12,   64'sd0};

  assign result_28 = (t_12 > 8'd1) ? c$app_arg_10 : (c$app_arg_10 + 8'd3);

  assign c$app_arg_10 = t_12 - 8'd1;

  assign result_29 = result_31 ? t_2 : result_30;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_30_register
    if ( rst) begin
      result_30 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_30 <= result_29;
    end
  end
  // register end

  assign t_2 = {out4Level2TagOut4,
                (x_5 + 64'sd1)};

  assign x_5 = $signed(c$out4_case_alt[63:0]);

  assign c$out4_case_alt = (tag_3 == out2Level2TagOut1) ? {tag_3,
                                                           dta_2} : {out2Level2TagOut1,   64'sd0};

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_37;



  assign c$app_arg_11 = {p5,
                         iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_8};



  assign result_31 = c$app_arg_11[1-1:0];

  assign winTag_2 = result_34[71:64];

  assign winData_2 = $signed(result_34[63:0]);

  assign c$case_alt_2 = (result_32 == winTag_2) ? {t_11,
                                                   winData_2} : {t_11,   64'sd0};

  assign result_32 = (t_11 > 8'd1) ? c$app_arg_12 : (c$app_arg_12 + 8'd3);

  assign c$app_arg_12 = t_11 - 8'd1;

  assign result_33 = result_35 ? t_3 : result_34;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_34_register
    if ( rst) begin
      result_34 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_34 <= result_33;
    end
  end
  // register end

  assign t_3 = {out3Level2TagOut3,
                (x_6 + 64'sd1)};

  assign x_6 = $signed(c$out3_case_alt[63:0]);

  assign c$out3_case_alt = (tag_3 == out2Level2TagOut1) ? {tag_3,
                                                           dta_2} : {out2Level2TagOut1,   64'sd0};

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_40;



  assign c$app_arg_13 = {p4,
                         iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_9};



  assign result_35 = c$app_arg_13[1-1:0];

  wire  iterateI_ho1_0_res_10;
  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_41;



  assign c$app_arg_14 = {p6,
                         iterateI_ho1_0_res_10};



  assign result_36 = c$app_arg_14[1-1:0];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_10;
  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_44;



  assign c$app_arg_15 = {p7,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10};



  assign result_37 = c$app_arg_15[1-1:0];

  assign winTag_3 = result_40[71:64];

  assign winData_3 = $signed(result_40[63:0]);

  assign c$case_alt_3 = (result_38 == winTag_3) ? {t_10,
                                                   winData_3} : {t_10,   64'sd0};

  assign result_38 = (t_10 > 8'd1) ? c$app_arg_16 : (c$app_arg_16 + 8'd3);

  assign c$app_arg_16 = t_10 - 8'd1;

  assign result_39 = result_43 ? t_4 : result_40;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_40_register
    if ( rst) begin
      result_40 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_40 <= result_39;
    end
  end
  // register end

  assign t_4 = {out2Level2TagOut2,
                (x_7 + 64'sd1)};

  assign x_7 = $signed(c$out2_case_alt[63:0]);

  assign c$out2_case_alt = (tag_3 == out2Level2TagOut1) ? {tag_3,
                                                           dta_2} : {out2Level2TagOut1,   64'sd0};

  assign dta_2 = $signed(result_42[63:0]);

  assign tag_3 = result_42[71:64];

  assign result_41 = result_47 ? t_5 : result_42;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_5 = {out1Level1TagOut1,
                (x_8 + 64'sd1)};

  assign x_8 = $signed(c$out1_case_alt[63:0]);

  assign c$out1_case_alt = (tag == out1Level1TagOut0) ? {tag,
                                                         dta_3} : {out1Level1TagOut0,   64'sd0};

  assign dta_3 = $signed(result_21[63:0]);

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_11;
  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_47;



  assign c$app_arg_17 = {p3,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11};



  assign result_43 = c$app_arg_17[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_77[i_2*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_2*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_3*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_3[0+:1];
    wire [1:0] c$case_alt_21;
    // spec.hs:199:1-72
    wire [7:0] t_20;
    // spec.hs:199:1-72
    wire [71:0] x_14;
    assign map_out = c$case_alt_21;

    assign c$case_alt_21 = (t_20 == result_45) ? {1'b1,map_index} : map_in[1:0];

    assign t_20 = x_14[71:64];

    assign x_14 = map_in[73:2];


    assign c$ws_app_arg_0[i_3*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array
    assign vecArray[(2-1)-i_4] = result_77[i_4*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_44 = c$case_scrut_0[1:1] ? {t_18,
                                            $signed(c$case_scrut[63:0])} : {t_18,
                                                                            64'sd0};

  assign result_45 = (t_18 > 8'd2) ? c$app_arg_18 : (c$app_arg_18 + 8'd3);

  assign c$app_arg_18 = t_18 - 8'd2;

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_13;
  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_48;



  assign c$app_arg_19 = {p0,
                         iterateI_ho1_0_res_13};



  assign result_46 = c$app_arg_19[1-1:0];

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_12;
  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_50;



  assign c$app_arg_20 = {p2,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_12};



  assign result_47 = c$app_arg_20[1-1:0];

  assign result_48 = result_51 ? t_6 : result_49;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_49_register
    if ( rst) begin
      result_49 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_49 <= result_48;
    end
  end
  // register end

  assign t_6 = {out7Level1TagOut7,
                (x_9 + 64'sd1)};

  assign x_9 = $signed(result_50[63:0]);

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 2; i_6 = i_6 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_77[i_6*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_6*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_6*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_7*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_7[0+:1];
    wire [1:0] c$case_alt_22;
    // spec.hs:207:1-70
    wire [7:0] t_21;
    // spec.hs:207:1-70
    wire [71:0] x_15;
    assign map_out_0 = c$case_alt_22;

    assign c$case_alt_22 = (t_21 == out7Level1TagIn0) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_21 = x_15[71:64];

    assign x_15 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_7*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_8] = result_77[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_50 = c$case_scrut_2[1:1] ? {out7Level1TagIn0,
                                            $signed(c$case_scrut_1[63:0])} : {out7Level1TagIn0,
                                                                              64'sd0};

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_13;
  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_51;



  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_52;



  assign c$app_arg_21 = {p8,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_13};



  assign result_51 = c$app_arg_21[1-1:0];

  assign result_52 = result_56 ? t_7 : result_53;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_53_register
    if ( rst) begin
      result_53 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_53 <= result_52;
    end
  end
  // register end

  assign t_7 = {t_15,   (x_10 + 64'sd1)};

  assign x_10 = $signed(result_54[63:0]);

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 2; i_9 = i_9 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_77[i_9*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_9*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_9*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_10*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_10[0+:1];
    wire [1:0] c$case_alt_23;
    // spec.hs:199:1-72
    wire [7:0] t_22;
    // spec.hs:199:1-72
    wire [71:0] x_16;
    assign map_out_1 = c$case_alt_23;

    assign c$case_alt_23 = (t_22 == result_55) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_22 = x_16[71:64];

    assign x_16 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_10*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11=i_11+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_11] = result_77[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_54 = c$case_scrut_4[1:1] ? {t_18,
                                            $signed(c$case_scrut_3[63:0])} : {t_18,
                                                                              64'sd0};

  assign result_55 = (t_18 > 8'd1) ? c$app_arg_22 : (c$app_arg_22 + 8'd3);

  assign c$app_arg_22 = t_18 - 8'd1;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_16;
  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= p9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_53;



  assign c$app_arg_23 = {p9,
                         iterateI_ho1_0_res_16};



  assign result_56 = c$app_arg_23[1-1:0];

  assign out6Level2TagOut7 = result_57[15:8];

  assign out6Level2TagOut5 = result_57[31:24];

  assign out6Level2TagOut8 = result_57[7:0];

  assign out6Level2TagOut6 = result_57[23:16];

  assign out4Level2TagOut4 = result_57[39:32];

  assign out3Level2TagOut3 = result_57[47:40];

  assign out2Level2TagOut2 = result_57[55:48];

  assign out2Level2TagOut1 = result_57[63:56];

  wire [79:0] iterateI_ho1_0_res_17;
  wire [79:0] iterateI_ho1_1_res_14;
  reg [79:0] c$bb_res_res_54 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_54;



  reg [79:0] c$bb_res_res_55 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_55;



  assign c$app_arg_24 = {curTags,
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_14};



  assign result_57 = c$app_arg_24[80-1:0];

  assign out7Level1TagIn0 = result_58[79:72];

  assign out7Level1TagOut7 = result_58[15:8];

  assign out1Level1TagOut1 = result_58[63:56];

  assign out1Level1TagOut0 = result_58[71:64];

  wire [79:0] iterateI_ho1_0_res_18;
  reg [79:0] c$bb_res_res_56 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_56;



  assign c$app_arg_25 = {curTags,
                         iterateI_ho1_0_res_18};



  assign result_58 = c$app_arg_25[80-1:0];

  assign curTags = {t_18,   t_14,   t_9,   t_10,
                    t_11,   t_12,   t_16,   t_13,   t_8,   t_15};

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_59;
    end
  end
  // register end

  assign result_59 = p8 ? result_60 : t_8;

  assign b = t_8 == 8'd3;

  assign f1 = t_8 + 8'd1;

  assign result_60 = b ? 8'd1 : f1;

  assign p8 = result_86[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_61;
    end
  end
  // register end

  assign result_61 = p2 ? result_62 : t_9;

  assign b_0 = t_9 == 8'd3;

  assign f1_0 = t_9 + 8'd1;

  assign result_62 = b_0 ? 8'd1 : f1_0;

  assign p2 = result_86[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_63;
    end
  end
  // register end

  assign result_63 = p3 ? result_64 : t_10;

  assign b_1 = t_10 == 8'd3;

  assign f1_1 = t_10 + 8'd1;

  assign result_64 = b_1 ? 8'd1 : f1_1;

  assign p3 = result_86[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_65;
    end
  end
  // register end

  assign result_65 = p4 ? result_66 : t_11;

  assign b_2 = t_11 == 8'd3;

  assign f1_2 = t_11 + 8'd1;

  assign result_66 = b_2 ? 8'd1 : f1_2;

  assign p4 = result_86[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_67;
    end
  end
  // register end

  assign result_67 = p5 ? result_68 : t_12;

  assign b_3 = t_12 == 8'd3;

  assign f1_3 = t_12 + 8'd1;

  assign result_68 = b_3 ? 8'd1 : f1_3;

  assign p5 = result_86[4:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_69;
    end
  end
  // register end

  assign result_69 = p7 ? result_70 : t_13;

  assign b_4 = t_13 == 8'd3;

  assign f1_4 = t_13 + 8'd1;

  assign result_70 = b_4 ? 8'd1 : f1_4;

  assign p7 = result_86[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_71;
    end
  end
  // register end

  assign result_71 = p0 ? result_72 : t_14;

  assign b_5 = t_14 == 8'd3;

  assign f1_5 = t_14 + 8'd1;

  assign result_72 = b_5 ? 8'd1 : f1_5;

  assign p0 = result_86[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_15_register
    if ( rst) begin
      t_15 <= 8'd1;
    end else if (en) begin
      t_15 <= result_73;
    end
  end
  // register end

  assign result_73 = p9 ? result_74 : t_15;

  assign b_6 = t_15 == 8'd3;

  assign f1_6 = t_15 + 8'd1;

  assign result_74 = b_6 ? 8'd1 : f1_6;

  assign p9 = result_86[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_16_register
    if ( rst) begin
      t_16 <= 8'd1;
    end else if (en) begin
      t_16 <= result_75;
    end
  end
  // register end

  assign result_75 = p6 ? result_76 : t_16;

  assign b_7 = t_16 == 8'd3;

  assign f1_7 = t_16 + 8'd1;

  assign result_76 = b_7 ? 8'd1 : f1_7;

  assign p6 = result_86[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_77_register
    if ( rst) begin
      result_77 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_77 <= result_78;
    end
  end
  // register end

  assign t_projection_2 = ({result_77,{t_18,   $signed(c$input0Win_case_scrut[64:1])}});

  assign t_17 = t_projection_2[143:0];

  assign result_78 = result_79 ? t_17 : result_77;

  // delay begin
  always @(posedge clk) begin : c$input0Win_case_scrut_delay
    if (en) begin
      c$input0Win_case_scrut <= input0;
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_19;
  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_57;



  assign c$app_arg_26 = {input0HasData,
                         iterateI_ho1_0_res_19};



  assign result_79 = c$app_arg_26[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_18_register
    if ( rst) begin
      t_18 <= 8'd1;
    end else if (en) begin
      t_18 <= result_80;
    end
  end
  // register end

  assign result_80 = input0HasData ? result_81 : t_18;

  assign b_8 = t_18 == 8'd3;

  assign f1_8 = t_18 + 8'd1;

  assign result_81 = b_8 ? 8'd1 : f1_8;

  assign input0HasData = input0[0:0];

  assign input0 = result_86[73:9];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_83;
    end
  end
  // register end

  assign result_82 = toWait == (64'sd0);

  assign result_83 = result_85 ? (64'sd2) : result_84;

  assign b_9 = toWait > (64'sd0);

  assign result_84 = b_9 ? ((x_11 - 64'sd1)) : toWait;

  assign x_11 = toWait;

  assign result_85 = b_10 ? 1'b1 : 1'b0;

  assign b_10 = result_82 & result_86[74:74];

  assign result_86 = {c$app_arg_29,
                      c$app_arg_28,   c$app_arg_27};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_27_register
    if ( rst) begin
      c$app_arg_27 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                        1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_27 <= c$case_alt_4;
    end
  end
  // register end

  assign c$case_alt_4 = push ? c$case_alt_5 : c$case_alt_6;

  assign c$case_alt_5 = pop ? c$case_alt_7 : {{64'sd0,
                                               1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_6 = pop ? c$case_alt_8 : {{64'sd0,
                                               1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_12)
      64'sd0 : c$case_alt_7 = qData;
      default : c$case_alt_7 = c$case_alt_9;
    endcase
  end

  always @(*) begin
    case(x_12)
      64'sd0 : c$case_alt_8 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0,   1'b0}};
      default : c$case_alt_8 = c$case_alt_9;
    endcase
  end

  // index begin
  wire [73:0] vecArray_2 [0:4-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 4; i_12=i_12+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_12] = buffer[i_12*74+:74];
  end
  endgenerate
  assign c$case_alt_9 = vecArray_2[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_28_register
    if ( rst) begin
      c$app_arg_28 <= 1'b0;
    end else if (en) begin
      c$app_arg_28 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = push ? c$case_alt_11 : c$case_alt_12;

  assign c$case_alt_11 = pop ? 1'b1 : c$case_alt_13;

  assign c$case_alt_12 = pop ? c$case_alt_14 : c$case_alt_13;

  assign c$case_alt_13 = pop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_12)
      64'sd0 : c$case_alt_14 = 1'b0;
      default : c$case_alt_14 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_29_register
    if ( rst) begin
      c$app_arg_29 <= 1'b0;
    end else if (en) begin
      c$app_arg_29 <= c$case_alt_15;
    end
  end
  // register end

  assign c$case_alt_15 = push ? c$case_alt_16 : 1'b0;

  assign c$case_alt_16 = pop ? 1'b1 : c$case_alt_17;

  assign c$tte_rhs = (x_12 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_17 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = push ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = pop ? c$buffer_case_alt_sel_alt_t_1[369:74] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[369:74];

  assign qData = result_9[73:0];

  assign x_12 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = push ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign push = result_9[74:74];

  assign c$cursor_case_alt_0 = pop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_12 + 64'sd1));

  assign c$tte_rhs_0 = (x_12 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = pop ? c$cursor_case_alt_3 : cursor;

  assign pop = result_10[585:585];

  always @(*) begin
    case(x_12)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_12 - 64'sd1);

  assign result = result_10[584:0];

  assign result_0 = result[584:520];

  assign result_1 = result[519:455];

  assign result_2 = result[454:390];

  assign result_3 = result[389:325];

  assign result_4 = result[324:260];

  assign result_5 = result[259:195];

  assign result_6 = result[194:130];

  assign result_7 = result[129:65];

  assign result_8 = result[64:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = $signed(result_1[64:1]);

  assign result_1_1 = result_1[0:0];

  assign result_2_0 = $signed(result_2[64:1]);

  assign result_2_1 = result_2[0:0];

  assign result_3_0 = $signed(result_3[64:1]);

  assign result_3_1 = result_3[0:0];

  assign result_4_0 = $signed(result_4[64:1]);

  assign result_4_1 = result_4[0:0];

  assign result_5_0 = $signed(result_5[64:1]);

  assign result_5_1 = result_5[0:0];

  assign result_6_0 = $signed(result_6[64:1]);

  assign result_6_1 = result_6[0:0];

  assign result_7_0 = $signed(result_7[64:1]);

  assign result_7_1 = result_7[0:0];

  assign result_8_0 = $signed(result_8[64:1]);

  assign result_8_1 = result_8[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    );
  wire [134:0] result_2;
  // spec.hs:182:1-82
  wire  pIn0;
  // spec.hs:182:1-82
  wire  pIn1;
  wire [68:0] result_3;
  // spec.hs:65:34-42
  wire  x1;
  // spec.hs:65:34-42
  wire  x0;
  wire [3:0] c$app_arg;
  wire  result_4;
  // spec.hs:225:1-55
  wire [7:0] winTag;
  wire [71:0] result_5;
  // spec.hs:65:34-42
  wire  x0_0;
  // spec.hs:65:34-42
  wire  x1_0;
  // spec.hs:336:1-147
  reg [71:0] result_6 = {8'd5,   64'sd0};
  // spec.hs:336:1-147
  wire [71:0] t;
  wire signed [63:0] x;
  wire signed [63:0] y;
  // spec.hs:210:1-65
  wire signed [63:0] eta3;
  // spec.hs:210:1-65
  wire [224:0] c$ws_app_arg;
  // spec.hs:210:1-65
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire signed [63:0] result_7;
  wire [7:0] result_8;
  wire [7:0] c$app_arg_0;
  // spec.hs:210:1-65
  wire [1:0] i;
  // spec.hs:210:1-65
  wire [11:0] ws;
  wire signed [63:0] y_0;
  wire signed [63:0] c$ds1_case_alt;
  // spec.hs:210:1-65
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:210:1-65
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_9;
  wire [7:0] result_10;
  wire [7:0] c$app_arg_1;
  // spec.hs:210:1-65
  wire [1:0] i_0;
  // spec.hs:210:1-65
  wire [11:0] ws_0;
  // spec.hs:225:1-55
  wire signed [63:0] winData;
  wire signed [63:0] x_0;
  // spec.hs:210:1-65
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:210:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_11;
  wire [7:0] result_12;
  wire [7:0] c$app_arg_2;
  // spec.hs:210:1-65
  wire [0:0] i_1;
  // spec.hs:210:1-65
  wire [5:0] ws_1;
  wire [7:0] result_13;
  wire [7:0] c$app_arg_3;
  // spec.hs:218:1-63
  wire [147:0] c$ws_app_arg_5;
  // spec.hs:218:1-63
  wire [3:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire signed [63:0] result_14;
  // spec.hs:218:1-63
  wire [0:0] i_2;
  // spec.hs:218:1-63
  wire [5:0] ws_2;
  wire [143:0] result_15;
  // spec.hs:330:1-135
  reg [143:0] result_16 = {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:330:1-135
  wire  b;
  // spec.hs:330:1-135
  wire [143:0] t_0;
  // spec.hs:252:1-109
  reg signed [63:0] c$input1Win_app_arg = (64'sd0);
  wire [215:0] result_17;
  // spec.hs:325:1-135
  reg [215:0] result_18 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:325:1-135
  wire  b_0;
  // spec.hs:325:1-135
  wire [215:0] t_1;
  // spec.hs:252:1-109
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  // spec.hs:252:1-109
  wire [129:0] inputs_2;
  wire [5:0] c$app_arg_4;
  wire [1:0] result_19;
  wire [47:0] c$app_arg_5;
  wire [23:0] result_20;
  // spec.hs:315:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_21;
  // spec.hs:315:9-81
  wire  b_1;
  // spec.hs:315:9-81
  wire [7:0] f1;
  wire [7:0] result_22;
  // spec.hs:252:1-109
  wire  c$ds3_case_alt;
  // spec.hs:65:34-42
  wire  x1_1;
  // spec.hs:65:34-42
  wire  x0_1;
  // spec.hs:252:1-109
  wire [1:0] pOut0;
  wire [1:0] c$app_arg_6;
  wire  result_23;
  // spec.hs:315:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_24;
  // spec.hs:315:9-81
  wire  b_2;
  // spec.hs:315:9-81
  wire [7:0] f1_0;
  wire [7:0] result_25;
  // spec.hs:252:1-109
  wire  pIn1_0;
  wire [1:0] c$app_arg_7;
  wire  result_26;
  // spec.hs:315:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_27;
  // spec.hs:315:9-81
  wire  b_3;
  // spec.hs:315:9-81
  wire [7:0] f1_1;
  wire [7:0] result_28;
  // spec.hs:252:1-109
  wire  pIn0_0;
  // spec.hs:252:1-109
  wire [3:0] pacings;
  wire [135:0] result_29;
  reg [133:0] c$app_arg_8 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}};
  wire [133:0] c$case_alt;
  wire [133:0] c$case_alt_0;
  wire [133:0] c$case_alt_1;
  reg [133:0] c$case_alt_2;
  reg [133:0] c$case_alt_3;
  wire [133:0] c$case_alt_4;
  reg  c$app_arg_9 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_10 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:115:1-78
  reg [267:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}}};
  // spec.hs:115:1-78
  wire [267:0] c$buffer_case_alt;
  // spec.hs:115:1-78
  wire [267:0] c$buffer_case_alt_0;
  // spec.hs:115:1-78
  wire [267:0] c$buffer_case_alt_1;
  // spec.hs:115:1-78
  wire [133:0] qData;
  // spec.hs:115:1-78
  wire signed [63:0] x_1;
  // spec.hs:115:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:115:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:115:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:115:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:115:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:115:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:115:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:115:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:351:1-134
  wire  qPopValid;
  // spec.hs:351:1-134
  wire  qPush;
  // spec.hs:351:1-134
  wire  qPop;
  wire [129:0] inputs;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [3:0] c$vec2_2;
  wire [215:0] t_projection_3;
  wire [287:0] t_projection_4;
  wire signed [63:0] c$tte_rhs;
  wire [401:0] c$buffer_case_alt_sel_alt_t_1;
  wire [401:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [71:0] result;
  wire [64:0] result_0;
  wire [6:0] result_1;
  wire [2:0] result_1_4;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = {inputs[65:65] | inputs[0:0],
                     {inputs,   {pIn0,   pIn1,   {pIn0,   pIn1}}}};

  assign pIn0 = inputs[65:65];

  assign pIn1 = inputs[0:0];

  assign result_3 = {{1'b1,   {winData,
                               result_4}},   {result_26,   result_23,
                                              x0 & x1}};

  assign x1 = result_19[0:0];

  assign x0 = result_19[1:1];

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= c$ds3_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  assign c$app_arg = {c$ds3_case_alt,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res};



  assign result_4 = c$app_arg[1-1:0];

  assign winTag = result_6[71:64];

  assign result_5 = (x0_0 & x1_0) ? t : result_6;

  assign x0_0 = result_19[1:1];

  assign x1_0 = result_19[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_6_register
    if ( rst) begin
      result_6 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_6 <= result_5;
    end
  end
  // register end

  assign t = {result_20[7:0],   (x + y)};

  assign x = result_14;

  assign y = result_7;

  assign eta3 = (x_0 + y_0);

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_3;
  generate
  for (i_3 = 0; i_3 < 3; i_3 = i_3 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_18[i_3*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_3*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_3*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_4;
  generate
  for (i_4=0; i_4 < 3; i_4 = i_4 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_4*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_4[0+:2];
    wire [2:0] c$case_alt_13;
    // spec.hs:210:1-65
    wire [7:0] t_6;
    // spec.hs:210:1-65
    wire [71:0] x_3;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_6 == result_8) ? {1'b1,map_index} : map_in[2:0];

    assign t_6 = x_3[71:64];

    assign x_3 = map_in[74:3];


    assign c$ws_app_arg_0[i_4*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_5;
  generate
  for (i_5=0; i_5 < 3; i_5=i_5+1) begin : mk_array
    assign vecArray[(3-1)-i_5] = result_18[i_5*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_7 = c$case_scrut_0[2:2] ? $signed(c$case_scrut[63:0]) : eta3;

  assign result_8 = (result_20[23:16] > 8'd2) ? c$app_arg_0 : (c$app_arg_0 + 8'd4);

  assign c$app_arg_0 = result_20[23:16] - 8'd2;

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  assign y_0 = c$ds1_case_alt;

  assign c$ds1_case_alt = (result_13 == winTag) ? winData : result_9;

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_7;
  generate
  for (i_7 = 0; i_7 < 3; i_7 = i_7 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_18[i_7*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_7*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_7*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_8;
  generate
  for (i_8=0; i_8 < 3; i_8 = i_8 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_8*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_8[0+:2];
    wire [2:0] c$case_alt_14;
    // spec.hs:210:1-65
    wire [7:0] t_7;
    // spec.hs:210:1-65
    wire [71:0] x_4;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_7 == result_10) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_7 = x_4[71:64];

    assign x_4 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_8*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_9;
  generate
  for (i_9=0; i_9 < 3; i_9=i_9+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_9] = result_18[i_9*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_9 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : (64'sd20);

  assign result_10 = (result_20[23:16] > 8'd1) ? c$app_arg_1 : (c$app_arg_1 + 8'd4);

  assign c$app_arg_1 = result_20[23:16] - 8'd1;

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  assign winData = $signed(result_6[63:0]);

  assign x_0 = result_11;

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 2; i_10 = i_10 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_16[i_10*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_10*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_10*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11 = i_11 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_11*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_11[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:210:1-65
    wire [7:0] t_8;
    // spec.hs:210:1-65
    wire [71:0] x_5;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_8 == result_12) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_8 = x_5[71:64];

    assign x_5 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_11*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 2; i_12=i_12+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_12] = result_16[i_12*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_11 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd10);

  assign result_12 = (result_20[15:8] > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd4);

  assign c$app_arg_2 = result_20[15:8] - 8'd1;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign result_13 = (result_20[7:0] > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd4);

  assign c$app_arg_3 = result_20[7:0] - 8'd1;

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_13;
  generate
  for (i_13 = 0; i_13 < 2; i_13 = i_13 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_16[i_13*72+:72];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_13*2+:2];
    wire [73:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_13*74+:74] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_14;
  generate
  for (i_14=0; i_14 < 2; i_14 = i_14 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [73:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_14*74+:74];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_14[0+:1];
    wire [1:0] c$case_alt_16;
    // spec.hs:210:1-65
    wire [7:0] t_9;
    // spec.hs:210:1-65
    wire [71:0] x_6;
    assign map_out_2 = c$case_alt_16;

    assign c$case_alt_16 = (t_9 == result_20[15:8]) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_9 = x_6[71:64];

    assign x_6 = map_in_2[73:2];


    assign c$ws_app_arg_6[i_14*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:2-1];
  genvar i_15;
  generate
  for (i_15=0; i_15 < 2; i_15=i_15+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_15] = result_16[i_15*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_14 = c$case_scrut_6[1:1] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  assign result_15 = b ? t_0 : result_16;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_16 <= result_15;
    end
  end
  // register end

  assign b = result_23;

  assign t_projection_3 = ({result_16,{t_3,   c$input1Win_app_arg}});

  assign t_0 = t_projection_3[143:0];

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  assign result_17 = b_0 ? t_1 : result_18;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_18_register
    if ( rst) begin
      result_18 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_18 <= result_17;
    end
  end
  // register end

  assign b_0 = result_26;

  assign t_projection_4 = ({result_18,{t_4,   c$input0Win_app_arg}});

  assign t_1 = t_projection_4[215:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(inputs_2[129:66]);
    end
  end
  // delay end

  assign inputs_2 = result_29[133:4];

  wire [1:0] iterateI_ho1_0_res_0;
  wire [1:0] iterateI_ho1_1_res_0;
  reg [1:0] c$bb_res_res_2 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_2;



  reg [1:0] c$bb_res_res_3 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_3;



  assign c$app_arg_4 = {pOut0,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0};



  assign result_19 = c$app_arg_4[2-1:0];

  wire [23:0] iterateI_ho1_0_arg0;
  wire [23:0] iterateI_ho1_0_res_1;
  assign iterateI_ho1_0_arg0 = {t_4,   t_3,
                                t_2};

  reg [23:0] c$bb_res_res_4 = {8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_4;



  assign c$app_arg_5 = {{t_4,   t_3,   t_2},
                        iterateI_ho1_0_res_1};



  assign result_20 = c$app_arg_5[24-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_21;
    end
  end
  // register end

  assign result_21 = c$ds3_case_alt ? result_22 : t_2;

  assign b_1 = t_2 == 8'd4;

  assign f1 = t_2 + 8'd1;

  assign result_22 = b_1 ? 8'd1 : f1;

  assign c$ds3_case_alt = x0_1 & x1_1;

  assign x1_1 = pOut0[0:0];

  assign x0_1 = pOut0[1:1];

  assign pOut0 = pacings[1:0];

  wire  iterateI_ho1_0_res_2;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_5;



  assign c$app_arg_6 = {pIn1_0,
                        iterateI_ho1_0_res_2};



  assign result_23 = c$app_arg_6[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_24;
    end
  end
  // register end

  assign result_24 = pIn1_0 ? result_25 : t_3;

  assign b_2 = t_3 == 8'd4;

  assign f1_0 = t_3 + 8'd1;

  assign result_25 = b_2 ? 8'd1 : f1_0;

  assign pIn1_0 = pacings[2:2];

  wire  iterateI_ho1_0_res_3;
  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_6;



  assign c$app_arg_7 = {pIn0_0,
                        iterateI_ho1_0_res_3};



  assign result_26 = c$app_arg_7[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_27;
    end
  end
  // register end

  assign result_27 = pIn0_0 ? result_28 : t_4;

  assign b_3 = t_4 == 8'd4;

  assign f1_1 = t_4 + 8'd1;

  assign result_28 = b_3 ? 8'd1 : f1_1;

  assign pIn0_0 = pacings[3:3];

  assign pacings = result_29[3:0];

  assign result_29 = {c$app_arg_10,
                      c$app_arg_9,   c$app_arg_8};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}};
    end else if (en) begin
      c$app_arg_8 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                {1'b0,   1'b0}}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                {1'b0,   1'b0}}};

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,
                                                                       1'b0}}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [133:0] vecArray_3 [0:2-1];
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16=i_16+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_16] = buffer[i_16*134+:134];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_3[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_9_register
    if ( rst) begin
      c$app_arg_9 <= 1'b0;
    end else if (en) begin
      c$app_arg_9 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_10_register
    if ( rst) begin
      c$app_arg_10 <= 1'b0;
    end else if (en) begin
      c$app_arg_10 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_1 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   {1'b0,   1'b0}}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[401:134] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[401:134];

  assign qData = result_2[133:0];

  assign x_1 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_1 + 64'sd1));

  assign c$tte_rhs_0 = (x_1 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_1)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_1 - 64'sd1);

  assign result = {result_3[67:3],   {qPush,
                                      qPop,   result_29[135:135],   qPopValid,
                                      result_3[2:0]}};

  assign qPopValid = result_29[134:134];

  assign qPush = result_2[134:134];

  assign qPop = result_3[68:68];

  assign result_0 = result[71:7];

  assign result_1 = result[6:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = result_1[6:6];

  assign result_1_1 = result_1[5:5];

  assign result_1_2 = result_1[4:4];

  assign result_1_3 = result_1[3:3];

  assign result_1_4 = result_1[2:0];

  assign result_1_4_0 = result_1_4[2:2];

  assign result_1_4_1 = result_1_4[1:1];

  assign result_1_4_2 = result_1_4[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0
    , output wire  result_0_1
    , output wire signed [63:0] result_1_0
    , output wire  result_1_1
    , output wire signed [63:0] result_2_0
    , output wire  result_2_1
    , output wire signed [63:0] result_3_0
    , output wire  result_3_1
    , output wire signed [63:0] result_4_0
    , output wire  result_4_1
    , output wire signed [63:0] result_5_0
    , output wire  result_5_1
    , output wire signed [63:0] result_6_0
    , output wire  result_6_1
    , output wire signed [63:0] result_7_0
    , output wire  result_7_1
    , output wire signed [63:0] result_8_0
    , output wire  result_8_1
    , output wire signed [63:0] result_9_0
    , output wire  result_9_1
    , output wire signed [63:0] result_10_0
    , output wire  result_10_1
    , output wire signed [63:0] result_11_0
    , output wire  result_11_1
    , output wire signed [63:0] result_12_0
    , output wire  result_12_1
    , output wire signed [63:0] result_13_0
    , output wire  result_13_1
    );
  wire signed [63:0] result_14;
  wire signed [63:0] x;
  reg signed [63:0] result_15 = (64'sd0);
  wire [80:0] result_16;
  // spec.hs:293:1-82
  wire  hasInput0;
  // spec.hs:293:1-82
  wire  pIn0;
  // spec.hs:293:1-82
  wire  timer0Over;
  wire [910:0] result_17;
  wire [5:0] c$app_arg;
  wire  result_18;
  wire [5:0] c$app_arg_0;
  wire  result_19;
  // spec.hs:348:1-63
  wire [147:0] c$ws_app_arg;
  // spec.hs:348:1-63
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire signed [63:0] result_20;
  // spec.hs:348:1-63
  wire [0:0] i;
  // spec.hs:348:1-63
  wire [5:0] ws;
  wire [5:0] c$app_arg_1;
  wire  result_21;
  wire [599:0] c$app_arg_2;
  wire [119:0] result_22;
  wire [5:0] c$app_arg_3;
  wire  result_23;
  wire [5:0] c$app_arg_4;
  wire  result_24;
  wire [5:0] c$app_arg_5;
  wire  result_25;
  wire [5:0] c$app_arg_6;
  wire  result_26;
  wire [5:0] c$app_arg_7;
  wire  result_27;
  wire [5:0] c$app_arg_8;
  wire  result_28;
  wire [5:0] c$app_arg_9;
  wire  result_29;
  wire [5:0] c$app_arg_10;
  wire  result_30;
  wire [5:0] c$app_arg_11;
  wire  result_31;
  wire [5:0] c$app_arg_12;
  wire  result_32;
  wire [5:0] c$app_arg_13;
  wire  result_33;
  // spec.hs:361:1-53
  wire [7:0] tag;
  wire [71:0] result_34;
  // spec.hs:140:34-42
  wire  x_0;
  // spec.hs:673:1-147
  reg [71:0] result_35 = {8'd4,   64'sd0};
  // spec.hs:673:1-147
  wire [71:0] t;
  wire signed [63:0] x_1;
  wire signed [63:0] y;
  // spec.hs:382:1-91
  wire signed [63:0] c$out9_case_alt;
  wire [7:0] result_36;
  wire [7:0] c$app_arg_14;
  // spec.hs:355:1-55
  wire [7:0] tag_0;
  // spec.hs:382:1-91
  wire signed [63:0] c$out9_case_alt_0;
  // spec.hs:355:1-55
  wire signed [63:0] winData;
  // spec.hs:355:1-55
  wire [7:0] winTag;
  wire [71:0] result_37;
  // spec.hs:139:34-42
  wire  x_2;
  // spec.hs:665:1-129
  reg [71:0] result_38 = {8'd4,   64'sd0};
  // spec.hs:665:1-129
  wire [71:0] t_0;
  wire signed [63:0] x_3;
  // spec.hs:382:1-91
  wire signed [63:0] c$out8_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta;
  // spec.hs:361:1-53
  wire [7:0] tag_1;
  wire [71:0] result_39;
  // spec.hs:138:34-42
  wire  x_4;
  // spec.hs:657:1-147
  reg [71:0] result_40 = {8'd4,   64'sd0};
  // spec.hs:657:1-147
  wire [71:0] t_1;
  wire signed [63:0] x_5;
  wire signed [63:0] y_0;
  // spec.hs:382:1-91
  wire signed [63:0] c$out7_case_alt;
  // spec.hs:382:1-91
  wire signed [63:0] c$out7_case_alt_0;
  // spec.hs:355:1-55
  wire signed [63:0] winData_0;
  // spec.hs:355:1-55
  wire [7:0] winTag_0;
  wire [71:0] result_41;
  // spec.hs:137:34-42
  wire  x_6;
  // spec.hs:649:1-147
  reg [71:0] result_42 = {8'd4,   64'sd0};
  // spec.hs:649:1-147
  wire [71:0] t_2;
  wire signed [63:0] x_7;
  wire signed [63:0] y_1;
  // spec.hs:382:1-91
  wire signed [63:0] c$out6_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta_0;
  // spec.hs:361:1-53
  wire [7:0] tag_2;
  wire [71:0] result_43;
  // spec.hs:136:34-42
  wire  x_8;
  // spec.hs:641:1-129
  reg [71:0] result_44 = {8'd4,   64'sd0};
  // spec.hs:641:1-129
  wire [71:0] t_3;
  wire signed [63:0] x_9;
  wire [3:0] c$app_arg_15;
  wire  result_45;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch;
  // spec.hs:382:1-91
  wire signed [63:0] c$out6_case_alt_0;
  // spec.hs:361:1-53
  wire signed [63:0] dta_1;
  // spec.hs:361:1-53
  wire [7:0] tag_3;
  wire [71:0] result_46;
  // spec.hs:135:34-42
  wire  x_10;
  // spec.hs:633:1-129
  reg [71:0] result_47 = {8'd4,   64'sd0};
  // spec.hs:633:1-129
  wire [71:0] t_4;
  wire signed [63:0] x_11;
  // spec.hs:382:1-91
  wire signed [63:0] c$out4_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta_2;
  // spec.hs:361:1-53
  wire [7:0] tag_4;
  wire [71:0] result_48;
  // spec.hs:134:34-42
  wire  x_12;
  // spec.hs:625:1-129
  reg [71:0] result_49 = {8'd4,   64'sd0};
  wire [71:0] result_50;
  // spec.hs:133:34-42
  wire  x_13;
  // spec.hs:617:1-147
  reg [71:0] result_51 = {8'd4,   64'sd0};
  // spec.hs:617:1-147
  wire [71:0] t_5;
  wire signed [63:0] x_14;
  wire signed [63:0] y_2;
  // spec.hs:382:1-91
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:355:1-55
  wire signed [63:0] winData_1;
  // spec.hs:355:1-55
  wire [7:0] winTag_1;
  wire [71:0] result_52;
  // spec.hs:141:35-43
  wire  x_15;
  // spec.hs:681:1-131
  reg [71:0] result_53 = {8'd4,   64'sd0};
  // spec.hs:681:1-131
  wire [71:0] t_6;
  wire signed [63:0] x_16;
  // spec.hs:382:1-91
  wire signed [63:0] c$out10_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta_3;
  wire [7:0] result_54;
  wire [7:0] c$app_arg_16;
  // spec.hs:382:1-91
  wire signed [63:0] c$out2_case_alt_0;
  // spec.hs:361:1-53
  wire signed [63:0] dta_4;
  // spec.hs:361:1-53
  wire [7:0] tag_5;
  wire [71:0] result_55;
  // spec.hs:132:34-42
  wire  x_17;
  // spec.hs:609:1-147
  reg [71:0] result_56 = {8'd4,   64'sd0};
  // spec.hs:609:1-147
  wire [71:0] t_7;
  wire signed [63:0] x_18;
  wire signed [63:0] y_3;
  // spec.hs:382:1-91
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta_5;
  // spec.hs:361:1-53
  wire [7:0] tag_6;
  wire [71:0] result_57;
  // spec.hs:131:34-42
  wire  x_19;
  // spec.hs:601:1-147
  reg [71:0] result_58 = {8'd4,   64'sd0};
  // spec.hs:601:1-147
  wire [71:0] t_8;
  wire signed [63:0] x_20;
  wire signed [63:0] y_4;
  // spec.hs:382:1-91
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:355:1-55
  wire signed [63:0] winData_2;
  // spec.hs:355:1-55
  wire [7:0] winTag_2;
  // spec.hs:382:1-91
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_0;
  wire [2:0] c$app_arg_17;
  wire  result_59;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_1;
  // spec.hs:382:1-91
  wire signed [63:0] c$out1_case_alt_0;
  // spec.hs:361:1-53
  wire signed [63:0] dta_6;
  // spec.hs:361:1-53
  wire [7:0] tag_7;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_2;
  wire [3:0] c$app_arg_18;
  wire  result_60;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_3;
  wire [4:0] c$app_arg_19;
  wire  result_61;
  wire [7:0] result_62;
  wire [7:0] c$app_arg_20;
  // spec.hs:355:1-55
  wire [7:0] tag_8;
  wire [2:0] c$app_arg_21;
  wire  result_63;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_4;
  wire [3:0] c$app_arg_22;
  wire  result_64;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_5;
  wire [4:0] c$app_arg_23;
  wire  result_65;
  wire [7:0] result_66;
  wire [7:0] c$app_arg_24;
  // spec.hs:355:1-55
  wire [7:0] tag_9;
  wire [2:0] c$app_arg_25;
  wire  result_67;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_6;
  wire [3:0] c$app_arg_26;
  wire  result_68;
  wire [7:0] result_69;
  wire [7:0] c$app_arg_27;
  // spec.hs:355:1-55
  wire [7:0] tag_10;
  wire [3:0] c$app_arg_28;
  wire  result_70;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_7;
  wire [4:0] c$app_arg_29;
  wire  result_71;
  wire [71:0] result_72;
  // spec.hs:595:1-127
  reg [71:0] result_73 = {8'd4,   64'sd0};
  // spec.hs:595:1-127
  wire  b;
  // spec.hs:382:1-91
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  wire [1:0] c$app_arg_30;
  wire  result_74;
  // spec.hs:361:1-53
  wire [7:0] tagToMatch_8;
  // spec.hs:361:1-53
  wire [7:0] tag_11;
  wire [71:0] result_75;
  // spec.hs:698:1-149
  reg [71:0] result_76 = {8'd4,   64'sd0};
  // spec.hs:698:1-149
  wire  b_0;
  // spec.hs:698:1-149
  wire [71:0] t_9;
  wire signed [63:0] x_21;
  wire signed [63:0] y_5;
  // spec.hs:382:1-91
  wire signed [63:0] c$out12_case_alt;
  // spec.hs:355:1-55
  wire signed [63:0] winData_3;
  // spec.hs:355:1-55
  wire [7:0] winTag_3;
  wire [71:0] result_77;
  // spec.hs:706:1-131
  reg [71:0] result_78 = {8'd4,   64'sd0};
  // spec.hs:706:1-131
  wire  b_1;
  // spec.hs:706:1-131
  wire [71:0] t_10;
  wire signed [63:0] x_22;
  // spec.hs:382:1-91
  wire signed [63:0] c$out13_case_alt;
  // spec.hs:361:1-53
  wire signed [63:0] dta_7;
  wire [7:0] result_79;
  wire [7:0] c$app_arg_31;
  // spec.hs:355:1-55
  wire [7:0] tag_12;
  // spec.hs:348:1-63
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:348:1-63
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire signed [63:0] result_80;
  // spec.hs:348:1-63
  wire [0:0] i_0;
  // spec.hs:348:1-63
  wire [5:0] ws_0;
  wire [2:0] c$app_arg_32;
  wire  result_81;
  wire [3:0] c$app_arg_33;
  wire  result_82;
  wire [479:0] c$app_arg_34;
  wire [119:0] result_83;
  wire [359:0] c$app_arg_35;
  wire [119:0] result_84;
  wire [239:0] c$app_arg_36;
  wire [119:0] result_85;
  // spec.hs:579:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_86;
  // spec.hs:579:9-81
  wire  b_2;
  // spec.hs:579:9-81
  wire [7:0] f1;
  wire [7:0] result_87;
  // spec.hs:382:1-91
  wire  pOut13;
  // spec.hs:579:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_88;
  // spec.hs:579:9-81
  wire  b_3;
  // spec.hs:579:9-81
  wire [7:0] f1_0;
  wire [7:0] result_89;
  // spec.hs:382:1-91
  wire  pOut12;
  // spec.hs:579:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_90;
  // spec.hs:579:9-81
  wire  b_4;
  // spec.hs:579:9-81
  wire [7:0] f1_1;
  wire [7:0] result_91;
  // spec.hs:141:35-43
  wire  x_23;
  // spec.hs:382:1-91
  wire  pOut10;
  // spec.hs:579:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_92;
  // spec.hs:579:9-81
  wire  b_5;
  // spec.hs:579:9-81
  wire [7:0] f1_2;
  wire [7:0] result_93;
  // spec.hs:140:34-42
  wire  x_24;
  // spec.hs:382:1-91
  wire  pOut9;
  // spec.hs:579:9-81
  reg [7:0] t_15 = 8'd1;
  wire [7:0] result_94;
  // spec.hs:579:9-81
  wire  b_6;
  // spec.hs:579:9-81
  wire [7:0] f1_3;
  wire [7:0] result_95;
  // spec.hs:139:34-42
  wire  x_25;
  // spec.hs:382:1-91
  wire  pOut8;
  // spec.hs:579:9-81
  reg [7:0] t_16 = 8'd1;
  wire [7:0] result_96;
  // spec.hs:579:9-81
  wire  b_7;
  // spec.hs:579:9-81
  wire [7:0] f1_4;
  wire [7:0] result_97;
  // spec.hs:138:34-42
  wire  x_26;
  // spec.hs:382:1-91
  wire  pOut7;
  // spec.hs:579:9-81
  reg [7:0] t_17 = 8'd1;
  wire [7:0] result_98;
  // spec.hs:579:9-81
  wire  b_8;
  // spec.hs:579:9-81
  wire [7:0] f1_5;
  wire [7:0] result_99;
  // spec.hs:137:34-42
  wire  x_27;
  // spec.hs:382:1-91
  wire  pOut6;
  // spec.hs:579:9-81
  reg [7:0] t_18 = 8'd1;
  wire [7:0] result_100;
  // spec.hs:579:9-81
  wire  b_9;
  // spec.hs:579:9-81
  wire [7:0] f1_6;
  wire [7:0] result_101;
  // spec.hs:136:34-42
  wire  x_28;
  // spec.hs:382:1-91
  wire  pOut5;
  // spec.hs:579:9-81
  reg [7:0] t_19 = 8'd1;
  wire [7:0] result_102;
  // spec.hs:579:9-81
  wire  b_10;
  // spec.hs:579:9-81
  wire [7:0] f1_7;
  wire [7:0] result_103;
  // spec.hs:135:34-42
  wire  x_29;
  // spec.hs:382:1-91
  wire  pOut4;
  // spec.hs:579:9-81
  reg [7:0] t_20 = 8'd1;
  wire [7:0] result_104;
  // spec.hs:579:9-81
  wire  b_11;
  // spec.hs:579:9-81
  wire [7:0] f1_8;
  wire [7:0] result_105;
  // spec.hs:134:34-42
  wire  x_30;
  // spec.hs:382:1-91
  wire  pOut3;
  // spec.hs:579:9-81
  reg [7:0] t_21 = 8'd1;
  wire [7:0] result_106;
  // spec.hs:579:9-81
  wire  b_12;
  // spec.hs:579:9-81
  wire [7:0] f1_9;
  wire [7:0] result_107;
  // spec.hs:133:34-42
  wire  x_31;
  // spec.hs:382:1-91
  wire  pOut2;
  // spec.hs:579:9-81
  reg [7:0] t_22 = 8'd1;
  wire [7:0] result_108;
  // spec.hs:579:9-81
  wire  b_13;
  // spec.hs:579:9-81
  wire [7:0] f1_10;
  wire [7:0] result_109;
  // spec.hs:132:34-42
  wire  x_32;
  // spec.hs:382:1-91
  wire  pOut1;
  // spec.hs:579:9-81
  reg [7:0] t_23 = 8'd1;
  wire [7:0] result_110;
  // spec.hs:579:9-81
  wire  b_14;
  // spec.hs:579:9-81
  wire [7:0] f1_11;
  wire [7:0] result_111;
  // spec.hs:131:34-42
  wire  x_33;
  // spec.hs:382:1-91
  wire  pOut0;
  // spec.hs:340:1-65
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:340:1-65
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire signed [63:0] result_112;
  wire [7:0] result_113;
  wire [7:0] c$app_arg_37;
  // spec.hs:340:1-65
  wire [0:0] i_1;
  // spec.hs:340:1-65
  wire [5:0] ws_1;
  wire [143:0] result_114;
  // spec.hs:689:1-139
  reg [143:0] result_115 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:689:1-139
  wire  b_15;
  // spec.hs:689:1-139
  wire [143:0] t_24;
  wire signed [63:0] x_34;
  wire [1:0] c$app_arg_38;
  wire  result_116;
  // spec.hs:579:9-81
  reg [7:0] t_25 = 8'd1;
  wire [7:0] result_117;
  // spec.hs:579:9-81
  wire  b_16;
  // spec.hs:579:9-81
  wire [7:0] f1_12;
  wire [7:0] result_118;
  // spec.hs:382:1-91
  wire  pOut11;
  // spec.hs:579:9-81
  reg [7:0] t_26 = 8'd1;
  wire [7:0] result_119;
  // spec.hs:579:9-81
  wire  b_17;
  // spec.hs:579:9-81
  wire [7:0] f1_13;
  wire [7:0] result_120;
  // spec.hs:382:1-91
  wire  pIn0_0;
  // spec.hs:382:1-91
  wire [14:0] pacings;
  // spec.hs:586:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_121;
  wire signed [63:0] result_122;
  // spec.hs:586:1-81
  wire  b_18;
  wire signed [63:0] result_123;
  wire signed [63:0] x_35;
  wire  result_124;
  // spec.hs:382:1-91
  wire  b_19;
  wire [81:0] result_125;
  reg [79:0] c$app_arg_39 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                      1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                      1'b0}};
  wire [79:0] c$case_alt;
  wire [79:0] c$case_alt_0;
  wire [79:0] c$case_alt_1;
  reg [79:0] c$case_alt_2;
  reg [79:0] c$case_alt_3;
  wire [79:0] c$case_alt_4;
  reg  c$app_arg_40 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_41 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:224:1-78
  reg [319:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0,
                                                       1'b0,   1'b0,   1'b0}}};
  // spec.hs:224:1-78
  wire [319:0] c$buffer_case_alt;
  // spec.hs:224:1-78
  wire [319:0] c$buffer_case_alt_0;
  // spec.hs:224:1-78
  wire [319:0] c$buffer_case_alt_1;
  // spec.hs:224:1-78
  wire [79:0] qData;
  // spec.hs:224:1-78
  wire signed [63:0] x_36;
  // spec.hs:224:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:224:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:224:1-78
  wire  push;
  // spec.hs:224:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:224:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:224:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:224:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:224:1-78
  wire  pop;
  // spec.hs:224:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:224:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  wire [64:0] inputs;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [215:0] t_projection_2;
  wire signed [63:0] c$tte_rhs;
  wire [399:0] c$buffer_case_alt_sel_alt_t_1;
  wire [399:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [909:0] result;
  wire [64:0] result_0;
  wire [64:0] result_1;
  wire [64:0] result_2;
  wire [64:0] result_3;
  wire [64:0] result_4;
  wire [64:0] result_5;
  wire [64:0] result_6;
  wire [64:0] result_7;
  wire [64:0] result_8;
  wire [64:0] result_9;
  wire [64:0] result_10;
  wire [64:0] result_11;
  wire [64:0] result_12;
  wire [64:0] result_13;

  assign inputs = {inputs_0,   inputs_1};

  assign result_14 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_15;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= (64'sd0);
    end else if (en) begin
      result_15 <= result_14;
    end
  end
  // register end

  assign result_16 = {hasInput0 | timer0Over,
                      {inputs,   {pIn0,   pIn0,   pIn0,   pIn0,
                                  pIn0,   pIn0,   pIn0,   pIn0,   pIn0,   pIn0,
                                  pIn0,   pIn0,   timer0Over,   timer0Over,
                                  timer0Over}}};

  assign hasInput0 = inputs[0:0];

  assign pIn0 = hasInput0;

  assign timer0Over = result_15 >= (64'sd1000000);

  assign result_17 = {result_121 & (~ result_124),
                      {{dta_5,   result_33},   {dta_4,   result_32},
                       {winData_2,   result_31},   {dta_2,
                                                    result_30},   {dta_1,   result_29},   {dta_0,
                                                                                           result_28},   {winData_0,
                                                                                                          result_27},
                       {dta,   result_26},   {winData,   result_25},
                       {dta_3,   result_24},   {winData_1,
                                                result_23},   {result_20,   result_21},
                       {dta_7,   result_19},   {winData_3,
                                                result_18}}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  assign iterateI_ho1_0_arg0 = pOut13;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  assign c$app_arg = {pOut13,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res};



  assign result_18 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut12;

  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_8;



  assign c$app_arg_0 = {pOut12,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0};



  assign result_19 = c$app_arg_0[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_115[i_2*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_2*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_3*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_3[0+:1];
    wire [1:0] c$case_alt_13;
    // spec.hs:348:1-63
    wire [7:0] t_27;
    // spec.hs:348:1-63
    wire [71:0] x_38;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_27 == result_22[23:16]) ? {1'b1,map_index} : map_in[1:0];

    assign t_27 = x_38[71:64];

    assign x_38 = map_in[73:2];


    assign c$ws_app_arg_0[i_3*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4=i_4+1) begin : mk_array
    assign vecArray[(2-1)-i_4] = result_115[i_4*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_20 = c$case_scrut_0[1:1] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut11;

  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_13;



  assign c$app_arg_1 = {pOut11,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1};



  assign result_21 = c$app_arg_1[1-1:0];

  wire [119:0] iterateI_ho1_0_arg0_2;
  wire [119:0] iterateI_ho1_0_res_2;
  wire [119:0] iterateI_ho1_1_res_2;
  wire [119:0] iterateI_ho1_2_res_2;
  wire [119:0] iterateI_ho1_3_res_2;
  assign iterateI_ho1_0_arg0_2 = {t_26,   t_23,
                                  t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                                  t_16,   t_15,   t_14,   t_13,   t_25,   t_12,
                                  t_11};

  reg [119:0] c$bb_res_res_14 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_14;



  reg [119:0] c$bb_res_res_15 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_15;



  reg [119:0] c$bb_res_res_16 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_16;



  reg [119:0] c$bb_res_res_17 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_17;



  assign c$app_arg_2 = {{t_26,   t_23,   t_22,
                         t_21,   t_20,   t_19,   t_18,   t_17,   t_16,
                         t_15,   t_14,   t_13,   t_25,   t_12,   t_11},
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2};



  assign result_22 = c$app_arg_2[120-1:0];

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_2;
  assign iterateI_ho1_0_arg0_3 = x_23;

  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_22;



  assign c$app_arg_3 = {x_23,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_2};



  assign result_23 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_3;
  assign iterateI_ho1_0_arg0_4 = x_24;

  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_27;



  assign c$app_arg_4 = {x_24,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_3};



  assign result_24 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_arg0_5;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_4;
  assign iterateI_ho1_0_arg0_5 = x_25;

  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_32;



  assign c$app_arg_5 = {x_25,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_4};



  assign result_25 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_arg0_6;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_5;
  assign iterateI_ho1_0_arg0_6 = x_26;

  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_37;



  assign c$app_arg_6 = {x_26,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_5};



  assign result_26 = c$app_arg_6[1-1:0];

  wire  iterateI_ho1_0_arg0_7;
  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  wire  iterateI_ho1_4_res_6;
  assign iterateI_ho1_0_arg0_7 = x_27;

  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_42;



  assign c$app_arg_7 = {x_27,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7,
                        iterateI_ho1_4_res_6};



  assign result_27 = c$app_arg_7[1-1:0];

  wire  iterateI_ho1_0_arg0_8;
  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_8;
  wire  iterateI_ho1_4_res_7;
  assign iterateI_ho1_0_arg0_8 = x_28;

  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_47;



  assign c$app_arg_8 = {x_28,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8,   iterateI_ho1_3_res_8,
                        iterateI_ho1_4_res_7};



  assign result_28 = c$app_arg_8[1-1:0];

  wire  iterateI_ho1_0_arg0_9;
  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_9;
  wire  iterateI_ho1_4_res_8;
  assign iterateI_ho1_0_arg0_9 = x_29;

  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_0_arg0_9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_51;



  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_3_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_8 = c$bb_res_res_52;



  assign c$app_arg_9 = {x_29,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                        iterateI_ho1_2_res_9,   iterateI_ho1_3_res_9,
                        iterateI_ho1_4_res_8};



  assign result_29 = c$app_arg_9[1-1:0];

  wire  iterateI_ho1_0_arg0_10;
  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_10;
  wire  iterateI_ho1_3_res_10;
  wire  iterateI_ho1_4_res_9;
  assign iterateI_ho1_0_arg0_10 = x_30;

  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_arg0_10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_10 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_3_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_9 = c$bb_res_res_57;



  assign c$app_arg_10 = {x_30,
                         iterateI_ho1_0_res_10,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10,
                         iterateI_ho1_3_res_10,   iterateI_ho1_4_res_9};



  assign result_30 = c$app_arg_10[1-1:0];

  wire  iterateI_ho1_0_arg0_11;
  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_11;
  wire  iterateI_ho1_3_res_11;
  wire  iterateI_ho1_4_res_10;
  assign iterateI_ho1_0_arg0_11 = x_31;

  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_0_arg0_11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_58;



  reg  c$bb_res_res_59 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_59;



  reg  c$bb_res_res_60 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_60;



  reg  c$bb_res_res_61 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_2_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_11 = c$bb_res_res_61;



  reg  c$bb_res_res_62 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_3_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_10 = c$bb_res_res_62;



  assign c$app_arg_11 = {x_31,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11,
                         iterateI_ho1_3_res_11,
                         iterateI_ho1_4_res_10};



  assign result_31 = c$app_arg_11[1-1:0];

  wire  iterateI_ho1_0_arg0_12;
  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_12;
  wire  iterateI_ho1_2_res_12;
  wire  iterateI_ho1_3_res_12;
  wire  iterateI_ho1_4_res_11;
  assign iterateI_ho1_0_arg0_12 = x_32;

  reg  c$bb_res_res_63 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_0_arg0_12;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_63;



  reg  c$bb_res_res_64 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_64;



  reg  c$bb_res_res_65 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_65;



  reg  c$bb_res_res_66 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_12 = c$bb_res_res_66;



  reg  c$bb_res_res_67 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= iterateI_ho1_3_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_11 = c$bb_res_res_67;



  assign c$app_arg_12 = {x_32,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_12,
                         iterateI_ho1_3_res_12,
                         iterateI_ho1_4_res_11};



  assign result_32 = c$app_arg_12[1-1:0];

  wire  iterateI_ho1_0_arg0_13;
  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_13;
  wire  iterateI_ho1_2_res_13;
  wire  iterateI_ho1_3_res_13;
  wire  iterateI_ho1_4_res_12;
  assign iterateI_ho1_0_arg0_13 = x_33;

  reg  c$bb_res_res_68 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= iterateI_ho1_0_arg0_13;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_68;



  reg  c$bb_res_res_69 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_69;



  reg  c$bb_res_res_70 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= iterateI_ho1_1_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_70;



  reg  c$bb_res_res_71 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= iterateI_ho1_2_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_13 = c$bb_res_res_71;



  reg  c$bb_res_res_72 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_3_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_12 = c$bb_res_res_72;



  assign c$app_arg_13 = {x_33,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_13,
                         iterateI_ho1_2_res_13,
                         iterateI_ho1_3_res_13,
                         iterateI_ho1_4_res_12};



  assign result_33 = c$app_arg_13[1-1:0];

  assign tag = result_35[71:64];

  assign result_34 = x_0 ? t : result_35;

  assign x_0 = result_70;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_35_register
    if ( rst) begin
      result_35 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_35 <= result_34;
    end
  end
  // register end

  assign t = {result_84[39:32],   (x_1 + y)};

  assign x_1 = c$out9_case_alt_0;

  assign y = c$out9_case_alt;

  assign c$out9_case_alt = (result_36 == winTag_1) ? winData_1 : (64'sd0);

  assign result_36 = (tag_0 > 8'd1) ? c$app_arg_14 : (c$app_arg_14 + 8'd3);

  assign c$app_arg_14 = tag_0 - 8'd1;

  assign tag_0 = result_84[31:24];

  assign c$out9_case_alt_0 = (result_69 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_38[63:0]);

  assign winTag = result_38[71:64];

  assign result_37 = x_2 ? t_0 : result_38;

  assign x_2 = result_68;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign t_0 = {tag_10,   (x_3 + 64'sd1)};

  assign x_3 = c$out8_case_alt;

  assign c$out8_case_alt = (tag_1 == tagToMatch_6) ? dta : (64'sd0);

  assign dta = $signed(result_40[63:0]);

  assign tag_1 = result_40[71:64];

  assign result_39 = x_4 ? t_1 : result_40;

  assign x_4 = result_67;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_40_register
    if ( rst) begin
      result_40 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_40 <= result_39;
    end
  end
  // register end

  assign t_1 = {result_85[55:48],   (x_5 + y_0)};

  assign x_5 = c$out7_case_alt_0;

  assign y_0 = c$out7_case_alt;

  assign c$out7_case_alt = (winTag_3 == 8'd4) ? (64'sd0) : winData_3;

  assign c$out7_case_alt_0 = (result_66 == winTag_0) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_42[63:0]);

  assign winTag_0 = result_42[71:64];

  assign result_41 = x_6 ? t_2 : result_42;

  assign x_6 = result_65;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_2 = {result_83[63:56],   (x_7 + y_1)};

  assign x_7 = c$out6_case_alt_0;

  assign y_1 = c$out6_case_alt;

  assign c$out6_case_alt = (tag_2 == tagToMatch) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_44[63:0]);

  assign tag_2 = result_44[71:64];

  assign result_43 = x_8 ? t_3 : result_44;

  assign x_8 = result_45;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_44_register
    if ( rst) begin
      result_44 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_44 <= result_43;
    end
  end
  // register end

  assign t_3 = {result_84[71:64],
                (x_9 + 64'sd1)};

  assign x_9 = c$out4_case_alt;

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_14;
  wire  iterateI_ho1_2_res_14;
  reg  c$bb_res_res_73 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_73;



  reg  c$bb_res_res_74 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_74;



  reg  c$bb_res_res_75 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_1_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_75;



  assign c$app_arg_15 = {pOut5,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_14,
                         iterateI_ho1_2_res_14};



  assign result_45 = c$app_arg_15[1-1:0];

  assign tagToMatch = result_83[71:64];

  assign c$out6_case_alt_0 = (tag_3 == tagToMatch_5) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_47[63:0]);

  assign tag_3 = result_47[71:64];

  assign result_46 = x_10 ? t_4 : result_47;

  assign x_10 = result_64;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_47_register
    if ( rst) begin
      result_47 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_47 <= result_46;
    end
  end
  // register end

  assign t_4 = {result_84[79:72],
                (x_11 + 64'sd1)};

  assign x_11 = c$out4_case_alt;

  assign c$out4_case_alt = (tag_4 == tagToMatch_4) ? dta_2 : (64'sd0);

  assign dta_2 = $signed(result_49[63:0]);

  assign tag_4 = result_49[71:64];

  assign result_48 = x_12 ? {result_85[87:80],
                             c$out0_case_alt} : result_49;

  assign x_12 = result_63;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_49_register
    if ( rst) begin
      result_49 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_49 <= result_48;
    end
  end
  // register end

  assign result_50 = x_13 ? t_5 : result_51;

  assign x_13 = result_61;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_51_register
    if ( rst) begin
      result_51 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_51 <= result_50;
    end
  end
  // register end

  assign t_5 = {result_83[95:88],   (x_14 + y_2)};

  assign x_14 = c$out2_case_alt_0;

  assign y_2 = c$out2_case_alt;

  assign c$out2_case_alt = (result_54 == winTag_1) ? winData_1 : (-64'sd1);

  assign winData_1 = $signed(result_53[63:0]);

  assign winTag_1 = result_53[71:64];

  assign result_52 = x_15 ? t_6 : result_53;

  assign x_15 = result_71;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_53_register
    if ( rst) begin
      result_53 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_53 <= result_52;
    end
  end
  // register end

  assign t_6 = {result_83[31:24],
                (x_16 + 64'sd1)};

  assign x_16 = c$out10_case_alt;

  assign c$out10_case_alt = (tag == tagToMatch_7) ? dta_3 : (64'sd0);

  assign dta_3 = $signed(result_35[63:0]);

  assign result_54 = (result_83[31:24] > 8'd1) ? c$app_arg_16 : (c$app_arg_16 + 8'd3);

  assign c$app_arg_16 = result_83[31:24] - 8'd1;

  assign c$out2_case_alt_0 = (tag_5 == tagToMatch_3) ? dta_4 : (64'sd0);

  assign dta_4 = $signed(result_56[63:0]);

  assign tag_5 = result_56[71:64];

  assign result_55 = x_17 ? t_7 : result_56;

  assign x_17 = result_60;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_56_register
    if ( rst) begin
      result_56 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_56 <= result_55;
    end
  end
  // register end

  assign t_7 = {result_84[103:96],
                (x_18 + y_3)};

  assign x_18 = c$out1_case_alt_0;

  assign y_3 = c$out1_case_alt;

  assign c$out1_case_alt = (tag_6 == tagToMatch_1) ? dta_5 : (64'sd0);

  assign dta_5 = $signed(result_58[63:0]);

  assign tag_6 = result_58[71:64];

  assign result_57 = x_19 ? t_8 : result_58;

  assign x_19 = result_59;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_58_register
    if ( rst) begin
      result_58 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_58 <= result_57;
    end
  end
  // register end

  assign t_8 = {result_85[111:104],
                (x_20 + y_4)};

  assign x_20 = c$out0_case_alt_0;

  assign y_4 = c$out0_case_alt;

  assign c$out0_case_alt = (result_62 == winTag_2) ? winData_2 : (64'sd0);

  assign winData_2 = $signed(result_51[63:0]);

  assign winTag_2 = result_51[71:64];

  assign c$out0_case_alt_0 = (tag_7 == tagToMatch_0) ? dta_6 : (64'sd0);

  assign tagToMatch_0 = result_85[119:112];

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_15;
  reg  c$bb_res_res_76 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_76;



  reg  c$bb_res_res_77 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_77;



  assign c$app_arg_17 = {pOut0,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_15};



  assign result_59 = c$app_arg_17[1-1:0];

  assign tagToMatch_1 = result_84[111:104];

  assign c$out1_case_alt_0 = (tag_7 == tagToMatch_2) ? dta_6 : (64'sd0);

  assign dta_6 = $signed(result_73[63:0]);

  assign tag_7 = result_73[71:64];

  assign tagToMatch_2 = result_84[119:112];

  wire  iterateI_ho1_0_res_16;
  wire  iterateI_ho1_1_res_16;
  wire  iterateI_ho1_2_res_15;
  reg  c$bb_res_res_78 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_78;



  reg  c$bb_res_res_79 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_79;



  reg  c$bb_res_res_80 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_15 = c$bb_res_res_80;



  assign c$app_arg_18 = {pOut1,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_15};



  assign result_60 = c$app_arg_18[1-1:0];

  assign tagToMatch_3 = result_83[103:96];

  wire  iterateI_ho1_0_res_17;
  wire  iterateI_ho1_1_res_17;
  wire  iterateI_ho1_2_res_16;
  wire  iterateI_ho1_3_res_14;
  reg  c$bb_res_res_81 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_81;



  reg  c$bb_res_res_82 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_82;



  reg  c$bb_res_res_83 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= iterateI_ho1_1_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_16 = c$bb_res_res_83;



  reg  c$bb_res_res_84 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= iterateI_ho1_2_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_14 = c$bb_res_res_84;



  assign c$app_arg_19 = {pOut2,
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_17,
                         iterateI_ho1_2_res_16,
                         iterateI_ho1_3_res_14};



  assign result_61 = c$app_arg_19[1-1:0];

  assign result_62 = (tag_8 > 8'd1) ? c$app_arg_20 : (c$app_arg_20 + 8'd3);

  assign c$app_arg_20 = tag_8 - 8'd1;

  assign tag_8 = result_85[95:88];

  wire  iterateI_ho1_0_res_18;
  wire  iterateI_ho1_1_res_18;
  reg  c$bb_res_res_85 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_85;



  reg  c$bb_res_res_86 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_18 = c$bb_res_res_86;



  assign c$app_arg_21 = {pOut3,
                         iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_18};



  assign result_63 = c$app_arg_21[1-1:0];

  assign tagToMatch_4 = result_84[87:80];

  wire  iterateI_ho1_0_res_19;
  wire  iterateI_ho1_1_res_19;
  wire  iterateI_ho1_2_res_17;
  reg  c$bb_res_res_87 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_87_delay
    if (en) begin
      c$bb_res_res_87 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_87;



  reg  c$bb_res_res_88 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_88_delay
    if (en) begin
      c$bb_res_res_88 <= iterateI_ho1_0_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_19 = c$bb_res_res_88;



  reg  c$bb_res_res_89 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_89_delay
    if (en) begin
      c$bb_res_res_89 <= iterateI_ho1_1_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_17 = c$bb_res_res_89;



  assign c$app_arg_22 = {pOut4,
                         iterateI_ho1_0_res_19,
                         iterateI_ho1_1_res_19,
                         iterateI_ho1_2_res_17};



  assign result_64 = c$app_arg_22[1-1:0];

  assign tagToMatch_5 = result_83[79:72];

  wire  iterateI_ho1_0_res_20;
  wire  iterateI_ho1_1_res_20;
  wire  iterateI_ho1_2_res_18;
  wire  iterateI_ho1_3_res_15;
  reg  c$bb_res_res_90 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_90_delay
    if (en) begin
      c$bb_res_res_90 <= pOut6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_20 = c$bb_res_res_90;



  reg  c$bb_res_res_91 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_91_delay
    if (en) begin
      c$bb_res_res_91 <= iterateI_ho1_0_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_20 = c$bb_res_res_91;



  reg  c$bb_res_res_92 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_92_delay
    if (en) begin
      c$bb_res_res_92 <= iterateI_ho1_1_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_18 = c$bb_res_res_92;



  reg  c$bb_res_res_93 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_93_delay
    if (en) begin
      c$bb_res_res_93 <= iterateI_ho1_2_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_15 = c$bb_res_res_93;



  assign c$app_arg_23 = {pOut6,
                         iterateI_ho1_0_res_20,
                         iterateI_ho1_1_res_20,
                         iterateI_ho1_2_res_18,
                         iterateI_ho1_3_res_15};



  assign result_65 = c$app_arg_23[1-1:0];

  assign result_66 = (tag_9 > 8'd1) ? c$app_arg_24 : (c$app_arg_24 + 8'd3);

  assign c$app_arg_24 = tag_9 - 8'd1;

  assign tag_9 = result_85[63:56];

  wire  iterateI_ho1_0_res_21;
  wire  iterateI_ho1_1_res_21;
  reg  c$bb_res_res_94 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_94_delay
    if (en) begin
      c$bb_res_res_94 <= pOut7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_21 = c$bb_res_res_94;



  reg  c$bb_res_res_95 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_95_delay
    if (en) begin
      c$bb_res_res_95 <= iterateI_ho1_0_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_21 = c$bb_res_res_95;



  assign c$app_arg_25 = {pOut7,
                         iterateI_ho1_0_res_21,
                         iterateI_ho1_1_res_21};



  assign result_67 = c$app_arg_25[1-1:0];

  assign tagToMatch_6 = result_84[55:48];

  wire  iterateI_ho1_0_res_22;
  wire  iterateI_ho1_1_res_22;
  wire  iterateI_ho1_2_res_19;
  reg  c$bb_res_res_96 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_96_delay
    if (en) begin
      c$bb_res_res_96 <= pOut8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_22 = c$bb_res_res_96;



  reg  c$bb_res_res_97 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_97_delay
    if (en) begin
      c$bb_res_res_97 <= iterateI_ho1_0_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_22 = c$bb_res_res_97;



  reg  c$bb_res_res_98 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_98_delay
    if (en) begin
      c$bb_res_res_98 <= iterateI_ho1_1_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_19 = c$bb_res_res_98;



  assign c$app_arg_26 = {pOut8,
                         iterateI_ho1_0_res_22,
                         iterateI_ho1_1_res_22,
                         iterateI_ho1_2_res_19};



  assign result_68 = c$app_arg_26[1-1:0];

  assign result_69 = (tag_10 > 8'd1) ? c$app_arg_27 : (c$app_arg_27 + 8'd3);

  assign c$app_arg_27 = tag_10 - 8'd1;

  assign tag_10 = result_84[47:40];

  wire  iterateI_ho1_0_res_23;
  wire  iterateI_ho1_1_res_23;
  wire  iterateI_ho1_2_res_20;
  reg  c$bb_res_res_99 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_99_delay
    if (en) begin
      c$bb_res_res_99 <= pOut9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_23 = c$bb_res_res_99;



  reg  c$bb_res_res_100 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_100_delay
    if (en) begin
      c$bb_res_res_100 <= iterateI_ho1_0_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_23 = c$bb_res_res_100;



  reg  c$bb_res_res_101 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_101_delay
    if (en) begin
      c$bb_res_res_101 <= iterateI_ho1_1_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_20 = c$bb_res_res_101;



  assign c$app_arg_28 = {pOut9,
                         iterateI_ho1_0_res_23,
                         iterateI_ho1_1_res_23,
                         iterateI_ho1_2_res_20};



  assign result_70 = c$app_arg_28[1-1:0];

  assign tagToMatch_7 = result_83[39:32];

  wire  iterateI_ho1_0_res_24;
  wire  iterateI_ho1_1_res_24;
  wire  iterateI_ho1_2_res_21;
  wire  iterateI_ho1_3_res_16;
  reg  c$bb_res_res_102 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_102_delay
    if (en) begin
      c$bb_res_res_102 <= pOut10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_24 = c$bb_res_res_102;



  reg  c$bb_res_res_103 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_103_delay
    if (en) begin
      c$bb_res_res_103 <= iterateI_ho1_0_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_24 = c$bb_res_res_103;



  reg  c$bb_res_res_104 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_104_delay
    if (en) begin
      c$bb_res_res_104 <= iterateI_ho1_1_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_21 = c$bb_res_res_104;



  reg  c$bb_res_res_105 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_105_delay
    if (en) begin
      c$bb_res_res_105 <= iterateI_ho1_2_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_16 = c$bb_res_res_105;



  assign c$app_arg_29 = {pOut10,
                         iterateI_ho1_0_res_24,
                         iterateI_ho1_1_res_24,
                         iterateI_ho1_2_res_21,
                         iterateI_ho1_3_res_16};



  assign result_71 = c$app_arg_29[1-1:0];

  assign result_72 = b ? {t_26,
                          c$input0Win_app_arg} : result_73;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_73_register
    if ( rst) begin
      result_73 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_73 <= result_72;
    end
  end
  // register end

  assign b = result_74;

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(result_125[79:16]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_25;
  reg  c$bb_res_res_106 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_106_delay
    if (en) begin
      c$bb_res_res_106 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_25 = c$bb_res_res_106;



  assign c$app_arg_30 = {pIn0_0,
                         iterateI_ho1_0_res_25};



  assign result_74 = c$app_arg_30[1-1:0];

  assign tagToMatch_8 = result_84[15:8];

  assign tag_11 = result_76[71:64];

  assign result_75 = b_0 ? t_9 : result_76;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_76_register
    if ( rst) begin
      result_76 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_76 <= result_75;
    end
  end
  // register end

  assign b_0 = result_81;

  assign t_9 = {result_85[15:8],   (x_21 + y_5)};

  assign x_21 = result_80;

  assign y_5 = c$out12_case_alt;

  assign c$out12_case_alt = (result_79 == winTag_3) ? winData_3 : (64'sd0);

  assign winData_3 = $signed(result_78[63:0]);

  assign winTag_3 = result_78[71:64];

  assign result_77 = b_1 ? t_10 : result_78;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_78_register
    if ( rst) begin
      result_78 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_78 <= result_77;
    end
  end
  // register end

  assign b_1 = result_82;

  assign t_10 = {result_84[7:0],
                 (x_22 + 64'sd1)};

  assign x_22 = c$out13_case_alt;

  assign c$out13_case_alt = (tag_11 == tagToMatch_8) ? dta_7 : (64'sd0);

  assign dta_7 = $signed(result_76[63:0]);

  assign result_79 = (tag_12 > 8'd1) ? c$app_arg_31 : (c$app_arg_31 + 8'd3);

  assign c$app_arg_31 = tag_12 - 8'd1;

  assign tag_12 = result_85[7:0];

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 2; i_6 = i_6 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_115[i_6*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_6*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_6*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_7*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_7[0+:1];
    wire [1:0] c$case_alt_14;
    // spec.hs:348:1-63
    wire [7:0] t_29;
    // spec.hs:348:1-63
    wire [71:0] x_39;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_29 == result_85[23:16]) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_29 = x_39[71:64];

    assign x_39 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_7*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 2; i_8=i_8+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_8] = result_115[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_80 = c$case_scrut_2[1:1] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_26;
  wire  iterateI_ho1_1_res_25;
  reg  c$bb_res_res_107 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_107_delay
    if (en) begin
      c$bb_res_res_107 <= pOut12;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_26 = c$bb_res_res_107;



  reg  c$bb_res_res_108 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_108_delay
    if (en) begin
      c$bb_res_res_108 <= iterateI_ho1_0_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_25 = c$bb_res_res_108;



  assign c$app_arg_32 = {pOut12,
                         iterateI_ho1_0_res_26,
                         iterateI_ho1_1_res_25};



  assign result_81 = c$app_arg_32[1-1:0];

  wire  iterateI_ho1_0_res_27;
  wire  iterateI_ho1_1_res_26;
  wire  iterateI_ho1_2_res_22;
  reg  c$bb_res_res_109 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_109_delay
    if (en) begin
      c$bb_res_res_109 <= pOut13;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_27 = c$bb_res_res_109;



  reg  c$bb_res_res_110 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_110_delay
    if (en) begin
      c$bb_res_res_110 <= iterateI_ho1_0_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_26 = c$bb_res_res_110;



  reg  c$bb_res_res_111 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_111_delay
    if (en) begin
      c$bb_res_res_111 <= iterateI_ho1_1_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_22 = c$bb_res_res_111;



  assign c$app_arg_33 = {pOut13,
                         iterateI_ho1_0_res_27,
                         iterateI_ho1_1_res_26,
                         iterateI_ho1_2_res_22};



  assign result_82 = c$app_arg_33[1-1:0];

  wire [119:0] iterateI_ho1_0_arg0_14;
  wire [119:0] iterateI_ho1_0_res_28;
  wire [119:0] iterateI_ho1_1_res_27;
  wire [119:0] iterateI_ho1_2_res_23;
  assign iterateI_ho1_0_arg0_14 = {t_26,   t_23,
                                   t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                                   t_16,   t_15,   t_14,   t_13,   t_25,   t_12,
                                   t_11};

  reg [119:0] c$bb_res_res_112 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_112_delay
    if (en) begin
      c$bb_res_res_112 <= iterateI_ho1_0_arg0_14;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_28 = c$bb_res_res_112;



  reg [119:0] c$bb_res_res_113 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_113_delay
    if (en) begin
      c$bb_res_res_113 <= iterateI_ho1_0_res_28;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_27 = c$bb_res_res_113;



  reg [119:0] c$bb_res_res_114 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_114_delay
    if (en) begin
      c$bb_res_res_114 <= iterateI_ho1_1_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_23 = c$bb_res_res_114;



  assign c$app_arg_34 = {{t_26,   t_23,   t_22,
                          t_21,   t_20,   t_19,   t_18,   t_17,   t_16,
                          t_15,   t_14,   t_13,   t_25,   t_12,   t_11},
                         iterateI_ho1_0_res_28,
                         iterateI_ho1_1_res_27,
                         iterateI_ho1_2_res_23};



  assign result_83 = c$app_arg_34[120-1:0];

  wire [119:0] iterateI_ho1_0_arg0_15;
  wire [119:0] iterateI_ho1_0_res_29;
  wire [119:0] iterateI_ho1_1_res_28;
  assign iterateI_ho1_0_arg0_15 = {t_26,   t_23,
                                   t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                                   t_16,   t_15,   t_14,   t_13,   t_25,   t_12,
                                   t_11};

  reg [119:0] c$bb_res_res_115 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_115_delay
    if (en) begin
      c$bb_res_res_115 <= iterateI_ho1_0_arg0_15;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_29 = c$bb_res_res_115;



  reg [119:0] c$bb_res_res_116 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_116_delay
    if (en) begin
      c$bb_res_res_116 <= iterateI_ho1_0_res_29;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_28 = c$bb_res_res_116;



  assign c$app_arg_35 = {{t_26,   t_23,   t_22,
                          t_21,   t_20,   t_19,   t_18,   t_17,   t_16,
                          t_15,   t_14,   t_13,   t_25,   t_12,   t_11},
                         iterateI_ho1_0_res_29,
                         iterateI_ho1_1_res_28};



  assign result_84 = c$app_arg_35[120-1:0];

  wire [119:0] iterateI_ho1_0_arg0_16;
  wire [119:0] iterateI_ho1_0_res_30;
  assign iterateI_ho1_0_arg0_16 = {t_26,   t_23,
                                   t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                                   t_16,   t_15,   t_14,   t_13,   t_25,   t_12,
                                   t_11};

  reg [119:0] c$bb_res_res_117 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_117_delay
    if (en) begin
      c$bb_res_res_117 <= iterateI_ho1_0_arg0_16;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_30 = c$bb_res_res_117;



  assign c$app_arg_36 = {{t_26,   t_23,   t_22,
                          t_21,   t_20,   t_19,   t_18,   t_17,   t_16,
                          t_15,   t_14,   t_13,   t_25,   t_12,   t_11},
                         iterateI_ho1_0_res_30};



  assign result_85 = c$app_arg_36[120-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_86;
    end
  end
  // register end

  assign result_86 = pOut13 ? result_87 : t_11;

  assign b_2 = t_11 == 8'd3;

  assign f1 = t_11 + 8'd1;

  assign result_87 = b_2 ? 8'd1 : f1;

  assign pOut13 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_88;
    end
  end
  // register end

  assign result_88 = pOut12 ? result_89 : t_12;

  assign b_3 = t_12 == 8'd3;

  assign f1_0 = t_12 + 8'd1;

  assign result_89 = b_3 ? 8'd1 : f1_0;

  assign pOut12 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_90;
    end
  end
  // register end

  assign result_90 = x_23 ? result_91 : t_13;

  assign b_4 = t_13 == 8'd3;

  assign f1_1 = t_13 + 8'd1;

  assign result_91 = b_4 ? 8'd1 : f1_1;

  assign x_23 = pOut10;

  assign pOut10 = pacings[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_92;
    end
  end
  // register end

  assign result_92 = x_24 ? result_93 : t_14;

  assign b_5 = t_14 == 8'd3;

  assign f1_2 = t_14 + 8'd1;

  assign result_93 = b_5 ? 8'd1 : f1_2;

  assign x_24 = pOut9;

  assign pOut9 = pacings[4:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_15_register
    if ( rst) begin
      t_15 <= 8'd1;
    end else if (en) begin
      t_15 <= result_94;
    end
  end
  // register end

  assign result_94 = x_25 ? result_95 : t_15;

  assign b_6 = t_15 == 8'd3;

  assign f1_3 = t_15 + 8'd1;

  assign result_95 = b_6 ? 8'd1 : f1_3;

  assign x_25 = pOut8;

  assign pOut8 = pacings[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_16_register
    if ( rst) begin
      t_16 <= 8'd1;
    end else if (en) begin
      t_16 <= result_96;
    end
  end
  // register end

  assign result_96 = x_26 ? result_97 : t_16;

  assign b_7 = t_16 == 8'd3;

  assign f1_4 = t_16 + 8'd1;

  assign result_97 = b_7 ? 8'd1 : f1_4;

  assign x_26 = pOut7;

  assign pOut7 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_17_register
    if ( rst) begin
      t_17 <= 8'd1;
    end else if (en) begin
      t_17 <= result_98;
    end
  end
  // register end

  assign result_98 = x_27 ? result_99 : t_17;

  assign b_8 = t_17 == 8'd3;

  assign f1_5 = t_17 + 8'd1;

  assign result_99 = b_8 ? 8'd1 : f1_5;

  assign x_27 = pOut6;

  assign pOut6 = pacings[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_18_register
    if ( rst) begin
      t_18 <= 8'd1;
    end else if (en) begin
      t_18 <= result_100;
    end
  end
  // register end

  assign result_100 = x_28 ? result_101 : t_18;

  assign b_9 = t_18 == 8'd3;

  assign f1_6 = t_18 + 8'd1;

  assign result_101 = b_9 ? 8'd1 : f1_6;

  assign x_28 = pOut5;

  assign pOut5 = pacings[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_19_register
    if ( rst) begin
      t_19 <= 8'd1;
    end else if (en) begin
      t_19 <= result_102;
    end
  end
  // register end

  assign result_102 = x_29 ? result_103 : t_19;

  assign b_10 = t_19 == 8'd3;

  assign f1_7 = t_19 + 8'd1;

  assign result_103 = b_10 ? 8'd1 : f1_7;

  assign x_29 = pOut4;

  assign pOut4 = pacings[9:9];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_20_register
    if ( rst) begin
      t_20 <= 8'd1;
    end else if (en) begin
      t_20 <= result_104;
    end
  end
  // register end

  assign result_104 = x_30 ? result_105 : t_20;

  assign b_11 = t_20 == 8'd3;

  assign f1_8 = t_20 + 8'd1;

  assign result_105 = b_11 ? 8'd1 : f1_8;

  assign x_30 = pOut3;

  assign pOut3 = pacings[10:10];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_21_register
    if ( rst) begin
      t_21 <= 8'd1;
    end else if (en) begin
      t_21 <= result_106;
    end
  end
  // register end

  assign result_106 = x_31 ? result_107 : t_21;

  assign b_12 = t_21 == 8'd3;

  assign f1_9 = t_21 + 8'd1;

  assign result_107 = b_12 ? 8'd1 : f1_9;

  assign x_31 = pOut2;

  assign pOut2 = pacings[11:11];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_22_register
    if ( rst) begin
      t_22 <= 8'd1;
    end else if (en) begin
      t_22 <= result_108;
    end
  end
  // register end

  assign result_108 = x_32 ? result_109 : t_22;

  assign b_13 = t_22 == 8'd3;

  assign f1_10 = t_22 + 8'd1;

  assign result_109 = b_13 ? 8'd1 : f1_10;

  assign x_32 = pOut1;

  assign pOut1 = pacings[12:12];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_23_register
    if ( rst) begin
      t_23 <= 8'd1;
    end else if (en) begin
      t_23 <= result_110;
    end
  end
  // register end

  assign result_110 = x_33 ? result_111 : t_23;

  assign b_14 = t_23 == 8'd3;

  assign f1_11 = t_23 + 8'd1;

  assign result_111 = b_14 ? 8'd1 : f1_11;

  assign x_33 = pOut0;

  assign pOut0 = pacings[13:13];

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 2; i_9 = i_9 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_115[i_9*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_9*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_9*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_10*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_10[0+:1];
    wire [1:0] c$case_alt_15;
    // spec.hs:348:1-63
    wire [7:0] t_30;
    // spec.hs:348:1-63
    wire [71:0] x_40;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_30 == result_113) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_30 = x_40[71:64];

    assign x_40 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_10*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 2; i_11=i_11+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_11] = result_115[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_112 = c$case_scrut_4[1:1] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign result_113 = (t_25 > 8'd1) ? c$app_arg_37 : (c$app_arg_37 + 8'd3);

  assign c$app_arg_37 = t_25 - 8'd1;

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  assign result_114 = b_15 ? t_24 : result_115;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_115_register
    if ( rst) begin
      result_115 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_115 <= result_114;
    end
  end
  // register end

  assign b_15 = result_116;

  assign t_projection_2 = ({result_115,{t_25,   (x_34 + 64'sd1)}});

  assign t_24 = t_projection_2[143:0];

  assign x_34 = result_112;

  wire  iterateI_ho1_0_res_31;
  reg  c$bb_res_res_118 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_118_delay
    if (en) begin
      c$bb_res_res_118 <= pOut11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_31 = c$bb_res_res_118;



  assign c$app_arg_38 = {pOut11,
                         iterateI_ho1_0_res_31};



  assign result_116 = c$app_arg_38[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_25_register
    if ( rst) begin
      t_25 <= 8'd1;
    end else if (en) begin
      t_25 <= result_117;
    end
  end
  // register end

  assign result_117 = pOut11 ? result_118 : t_25;

  assign b_16 = t_25 == 8'd3;

  assign f1_12 = t_25 + 8'd1;

  assign result_118 = b_16 ? 8'd1 : f1_12;

  assign pOut11 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_26_register
    if ( rst) begin
      t_26 <= 8'd1;
    end else if (en) begin
      t_26 <= result_119;
    end
  end
  // register end

  assign result_119 = pIn0_0 ? result_120 : t_26;

  assign b_17 = t_26 == 8'd3;

  assign f1_13 = t_26 + 8'd1;

  assign result_120 = b_17 ? 8'd1 : f1_13;

  assign pIn0_0 = pacings[14:14];

  assign pacings = result_125[14:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_122;
    end
  end
  // register end

  assign result_121 = toWait == (64'sd0);

  assign result_122 = result_124 ? (64'sd2) : result_123;

  assign b_18 = toWait > (64'sd0);

  assign result_123 = b_18 ? ((x_35 - 64'sd1)) : toWait;

  assign x_35 = toWait;

  assign result_124 = b_19 ? 1'b1 : 1'b0;

  assign b_19 = result_121 & result_125[80:80];

  assign result_125 = {c$app_arg_41,
                       c$app_arg_40,   c$app_arg_39};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_39_register
    if ( rst) begin
      c$app_arg_39 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                        1'b0}};
    end else if (en) begin
      c$app_arg_39 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = push ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = pop ? c$case_alt_2 : {{64'sd0,
                                               1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = pop ? c$case_alt_3 : {{64'sd0,
                                               1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_36)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_36)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [79:0] vecArray_2 [0:4-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 4; i_12=i_12+1) begin : mk_array_2
    assign vecArray_2[(4-1)-i_12] = buffer[i_12*80+:80];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_2[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_40_register
    if ( rst) begin
      c$app_arg_40 <= 1'b0;
    end else if (en) begin
      c$app_arg_40 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = push ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = pop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = pop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = pop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_36)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_41_register
    if ( rst) begin
      c$app_arg_41 <= 1'b0;
    end else if (en) begin
      c$app_arg_41 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = push ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = pop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_36 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0,
                                                         1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = push ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = pop ? c$buffer_case_alt_sel_alt_t_1[399:80] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[399:80];

  assign qData = result_16[79:0];

  assign x_36 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = push ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign push = result_16[80:80];

  assign c$cursor_case_alt_0 = pop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_36 + 64'sd1));

  assign c$tte_rhs_0 = (x_36 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = pop ? c$cursor_case_alt_3 : cursor;

  assign pop = result_17[910:910];

  always @(*) begin
    case(x_36)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_36 - 64'sd1);

  assign result = result_17[909:0];

  assign result_0 = result[909:845];

  assign result_1 = result[844:780];

  assign result_2 = result[779:715];

  assign result_3 = result[714:650];

  assign result_4 = result[649:585];

  assign result_5 = result[584:520];

  assign result_6 = result[519:455];

  assign result_7 = result[454:390];

  assign result_8 = result[389:325];

  assign result_9 = result[324:260];

  assign result_10 = result[259:195];

  assign result_11 = result[194:130];

  assign result_12 = result[129:65];

  assign result_13 = result[64:0];

  assign result_0_0 = $signed(result_0[64:1]);

  assign result_0_1 = result_0[0:0];

  assign result_1_0 = $signed(result_1[64:1]);

  assign result_1_1 = result_1[0:0];

  assign result_2_0 = $signed(result_2[64:1]);

  assign result_2_1 = result_2[0:0];

  assign result_3_0 = $signed(result_3[64:1]);

  assign result_3_1 = result_3[0:0];

  assign result_4_0 = $signed(result_4[64:1]);

  assign result_4_1 = result_4[0:0];

  assign result_5_0 = $signed(result_5[64:1]);

  assign result_5_1 = result_5[0:0];

  assign result_6_0 = $signed(result_6[64:1]);

  assign result_6_1 = result_6[0:0];

  assign result_7_0 = $signed(result_7[64:1]);

  assign result_7_1 = result_7[0:0];

  assign result_8_0 = $signed(result_8[64:1]);

  assign result_8_1 = result_8[0:0];

  assign result_9_0 = $signed(result_9[64:1]);

  assign result_9_1 = result_9[0:0];

  assign result_10_0 = $signed(result_10[64:1]);

  assign result_10_1 = result_10[0:0];

  assign result_11_0 = $signed(result_11[64:1]);

  assign result_11_1 = result_11[0:0];

  assign result_12_0 = $signed(result_12[64:1]);

  assign result_12_1 = result_12[0:0];

  assign result_13_0 = $signed(result_13[64:1]);

  assign result_13_1 = result_13[0:0];


endmodule


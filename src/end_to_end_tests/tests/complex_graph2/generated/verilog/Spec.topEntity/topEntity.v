/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire signed [63:0] result_0_7_0
    , output wire  result_0_7_1
    , output wire signed [63:0] result_0_8_0
    , output wire  result_0_8_1
    , output wire signed [63:0] result_0_9_0
    , output wire  result_0_9_1
    , output wire signed [63:0] result_0_10_0
    , output wire  result_0_10_1
    , output wire signed [63:0] result_0_11_0
    , output wire  result_0_11_1
    , output wire signed [63:0] result_0_12_0
    , output wire  result_0_12_1
    , output wire signed [63:0] result_0_13_0
    , output wire  result_0_13_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_4_7
    , output wire  result_1_4_8
    , output wire  result_1_4_9
    , output wire  result_1_4_10
    , output wire  result_1_4_11
    , output wire  result_1_4_12
    , output wire  result_1_4_13
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [79:0] result_4;
  // spec.hs:244:1-82
  wire  hasInput0;
  // spec.hs:244:1-82
  wire  timer0Over;
  wire [924:0] result_5;
  wire [6:0] c$app_arg;
  wire  result_6;
  wire [6:0] c$app_arg_0;
  wire  result_7;
  wire [6:0] c$app_arg_1;
  wire  result_8;
  wire [6:0] c$app_arg_2;
  wire  result_9;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [1:0] c$case_scrut_0;
  wire [71:0] result_10;
  // spec.hs:298:1-70
  wire [0:0] i;
  // spec.hs:298:1-70
  wire [5:0] ws;
  wire [6:0] c$app_arg_3;
  wire  result_11;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_1;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [1:0] c$case_scrut_2;
  wire [71:0] result_12;
  // spec.hs:298:1-70
  wire [0:0] i_0;
  // spec.hs:298:1-70
  wire [5:0] ws_0;
  wire [6:0] c$app_arg_4;
  wire  result_13;
  wire [6:0] c$app_arg_5;
  wire  result_14;
  wire [6:0] c$app_arg_6;
  wire  result_15;
  wire [6:0] c$app_arg_7;
  wire  result_16;
  wire [6:0] c$app_arg_8;
  wire  result_17;
  wire [6:0] c$app_arg_9;
  wire  result_18;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_3;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [1:0] c$case_scrut_4;
  wire [71:0] result_19;
  // spec.hs:298:1-70
  wire [0:0] i_1;
  // spec.hs:298:1-70
  wire [5:0] ws_1;
  wire [6:0] c$app_arg_10;
  wire  result_20;
  wire [6:0] c$app_arg_11;
  wire  result_21;
  wire [6:0] c$app_arg_12;
  wire  result_22;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_5;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire [71:0] result_23;
  // spec.hs:298:1-70
  wire [0:0] i_2;
  // spec.hs:298:1-70
  wire [5:0] ws_2;
  // spec.hs:311:1-60
  wire [7:0] tag;
  wire [71:0] result_24;
  // spec.hs:663:1-156
  reg [71:0] result_25 = {8'd4,   64'sd0};
  // spec.hs:663:1-156
  wire [71:0] t;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // spec.hs:305:1-62
  wire [7:0] winTag;
  // spec.hs:305:1-62
  wire signed [63:0] winData;
  wire [71:0] c$case_alt;
  wire [7:0] result_26;
  wire [7:0] c$app_arg_13;
  // spec.hs:305:1-62
  wire [7:0] winTag_0;
  // spec.hs:305:1-62
  wire signed [63:0] winData_0;
  wire [71:0] c$case_alt_0;
  wire [7:0] result_27;
  wire [7:0] c$app_arg_14;
  wire [71:0] result_28;
  // spec.hs:624:1-130
  reg [71:0] result_29 = {8'd4,   64'sd0};
  // spec.hs:624:1-130
  wire [71:0] t_0;
  wire signed [63:0] x_1;
  // spec.hs:324:1-104
  wire [71:0] c$out8_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta;
  // spec.hs:311:1-60
  wire [7:0] tag_0;
  wire [71:0] result_30;
  // spec.hs:614:1-155
  reg [71:0] result_31 = {8'd4,   64'sd0};
  // spec.hs:614:1-155
  wire [71:0] t_1;
  wire signed [63:0] x_2;
  wire signed [63:0] y_0;
  // spec.hs:324:1-104
  wire [71:0] c$out7_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta_0;
  // spec.hs:311:1-60
  wire [7:0] tag_1;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch;
  // spec.hs:305:1-62
  wire [7:0] winTag_1;
  // spec.hs:305:1-62
  wire signed [63:0] winData_1;
  wire [71:0] c$case_alt_1;
  wire [7:0] result_32;
  wire [7:0] c$app_arg_15;
  wire [71:0] result_33;
  // spec.hs:604:1-155
  reg [71:0] result_34 = {8'd4,   64'sd0};
  // spec.hs:604:1-155
  wire [71:0] t_2;
  wire signed [63:0] x_3;
  wire signed [63:0] y_1;
  // spec.hs:324:1-104
  wire [71:0] c$out6_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta_1;
  // spec.hs:311:1-60
  wire [7:0] tag_2;
  wire [71:0] result_35;
  // spec.hs:595:1-130
  reg [71:0] result_36 = {8'd4,   64'sd0};
  // spec.hs:595:1-130
  wire [71:0] t_3;
  wire signed [63:0] x_4;
  wire [3:0] c$app_arg_16;
  wire  result_37;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_0;
  // spec.hs:324:1-104
  wire [71:0] c$out6_case_alt_0;
  // spec.hs:311:1-60
  wire signed [63:0] dta_2;
  // spec.hs:311:1-60
  wire [7:0] tag_3;
  wire [71:0] result_38;
  // spec.hs:586:1-130
  reg [71:0] result_39 = {8'd4,   64'sd0};
  // spec.hs:586:1-130
  wire [71:0] t_4;
  wire signed [63:0] x_5;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_7;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [1:0] c$case_scrut_8;
  wire [71:0] result_40;
  // spec.hs:298:1-70
  wire [0:0] i_3;
  // spec.hs:298:1-70
  wire [5:0] ws_3;
  wire [143:0] result_41;
  // spec.hs:576:1-138
  reg [143:0] result_42 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:576:1-138
  wire [143:0] t_5;
  wire [71:0] result_43;
  // spec.hs:566:1-155
  reg [71:0] result_44 = {8'd4,   64'sd0};
  // spec.hs:566:1-155
  wire [71:0] t_6;
  wire signed [63:0] x_6;
  wire signed [63:0] y_2;
  // spec.hs:305:1-62
  wire [7:0] winTag_2;
  // spec.hs:305:1-62
  wire signed [63:0] winData_2;
  wire [71:0] c$case_alt_2;
  wire [7:0] result_45;
  wire [7:0] c$app_arg_17;
  wire [71:0] result_46;
  // spec.hs:673:1-131
  reg [71:0] result_47 = {8'd4,   64'sd0};
  // spec.hs:673:1-131
  wire [71:0] t_7;
  wire signed [63:0] x_7;
  // spec.hs:324:1-104
  wire [71:0] c$out13_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta_3;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_1;
  // spec.hs:324:1-104
  wire [71:0] c$out2_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta_4;
  // spec.hs:311:1-60
  wire [7:0] tag_4;
  wire [71:0] result_48;
  // spec.hs:556:1-155
  reg [71:0] result_49 = {8'd4,   64'sd0};
  // spec.hs:556:1-155
  wire [71:0] t_8;
  wire signed [63:0] x_8;
  wire signed [63:0] y_3;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_9;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [1:0] c$case_scrut_10;
  wire [71:0] result_50;
  // spec.hs:298:1-70
  wire [0:0] i_4;
  // spec.hs:298:1-70
  wire [5:0] ws_4;
  wire [143:0] result_51;
  // spec.hs:545:1-163
  reg [143:0] result_52 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:545:1-163
  wire [143:0] t_9;
  wire signed [63:0] x_9;
  wire signed [63:0] y_4;
  // spec.hs:305:1-62
  wire [7:0] winTag_3;
  // spec.hs:305:1-62
  wire signed [63:0] winData_3;
  wire [71:0] c$case_alt_3;
  wire [7:0] result_53;
  wire [7:0] c$app_arg_18;
  // spec.hs:324:1-104
  wire [71:0] c$out0_case_alt;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_2;
  wire [2:0] c$app_arg_19;
  wire  result_54;
  // spec.hs:324:1-104
  wire [71:0] c$out1_case_alt;
  // spec.hs:311:1-60
  wire signed [63:0] dta_5;
  // spec.hs:311:1-60
  wire [7:0] tag_5;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_3;
  wire [3:0] c$app_arg_20;
  wire  result_55;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_4;
  wire [4:0] c$app_arg_21;
  wire  result_56;
  wire [2:0] c$app_arg_22;
  wire  result_57;
  wire [3:0] c$app_arg_23;
  wire  result_58;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_5;
  wire [4:0] c$app_arg_24;
  wire  result_59;
  wire [4:0] c$app_arg_25;
  wire  result_60;
  // spec.hs:311:1-60
  wire [7:0] tagToMatch_6;
  wire [5:0] c$app_arg_26;
  wire  result_61;
  wire [3:0] c$app_arg_27;
  wire  result_62;
  wire [4:0] c$app_arg_28;
  wire  result_63;
  // spec.hs:539:1-122
  reg [71:0] result_64 = {8'd4,   64'sd0};
  // spec.hs:539:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:324:1-104
  reg signed [63:0] c$input0Win_app_arg = (64'sd0);
  wire [1:0] c$app_arg_29;
  wire  result_65;
  wire [719:0] c$app_arg_30;
  wire [119:0] result_66;
  wire [599:0] c$app_arg_31;
  wire [119:0] result_67;
  wire [479:0] c$app_arg_32;
  wire [119:0] result_68;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_11;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_12;
  wire [71:0] c$case_scrut_11;
  wire [1:0] c$case_scrut_12;
  wire [71:0] result_69;
  // spec.hs:298:1-70
  wire [0:0] i_5;
  // spec.hs:298:1-70
  wire [5:0] ws_5;
  wire [143:0] result_70;
  // spec.hs:643:1-164
  reg [143:0] result_71 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:643:1-164
  wire [143:0] t_10;
  wire signed [63:0] x_10;
  wire signed [63:0] y_5;
  // spec.hs:305:1-62
  wire [7:0] winTag_4;
  // spec.hs:305:1-62
  wire signed [63:0] winData_4;
  wire [71:0] c$case_alt_4;
  wire [7:0] result_72;
  wire [7:0] c$app_arg_33;
  wire [71:0] result_73;
  // spec.hs:654:1-131
  reg [71:0] result_74 = {8'd4,   64'sd0};
  // spec.hs:654:1-131
  wire [71:0] t_11;
  wire signed [63:0] x_11;
  // spec.hs:298:1-70
  wire [147:0] c$ws_app_arg_13;
  // spec.hs:298:1-70
  wire [3:0] c$ws_app_arg_14;
  wire [71:0] c$case_scrut_13;
  wire [1:0] c$case_scrut_14;
  wire [71:0] result_75;
  // spec.hs:298:1-70
  wire [0:0] i_6;
  // spec.hs:298:1-70
  wire [5:0] ws_6;
  wire [2:0] c$app_arg_34;
  wire  result_76;
  wire [3:0] c$app_arg_35;
  wire  result_77;
  wire [359:0] c$app_arg_36;
  wire [119:0] result_78;
  wire [239:0] c$app_arg_37;
  wire [119:0] result_79;
  // spec.hs:523:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_80;
  // spec.hs:523:9-81
  wire  b;
  // spec.hs:523:9-81
  wire [7:0] f1;
  wire [7:0] result_81;
  // spec.hs:324:1-104
  wire  p13;
  // spec.hs:523:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_82;
  // spec.hs:523:9-81
  wire  b_0;
  // spec.hs:523:9-81
  wire [7:0] f1_0;
  wire [7:0] result_83;
  // spec.hs:324:1-104
  wire  p12;
  // spec.hs:523:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_84;
  // spec.hs:523:9-81
  wire  b_1;
  // spec.hs:523:9-81
  wire [7:0] f1_1;
  wire [7:0] result_85;
  // spec.hs:324:1-104
  wire  p11;
  // spec.hs:523:9-81
  reg [7:0] t_15 = 8'd1;
  wire [7:0] result_86;
  // spec.hs:523:9-81
  wire  b_2;
  // spec.hs:523:9-81
  wire [7:0] f1_2;
  wire [7:0] result_87;
  // spec.hs:324:1-104
  wire  p10;
  // spec.hs:523:9-81
  reg [7:0] t_16 = 8'd1;
  wire [7:0] result_88;
  // spec.hs:523:9-81
  wire  b_3;
  // spec.hs:523:9-81
  wire [7:0] f1_3;
  wire [7:0] result_89;
  // spec.hs:324:1-104
  wire  p8;
  // spec.hs:523:9-81
  reg [7:0] t_17 = 8'd1;
  wire [7:0] result_90;
  // spec.hs:523:9-81
  wire  b_4;
  // spec.hs:523:9-81
  wire [7:0] f1_4;
  wire [7:0] result_91;
  // spec.hs:324:1-104
  wire  p7;
  // spec.hs:523:9-81
  reg [7:0] t_18 = 8'd1;
  wire [7:0] result_92;
  // spec.hs:523:9-81
  wire  b_5;
  // spec.hs:523:9-81
  wire [7:0] f1_5;
  wire [7:0] result_93;
  // spec.hs:324:1-104
  wire  p6;
  // spec.hs:523:9-81
  reg [7:0] t_19 = 8'd1;
  wire [7:0] result_94;
  // spec.hs:523:9-81
  wire  b_6;
  // spec.hs:523:9-81
  wire [7:0] f1_6;
  wire [7:0] result_95;
  // spec.hs:324:1-104
  wire  p5;
  // spec.hs:523:9-81
  reg [7:0] t_20 = 8'd1;
  wire [7:0] result_96;
  // spec.hs:523:9-81
  wire  b_7;
  // spec.hs:523:9-81
  wire [7:0] f1_7;
  wire [7:0] result_97;
  // spec.hs:324:1-104
  wire  p4;
  // spec.hs:523:9-81
  reg [7:0] t_21 = 8'd1;
  wire [7:0] result_98;
  // spec.hs:523:9-81
  wire  b_8;
  // spec.hs:523:9-81
  wire [7:0] f1_8;
  wire [7:0] result_99;
  // spec.hs:324:1-104
  wire  p3;
  // spec.hs:523:9-81
  reg [7:0] t_22 = 8'd1;
  wire [7:0] result_100;
  // spec.hs:523:9-81
  wire  b_9;
  // spec.hs:523:9-81
  wire [7:0] f1_9;
  wire [7:0] result_101;
  // spec.hs:324:1-104
  wire  p2;
  // spec.hs:523:9-81
  reg [7:0] t_23 = 8'd1;
  wire [7:0] result_102;
  // spec.hs:523:9-81
  wire  b_10;
  // spec.hs:523:9-81
  wire [7:0] f1_10;
  wire [7:0] result_103;
  // spec.hs:324:1-104
  wire  p1;
  // spec.hs:523:9-81
  reg [7:0] t_24 = 8'd1;
  wire [7:0] result_104;
  // spec.hs:523:9-81
  wire  b_11;
  // spec.hs:523:9-81
  wire [7:0] f1_11;
  wire [7:0] result_105;
  // spec.hs:324:1-104
  wire  p0;
  // spec.hs:290:1-72
  wire [147:0] c$ws_app_arg_15;
  // spec.hs:290:1-72
  wire [3:0] c$ws_app_arg_16;
  wire [71:0] c$case_scrut_15;
  wire [1:0] c$case_scrut_16;
  wire [71:0] result_106;
  wire [7:0] result_107;
  wire [7:0] c$app_arg_38;
  // spec.hs:290:1-72
  wire [0:0] i_7;
  // spec.hs:290:1-72
  wire [5:0] ws_7;
  wire [143:0] result_108;
  // spec.hs:633:1-138
  reg [143:0] result_109 = {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
  // spec.hs:633:1-138
  wire [143:0] t_25;
  wire signed [63:0] x_12;
  wire [1:0] c$app_arg_39;
  wire  result_110;
  // spec.hs:523:9-81
  reg [7:0] t_26 = 8'd1;
  wire [7:0] result_111;
  // spec.hs:523:9-81
  wire  b_12;
  // spec.hs:523:9-81
  wire [7:0] f1_12;
  wire [7:0] result_112;
  // spec.hs:324:1-104
  wire  p9;
  // spec.hs:324:1-104
  wire [13:0] pacings;
  // spec.hs:523:9-81
  reg [7:0] t_27 = 8'd1;
  wire [7:0] result_113;
  // spec.hs:523:9-81
  wire  b_13;
  // spec.hs:523:9-81
  wire [7:0] f1_13;
  wire [7:0] result_114;
  // spec.hs:324:1-104
  wire  input0HasData;
  // spec.hs:324:1-104
  wire [64:0] inputs_2;
  // spec.hs:530:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_115;
  wire signed [63:0] result_116;
  // spec.hs:530:1-81
  wire  b_14;
  wire signed [63:0] result_117;
  wire signed [63:0] x_13;
  wire  result_118;
  // spec.hs:324:1-104
  wire  b_15;
  wire [80:0] result_119;
  reg [78:0] c$app_arg_40 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                      1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
  wire [78:0] c$case_alt_5;
  wire [78:0] c$case_alt_6;
  wire [78:0] c$case_alt_7;
  reg [78:0] c$case_alt_8;
  reg [78:0] c$case_alt_9;
  wire [78:0] c$case_alt_10;
  reg  c$app_arg_41 = 1'b0;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  wire  c$case_alt_14;
  reg  c$case_alt_15;
  reg  c$app_arg_42 = 1'b0;
  wire  c$case_alt_16;
  wire  c$case_alt_17;
  wire  c$case_alt_18;
  // spec.hs:175:1-78
  reg [315:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:175:1-78
  wire [315:0] c$buffer_case_alt;
  // spec.hs:175:1-78
  wire [315:0] c$buffer_case_alt_0;
  // spec.hs:175:1-78
  wire [315:0] c$buffer_case_alt_1;
  // spec.hs:175:1-78
  wire [78:0] qData;
  // spec.hs:175:1-78
  wire signed [63:0] x_14;
  // spec.hs:175:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:175:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:175:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:175:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:689:1-129
  wire  qPopValid;
  // spec.hs:689:1-129
  wire  qPush;
  // spec.hs:689:1-129
  wire  qPop;
  wire [64:0] inputs;
  wire [3:0] c$vec2;
  wire [3:0] c$vec2_0;
  wire [3:0] c$vec2_1;
  wire [3:0] c$vec2_2;
  wire [3:0] c$vec2_3;
  wire [215:0] t_projection_4;
  wire [3:0] c$vec2_4;
  wire [215:0] t_projection_6;
  wire [3:0] c$vec2_5;
  wire [215:0] t_projection_8;
  wire [3:0] c$vec2_6;
  wire [3:0] c$vec2_7;
  wire [215:0] t_projection_11;
  wire signed [63:0] c$tte_rhs;
  wire [394:0] c$buffer_case_alt_sel_alt_t_1;
  wire [394:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [927:0] result;
  wire [909:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [64:0] result_0_7;
  wire [64:0] result_0_8;
  wire [64:0] result_0_9;
  wire [64:0] result_0_10;
  wire [64:0] result_0_11;
  wire [64:0] result_0_12;
  wire [64:0] result_0_13;
  wire [17:0] result_1;
  wire [13:0] result_1_4;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {hasInput0 | (timer0Over | (timer0Over | timer0Over)),
                     {inputs,   {hasInput0,   hasInput0,
                                 hasInput0,   hasInput0,   hasInput0,
                                 hasInput0,   hasInput0,   hasInput0,
                                 hasInput0,   timer0Over,   timer0Over,
                                 timer0Over,   hasInput0,   hasInput0}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{result_115 & (~ result_118),
                      {{$signed(result_23[63:0]),   result_22},
                       {dta_4,   result_21},
                       {$signed(result_44[63:0]),   result_20},
                       {$signed(result_19[63:0]),   result_18},
                       {dta_2,   result_17},   {dta_1,   result_16},
                       {$signed(result_34[63:0]),   result_15},
                       {dta,   result_14},
                       {$signed(result_29[63:0]),   result_13},
                       {$signed(result_12[63:0]),   result_11},
                       {$signed(result_10[63:0]),   result_9},
                       {dta_0,   result_8},   {dta_3,   result_7},
                       {$signed(result_47[63:0]),   result_6}}},
                     pacings};

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= p13;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  assign c$app_arg = {p13,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res,   iterateI_ho1_4_res,
                      iterateI_ho1_5_res};



  assign result_6 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= p12;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_10;



  assign c$app_arg_0 = {p12,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0};



  assign result_7 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= p11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_16;



  assign c$app_arg_1 = {p11,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_1};



  assign result_8 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  wire  iterateI_ho1_5_res_2;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= p10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_4_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_22;



  assign c$app_arg_2 = {p10,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2,   iterateI_ho1_5_res_2};



  assign result_9 = c$app_arg_2[1-1:0];

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_8;
  generate
  for (i_8 = 0; i_8 < 2; i_8 = i_8 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_71[i_8*72+:72];
    wire [1:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_8*2+:2];
    wire [73:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_8*74+:74] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 2; i_9 = i_9 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [73:0] map_in;
    assign map_in = c$ws_app_arg[i_9*74+:74];
    wire [1:0] map_out;

    assign map_index = 1'd1 - i_9[0+:1];
    wire [1:0] c$case_alt_19;
    // spec.hs:298:1-70
    wire [7:0] t_28;
    // spec.hs:298:1-70
    wire [71:0] x_16;
    assign map_out = c$case_alt_19;

    assign c$case_alt_19 = (t_28 == result_66[31:24]) ? {1'b1,map_index} : map_in[1:0];

    assign t_28 = x_16[71:64];

    assign x_16 = map_in[73:2];


    assign c$ws_app_arg_0[i_9*2+:2] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:2-1];
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10=i_10+1) begin : mk_array
    assign vecArray[(2-1)-i_10] = result_71[i_10*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-1) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[6-1 -: 2];

  assign result_10 = c$case_scrut_0[1:1] ? {result_66[31:24],
                                            $signed(c$case_scrut[63:0])} : {result_66[31:24],
                                                                            64'sd0};

  assign i = c$case_scrut_0[0:0];

  assign ws = {c$ws_app_arg_0,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_3;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= p9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_28;



  assign c$app_arg_3 = {p9,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_3};



  assign result_11 = c$app_arg_3[1-1:0];

  assign c$vec2_0 = (ws_0[4-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 2; i_12 = i_12 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_109[i_12*72+:72];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_12*2+:2];
    wire [73:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_12*74+:74] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 2; i_13 = i_13 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [73:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_13*74+:74];
    wire [1:0] map_out_0;

    assign map_index_0 = 1'd1 - i_13[0+:1];
    wire [1:0] c$case_alt_20;
    // spec.hs:298:1-70
    wire [7:0] t_29;
    // spec.hs:298:1-70
    wire [71:0] x_17;
    assign map_out_0 = c$case_alt_20;

    assign c$case_alt_20 = (t_29 == result_66[39:32]) ? {1'b1,map_index_0} : map_in_0[1:0];

    assign t_29 = x_17[71:64];

    assign x_17 = map_in_0[73:2];


    assign c$ws_app_arg_2[i_13*2+:2] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:2-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 2; i_14=i_14+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_14] = result_109[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-1) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[6-1 -: 2];

  assign result_12 = c$case_scrut_2[1:1] ? {result_66[39:32],
                                            $signed(c$case_scrut_1[63:0])} : {result_66[39:32],
                                                                              64'sd0};

  assign i_0 = c$case_scrut_2[0:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_4;
  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_34;



  assign c$app_arg_4 = {p8,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4,   iterateI_ho1_5_res_4};



  assign result_13 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_5;
  wire  iterateI_ho1_5_res_5;
  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_4_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_5 = c$bb_res_res_40;



  assign c$app_arg_5 = {p7,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_5,   iterateI_ho1_5_res_5};



  assign result_14 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_6;
  wire  iterateI_ho1_5_res_6;
  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_4_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_6 = c$bb_res_res_46;



  assign c$app_arg_6 = {p6,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_6,   iterateI_ho1_5_res_6};



  assign result_15 = c$app_arg_6[1-1:0];

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  wire  iterateI_ho1_4_res_7;
  wire  iterateI_ho1_5_res_7;
  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_3_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_51;



  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_4_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_7 = c$bb_res_res_52;



  assign c$app_arg_7 = {p5,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7,
                        iterateI_ho1_4_res_7,   iterateI_ho1_5_res_7};



  assign result_16 = c$app_arg_7[1-1:0];

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  wire  iterateI_ho1_3_res_8;
  wire  iterateI_ho1_4_res_8;
  wire  iterateI_ho1_5_res_8;
  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_2_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_56;



  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_8 = c$bb_res_res_57;



  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_4_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_8 = c$bb_res_res_58;



  assign c$app_arg_8 = {p4,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8,   iterateI_ho1_3_res_8,
                        iterateI_ho1_4_res_8,   iterateI_ho1_5_res_8};



  assign result_17 = c$app_arg_8[1-1:0];

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_9;
  wire  iterateI_ho1_4_res_9;
  wire  iterateI_ho1_5_res_9;
  reg  c$bb_res_res_59 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_59;



  reg  c$bb_res_res_60 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_60;



  reg  c$bb_res_res_61 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_61;



  reg  c$bb_res_res_62 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_62;



  reg  c$bb_res_res_63 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_3_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_9 = c$bb_res_res_63;



  reg  c$bb_res_res_64 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_4_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_9 = c$bb_res_res_64;



  assign c$app_arg_9 = {p3,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                        iterateI_ho1_2_res_9,   iterateI_ho1_3_res_9,
                        iterateI_ho1_4_res_9,   iterateI_ho1_5_res_9};



  assign result_18 = c$app_arg_9[1-1:0];

  assign c$vec2_1 = (ws_1[4-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 2; i_15 = i_15 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_42[i_15*72+:72];
    wire [1:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_15*2+:2];
    wire [73:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_15*74+:74] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16 = i_16 + 1) begin : imap_1
    wire [1-1:0] map_index_1;
    wire [73:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_16*74+:74];
    wire [1:0] map_out_1;

    assign map_index_1 = 1'd1 - i_16[0+:1];
    wire [1:0] c$case_alt_21;
    // spec.hs:298:1-70
    wire [7:0] t_30;
    // spec.hs:298:1-70
    wire [71:0] x_18;
    assign map_out_1 = c$case_alt_21;

    assign c$case_alt_21 = (t_30 == result_66[87:80]) ? {1'b1,map_index_1} : map_in_1[1:0];

    assign t_30 = x_18[71:64];

    assign x_18 = map_in_1[73:2];


    assign c$ws_app_arg_4[i_16*2+:2] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:2-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 2; i_17=i_17+1) begin : mk_array_1
    assign vecArray_1[(2-1)-i_17] = result_42[i_17*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-1) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[6-1 -: 2];

  assign result_19 = c$case_scrut_4[1:1] ? {result_66[87:80],
                                            $signed(c$case_scrut_3[63:0])} : {result_66[87:80],
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[0:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_10;
  wire  iterateI_ho1_2_res_10;
  wire  iterateI_ho1_3_res_10;
  wire  iterateI_ho1_4_res_10;
  wire  iterateI_ho1_5_res_10;
  reg  c$bb_res_res_65 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_65;



  reg  c$bb_res_res_66 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_66;



  reg  c$bb_res_res_67 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_67;



  reg  c$bb_res_res_68 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= iterateI_ho1_2_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_10 = c$bb_res_res_68;



  reg  c$bb_res_res_69 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_3_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_10 = c$bb_res_res_69;



  reg  c$bb_res_res_70 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= iterateI_ho1_4_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_10 = c$bb_res_res_70;



  assign c$app_arg_10 = {p2,
                         iterateI_ho1_0_res_10,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10,
                         iterateI_ho1_3_res_10,
                         iterateI_ho1_4_res_10,
                         iterateI_ho1_5_res_10};



  assign result_20 = c$app_arg_10[1-1:0];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_11;
  wire  iterateI_ho1_2_res_11;
  wire  iterateI_ho1_3_res_11;
  wire  iterateI_ho1_4_res_11;
  wire  iterateI_ho1_5_res_11;
  reg  c$bb_res_res_71 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_71;



  reg  c$bb_res_res_72 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_72;



  reg  c$bb_res_res_73 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_73;



  reg  c$bb_res_res_74 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_2_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_11 = c$bb_res_res_74;



  reg  c$bb_res_res_75 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_3_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_11 = c$bb_res_res_75;



  reg  c$bb_res_res_76 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= iterateI_ho1_4_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_11 = c$bb_res_res_76;



  assign c$app_arg_11 = {p1,
                         iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11,
                         iterateI_ho1_3_res_11,
                         iterateI_ho1_4_res_11,
                         iterateI_ho1_5_res_11};



  assign result_21 = c$app_arg_11[1-1:0];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_12;
  wire  iterateI_ho1_2_res_12;
  wire  iterateI_ho1_3_res_12;
  wire  iterateI_ho1_4_res_12;
  wire  iterateI_ho1_5_res_12;
  reg  c$bb_res_res_77 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_77;



  reg  c$bb_res_res_78 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_78;



  reg  c$bb_res_res_79 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_79;



  reg  c$bb_res_res_80 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_12 = c$bb_res_res_80;



  reg  c$bb_res_res_81 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= iterateI_ho1_3_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_12 = c$bb_res_res_81;



  reg  c$bb_res_res_82 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_4_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_12 = c$bb_res_res_82;



  assign c$app_arg_12 = {p0,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_12,
                         iterateI_ho1_3_res_12,
                         iterateI_ho1_4_res_12,
                         iterateI_ho1_5_res_12};



  assign result_22 = c$app_arg_12[1-1:0];

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 2; i_18 = i_18 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_52[i_18*72+:72];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_18*2+:2];
    wire [73:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_18*74+:74] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 2; i_19 = i_19 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [73:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_19*74+:74];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_19[0+:1];
    wire [1:0] c$case_alt_22;
    // spec.hs:298:1-70
    wire [7:0] t_31;
    // spec.hs:298:1-70
    wire [71:0] x_19;
    assign map_out_2 = c$case_alt_22;

    assign c$case_alt_22 = (t_31 == result_66[111:104]) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_31 = x_19[71:64];

    assign x_19 = map_in_2[73:2];


    assign c$ws_app_arg_6[i_19*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:2-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 2; i_20=i_20+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_20] = result_52[i_20*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_23 = c$case_scrut_6[1:1] ? {result_66[111:104],
                                            $signed(c$case_scrut_5[63:0])} : {result_66[111:104],
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  assign tag = result_25[71:64];

  assign result_24 = result_62 ? t : result_25;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign t = {result_78[15:8],   (x_0 + y)};

  assign x_0 = $signed(c$case_alt_0[63:0]);

  assign y = $signed(c$case_alt[63:0]);

  assign winTag = result_47[71:64];

  assign winData = $signed(result_47[63:0]);

  assign c$case_alt = (result_26 == winTag) ? {result_78[7:0],
                                               winData} : {result_78[7:0],   64'sd0};

  assign result_26 = (result_78[7:0] > 8'd1) ? c$app_arg_13 : (c$app_arg_13 + 8'd3);

  assign c$app_arg_13 = result_78[7:0] - 8'd1;

  assign winTag_0 = result_29[71:64];

  assign winData_0 = $signed(result_29[63:0]);

  assign c$case_alt_0 = (result_27 == winTag_0) ? {result_78[47:40],
                                                   winData_0} : {result_78[47:40],   64'sd0};

  assign result_27 = (result_78[47:40] > 8'd1) ? c$app_arg_14 : (c$app_arg_14 + 8'd3);

  assign c$app_arg_14 = result_78[47:40] - 8'd1;

  assign result_28 = result_61 ? t_0 : result_29;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_29_register
    if ( rst) begin
      result_29 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_29 <= result_28;
    end
  end
  // register end

  assign t_0 = {result_67[47:40],
                (x_1 + 64'sd1)};

  assign x_1 = $signed(c$out8_case_alt[63:0]);

  assign c$out8_case_alt = (tag_0 == tagToMatch_6) ? {tag_0,
                                                      dta} : {tagToMatch_6,   64'sd0};

  assign dta = $signed(result_31[63:0]);

  assign tag_0 = result_31[71:64];

  assign result_30 = result_60 ? t_1 : result_31;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_31_register
    if ( rst) begin
      result_31 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_31 <= result_30;
    end
  end
  // register end

  assign t_1 = {result_68[55:48],   (x_2 + y_0)};

  assign x_2 = $signed(c$case_alt_1[63:0]);

  assign y_0 = $signed(c$out7_case_alt[63:0]);

  assign c$out7_case_alt = (tag_1 == tagToMatch) ? {tag_1,
                                                    dta_0} : {tagToMatch,   64'sd0};

  assign dta_0 = $signed(result_74[63:0]);

  assign tag_1 = result_74[71:64];

  assign tagToMatch = result_68[23:16];

  assign winTag_1 = result_34[71:64];

  assign winData_1 = $signed(result_34[63:0]);

  assign c$case_alt_1 = (result_32 == winTag_1) ? {result_68[63:56],
                                                   winData_1} : {result_68[63:56],   64'sd0};

  assign result_32 = (result_68[63:56] > 8'd1) ? c$app_arg_15 : (c$app_arg_15 + 8'd3);

  assign c$app_arg_15 = result_68[63:56] - 8'd1;

  assign result_33 = result_59 ? t_2 : result_34;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_34_register
    if ( rst) begin
      result_34 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_34 <= result_33;
    end
  end
  // register end

  assign t_2 = {result_68[63:56],   (x_3 + y_1)};

  assign x_3 = $signed(c$out6_case_alt_0[63:0]);

  assign y_1 = $signed(c$out6_case_alt[63:0]);

  assign c$out6_case_alt = (tag_2 == tagToMatch_0) ? {tag_2,
                                                      dta_1} : {tagToMatch_0,   64'sd0};

  assign dta_1 = $signed(result_36[63:0]);

  assign tag_2 = result_36[71:64];

  assign result_35 = result_37 ? t_3 : result_36;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_36_register
    if ( rst) begin
      result_36 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_36 <= result_35;
    end
  end
  // register end

  assign t_3 = {result_78[71:64],
                (x_4 + 64'sd1)};

  assign x_4 = $signed(result_40[63:0]);

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_13;
  wire  iterateI_ho1_2_res_13;
  reg  c$bb_res_res_83 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_83;



  reg  c$bb_res_res_84 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_84;



  reg  c$bb_res_res_85 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= iterateI_ho1_1_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_85;



  assign c$app_arg_16 = {p5,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_13,
                         iterateI_ho1_2_res_13};



  assign result_37 = c$app_arg_16[1-1:0];

  assign tagToMatch_0 = result_68[71:64];

  assign c$out6_case_alt_0 = (tag_3 == tagToMatch_5) ? {tag_3,
                                                        dta_2} : {tagToMatch_5,   64'sd0};

  assign dta_2 = $signed(result_39[63:0]);

  assign tag_3 = result_39[71:64];

  assign result_38 = result_58 ? t_4 : result_39;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_39_register
    if ( rst) begin
      result_39 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_39 <= result_38;
    end
  end
  // register end

  assign t_4 = {result_78[79:72],
                (x_5 + 64'sd1)};

  assign x_5 = $signed(result_40[63:0]);

  assign c$vec2_3 = (ws_3[4-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 2; i_21 = i_21 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_42[i_21*72+:72];
    wire [1:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_21*2+:2];
    wire [73:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_21*74+:74] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 2; i_22 = i_22 + 1) begin : imap_3
    wire [1-1:0] map_index_3;
    wire [73:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_22*74+:74];
    wire [1:0] map_out_3;

    assign map_index_3 = 1'd1 - i_22[0+:1];
    wire [1:0] c$case_alt_26;
    // spec.hs:298:1-70
    wire [7:0] t_33;
    // spec.hs:298:1-70
    wire [71:0] x_20;
    assign map_out_3 = c$case_alt_26;

    assign c$case_alt_26 = (t_33 == result_78[87:80]) ? {1'b1,map_index_3} : map_in_3[1:0];

    assign t_33 = x_20[71:64];

    assign x_20 = map_in_3[73:2];


    assign c$ws_app_arg_8[i_22*2+:2] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:2-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 2; i_23=i_23+1) begin : mk_array_3
    assign vecArray_3[(2-1)-i_23] = result_42[i_23*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-1) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[6-1 -: 2];

  assign result_40 = c$case_scrut_8[1:1] ? {result_78[87:80],
                                            $signed(c$case_scrut_7[63:0])} : {result_78[87:80],
                                                                              64'sd0};

  assign i_3 = c$case_scrut_8[0:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,1'bx}};

  assign result_41 = result_57 ? t_5 : result_42;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_42_register
    if ( rst) begin
      result_42 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_42 <= result_41;
    end
  end
  // register end

  assign t_projection_4 = ({result_42,{result_79[87:80],   $signed(c$case_alt_3[63:0])}});

  assign t_5 = t_projection_4[143:0];

  assign result_43 = result_56 ? t_6 : result_44;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_44_register
    if ( rst) begin
      result_44 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_44 <= result_43;
    end
  end
  // register end

  assign t_6 = {result_68[95:88],   (x_6 + y_2)};

  assign x_6 = $signed(c$out2_case_alt[63:0]);

  assign y_2 = $signed(c$case_alt_2[63:0]);

  assign winTag_2 = result_47[71:64];

  assign winData_2 = $signed(result_47[63:0]);

  assign c$case_alt_2 = (result_45 == winTag_2) ? {result_68[7:0],
                                                   winData_2} : {result_68[7:0],   -64'sd1};

  assign result_45 = (result_68[7:0] > 8'd1) ? c$app_arg_17 : (c$app_arg_17 + 8'd3);

  assign c$app_arg_17 = result_68[7:0] - 8'd1;

  assign result_46 = result_63 ? t_7 : result_47;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_47_register
    if ( rst) begin
      result_47 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_47 <= result_46;
    end
  end
  // register end

  assign t_7 = {result_68[7:0],   (x_7 + 64'sd1)};

  assign x_7 = $signed(c$out13_case_alt[63:0]);

  assign c$out13_case_alt = (tag == tagToMatch_1) ? {tag,
                                                     dta_3} : {tagToMatch_1,   64'sd0};

  assign dta_3 = $signed(result_25[63:0]);

  assign tagToMatch_1 = result_68[15:8];

  assign c$out2_case_alt = (tag_4 == tagToMatch_4) ? {tag_4,
                                                      dta_4} : {tagToMatch_4,   64'sd0};

  assign dta_4 = $signed(result_49[63:0]);

  assign tag_4 = result_49[71:64];

  assign result_48 = result_55 ? t_8 : result_49;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_49_register
    if ( rst) begin
      result_49 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_49 <= result_48;
    end
  end
  // register end

  assign t_8 = {result_78[103:96],   (x_8 + y_3)};

  assign x_8 = $signed(c$out1_case_alt[63:0]);

  assign y_3 = $signed(result_50[63:0]);

  assign c$vec2_4 = (ws_4[4-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 2; i_24 = i_24 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_52[i_24*72+:72];
    wire [1:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_24*2+:2];
    wire [73:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_24*74+:74] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 2; i_25 = i_25 + 1) begin : imap_4
    wire [1-1:0] map_index_4;
    wire [73:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_25*74+:74];
    wire [1:0] map_out_4;

    assign map_index_4 = 1'd1 - i_25[0+:1];
    wire [1:0] c$case_alt_27;
    // spec.hs:298:1-70
    wire [7:0] t_34;
    // spec.hs:298:1-70
    wire [71:0] x_21;
    assign map_out_4 = c$case_alt_27;

    assign c$case_alt_27 = (t_34 == result_78[111:104]) ? {1'b1,map_index_4} : map_in_4[1:0];

    assign t_34 = x_21[71:64];

    assign x_21 = map_in_4[73:2];


    assign c$ws_app_arg_10[i_25*2+:2] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:2-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 2; i_26=i_26+1) begin : mk_array_4
    assign vecArray_4[(2-1)-i_26] = result_52[i_26*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-1) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[6-1 -: 2];

  assign result_50 = c$case_scrut_10[1:1] ? {result_78[111:104],
                                             $signed(c$case_scrut_9[63:0])} : {result_78[111:104],
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[0:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,1'bx}};

  assign result_51 = result_54 ? t_9 : result_52;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_52_register
    if ( rst) begin
      result_52 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_52 <= result_51;
    end
  end
  // register end

  assign t_projection_6 = ({result_52,{result_79[111:104],   (x_9 + y_4)}});

  assign t_9 = t_projection_6[143:0];

  assign x_9 = $signed(c$out0_case_alt[63:0]);

  assign y_4 = $signed(c$case_alt_3[63:0]);

  assign winTag_3 = result_44[71:64];

  assign winData_3 = $signed(result_44[63:0]);

  assign c$case_alt_3 = (result_53 == winTag_3) ? {result_79[95:88],
                                                   winData_3} : {result_79[95:88],   64'sd0};

  assign result_53 = (result_79[95:88] > 8'd1) ? c$app_arg_18 : (c$app_arg_18 + 8'd3);

  assign c$app_arg_18 = result_79[95:88] - 8'd1;

  assign c$out0_case_alt = (tag_5 == tagToMatch_2) ? {tag_5,
                                                      dta_5} : {tagToMatch_2,   64'sd0};

  assign tagToMatch_2 = result_79[119:112];

  wire  iterateI_ho1_0_res_14;
  wire  iterateI_ho1_1_res_14;
  reg  c$bb_res_res_86 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_86;



  reg  c$bb_res_res_87 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_87_delay
    if (en) begin
      c$bb_res_res_87 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_87;



  assign c$app_arg_19 = {p0,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_14};



  assign result_54 = c$app_arg_19[1-1:0];

  assign c$out1_case_alt = (tag_5 == tagToMatch_3) ? {tag_5,
                                                      dta_5} : {tagToMatch_3,   64'sd0};

  assign dta_5 = $signed(result_64[63:0]);

  assign tag_5 = result_64[71:64];

  assign tagToMatch_3 = result_78[119:112];

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_15;
  wire  iterateI_ho1_2_res_14;
  reg  c$bb_res_res_88 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_88_delay
    if (en) begin
      c$bb_res_res_88 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_88;



  reg  c$bb_res_res_89 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_89_delay
    if (en) begin
      c$bb_res_res_89 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_89;



  reg  c$bb_res_res_90 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_90_delay
    if (en) begin
      c$bb_res_res_90 <= iterateI_ho1_1_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_90;



  assign c$app_arg_20 = {p1,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_15,
                         iterateI_ho1_2_res_14};



  assign result_55 = c$app_arg_20[1-1:0];

  assign tagToMatch_4 = result_68[103:96];

  wire  iterateI_ho1_0_res_16;
  wire  iterateI_ho1_1_res_16;
  wire  iterateI_ho1_2_res_15;
  wire  iterateI_ho1_3_res_13;
  reg  c$bb_res_res_91 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_91_delay
    if (en) begin
      c$bb_res_res_91 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_91;



  reg  c$bb_res_res_92 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_92_delay
    if (en) begin
      c$bb_res_res_92 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_92;



  reg  c$bb_res_res_93 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_93_delay
    if (en) begin
      c$bb_res_res_93 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_15 = c$bb_res_res_93;



  reg  c$bb_res_res_94 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_94_delay
    if (en) begin
      c$bb_res_res_94 <= iterateI_ho1_2_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_13 = c$bb_res_res_94;



  assign c$app_arg_21 = {p2,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_15,
                         iterateI_ho1_3_res_13};



  assign result_56 = c$app_arg_21[1-1:0];

  wire  iterateI_ho1_0_res_17;
  wire  iterateI_ho1_1_res_17;
  reg  c$bb_res_res_95 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_95_delay
    if (en) begin
      c$bb_res_res_95 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_95;



  reg  c$bb_res_res_96 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_96_delay
    if (en) begin
      c$bb_res_res_96 <= iterateI_ho1_0_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_96;



  assign c$app_arg_22 = {p3,
                         iterateI_ho1_0_res_17,
                         iterateI_ho1_1_res_17};



  assign result_57 = c$app_arg_22[1-1:0];

  wire  iterateI_ho1_0_res_18;
  wire  iterateI_ho1_1_res_18;
  wire  iterateI_ho1_2_res_16;
  reg  c$bb_res_res_97 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_97_delay
    if (en) begin
      c$bb_res_res_97 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_97;



  reg  c$bb_res_res_98 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_98_delay
    if (en) begin
      c$bb_res_res_98 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_18 = c$bb_res_res_98;



  reg  c$bb_res_res_99 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_99_delay
    if (en) begin
      c$bb_res_res_99 <= iterateI_ho1_1_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_16 = c$bb_res_res_99;



  assign c$app_arg_23 = {p4,
                         iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_18,
                         iterateI_ho1_2_res_16};



  assign result_58 = c$app_arg_23[1-1:0];

  assign tagToMatch_5 = result_68[79:72];

  wire  iterateI_ho1_0_res_19;
  wire  iterateI_ho1_1_res_19;
  wire  iterateI_ho1_2_res_17;
  wire  iterateI_ho1_3_res_14;
  reg  c$bb_res_res_100 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_100_delay
    if (en) begin
      c$bb_res_res_100 <= p6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_100;



  reg  c$bb_res_res_101 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_101_delay
    if (en) begin
      c$bb_res_res_101 <= iterateI_ho1_0_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_19 = c$bb_res_res_101;



  reg  c$bb_res_res_102 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_102_delay
    if (en) begin
      c$bb_res_res_102 <= iterateI_ho1_1_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_17 = c$bb_res_res_102;



  reg  c$bb_res_res_103 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_103_delay
    if (en) begin
      c$bb_res_res_103 <= iterateI_ho1_2_res_17;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_14 = c$bb_res_res_103;



  assign c$app_arg_24 = {p6,
                         iterateI_ho1_0_res_19,
                         iterateI_ho1_1_res_19,
                         iterateI_ho1_2_res_17,
                         iterateI_ho1_3_res_14};



  assign result_59 = c$app_arg_24[1-1:0];

  wire  iterateI_ho1_0_res_20;
  wire  iterateI_ho1_1_res_20;
  wire  iterateI_ho1_2_res_18;
  wire  iterateI_ho1_3_res_15;
  reg  c$bb_res_res_104 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_104_delay
    if (en) begin
      c$bb_res_res_104 <= p7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_20 = c$bb_res_res_104;



  reg  c$bb_res_res_105 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_105_delay
    if (en) begin
      c$bb_res_res_105 <= iterateI_ho1_0_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_20 = c$bb_res_res_105;



  reg  c$bb_res_res_106 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_106_delay
    if (en) begin
      c$bb_res_res_106 <= iterateI_ho1_1_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_18 = c$bb_res_res_106;



  reg  c$bb_res_res_107 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_107_delay
    if (en) begin
      c$bb_res_res_107 <= iterateI_ho1_2_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_15 = c$bb_res_res_107;



  assign c$app_arg_25 = {p7,
                         iterateI_ho1_0_res_20,
                         iterateI_ho1_1_res_20,
                         iterateI_ho1_2_res_18,
                         iterateI_ho1_3_res_15};



  assign result_60 = c$app_arg_25[1-1:0];

  assign tagToMatch_6 = result_67[55:48];

  wire  iterateI_ho1_0_res_21;
  wire  iterateI_ho1_1_res_21;
  wire  iterateI_ho1_2_res_19;
  wire  iterateI_ho1_3_res_16;
  wire  iterateI_ho1_4_res_13;
  reg  c$bb_res_res_108 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_108_delay
    if (en) begin
      c$bb_res_res_108 <= p8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_21 = c$bb_res_res_108;



  reg  c$bb_res_res_109 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_109_delay
    if (en) begin
      c$bb_res_res_109 <= iterateI_ho1_0_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_21 = c$bb_res_res_109;



  reg  c$bb_res_res_110 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_110_delay
    if (en) begin
      c$bb_res_res_110 <= iterateI_ho1_1_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_19 = c$bb_res_res_110;



  reg  c$bb_res_res_111 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_111_delay
    if (en) begin
      c$bb_res_res_111 <= iterateI_ho1_2_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_16 = c$bb_res_res_111;



  reg  c$bb_res_res_112 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_112_delay
    if (en) begin
      c$bb_res_res_112 <= iterateI_ho1_3_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_13 = c$bb_res_res_112;



  assign c$app_arg_26 = {p8,
                         iterateI_ho1_0_res_21,
                         iterateI_ho1_1_res_21,
                         iterateI_ho1_2_res_19,
                         iterateI_ho1_3_res_16,
                         iterateI_ho1_4_res_13};



  assign result_61 = c$app_arg_26[1-1:0];

  wire  iterateI_ho1_0_res_22;
  wire  iterateI_ho1_1_res_22;
  wire  iterateI_ho1_2_res_20;
  reg  c$bb_res_res_113 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_113_delay
    if (en) begin
      c$bb_res_res_113 <= p12;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_22 = c$bb_res_res_113;



  reg  c$bb_res_res_114 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_114_delay
    if (en) begin
      c$bb_res_res_114 <= iterateI_ho1_0_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_22 = c$bb_res_res_114;



  reg  c$bb_res_res_115 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_115_delay
    if (en) begin
      c$bb_res_res_115 <= iterateI_ho1_1_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_20 = c$bb_res_res_115;



  assign c$app_arg_27 = {p12,
                         iterateI_ho1_0_res_22,
                         iterateI_ho1_1_res_22,
                         iterateI_ho1_2_res_20};



  assign result_62 = c$app_arg_27[1-1:0];

  wire  iterateI_ho1_0_res_23;
  wire  iterateI_ho1_1_res_23;
  wire  iterateI_ho1_2_res_21;
  wire  iterateI_ho1_3_res_17;
  reg  c$bb_res_res_116 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_116_delay
    if (en) begin
      c$bb_res_res_116 <= p13;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_23 = c$bb_res_res_116;



  reg  c$bb_res_res_117 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_117_delay
    if (en) begin
      c$bb_res_res_117 <= iterateI_ho1_0_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_23 = c$bb_res_res_117;



  reg  c$bb_res_res_118 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_118_delay
    if (en) begin
      c$bb_res_res_118 <= iterateI_ho1_1_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_21 = c$bb_res_res_118;



  reg  c$bb_res_res_119 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_119_delay
    if (en) begin
      c$bb_res_res_119 <= iterateI_ho1_2_res_21;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_17 = c$bb_res_res_119;



  assign c$app_arg_28 = {p13,
                         iterateI_ho1_0_res_23,
                         iterateI_ho1_1_res_23,
                         iterateI_ho1_2_res_21,
                         iterateI_ho1_3_res_17};



  assign result_63 = c$app_arg_28[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_64_register
    if ( rst) begin
      result_64 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_64 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_65 ? {t_27,
                                         c$input0Win_app_arg} : result_64;

  // delay begin
  always @(posedge clk) begin : c$input0Win_app_arg_delay
    if (en) begin
      c$input0Win_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_24;
  reg  c$bb_res_res_120 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_120_delay
    if (en) begin
      c$bb_res_res_120 <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_24 = c$bb_res_res_120;



  assign c$app_arg_29 = {input0HasData,
                         iterateI_ho1_0_res_24};



  assign result_65 = c$app_arg_29[1-1:0];

  wire [119:0] iterateI_ho1_0_arg0;
  wire [119:0] iterateI_ho1_0_res_25;
  wire [119:0] iterateI_ho1_1_res_24;
  wire [119:0] iterateI_ho1_2_res_22;
  wire [119:0] iterateI_ho1_3_res_18;
  wire [119:0] iterateI_ho1_4_res_14;
  assign iterateI_ho1_0_arg0 = {t_27,   t_24,
                                t_23,   t_22,   t_21,   t_20,   t_19,   t_18,
                                t_17,   t_16,   t_26,   t_15,   t_14,   t_13,
                                t_12};

  reg [119:0] c$bb_res_res_121 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_121_delay
    if (en) begin
      c$bb_res_res_121 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_25 = c$bb_res_res_121;



  reg [119:0] c$bb_res_res_122 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_122_delay
    if (en) begin
      c$bb_res_res_122 <= iterateI_ho1_0_res_25;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_24 = c$bb_res_res_122;



  reg [119:0] c$bb_res_res_123 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_123_delay
    if (en) begin
      c$bb_res_res_123 <= iterateI_ho1_1_res_24;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_22 = c$bb_res_res_123;



  reg [119:0] c$bb_res_res_124 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_124_delay
    if (en) begin
      c$bb_res_res_124 <= iterateI_ho1_2_res_22;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_18 = c$bb_res_res_124;



  reg [119:0] c$bb_res_res_125 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_125_delay
    if (en) begin
      c$bb_res_res_125 <= iterateI_ho1_3_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_14 = c$bb_res_res_125;



  assign c$app_arg_30 = {{t_27,   t_24,   t_23,
                          t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                          t_16,   t_26,   t_15,   t_14,   t_13,   t_12},
                         iterateI_ho1_0_res_25,
                         iterateI_ho1_1_res_24,
                         iterateI_ho1_2_res_22,
                         iterateI_ho1_3_res_18,
                         iterateI_ho1_4_res_14};



  assign result_66 = c$app_arg_30[120-1:0];

  wire [119:0] iterateI_ho1_0_arg0_0;
  wire [119:0] iterateI_ho1_0_res_26;
  wire [119:0] iterateI_ho1_1_res_25;
  wire [119:0] iterateI_ho1_2_res_23;
  wire [119:0] iterateI_ho1_3_res_19;
  assign iterateI_ho1_0_arg0_0 = {t_27,   t_24,
                                  t_23,   t_22,   t_21,   t_20,   t_19,   t_18,
                                  t_17,   t_16,   t_26,   t_15,   t_14,   t_13,
                                  t_12};

  reg [119:0] c$bb_res_res_126 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_126_delay
    if (en) begin
      c$bb_res_res_126 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_26 = c$bb_res_res_126;



  reg [119:0] c$bb_res_res_127 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_127_delay
    if (en) begin
      c$bb_res_res_127 <= iterateI_ho1_0_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_25 = c$bb_res_res_127;



  reg [119:0] c$bb_res_res_128 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_128_delay
    if (en) begin
      c$bb_res_res_128 <= iterateI_ho1_1_res_25;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_23 = c$bb_res_res_128;



  reg [119:0] c$bb_res_res_129 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_129_delay
    if (en) begin
      c$bb_res_res_129 <= iterateI_ho1_2_res_23;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_19 = c$bb_res_res_129;



  assign c$app_arg_31 = {{t_27,   t_24,   t_23,
                          t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                          t_16,   t_26,   t_15,   t_14,   t_13,   t_12},
                         iterateI_ho1_0_res_26,
                         iterateI_ho1_1_res_25,
                         iterateI_ho1_2_res_23,
                         iterateI_ho1_3_res_19};



  assign result_67 = c$app_arg_31[120-1:0];

  wire [119:0] iterateI_ho1_0_arg0_1;
  wire [119:0] iterateI_ho1_0_res_27;
  wire [119:0] iterateI_ho1_1_res_26;
  wire [119:0] iterateI_ho1_2_res_24;
  assign iterateI_ho1_0_arg0_1 = {t_27,   t_24,
                                  t_23,   t_22,   t_21,   t_20,   t_19,   t_18,
                                  t_17,   t_16,   t_26,   t_15,   t_14,   t_13,
                                  t_12};

  reg [119:0] c$bb_res_res_130 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_130_delay
    if (en) begin
      c$bb_res_res_130 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_27 = c$bb_res_res_130;



  reg [119:0] c$bb_res_res_131 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_131_delay
    if (en) begin
      c$bb_res_res_131 <= iterateI_ho1_0_res_27;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_26 = c$bb_res_res_131;



  reg [119:0] c$bb_res_res_132 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_132_delay
    if (en) begin
      c$bb_res_res_132 <= iterateI_ho1_1_res_26;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_24 = c$bb_res_res_132;



  assign c$app_arg_32 = {{t_27,   t_24,   t_23,
                          t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                          t_16,   t_26,   t_15,   t_14,   t_13,   t_12},
                         iterateI_ho1_0_res_27,
                         iterateI_ho1_1_res_26,
                         iterateI_ho1_2_res_24};



  assign result_68 = c$app_arg_32[120-1:0];

  assign c$vec2_5 = (ws_5[4-1 : 0]);

  // zipWith start
  genvar i_27;
  generate
  for (i_27 = 0; i_27 < 2; i_27 = i_27 + 1) begin : zipWith_5
    wire [71:0] zipWith_in1_5;
    assign zipWith_in1_5 = result_71[i_27*72+:72];
    wire [1:0] zipWith_in2_5;
    assign zipWith_in2_5 = c$vec2_5[i_27*2+:2];
    wire [73:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_11[i_27*74+:74] = c$n_5;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_28;
  generate
  for (i_28=0; i_28 < 2; i_28 = i_28 + 1) begin : imap_5
    wire [1-1:0] map_index_5;
    wire [73:0] map_in_5;
    assign map_in_5 = c$ws_app_arg_11[i_28*74+:74];
    wire [1:0] map_out_5;

    assign map_index_5 = 1'd1 - i_28[0+:1];
    wire [1:0] c$case_alt_28;
    // spec.hs:298:1-70
    wire [7:0] t_35;
    // spec.hs:298:1-70
    wire [71:0] x_22;
    assign map_out_5 = c$case_alt_28;

    assign c$case_alt_28 = (t_35 == result_78[31:24]) ? {1'b1,map_index_5} : map_in_5[1:0];

    assign t_35 = x_22[71:64];

    assign x_22 = map_in_5[73:2];


    assign c$ws_app_arg_12[i_28*2+:2] = map_out_5;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_5 [0:2-1];
  genvar i_29;
  generate
  for (i_29=0; i_29 < 2; i_29=i_29+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_29] = result_71[i_29*72+:72];
  end
  endgenerate
  assign c$case_scrut_11 = vecArray_5[($unsigned({{(64-1) {1'b0}},i_5}))];
  // index end

  assign c$case_scrut_12 = ws_5[6-1 -: 2];

  assign result_69 = c$case_scrut_12[1:1] ? {result_78[31:24],
                                             $signed(c$case_scrut_11[63:0])} : {result_78[31:24],
                                                                                64'sd0};

  assign i_5 = c$case_scrut_12[0:0];

  assign ws_5 = {c$ws_app_arg_12,{1'b0,1'bx}};

  assign result_70 = result_76 ? t_10 : result_71;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_71_register
    if ( rst) begin
      result_71 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_71 <= result_70;
    end
  end
  // register end

  assign t_projection_8 = ({result_71,{result_79[31:24],   (x_10 + y_5)}});

  assign t_10 = t_projection_8[143:0];

  assign x_10 = $signed(result_75[63:0]);

  assign y_5 = $signed(c$case_alt_4[63:0]);

  assign winTag_4 = result_74[71:64];

  assign winData_4 = $signed(result_74[63:0]);

  assign c$case_alt_4 = (result_72 == winTag_4) ? {result_79[23:16],
                                                   winData_4} : {result_79[23:16],   64'sd0};

  assign result_72 = (result_79[23:16] > 8'd1) ? c$app_arg_33 : (c$app_arg_33 + 8'd3);

  assign c$app_arg_33 = result_79[23:16] - 8'd1;

  assign result_73 = result_77 ? t_11 : result_74;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_74_register
    if ( rst) begin
      result_74 <= {8'd4,   64'sd0};
    end else if (en) begin
      result_74 <= result_73;
    end
  end
  // register end

  assign t_11 = {result_78[23:16],
                 (x_11 + 64'sd1)};

  assign x_11 = $signed(result_69[63:0]);

  assign c$vec2_6 = (ws_6[4-1 : 0]);

  // zipWith start
  genvar i_30;
  generate
  for (i_30 = 0; i_30 < 2; i_30 = i_30 + 1) begin : zipWith_6
    wire [71:0] zipWith_in1_6;
    assign zipWith_in1_6 = result_109[i_30*72+:72];
    wire [1:0] zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_6[i_30*2+:2];
    wire [73:0] c$n_6;
    assign c$n_6 = {zipWith_in1_6,   zipWith_in2_6};


    assign c$ws_app_arg_13[i_30*74+:74] = c$n_6;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 2; i_31 = i_31 + 1) begin : imap_6
    wire [1-1:0] map_index_6;
    wire [73:0] map_in_6;
    assign map_in_6 = c$ws_app_arg_13[i_31*74+:74];
    wire [1:0] map_out_6;

    assign map_index_6 = 1'd1 - i_31[0+:1];
    wire [1:0] c$case_alt_29;
    // spec.hs:298:1-70
    wire [7:0] t_36;
    // spec.hs:298:1-70
    wire [71:0] x_23;
    assign map_out_6 = c$case_alt_29;

    assign c$case_alt_29 = (t_36 == result_79[39:32]) ? {1'b1,map_index_6} : map_in_6[1:0];

    assign t_36 = x_23[71:64];

    assign x_23 = map_in_6[73:2];


    assign c$ws_app_arg_14[i_31*2+:2] = map_out_6;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_6 [0:2-1];
  genvar i_32;
  generate
  for (i_32=0; i_32 < 2; i_32=i_32+1) begin : mk_array_6
    assign vecArray_6[(2-1)-i_32] = result_109[i_32*72+:72];
  end
  endgenerate
  assign c$case_scrut_13 = vecArray_6[($unsigned({{(64-1) {1'b0}},i_6}))];
  // index end

  assign c$case_scrut_14 = ws_6[6-1 -: 2];

  assign result_75 = c$case_scrut_14[1:1] ? {result_79[39:32],
                                             $signed(c$case_scrut_13[63:0])} : {result_79[39:32],
                                                                                64'sd0};

  assign i_6 = c$case_scrut_14[0:0];

  assign ws_6 = {c$ws_app_arg_14,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_28;
  wire  iterateI_ho1_1_res_27;
  reg  c$bb_res_res_133 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_133_delay
    if (en) begin
      c$bb_res_res_133 <= p10;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_28 = c$bb_res_res_133;



  reg  c$bb_res_res_134 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_134_delay
    if (en) begin
      c$bb_res_res_134 <= iterateI_ho1_0_res_28;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_27 = c$bb_res_res_134;



  assign c$app_arg_34 = {p10,
                         iterateI_ho1_0_res_28,
                         iterateI_ho1_1_res_27};



  assign result_76 = c$app_arg_34[1-1:0];

  wire  iterateI_ho1_0_res_29;
  wire  iterateI_ho1_1_res_28;
  wire  iterateI_ho1_2_res_25;
  reg  c$bb_res_res_135 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_135_delay
    if (en) begin
      c$bb_res_res_135 <= p11;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_29 = c$bb_res_res_135;



  reg  c$bb_res_res_136 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_136_delay
    if (en) begin
      c$bb_res_res_136 <= iterateI_ho1_0_res_29;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_28 = c$bb_res_res_136;



  reg  c$bb_res_res_137 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_137_delay
    if (en) begin
      c$bb_res_res_137 <= iterateI_ho1_1_res_28;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_25 = c$bb_res_res_137;



  assign c$app_arg_35 = {p11,
                         iterateI_ho1_0_res_29,
                         iterateI_ho1_1_res_28,
                         iterateI_ho1_2_res_25};



  assign result_77 = c$app_arg_35[1-1:0];

  wire [119:0] iterateI_ho1_0_arg0_2;
  wire [119:0] iterateI_ho1_0_res_30;
  wire [119:0] iterateI_ho1_1_res_29;
  assign iterateI_ho1_0_arg0_2 = {t_27,   t_24,
                                  t_23,   t_22,   t_21,   t_20,   t_19,   t_18,
                                  t_17,   t_16,   t_26,   t_15,   t_14,   t_13,
                                  t_12};

  reg [119:0] c$bb_res_res_138 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_138_delay
    if (en) begin
      c$bb_res_res_138 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_30 = c$bb_res_res_138;



  reg [119:0] c$bb_res_res_139 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_139_delay
    if (en) begin
      c$bb_res_res_139 <= iterateI_ho1_0_res_30;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_29 = c$bb_res_res_139;



  assign c$app_arg_36 = {{t_27,   t_24,   t_23,
                          t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                          t_16,   t_26,   t_15,   t_14,   t_13,   t_12},
                         iterateI_ho1_0_res_30,
                         iterateI_ho1_1_res_29};



  assign result_78 = c$app_arg_36[120-1:0];

  wire [119:0] iterateI_ho1_0_arg0_3;
  wire [119:0] iterateI_ho1_0_res_31;
  assign iterateI_ho1_0_arg0_3 = {t_27,   t_24,
                                  t_23,   t_22,   t_21,   t_20,   t_19,   t_18,
                                  t_17,   t_16,   t_26,   t_15,   t_14,   t_13,
                                  t_12};

  reg [119:0] c$bb_res_res_140 = {8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,   8'd4,
   8'd4,   8'd4,   8'd4,   8'd4,   8'd4};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_140_delay
    if (en) begin
      c$bb_res_res_140 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_31 = c$bb_res_res_140;



  assign c$app_arg_37 = {{t_27,   t_24,   t_23,
                          t_22,   t_21,   t_20,   t_19,   t_18,   t_17,
                          t_16,   t_26,   t_15,   t_14,   t_13,   t_12},
                         iterateI_ho1_0_res_31};



  assign result_79 = c$app_arg_37[120-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_80;
    end
  end
  // register end

  assign result_80 = p13 ? result_81 : t_12;

  assign b = t_12 == 8'd3;

  assign f1 = t_12 + 8'd1;

  assign result_81 = b ? 8'd1 : f1;

  assign p13 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_82;
    end
  end
  // register end

  assign result_82 = p12 ? result_83 : t_13;

  assign b_0 = t_13 == 8'd3;

  assign f1_0 = t_13 + 8'd1;

  assign result_83 = b_0 ? 8'd1 : f1_0;

  assign p12 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_84;
    end
  end
  // register end

  assign result_84 = p11 ? result_85 : t_14;

  assign b_1 = t_14 == 8'd3;

  assign f1_1 = t_14 + 8'd1;

  assign result_85 = b_1 ? 8'd1 : f1_1;

  assign p11 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_15_register
    if ( rst) begin
      t_15 <= 8'd1;
    end else if (en) begin
      t_15 <= result_86;
    end
  end
  // register end

  assign result_86 = p10 ? result_87 : t_15;

  assign b_2 = t_15 == 8'd3;

  assign f1_2 = t_15 + 8'd1;

  assign result_87 = b_2 ? 8'd1 : f1_2;

  assign p10 = pacings[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_16_register
    if ( rst) begin
      t_16 <= 8'd1;
    end else if (en) begin
      t_16 <= result_88;
    end
  end
  // register end

  assign result_88 = p8 ? result_89 : t_16;

  assign b_3 = t_16 == 8'd3;

  assign f1_3 = t_16 + 8'd1;

  assign result_89 = b_3 ? 8'd1 : f1_3;

  assign p8 = pacings[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_17_register
    if ( rst) begin
      t_17 <= 8'd1;
    end else if (en) begin
      t_17 <= result_90;
    end
  end
  // register end

  assign result_90 = p7 ? result_91 : t_17;

  assign b_4 = t_17 == 8'd3;

  assign f1_4 = t_17 + 8'd1;

  assign result_91 = b_4 ? 8'd1 : f1_4;

  assign p7 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_18_register
    if ( rst) begin
      t_18 <= 8'd1;
    end else if (en) begin
      t_18 <= result_92;
    end
  end
  // register end

  assign result_92 = p6 ? result_93 : t_18;

  assign b_5 = t_18 == 8'd3;

  assign f1_5 = t_18 + 8'd1;

  assign result_93 = b_5 ? 8'd1 : f1_5;

  assign p6 = pacings[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_19_register
    if ( rst) begin
      t_19 <= 8'd1;
    end else if (en) begin
      t_19 <= result_94;
    end
  end
  // register end

  assign result_94 = p5 ? result_95 : t_19;

  assign b_6 = t_19 == 8'd3;

  assign f1_6 = t_19 + 8'd1;

  assign result_95 = b_6 ? 8'd1 : f1_6;

  assign p5 = pacings[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_20_register
    if ( rst) begin
      t_20 <= 8'd1;
    end else if (en) begin
      t_20 <= result_96;
    end
  end
  // register end

  assign result_96 = p4 ? result_97 : t_20;

  assign b_7 = t_20 == 8'd3;

  assign f1_7 = t_20 + 8'd1;

  assign result_97 = b_7 ? 8'd1 : f1_7;

  assign p4 = pacings[9:9];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_21_register
    if ( rst) begin
      t_21 <= 8'd1;
    end else if (en) begin
      t_21 <= result_98;
    end
  end
  // register end

  assign result_98 = p3 ? result_99 : t_21;

  assign b_8 = t_21 == 8'd3;

  assign f1_8 = t_21 + 8'd1;

  assign result_99 = b_8 ? 8'd1 : f1_8;

  assign p3 = pacings[10:10];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_22_register
    if ( rst) begin
      t_22 <= 8'd1;
    end else if (en) begin
      t_22 <= result_100;
    end
  end
  // register end

  assign result_100 = p2 ? result_101 : t_22;

  assign b_9 = t_22 == 8'd3;

  assign f1_9 = t_22 + 8'd1;

  assign result_101 = b_9 ? 8'd1 : f1_9;

  assign p2 = pacings[11:11];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_23_register
    if ( rst) begin
      t_23 <= 8'd1;
    end else if (en) begin
      t_23 <= result_102;
    end
  end
  // register end

  assign result_102 = p1 ? result_103 : t_23;

  assign b_10 = t_23 == 8'd3;

  assign f1_10 = t_23 + 8'd1;

  assign result_103 = b_10 ? 8'd1 : f1_10;

  assign p1 = pacings[12:12];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_24_register
    if ( rst) begin
      t_24 <= 8'd1;
    end else if (en) begin
      t_24 <= result_104;
    end
  end
  // register end

  assign result_104 = p0 ? result_105 : t_24;

  assign b_11 = t_24 == 8'd3;

  assign f1_11 = t_24 + 8'd1;

  assign result_105 = b_11 ? 8'd1 : f1_11;

  assign p0 = pacings[13:13];

  assign c$vec2_7 = (ws_7[4-1 : 0]);

  // zipWith start
  genvar i_33;
  generate
  for (i_33 = 0; i_33 < 2; i_33 = i_33 + 1) begin : zipWith_7
    wire [71:0] zipWith_in1_7;
    assign zipWith_in1_7 = result_109[i_33*72+:72];
    wire [1:0] zipWith_in2_7;
    assign zipWith_in2_7 = c$vec2_7[i_33*2+:2];
    wire [73:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_15[i_33*74+:74] = c$n_7;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_34;
  generate
  for (i_34=0; i_34 < 2; i_34 = i_34 + 1) begin : imap_7
    wire [1-1:0] map_index_7;
    wire [73:0] map_in_7;
    assign map_in_7 = c$ws_app_arg_15[i_34*74+:74];
    wire [1:0] map_out_7;

    assign map_index_7 = 1'd1 - i_34[0+:1];
    wire [1:0] c$case_alt_30;
    // spec.hs:298:1-70
    wire [7:0] t_37;
    // spec.hs:298:1-70
    wire [71:0] x_24;
    assign map_out_7 = c$case_alt_30;

    assign c$case_alt_30 = (t_37 == result_107) ? {1'b1,map_index_7} : map_in_7[1:0];

    assign t_37 = x_24[71:64];

    assign x_24 = map_in_7[73:2];


    assign c$ws_app_arg_16[i_34*2+:2] = map_out_7;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_7 [0:2-1];
  genvar i_35;
  generate
  for (i_35=0; i_35 < 2; i_35=i_35+1) begin : mk_array_7
    assign vecArray_7[(2-1)-i_35] = result_109[i_35*72+:72];
  end
  endgenerate
  assign c$case_scrut_15 = vecArray_7[($unsigned({{(64-1) {1'b0}},i_7}))];
  // index end

  assign c$case_scrut_16 = ws_7[6-1 -: 2];

  assign result_106 = c$case_scrut_16[1:1] ? {t_26,
                                              $signed(c$case_scrut_15[63:0])} : {t_26,
                                                                                 64'sd0};

  assign result_107 = (t_26 > 8'd1) ? c$app_arg_38 : (c$app_arg_38 + 8'd3);

  assign c$app_arg_38 = t_26 - 8'd1;

  assign i_7 = c$case_scrut_16[0:0];

  assign ws_7 = {c$ws_app_arg_16,{1'b0,1'bx}};

  assign result_108 = result_110 ? t_25 : result_109;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_109_register
    if ( rst) begin
      result_109 <= {{8'd4,   64'sd0},   {8'd4,   64'sd0}};
    end else if (en) begin
      result_109 <= result_108;
    end
  end
  // register end

  assign t_projection_11 = ({result_109,{t_26,   (x_12 + 64'sd1)}});

  assign t_25 = t_projection_11[143:0];

  assign x_12 = $signed(result_106[63:0]);

  wire  iterateI_ho1_0_res_32;
  reg  c$bb_res_res_141 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_141_delay
    if (en) begin
      c$bb_res_res_141 <= p9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_32 = c$bb_res_res_141;



  assign c$app_arg_39 = {p9,
                         iterateI_ho1_0_res_32};



  assign result_110 = c$app_arg_39[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_26_register
    if ( rst) begin
      t_26 <= 8'd1;
    end else if (en) begin
      t_26 <= result_111;
    end
  end
  // register end

  assign result_111 = p9 ? result_112 : t_26;

  assign b_12 = t_26 == 8'd3;

  assign f1_12 = t_26 + 8'd1;

  assign result_112 = b_12 ? 8'd1 : f1_12;

  assign p9 = pacings[4:4];

  assign pacings = result_119[13:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_27_register
    if ( rst) begin
      t_27 <= 8'd1;
    end else if (en) begin
      t_27 <= result_113;
    end
  end
  // register end

  assign result_113 = input0HasData ? result_114 : t_27;

  assign b_13 = t_27 == 8'd3;

  assign f1_13 = t_27 + 8'd1;

  assign result_114 = b_13 ? 8'd1 : f1_13;

  assign input0HasData = inputs_2[0:0];

  assign inputs_2 = result_119[78:14];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_116;
    end
  end
  // register end

  assign result_115 = toWait == (64'sd0);

  assign result_116 = result_118 ? (64'sd2) : result_117;

  assign b_14 = toWait > (64'sd0);

  assign result_117 = b_14 ? ((x_13 - 64'sd1)) : toWait;

  assign x_13 = toWait;

  assign result_118 = b_15 ? 1'b1 : 1'b0;

  assign b_15 = result_115 & qPopValid;

  assign result_119 = {c$app_arg_42,
                       c$app_arg_41,   c$app_arg_40};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_40_register
    if ( rst) begin
      c$app_arg_40 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_40 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? c$case_alt_8 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_7 = qPop ? c$case_alt_9 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_8 = qData;
      default : c$case_alt_8 = c$case_alt_10;
    endcase
  end

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_9 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0}};
      default : c$case_alt_9 = c$case_alt_10;
    endcase
  end

  // index begin
  wire [78:0] vecArray_8 [0:4-1];
  genvar i_36;
  generate
  for (i_36=0; i_36 < 4; i_36=i_36+1) begin : mk_array_8
    assign vecArray_8[(4-1)-i_36] = buffer[i_36*79+:79];
  end
  endgenerate
  assign c$case_alt_10 = vecArray_8[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_41_register
    if ( rst) begin
      c$app_arg_41 <= 1'b0;
    end else if (en) begin
      c$app_arg_41 <= c$case_alt_11;
    end
  end
  // register end

  assign c$case_alt_11 = qPush ? c$case_alt_12 : c$case_alt_13;

  assign c$case_alt_12 = qPop ? 1'b1 : c$case_alt_14;

  assign c$case_alt_13 = qPop ? c$case_alt_15 : c$case_alt_14;

  assign c$case_alt_14 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_14)
      64'sd0 : c$case_alt_15 = 1'b0;
      default : c$case_alt_15 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_42_register
    if ( rst) begin
      c$app_arg_42 <= 1'b0;
    end else if (en) begin
      c$app_arg_42 <= c$case_alt_16;
    end
  end
  // register end

  assign c$case_alt_16 = qPush ? c$case_alt_17 : 1'b0;

  assign c$case_alt_17 = qPop ? 1'b1 : c$case_alt_18;

  assign c$tte_rhs = (x_14 != 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$case_alt_18 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[394:79] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[394:79];

  assign qData = result_4[78:0];

  assign x_14 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_14 + 64'sd1));

  assign c$tte_rhs_0 = (x_14 == 64'sd4) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_14)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_14 - 64'sd1);

  assign result = {result_5[923:14],   {qPush,
                                        qPop,   result_119[80:80],   qPopValid,
                                        result_5[13:0]}};

  assign qPopValid = result_119[79:79];

  assign qPush = result_4[79:79];

  assign qPop = result_5[924:924];

  assign result_0 = result[927:18];

  assign result_1 = result[17:0];

  assign result_0_0 = result_0[909:845];

  assign result_0_1 = result_0[844:780];

  assign result_0_2 = result_0[779:715];

  assign result_0_3 = result_0[714:650];

  assign result_0_4 = result_0[649:585];

  assign result_0_5 = result_0[584:520];

  assign result_0_6 = result_0[519:455];

  assign result_0_7 = result_0[454:390];

  assign result_0_8 = result_0[389:325];

  assign result_0_9 = result_0[324:260];

  assign result_0_10 = result_0[259:195];

  assign result_0_11 = result_0[194:130];

  assign result_0_12 = result_0[129:65];

  assign result_0_13 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_0_7_0 = $signed(result_0_7[64:1]);

  assign result_0_7_1 = result_0_7[0:0];

  assign result_0_8_0 = $signed(result_0_8[64:1]);

  assign result_0_8_1 = result_0_8[0:0];

  assign result_0_9_0 = $signed(result_0_9[64:1]);

  assign result_0_9_1 = result_0_9[0:0];

  assign result_0_10_0 = $signed(result_0_10[64:1]);

  assign result_0_10_1 = result_0_10[0:0];

  assign result_0_11_0 = $signed(result_0_11[64:1]);

  assign result_0_11_1 = result_0_11[0:0];

  assign result_0_12_0 = $signed(result_0_12[64:1]);

  assign result_0_12_1 = result_0_12[0:0];

  assign result_0_13_0 = $signed(result_0_13[64:1]);

  assign result_0_13_1 = result_0_13[0:0];

  assign result_1_0 = result_1[17:17];

  assign result_1_1 = result_1[16:16];

  assign result_1_2 = result_1[15:15];

  assign result_1_3 = result_1[14:14];

  assign result_1_4 = result_1[13:0];

  assign result_1_4_0 = result_1_4[13:13];

  assign result_1_4_1 = result_1_4[12:12];

  assign result_1_4_2 = result_1_4[11:11];

  assign result_1_4_3 = result_1_4[10:10];

  assign result_1_4_4 = result_1_4[9:9];

  assign result_1_4_5 = result_1_4[8:8];

  assign result_1_4_6 = result_1_4[7:7];

  assign result_1_4_7 = result_1_4[6:6];

  assign result_1_4_8 = result_1_4[5:5];

  assign result_1_4_9 = result_1_4[4:4];

  assign result_1_4_10 = result_1_4[3:3];

  assign result_1_4_11 = result_1_4[2:2];

  assign result_1_4_12 = result_1_4[1:1];

  assign result_1_4_13 = result_1_4[0:0];


endmodule


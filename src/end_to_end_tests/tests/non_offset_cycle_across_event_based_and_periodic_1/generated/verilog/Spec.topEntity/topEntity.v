/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire [67:0] result_4;
  // spec.hs:164:1-82
  wire  hasInput0;
  // spec.hs:164:1-82
  wire  timer0Over;
  wire [132:0] result_5;
  wire [4:0] c$app_arg;
  wire  result_6;
  wire [4:0] c$app_arg_0;
  wire  result_7;
  // spec.hs:227:1-46
  wire [7:0] tag;
  // spec.hs:326:1-141
  reg [71:0] result_8 = {8'd3,   64'sd0};
  // spec.hs:326:1-141
  wire [71:0] t;
  wire [71:0] result_9;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // spec.hs:240:1-104
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:227:1-46
  wire signed [63:0] dta;
  // spec.hs:227:1-46
  wire [7:0] tag_0;
  // spec.hs:334:1-123
  reg [71:0] result_10 = {8'd3,   64'sd0};
  // spec.hs:334:1-123
  wire [71:0] t_0;
  wire [71:0] result_11;
  wire signed [63:0] x_1;
  // spec.hs:240:1-104
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:227:1-46
  wire signed [63:0] dta_0;
  // spec.hs:240:1-104
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:219:1-53
  wire signed [63:0] dta_1;
  // spec.hs:219:1-53
  wire [7:0] tagToMatch;
  // spec.hs:219:1-53
  wire [7:0] tag_1;
  // spec.hs:320:1-122
  reg [71:0] result_12 = {8'd3,   64'sd0};
  // spec.hs:320:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:219:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_1;
  wire  result_13;
  wire [2:0] c$app_arg_2;
  wire  result_14;
  wire [71:0] c$app_arg_3;
  wire [23:0] result_15;
  wire [3:0] c$app_arg_4;
  wire  result_16;
  wire [47:0] c$app_arg_5;
  wire [23:0] result_17;
  // spec.hs:304:9-81
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_18;
  // spec.hs:304:9-81
  wire  b;
  // spec.hs:304:9-81
  wire [7:0] f1;
  wire [7:0] result_19;
  // spec.hs:240:1-104
  wire  p1;
  // spec.hs:304:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_20;
  // spec.hs:304:9-81
  wire  b_0;
  // spec.hs:304:9-81
  wire [7:0] f1_0;
  wire [7:0] result_21;
  // spec.hs:240:1-104
  wire  p0;
  // spec.hs:240:1-104
  wire [1:0] pacings;
  // spec.hs:304:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_22;
  // spec.hs:304:9-81
  wire  b_1;
  // spec.hs:304:9-81
  wire [7:0] f1_1;
  wire [7:0] result_23;
  // spec.hs:240:1-104
  wire  input0HasData;
  // spec.hs:240:1-104
  wire [64:0] inputs_2;
  // spec.hs:311:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_24;
  wire signed [63:0] result_25;
  // spec.hs:311:1-81
  wire  b_2;
  wire signed [63:0] result_26;
  wire signed [63:0] x_2;
  wire  result_27;
  // spec.hs:240:1-104
  wire  b_3;
  wire [68:0] result_28;
  reg [66:0] c$app_arg_6 = {{64'sd0,   1'b0},   {1'b0,   1'b0}};
  wire [66:0] c$case_alt;
  wire [66:0] c$case_alt_0;
  wire [66:0] c$case_alt_1;
  reg [66:0] c$case_alt_2;
  reg [66:0] c$case_alt_3;
  wire [66:0] c$case_alt_4;
  reg  c$app_arg_7 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_8 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:95:1-78
  reg [200:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0}}};
  // spec.hs:95:1-78
  wire [200:0] c$buffer_case_alt;
  // spec.hs:95:1-78
  wire [200:0] c$buffer_case_alt_0;
  // spec.hs:95:1-78
  wire [200:0] c$buffer_case_alt_1;
  // spec.hs:95:1-78
  wire [66:0] qData;
  // spec.hs:95:1-78
  wire signed [63:0] x_3;
  // spec.hs:95:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:95:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:95:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:95:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:95:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:95:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:95:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:95:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:349:1-129
  wire  qPopValid;
  // spec.hs:349:1-129
  wire  qPush;
  // spec.hs:349:1-129
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [267:0] c$buffer_case_alt_sel_alt_t_1;
  wire [267:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [135:0] result;
  wire [129:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [5:0] result_1;
  wire [1:0] result_1_4_6;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = {hasInput0 | timer0Over,
                     {inputs,   {hasInput0,   timer0Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_3 >= (64'sd1000000);

  assign result_5 = {{result_24 & (~ result_27),
                      {{dta_0,   result_7},   {dta,   result_6}}},
                     pacings};

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  assign c$app_arg = {p1,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res};



  assign result_6 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {p0,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_7 = c$app_arg_0[1-1:0];

  assign tag = result_8[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_8_register
    if ( rst) begin
      result_8 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_8 <= result_9;
    end
  end
  // register end

  assign t = {result_17[15:8],   (x_0 + y)};

  assign result_9 = result_14 ? t : result_8;

  assign x_0 = c$out0_case_alt_0;

  assign y = c$out0_case_alt;

  assign c$out0_case_alt = (tag_0 == 8'd3) ? (64'sd1) : dta;

  assign dta = $signed(result_10[63:0]);

  assign tag_0 = result_10[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_10 <= result_11;
    end
  end
  // register end

  assign t_0 = {result_15[7:0],   (x_1 + 64'sd1)};

  assign result_11 = result_16 ? t_0 : result_10;

  assign x_1 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == 8'd3) ? (64'sd0) : dta_0;

  assign dta_0 = $signed(result_8[63:0]);

  assign c$out0_case_alt_0 = (tag_1 == tagToMatch) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_12[63:0]);

  assign tagToMatch = result_17[23:16];

  assign tag_1 = result_12[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_12 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_13 ? {t_3,
                                         c$ds_app_arg} : result_12;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_1;
  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  assign c$app_arg_1 = {input0HasData,
                        iterateI_ho1_0_res_1};



  assign result_13 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_1;
  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_9;



  assign c$app_arg_2 = {p0,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_1};



  assign result_14 = c$app_arg_2[1-1:0];

  wire [23:0] iterateI_ho1_0_arg0;
  wire [23:0] iterateI_ho1_0_res_3;
  wire [23:0] iterateI_ho1_1_res_2;
  assign iterateI_ho1_0_arg0 = {t_3,   t_2,
                                t_1};

  reg [23:0] c$bb_res_res_10 = {8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_10;



  reg [23:0] c$bb_res_res_11 = {8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_11;



  assign c$app_arg_3 = {{t_3,   t_2,   t_1},
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_2};



  assign result_15 = c$app_arg_3[24-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_1;
  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_14;



  assign c$app_arg_4 = {p1,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_1};



  assign result_16 = c$app_arg_4[1-1:0];

  wire [23:0] iterateI_ho1_0_arg0_0;
  wire [23:0] iterateI_ho1_0_res_5;
  assign iterateI_ho1_0_arg0_0 = {t_3,   t_2,
                                  t_1};

  reg [23:0] c$bb_res_res_15 = {8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_15;



  assign c$app_arg_5 = {{t_3,   t_2,   t_1},
                        iterateI_ho1_0_res_5};



  assign result_17 = c$app_arg_5[24-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_18;
    end
  end
  // register end

  assign result_18 = p1 ? result_19 : t_1;

  assign b = t_1 == 8'd2;

  assign f1 = t_1 + 8'd1;

  assign result_19 = b ? 8'd1 : f1;

  assign p1 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_20;
    end
  end
  // register end

  assign result_20 = p0 ? result_21 : t_2;

  assign b_0 = t_2 == 8'd2;

  assign f1_0 = t_2 + 8'd1;

  assign result_21 = b_0 ? 8'd1 : f1_0;

  assign p0 = pacings[1:1];

  assign pacings = result_28[1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_22;
    end
  end
  // register end

  assign result_22 = input0HasData ? result_23 : t_3;

  assign b_1 = t_3 == 8'd2;

  assign f1_1 = t_3 + 8'd1;

  assign result_23 = b_1 ? 8'd1 : f1_1;

  assign input0HasData = inputs_2[0:0];

  assign inputs_2 = result_28[66:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_25;
    end
  end
  // register end

  assign result_24 = toWait == (64'sd0);

  assign result_25 = result_27 ? (64'sd1) : result_26;

  assign b_2 = toWait > (64'sd0);

  assign result_26 = b_2 ? ((x_2 - 64'sd1)) : toWait;

  assign x_2 = toWait;

  assign result_27 = b_3 ? 1'b1 : 1'b0;

  assign b_3 = result_24 & qPopValid;

  assign result_28 = {c$app_arg_8,   c$app_arg_7,
                      c$app_arg_6};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_6_register
    if ( rst) begin
      c$app_arg_6 <= {{64'sd0,   1'b0},   {1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_6 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0}};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [66:0] vecArray [0:3-1];
  genvar i;
  generate
  for (i=0; i < 3; i=i+1) begin : mk_array
    assign vecArray[(3-1)-i] = buffer[i*67+:67];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_7_register
    if ( rst) begin
      c$app_arg_7 <= 1'b0;
    end else if (en) begin
      c$app_arg_7 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= 1'b0;
    end else if (en) begin
      c$app_arg_8 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_3 != 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0}},   {{64'sd0,   1'b0},   {1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[267:67] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[267:67];

  assign qData = result_4[66:0];

  assign x_3 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_3 + 64'sd1));

  assign c$tte_rhs_0 = (x_3 == 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_3 - 64'sd1);

  assign result = {result_5[131:2],   {qPush,
                                       qPop,   result_28[68:68],   qPopValid,
                                       result_5[1:0]}};

  assign qPopValid = result_28[67:67];

  assign qPush = result_4[67:67];

  assign qPop = result_5[132:132];

  assign result_0 = result[135:6];

  assign result_1 = result[5:0];

  assign result_0_0 = result_0[129:65];

  assign result_0_1 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_1_0 = result_1[5:5];

  assign result_1_1 = result_1[4:4];

  assign result_1_2 = result_1[3:3];

  assign result_1_3 = result_1[2:2];

  assign result_1_4_6 = result_1[1:0];

  assign result_1_4_0 = result_1_4_6[1:1];

  assign result_1_4_1 = result_1_4_6[0:0];


endmodule


/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire signed [63:0] result_0_6_0
    , output wire  result_0_6_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5_0
    , output wire  result_1_4_5_1
    , output wire  result_1_4_6
    , output wire  result_1_4_7
    , output wire  result_1_4_8
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [140:0] result_6;
  // spec.hs:236:1-82
  wire  pIn0;
  // spec.hs:236:1-82
  wire  pIn1;
  // spec.hs:236:1-82
  wire  timer0Over;
  // spec.hs:236:1-82
  wire  timer1Over;
  wire [465:0] result_7;
  wire [5:0] c$app_arg;
  wire  result_8;
  wire [71:0] result_9;
  // spec.hs:524:1-129
  reg [71:0] result_10 = {8'd3,   64'sd0};
  // spec.hs:524:1-129
  wire  b;
  // spec.hs:524:1-129
  wire [71:0] t;
  wire signed [63:0] x_1;
  // spec.hs:323:1-104
  wire signed [63:0] c$ds2_case_alt;
  // spec.hs:302:1-53
  wire [7:0] tag;
  // spec.hs:302:1-53
  wire [7:0] tagToMatch;
  wire [3:0] c$app_arg_0;
  wire  result_11;
  wire [5:0] c$app_arg_1;
  wire  result_12;
  wire [5:0] c$app_arg_2;
  wire  result_13;
  wire [5:0] c$app_arg_3;
  wire  result_14;
  wire [5:0] c$app_arg_4;
  wire  result_15;
  wire [5:0] c$app_arg_5;
  wire  result_16;
  wire [5:0] c$app_arg_6;
  wire  result_17;
  // spec.hs:310:1-46
  wire [7:0] tag_0;
  wire [71:0] result_18;
  // spec.hs:484:1-147
  reg [71:0] result_19 = {8'd3,   64'sd0};
  // spec.hs:484:1-147
  wire  b_0;
  // spec.hs:484:1-147
  wire [71:0] t_0;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  // spec.hs:323:1-104
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:310:1-46
  wire signed [63:0] dta;
  // spec.hs:310:1-46
  wire [7:0] tag_1;
  wire [71:0] result_20;
  // spec.hs:102:34-42
  wire  x0;
  // spec.hs:102:34-42
  wire  x1;
  // spec.hs:500:1-129
  reg [71:0] result_21 = {8'd3,   64'sd0};
  // spec.hs:500:1-129
  wire [71:0] t_1;
  wire signed [63:0] x_3;
  // spec.hs:323:1-104
  wire signed [63:0] c$out3_case_alt;
  // spec.hs:310:1-46
  wire signed [63:0] dta_0;
  // spec.hs:310:1-46
  wire [7:0] tag_2;
  wire [71:0] result_22;
  // spec.hs:492:1-147
  reg [71:0] result_23 = {8'd3,   64'sd0};
  // spec.hs:492:1-147
  wire  b_1;
  // spec.hs:492:1-147
  wire [71:0] t_2;
  wire signed [63:0] x_4;
  wire signed [63:0] y_0;
  // spec.hs:323:1-104
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:310:1-46
  wire signed [63:0] dta_1;
  wire [3:0] c$app_arg_7;
  wire [1:0] result_24;
  // spec.hs:323:1-104
  wire signed [63:0] c$out1_case_alt_0;
  // spec.hs:310:1-46
  wire signed [63:0] dta_2;
  // spec.hs:310:1-46
  wire [7:0] tag_3;
  wire [71:0] result_25;
  // spec.hs:470:1-127
  reg [71:0] result_26 = {8'd3,   64'sd0};
  // spec.hs:470:1-127
  wire  b_2;
  // spec.hs:310:1-46
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_8;
  wire  result_27;
  wire [3:0] c$app_arg_9;
  wire  result_28;
  // spec.hs:323:1-104
  wire signed [63:0] c$out2_case_alt_0;
  // spec.hs:310:1-46
  wire signed [63:0] dta_3;
  // spec.hs:310:1-46
  wire [7:0] tag_4;
  wire [287:0] c$app_arg_10;
  wire [71:0] result_29;
  wire [4:0] c$app_arg_11;
  wire  result_30;
  wire [71:0] result_31;
  // spec.hs:99:34-42
  wire  x_5;
  // spec.hs:476:1-129
  reg [71:0] result_32 = {8'd3,   64'sd0};
  // spec.hs:476:1-129
  wire [71:0] t_3;
  wire signed [63:0] x_6;
  // spec.hs:323:1-104
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:302:1-53
  wire signed [63:0] dta_4;
  // spec.hs:302:1-53
  wire [7:0] tag_5;
  // spec.hs:302:1-53
  wire [7:0] tagToMatch_0;
  wire [71:0] result_33;
  // spec.hs:465:1-127
  reg [71:0] result_34 = {8'd3,   64'sd0};
  // spec.hs:465:1-127
  wire  b_3;
  // spec.hs:302:1-53
  reg signed [63:0] c$ds_app_arg_0 = (64'sd0);
  // spec.hs:323:1-104
  wire [129:0] inputs_2;
  wire [1:0] c$app_arg_12;
  wire  result_35;
  wire [2:0] c$app_arg_13;
  wire  result_36;
  wire [215:0] c$app_arg_14;
  wire [71:0] result_37;
  wire [71:0] result_38;
  // spec.hs:516:1-129
  reg [71:0] result_39 = {8'd3,   64'sd0};
  // spec.hs:516:1-129
  wire  b_4;
  // spec.hs:516:1-129
  wire [71:0] t_4;
  wire signed [63:0] x_7;
  // spec.hs:323:1-104
  wire signed [63:0] c$out5_case_alt;
  // spec.hs:302:1-53
  wire [7:0] tagToMatch_1;
  wire [2:0] c$app_arg_15;
  wire  result_40;
  wire [143:0] c$app_arg_16;
  wire [71:0] result_41;
  // spec.hs:449:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_42;
  // spec.hs:449:9-81
  wire  b_5;
  // spec.hs:449:9-81
  wire [7:0] f1;
  wire [7:0] result_43;
  // spec.hs:323:1-104
  wire  pOut6;
  // spec.hs:449:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_44;
  // spec.hs:449:9-81
  wire  b_6;
  // spec.hs:449:9-81
  wire [7:0] f1_0;
  wire [7:0] result_45;
  // spec.hs:323:1-104
  wire  pOut5;
  // spec.hs:449:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_46;
  // spec.hs:449:9-81
  wire  b_7;
  // spec.hs:449:9-81
  wire [7:0] f1_1;
  wire [7:0] result_47;
  // spec.hs:323:1-104
  wire  pOut2;
  // spec.hs:449:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_48;
  // spec.hs:449:9-81
  wire  b_8;
  // spec.hs:449:9-81
  wire [7:0] f1_2;
  wire [7:0] result_49;
  // spec.hs:323:1-104
  wire  pOut1;
  // spec.hs:449:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_50;
  // spec.hs:449:9-81
  wire  b_9;
  // spec.hs:449:9-81
  wire [7:0] f1_3;
  wire [7:0] result_51;
  // spec.hs:99:34-42
  wire  x_8;
  // spec.hs:323:1-104
  wire  pOut0;
  // spec.hs:296:1-55
  wire [7:0] winTag;
  wire [71:0] result_52;
  // spec.hs:508:1-129
  reg [71:0] result_53 = {8'd3,   64'sd0};
  // spec.hs:508:1-129
  wire  b_10;
  // spec.hs:508:1-129
  wire [71:0] t_10;
  wire signed [63:0] x_9;
  // spec.hs:323:1-104
  wire signed [63:0] c$out4_case_alt;
  // spec.hs:296:1-55
  wire signed [63:0] winData;
  wire [7:0] result_54;
  wire [7:0] c$app_arg_17;
  wire [1:0] c$app_arg_18;
  wire  result_55;
  // spec.hs:449:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_56;
  // spec.hs:449:9-81
  wire  b_11;
  // spec.hs:449:9-81
  wire [7:0] f1_4;
  wire [7:0] result_57;
  // spec.hs:323:1-104
  wire  pOut4;
  // spec.hs:449:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_58;
  // spec.hs:449:9-81
  wire  b_12;
  // spec.hs:449:9-81
  wire [7:0] f1_5;
  wire [7:0] result_59;
  // spec.hs:323:1-104
  wire  c$tOut3_case_alt;
  // spec.hs:102:34-42
  wire  x1_0;
  // spec.hs:102:34-42
  wire  x0_0;
  // spec.hs:323:1-104
  wire [1:0] pOut3;
  // spec.hs:449:9-81
  reg [7:0] t_13 = 8'd1;
  wire [7:0] result_60;
  // spec.hs:449:9-81
  wire  b_13;
  // spec.hs:449:9-81
  wire [7:0] f1_6;
  wire [7:0] result_61;
  // spec.hs:323:1-104
  wire  pIn1_0;
  // spec.hs:449:9-81
  reg [7:0] t_14 = 8'd1;
  wire [7:0] result_62;
  // spec.hs:449:9-81
  wire  b_14;
  // spec.hs:449:9-81
  wire [7:0] f1_7;
  wire [7:0] result_63;
  // spec.hs:323:1-104
  wire  pIn0_0;
  // spec.hs:323:1-104
  wire [9:0] pacings;
  // spec.hs:456:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_64;
  wire signed [63:0] result_65;
  // spec.hs:456:1-81
  wire  b_15;
  wire signed [63:0] result_66;
  wire signed [63:0] x_10;
  wire  result_67;
  // spec.hs:323:1-104
  wire  b_16;
  wire [141:0] result_68;
  reg [139:0] c$app_arg_19 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                            1'b0,   {1'b0,   1'b0},   1'b0,
                                            1'b0,   1'b0}};
  wire [139:0] c$case_alt;
  wire [139:0] c$case_alt_0;
  wire [139:0] c$case_alt_1;
  reg [139:0] c$case_alt_2;
  reg [139:0] c$case_alt_3;
  wire [139:0] c$case_alt_4;
  reg  c$app_arg_20 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_21 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:167:1-78
  reg [699:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                             1'b0,   {1'b0,   1'b0},   1'b0,
                                             1'b0,   1'b0}},   {{{64'sd0,
                                                                  1'b0},
                                                                 {64'sd0,
                                                                  1'b0}},
                                                                {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                             1'b0,   {1'b0,   1'b0},   1'b0,
                                             1'b0,   1'b0}},   {{{64'sd0,
                                                                  1'b0},
                                                                 {64'sd0,
                                                                  1'b0}},
                                                                {1'b0,   1'b0,
                                                                 1'b0,   1'b0,
                                                                 1'b0,   {1'b0,
                                                                          1'b0},
                                                                 1'b0,   1'b0,
                                                                 1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                             1'b0,   {1'b0,   1'b0},   1'b0,
                                             1'b0,   1'b0}}};
  // spec.hs:167:1-78
  wire [699:0] c$buffer_case_alt;
  // spec.hs:167:1-78
  wire [699:0] c$buffer_case_alt_0;
  // spec.hs:167:1-78
  wire [699:0] c$buffer_case_alt_1;
  // spec.hs:167:1-78
  wire [139:0] qData;
  // spec.hs:167:1-78
  wire signed [63:0] x_11;
  // spec.hs:167:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:167:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:167:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:167:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:167:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:167:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:167:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:167:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:539:1-129
  wire  qPopValid;
  // spec.hs:539:1-129
  wire  qPush;
  // spec.hs:539:1-129
  wire  qPop;
  wire [129:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [839:0] c$buffer_case_alt_sel_alt_t_1;
  wire [839:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [468:0] result;
  wire [454:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [64:0] result_0_6;
  wire [13:0] result_1;
  wire [9:0] result_1_4;
  wire [1:0] result_1_4_5;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1}};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {inputs[65:65] | (inputs[0:0] | (timer0Over | timer1Over)),
                     {inputs,   {pIn0,   pIn1,   pIn0,
                                 timer1Over,   timer0Over,   {pIn0,   pIn1},
                                 timer1Over,   timer1Over,   timer1Over}}};

  assign pIn0 = inputs[65:65];

  assign pIn1 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd500000);

  assign timer1Over = result_3 >= (64'sd1000000);

  assign result_7 = {{result_64 & (~ result_67),
                      {{dta_3,   result_17},   {dta_1,   result_16},
                       {dta_0,   result_15},   {dta,   result_14},
                       {winData,   result_13},
                       {$signed(result_39[63:0]),   result_12},
                       {$signed(result_10[63:0]),   result_8}}},
                     pacings};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  assign iterateI_ho1_0_arg0 = pOut6;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  assign c$app_arg = {pOut6,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res};



  assign result_8 = c$app_arg[1-1:0];

  assign result_9 = b ? t : result_10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_10 <= result_9;
    end
  end
  // register end

  assign b = result_11;

  assign t = {result_37[7:0],   (x_1 + 64'sd1)};

  assign x_1 = c$ds2_case_alt;

  assign c$ds2_case_alt = (tag == tagToMatch) ? $signed(result_39[63:0]) : (64'sd0);

  assign tag = result_39[71:64];

  assign tagToMatch = result_37[15:8];

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= pOut6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {pOut6,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0};



  assign result_11 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut5;

  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_11;



  assign c$app_arg_1 = {pOut5,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0};



  assign result_12 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut4;

  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_16;



  assign c$app_arg_2 = {pOut4,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1};



  assign result_13 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= c$tOut3_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_21;



  assign c$app_arg_3 = {c$tOut3_case_alt,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2};



  assign result_14 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  assign iterateI_ho1_0_arg0_2 = pOut2;

  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_26;



  assign c$app_arg_4 = {pOut2,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3};



  assign result_15 = c$app_arg_4[1-1:0];

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  assign iterateI_ho1_0_arg0_3 = pOut1;

  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_31;



  assign c$app_arg_5 = {pOut1,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4};



  assign result_16 = c$app_arg_5[1-1:0];

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_5;
  assign iterateI_ho1_0_arg0_4 = x_8;

  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_36;



  assign c$app_arg_6 = {x_8,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_5};



  assign result_17 = c$app_arg_6[1-1:0];

  assign tag_0 = result_19[71:64];

  assign result_18 = b_0 ? t_0 : result_19;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_19_register
    if ( rst) begin
      result_19 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_19 <= result_18;
    end
  end
  // register end

  assign b_0 = result_28;

  assign t_0 = {result_37[47:40],   (x_2 + y)};

  assign x_2 = c$out1_case_alt_0;

  assign y = c$out1_case_alt;

  assign c$out1_case_alt = (tag_1 == 8'd3) ? (64'sd2) : dta;

  assign dta = $signed(result_21[63:0]);

  assign tag_1 = result_21[71:64];

  assign result_20 = (x0 & x1) ? t_1 : result_21;

  assign x0 = result_24[1:1];

  assign x1 = result_24[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign t_1 = {t_12,   (x_3 + 64'sd1)};

  assign x_3 = c$out3_case_alt;

  assign c$out3_case_alt = (tag_2 == 8'd3) ? (64'sd0) : dta_0;

  assign dta_0 = $signed(result_23[63:0]);

  assign tag_2 = result_23[71:64];

  assign result_22 = b_1 ? t_2 : result_23;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_23_register
    if ( rst) begin
      result_23 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_23 <= result_22;
    end
  end
  // register end

  assign b_1 = result_30;

  assign t_2 = {result_29[39:32],   (x_4 + y_0)};

  assign x_4 = c$out2_case_alt;

  assign y_0 = c$out2_case_alt_0;

  assign c$out2_case_alt = (tag_0 == 8'd3) ? (64'sd10) : dta_1;

  assign dta_1 = $signed(result_19[63:0]);

  wire [1:0] iterateI_ho1_0_res_7;
  reg [1:0] c$bb_res_res_37 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_37;



  assign c$app_arg_7 = {pOut3,
                        iterateI_ho1_0_res_7};



  assign result_24 = c$app_arg_7[2-1:0];

  assign c$out1_case_alt_0 = (tag_3 == 8'd3) ? (64'sd1) : dta_2;

  assign dta_2 = $signed(result_26[63:0]);

  assign tag_3 = result_26[71:64];

  assign result_25 = b_2 ? {t_13,
                            c$ds_app_arg} : result_26;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_26_register
    if ( rst) begin
      result_26 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_26 <= result_25;
    end
  end
  // register end

  assign b_2 = result_27;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_8;
  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_38;



  assign c$app_arg_8 = {pIn1_0,
                        iterateI_ho1_0_res_8};



  assign result_27 = c$app_arg_8[1-1:0];

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_41;



  assign c$app_arg_9 = {pOut1,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7};



  assign result_28 = c$app_arg_9[1-1:0];

  assign c$out2_case_alt_0 = (tag_4 == 8'd3) ? (64'sd11) : dta_3;

  assign dta_3 = $signed(result_32[63:0]);

  assign tag_4 = result_32[71:64];

  wire [71:0] iterateI_ho1_0_arg0_5;
  wire [71:0] iterateI_ho1_0_res_10;
  wire [71:0] iterateI_ho1_1_res_8;
  wire [71:0] iterateI_ho1_2_res_8;
  assign iterateI_ho1_0_arg0_5 = {t_14,   t_13,
                                  t_9,   t_8,   t_7,   t_12,   t_11,   t_6,
                                  t_5};

  reg [71:0] c$bb_res_res_42 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_42;



  reg [71:0] c$bb_res_res_43 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_43;



  reg [71:0] c$bb_res_res_44 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_44;



  assign c$app_arg_10 = {{t_14,   t_13,   t_9,
                          t_8,   t_7,   t_12,   t_11,   t_6,   t_5},
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_8};



  assign result_29 = c$app_arg_10[72-1:0];

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_6;
  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_48;



  assign c$app_arg_11 = {pOut2,
                         iterateI_ho1_0_res_11,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_9,   iterateI_ho1_3_res_6};



  assign result_30 = c$app_arg_11[1-1:0];

  assign result_31 = x_5 ? t_3 : result_32;

  assign x_5 = result_36;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_32_register
    if ( rst) begin
      result_32 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_32 <= result_31;
    end
  end
  // register end

  assign t_3 = {result_41[55:48],
                (x_6 + 64'sd1)};

  assign x_6 = c$out0_case_alt;

  assign c$out0_case_alt = (tag_5 == tagToMatch_0) ? dta_4 : (64'sd0);

  assign dta_4 = $signed(result_34[63:0]);

  assign tag_5 = result_34[71:64];

  assign tagToMatch_0 = result_41[71:64];

  assign result_33 = b_3 ? {t_14,
                            c$ds_app_arg_0} : result_34;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_34_register
    if ( rst) begin
      result_34 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_34 <= result_33;
    end
  end
  // register end

  assign b_3 = result_35;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_0_delay
    if (en) begin
      c$ds_app_arg_0 <= $signed(inputs_2[129:66]);
    end
  end
  // delay end

  assign inputs_2 = result_68[139:10];

  wire  iterateI_ho1_0_res_12;
  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_49;



  assign c$app_arg_12 = {pIn0_0,
                         iterateI_ho1_0_res_12};



  assign result_35 = c$app_arg_12[1-1:0];

  wire  iterateI_ho1_0_res_13;
  wire  iterateI_ho1_1_res_10;
  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_51;



  assign c$app_arg_13 = {pOut0,
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_10};



  assign result_36 = c$app_arg_13[1-1:0];

  wire [71:0] iterateI_ho1_0_arg0_6;
  wire [71:0] iterateI_ho1_0_res_14;
  wire [71:0] iterateI_ho1_1_res_11;
  assign iterateI_ho1_0_arg0_6 = {t_14,   t_13,
                                  t_9,   t_8,   t_7,   t_12,   t_11,   t_6,
                                  t_5};

  reg [71:0] c$bb_res_res_52 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_52;



  reg [71:0] c$bb_res_res_53 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_53;



  assign c$app_arg_14 = {{t_14,   t_13,   t_9,
                          t_8,   t_7,   t_12,   t_11,   t_6,   t_5},
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_11};



  assign result_37 = c$app_arg_14[72-1:0];

  assign result_38 = b_4 ? t_4 : result_39;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_39_register
    if ( rst) begin
      result_39 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_39 <= result_38;
    end
  end
  // register end

  assign b_4 = result_40;

  assign t_4 = {result_41[15:8],
                (x_7 + 64'sd1)};

  assign x_7 = c$out5_case_alt;

  assign c$out5_case_alt = (winTag == tagToMatch_1) ? winData : (64'sd0);

  assign tagToMatch_1 = result_41[23:16];

  wire  iterateI_ho1_0_res_15;
  wire  iterateI_ho1_1_res_12;
  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= pOut5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_0_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_55;



  assign c$app_arg_15 = {pOut5,
                         iterateI_ho1_0_res_15,
                         iterateI_ho1_1_res_12};



  assign result_40 = c$app_arg_15[1-1:0];

  wire [71:0] iterateI_ho1_0_arg0_7;
  wire [71:0] iterateI_ho1_0_res_16;
  assign iterateI_ho1_0_arg0_7 = {t_14,   t_13,
                                  t_9,   t_8,   t_7,   t_12,   t_11,   t_6,
                                  t_5};

  reg [71:0] c$bb_res_res_56 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_56;



  assign c$app_arg_16 = {{t_14,   t_13,   t_9,
                          t_8,   t_7,   t_12,   t_11,   t_6,   t_5},
                         iterateI_ho1_0_res_16};



  assign result_41 = c$app_arg_16[72-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_42;
    end
  end
  // register end

  assign result_42 = pOut6 ? result_43 : t_5;

  assign b_5 = t_5 == 8'd2;

  assign f1 = t_5 + 8'd1;

  assign result_43 = b_5 ? 8'd1 : f1;

  assign pOut6 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_44;
    end
  end
  // register end

  assign result_44 = pOut5 ? result_45 : t_6;

  assign b_6 = t_6 == 8'd2;

  assign f1_0 = t_6 + 8'd1;

  assign result_45 = b_6 ? 8'd1 : f1_0;

  assign pOut5 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_46;
    end
  end
  // register end

  assign result_46 = pOut2 ? result_47 : t_7;

  assign b_7 = t_7 == 8'd2;

  assign f1_1 = t_7 + 8'd1;

  assign result_47 = b_7 ? 8'd1 : f1_1;

  assign pOut2 = pacings[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_48;
    end
  end
  // register end

  assign result_48 = pOut1 ? result_49 : t_8;

  assign b_8 = t_8 == 8'd2;

  assign f1_2 = t_8 + 8'd1;

  assign result_49 = b_8 ? 8'd1 : f1_2;

  assign pOut1 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_50;
    end
  end
  // register end

  assign result_50 = x_8 ? result_51 : t_9;

  assign b_9 = t_9 == 8'd2;

  assign f1_3 = t_9 + 8'd1;

  assign result_51 = b_9 ? 8'd1 : f1_3;

  assign x_8 = pOut0;

  assign pOut0 = pacings[7:7];

  assign winTag = result_53[71:64];

  assign result_52 = b_10 ? t_10 : result_53;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_53_register
    if ( rst) begin
      result_53 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_53 <= result_52;
    end
  end
  // register end

  assign b_10 = result_55;

  assign t_10 = {t_11,   (x_9 + 64'sd1)};

  assign x_9 = c$out4_case_alt;

  assign c$out4_case_alt = (result_54 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_53[63:0]);

  assign result_54 = (t_11 > 8'd1) ? c$app_arg_17 : (c$app_arg_17 + 8'd2);

  assign c$app_arg_17 = t_11 - 8'd1;

  wire  iterateI_ho1_0_res_17;
  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= pOut4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_57;



  assign c$app_arg_18 = {pOut4,
                         iterateI_ho1_0_res_17};



  assign result_55 = c$app_arg_18[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_56;
    end
  end
  // register end

  assign result_56 = pOut4 ? result_57 : t_11;

  assign b_11 = t_11 == 8'd2;

  assign f1_4 = t_11 + 8'd1;

  assign result_57 = b_11 ? 8'd1 : f1_4;

  assign pOut4 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_58;
    end
  end
  // register end

  assign result_58 = c$tOut3_case_alt ? result_59 : t_12;

  assign b_12 = t_12 == 8'd2;

  assign f1_5 = t_12 + 8'd1;

  assign result_59 = b_12 ? 8'd1 : f1_5;

  assign c$tOut3_case_alt = x0_0 & x1_0;

  assign x1_0 = pOut3[0:0];

  assign x0_0 = pOut3[1:1];

  assign pOut3 = pacings[4:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_13_register
    if ( rst) begin
      t_13 <= 8'd1;
    end else if (en) begin
      t_13 <= result_60;
    end
  end
  // register end

  assign result_60 = pIn1_0 ? result_61 : t_13;

  assign b_13 = t_13 == 8'd2;

  assign f1_6 = t_13 + 8'd1;

  assign result_61 = b_13 ? 8'd1 : f1_6;

  assign pIn1_0 = pacings[8:8];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_14_register
    if ( rst) begin
      t_14 <= 8'd1;
    end else if (en) begin
      t_14 <= result_62;
    end
  end
  // register end

  assign result_62 = pIn0_0 ? result_63 : t_14;

  assign b_14 = t_14 == 8'd2;

  assign f1_7 = t_14 + 8'd1;

  assign result_63 = b_14 ? 8'd1 : f1_7;

  assign pIn0_0 = pacings[9:9];

  assign pacings = result_68[9:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_65;
    end
  end
  // register end

  assign result_64 = toWait == (64'sd0);

  assign result_65 = result_67 ? (64'sd3) : result_66;

  assign b_15 = toWait > (64'sd0);

  assign result_66 = b_15 ? ((x_10 - 64'sd1)) : toWait;

  assign x_10 = toWait;

  assign result_67 = b_16 ? 1'b1 : 1'b0;

  assign b_16 = result_64 & qPopValid;

  assign result_68 = {c$app_arg_21,
                      c$app_arg_20,   c$app_arg_19};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_19_register
    if ( rst) begin
      c$app_arg_19 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                              1'b0,   {1'b0,   1'b0},   1'b0,
                                              1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_19 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},
                                                                                1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                                1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},
                                                                                1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,
                                                      1'b0,   1'b0,   {1'b0,   1'b0},   1'b0,
                                                      1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [139:0] vecArray [0:5-1];
  genvar i;
  generate
  for (i=0; i < 5; i=i+1) begin : mk_array
    assign vecArray[(5-1)-i] = buffer[i*140+:140];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_20_register
    if ( rst) begin
      c$app_arg_20 <= 1'b0;
    end else if (en) begin
      c$app_arg_20 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_21_register
    if ( rst) begin
      c$app_arg_21 <= 1'b0;
    end else if (en) begin
      c$app_arg_21 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_11 != 64'sd5) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                               1'b0,   {1'b0,   1'b0},   1'b0,
                                               1'b0,   1'b0}},   {{{64'sd0,
                                                                    1'b0},
                                                                   {64'sd0,
                                                                    1'b0}},
                                                                  {1'b0,   1'b0,
                                                                   1'b0,   1'b0,
                                                                   1'b0,   {1'b0,
                                                                            1'b0},
                                                                   1'b0,   1'b0,
                                                                   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                               1'b0,   {1'b0,   1'b0},   1'b0,
                                               1'b0,   1'b0}},   {{{64'sd0,
                                                                    1'b0},
                                                                   {64'sd0,
                                                                    1'b0}},
                                                                  {1'b0,   1'b0,
                                                                   1'b0,   1'b0,
                                                                   1'b0,   {1'b0,
                                                                            1'b0},
                                                                   1'b0,   1'b0,
                                                                   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,   1'b0,   1'b0,
                                               1'b0,   {1'b0,   1'b0},   1'b0,
                                               1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[839:140] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[839:140];

  assign qData = result_6[139:0];

  assign x_11 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_11 + 64'sd1));

  assign c$tte_rhs_0 = (x_11 == 64'sd5) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_11)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_11 - 64'sd1);

  assign result = {result_7[464:10],   {qPush,
                                        qPop,   result_68[141:141],   qPopValid,
                                        result_7[9:0]}};

  assign qPopValid = result_68[140:140];

  assign qPush = result_6[140:140];

  assign qPop = result_7[465:465];

  assign result_0 = result[468:14];

  assign result_1 = result[13:0];

  assign result_0_0 = result_0[454:390];

  assign result_0_1 = result_0[389:325];

  assign result_0_2 = result_0[324:260];

  assign result_0_3 = result_0[259:195];

  assign result_0_4 = result_0[194:130];

  assign result_0_5 = result_0[129:65];

  assign result_0_6 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_0_6_0 = $signed(result_0_6[64:1]);

  assign result_0_6_1 = result_0_6[0:0];

  assign result_1_0 = result_1[13:13];

  assign result_1_1 = result_1[12:12];

  assign result_1_2 = result_1[11:11];

  assign result_1_3 = result_1[10:10];

  assign result_1_4 = result_1[9:0];

  assign result_1_4_0 = result_1_4[9:9];

  assign result_1_4_1 = result_1_4[8:8];

  assign result_1_4_2 = result_1_4[7:7];

  assign result_1_4_3 = result_1_4[6:6];

  assign result_1_4_4 = result_1_4[5:5];

  assign result_1_4_5 = result_1_4[4:3];

  assign result_1_4_6 = result_1_4[2:2];

  assign result_1_4_7 = result_1_4[1:1];

  assign result_1_4_8 = result_1_4[0:0];

  assign result_1_4_5_0 = result_1_4_5[1:1];

  assign result_1_4_5_1 = result_1_4_5[0:0];


endmodule


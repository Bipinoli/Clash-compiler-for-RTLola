/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    );
  // spec.hs:(197,1)-(198,31)
  wire  timer0Over;
  wire [3:0] result_2;
  wire signed [63:0] result_3;
  wire signed [63:0] x;
  reg signed [63:0] result_4 = (64'sd0);
  wire [198:0] result_5;
  wire [2:0] c$app_arg;
  wire  result_6;
  wire [2:0] c$app_arg_0;
  wire  result_7;
  wire [2:0] c$app_arg_1;
  wire  result_8;
  // spec.hs:253:1-55
  wire [7:0] winTag;
  wire [71:0] result_9;
  // spec.hs:(427,1)-(431,28)
  reg [71:0] result_10 = {8'd3,   64'sd0};
  // spec.hs:(427,1)-(431,28)
  wire  b;
  // spec.hs:(290,1)-(292,51)
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:253:1-55
  wire signed [63:0] winData;
  // spec.hs:253:1-55
  wire [7:0] winTag_0;
  wire [71:0] result_11;
  // spec.hs:(414,1)-(418,28)
  reg [71:0] result_12 = {8'd3,   64'sd0};
  // spec.hs:(414,1)-(418,28)
  wire  b_0;
  // spec.hs:(290,1)-(292,51)
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:253:1-55
  wire signed [63:0] winData_0;
  // spec.hs:253:1-55
  wire [7:0] winTag_1;
  wire [71:0] result_13;
  // spec.hs:(401,1)-(405,28)
  reg [71:0] result_14 = {8'd3,   64'sd0};
  // spec.hs:(401,1)-(405,28)
  wire  b_1;
  // spec.hs:(401,1)-(405,28)
  wire [71:0] t;
  wire signed [63:0] x_0;
  // spec.hs:(290,1)-(292,51)
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:253:1-55
  wire signed [63:0] winData_1;
  wire [7:0] result_15;
  wire [7:0] c$app_arg_2;
  wire [7:0] result_16;
  wire [7:0] c$app_arg_3;
  wire [7:0] result_17;
  wire [7:0] c$app_arg_4;
  wire [1:0] c$app_arg_5;
  wire  result_18;
  // spec.hs:(388,9)-(390,29)
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_19;
  // spec.hs:(388,9)-(390,29)
  wire  b_2;
  // spec.hs:(388,9)-(390,29)
  wire [7:0] f1;
  wire [7:0] result_20;
  // spec.hs:(290,1)-(292,51)
  wire  pOut2;
  wire [1:0] c$app_arg_6;
  wire  result_21;
  // spec.hs:(388,9)-(390,29)
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_22;
  // spec.hs:(388,9)-(390,29)
  wire  b_3;
  // spec.hs:(388,9)-(390,29)
  wire [7:0] f1_0;
  wire [7:0] result_23;
  // spec.hs:(290,1)-(292,51)
  wire  pOut1;
  wire [1:0] c$app_arg_7;
  wire  result_24;
  // spec.hs:(388,9)-(390,29)
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_25;
  // spec.hs:(388,9)-(390,29)
  wire  b_4;
  // spec.hs:(388,9)-(390,29)
  wire [7:0] f1_1;
  wire [7:0] result_26;
  // spec.hs:(290,1)-(292,51)
  wire  pOut0;
  // spec.hs:(290,1)-(292,51)
  wire [2:0] pacings;
  wire [4:0] result_27;
  reg [2:0] c$app_arg_8 = {1'b0,   1'b0,   1'b0};
  wire [2:0] c$case_alt;
  wire [2:0] c$case_alt_0;
  wire [2:0] c$case_alt_1;
  reg [2:0] c$case_alt_2;
  reg [2:0] c$case_alt_3;
  wire [2:0] c$case_alt_4;
  reg  c$app_arg_9 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_10 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:(114,1)-(116,25)
  reg [5:0] buffer = {{1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0}};
  // spec.hs:(114,1)-(116,25)
  wire [5:0] c$buffer_case_alt;
  // spec.hs:(114,1)-(116,25)
  wire [5:0] c$buffer_case_alt_0;
  // spec.hs:(114,1)-(116,25)
  wire [5:0] c$buffer_case_alt_1;
  // spec.hs:(114,1)-(116,25)
  wire [2:0] qData;
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] x_1;
  // spec.hs:(114,1)-(116,25)
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:(114,1)-(116,25)
  wire  c$cursor_case_scrut;
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:(114,1)-(116,25)
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:(114,1)-(116,25)
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:(447,1)-(448,80)
  wire  qPopValid;
  // spec.hs:(447,1)-(448,80)
  wire  qPush;
  // spec.hs:(447,1)-(448,80)
  wire  qPop;
  wire signed [63:0] c$tte_rhs;
  wire [8:0] c$buffer_case_alt_sel_alt_t_1;
  wire [8:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [201:0] result;
  wire [194:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [6:0] result_1;
  wire [2:0] result_1_4_9;

  assign timer0Over = result_4 >= (64'sd1000000);

  assign result_2 = {timer0Over,   {timer0Over,
                                    timer0Over,   timer0Over}};

  assign result_3 = timer0Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_4;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_4_register
    if ( rst) begin
      result_4 <= (64'sd0);
    end else if (en) begin
      result_4 <= result_3;
    end
  end
  // register end

  assign result_5 = {{1'b1,   {{winData_0,
                                result_8},   {winData,   result_7},
                               {winData_1,   result_6}}},   {result_24,
                                                             result_21,   result_18}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  assign iterateI_ho1_0_arg0 = pOut2;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  assign c$app_arg = {pOut2,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res};



  assign result_6 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  assign iterateI_ho1_0_arg0_0 = pOut1;

  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_2;



  assign c$app_arg_0 = {pOut1,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0};



  assign result_7 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  assign iterateI_ho1_0_arg0_1 = pOut0;

  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_4;



  assign c$app_arg_1 = {pOut0,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1};



  assign result_8 = c$app_arg_1[1-1:0];

  assign winTag = result_10[71:64];

  assign result_9 = b ? {t_0,
                         c$out2_case_alt} : result_10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_10 <= result_9;
    end
  end
  // register end

  assign b = result_18;

  assign c$out2_case_alt = (result_16 == winTag_0) ? winData : (64'sd0);

  assign winData = $signed(result_12[63:0]);

  assign winTag_0 = result_12[71:64];

  assign result_11 = b_0 ? {t_1,
                            c$out1_case_alt} : result_12;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_12_register
    if ( rst) begin
      result_12 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_12 <= result_11;
    end
  end
  // register end

  assign b_0 = result_21;

  assign c$out1_case_alt = (result_15 == winTag_1) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_14[63:0]);

  assign winTag_1 = result_14[71:64];

  assign result_13 = b_1 ? t : result_14;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_14_register
    if ( rst) begin
      result_14 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_14 <= result_13;
    end
  end
  // register end

  assign b_1 = result_24;

  assign t = {t_2,   (x_0 + 64'sd1)};

  assign x_0 = c$out0_case_alt;

  assign c$out0_case_alt = (result_17 == winTag) ? winData_1 : (64'sd0);

  assign winData_1 = $signed(result_10[63:0]);

  assign result_15 = (t_2 > 8'd1) ? c$app_arg_2 : (c$app_arg_2 + 8'd2);

  assign c$app_arg_2 = t_2 - 8'd1;

  assign result_16 = (t_1 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd2);

  assign c$app_arg_3 = t_1 - 8'd1;

  assign result_17 = (t_0 > 8'd1) ? c$app_arg_4 : (c$app_arg_4 + 8'd2);

  assign c$app_arg_4 = t_0 - 8'd1;

  wire  iterateI_ho1_0_res_2;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_5;



  assign c$app_arg_5 = {pOut2,
                        iterateI_ho1_0_res_2};



  assign result_18 = c$app_arg_5[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_19;
    end
  end
  // register end

  assign result_19 = pOut2 ? result_20 : t_0;

  assign b_2 = t_0 == 8'd2;

  assign f1 = t_0 + 8'd1;

  assign result_20 = b_2 ? 8'd1 : f1;

  assign pOut2 = pacings[0:0];

  wire  iterateI_ho1_0_res_3;
  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_6;



  assign c$app_arg_6 = {pOut1,
                        iterateI_ho1_0_res_3};



  assign result_21 = c$app_arg_6[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_22;
    end
  end
  // register end

  assign result_22 = pOut1 ? result_23 : t_1;

  assign b_3 = t_1 == 8'd2;

  assign f1_0 = t_1 + 8'd1;

  assign result_23 = b_3 ? 8'd1 : f1_0;

  assign pOut1 = pacings[1:1];

  wire  iterateI_ho1_0_res_4;
  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_7;



  assign c$app_arg_7 = {pOut0,
                        iterateI_ho1_0_res_4};



  assign result_24 = c$app_arg_7[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_25;
    end
  end
  // register end

  assign result_25 = pOut0 ? result_26 : t_2;

  assign b_4 = t_2 == 8'd2;

  assign f1_1 = t_2 + 8'd1;

  assign result_26 = b_4 ? 8'd1 : f1_1;

  assign pOut0 = pacings[2:2];

  assign pacings = result_27[2:0];

  assign result_27 = {c$app_arg_10,
                      c$app_arg_9,   c$app_arg_8};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_8_register
    if ( rst) begin
      c$app_arg_8 <= {1'b0,   1'b0,   1'b0};
    end else if (en) begin
      c$app_arg_8 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {1'b0,
                                               1'b0,   1'b0};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {1'b0,
                                               1'b0,   1'b0};

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_3 = {1'b0,   1'b0,
                               1'b0};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [2:0] vecArray [0:2-1];
  genvar i;
  generate
  for (i=0; i < 2; i=i+1) begin : mk_array
    assign vecArray[(2-1)-i] = buffer[i*3+:3];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_9_register
    if ( rst) begin
      c$app_arg_9 <= 1'b0;
    end else if (en) begin
      c$app_arg_9 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_1)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_10_register
    if ( rst) begin
      c$app_arg_10 <= 1'b0;
    end else if (en) begin
      c$app_arg_10 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_1 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[8:3] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[8:3];

  assign qData = result_2[2:0];

  assign x_1 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_1 + 64'sd1));

  assign c$tte_rhs_0 = (x_1 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_1)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_1 - 64'sd1);

  assign result = {result_5[197:3],   {qPush,
                                       qPop,   result_27[4:4],   qPopValid,
                                       result_5[2:0]}};

  assign qPopValid = result_27[3:3];

  assign qPush = result_2[3:3];

  assign qPop = result_5[198:198];

  assign result_0 = result[201:7];

  assign result_1 = result[6:0];

  assign result_0_0 = result_0[194:130];

  assign result_0_1 = result_0[129:65];

  assign result_0_2 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_1_0 = result_1[6:6];

  assign result_1_1 = result_1[5:5];

  assign result_1_2 = result_1[4:4];

  assign result_1_3 = result_1[3:3];

  assign result_1_4_9 = result_1[2:0];

  assign result_1_4_0 = result_1_4_9[2:2];

  assign result_1_4_1 = result_1_4_9[1:1];

  assign result_1_4_2 = result_1_4_9[0:0];


endmodule


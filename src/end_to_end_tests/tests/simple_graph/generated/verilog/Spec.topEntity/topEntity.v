/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    );
  wire [70:0] result_2;
  // spec.hs:195:1-82
  wire  hasInput0;
  // spec.hs:195:1-82
  wire  pIn0;
  wire [265:0] result_3;
  wire [4:0] c$app_arg;
  wire  result_4;
  wire [4:0] c$app_arg_0;
  wire  result_5;
  wire [4:0] c$app_arg_1;
  wire  result_6;
  wire [4:0] c$app_arg_2;
  wire  result_7;
  // spec.hs:245:1-53
  wire [7:0] tagToMatch;
  // spec.hs:245:1-53
  wire [7:0] tag;
  wire [71:0] result_8;
  // spec.hs:75:34-42
  wire  x;
  // spec.hs:372:1-147
  reg [71:0] result_9 = {8'd3,   64'sd0};
  // spec.hs:372:1-147
  wire [71:0] t;
  wire signed [63:0] x_0;
  wire signed [63:0] y;
  // spec.hs:266:1-104
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:239:1-55
  wire signed [63:0] winData;
  // spec.hs:239:1-55
  wire [7:0] winTag;
  wire [71:0] result_10;
  // spec.hs:78:34-42
  wire  x_1;
  // spec.hs:396:1-129
  reg [71:0] result_11 = {8'd3,   64'sd0};
  // spec.hs:396:1-129
  wire [71:0] t_0;
  wire signed [63:0] x_2;
  // spec.hs:266:1-104
  wire signed [63:0] c$out3_case_alt;
  // spec.hs:245:1-53
  wire signed [63:0] dta;
  // spec.hs:245:1-53
  wire [7:0] tag_0;
  wire [71:0] result_12;
  // spec.hs:77:34-42
  wire  x_3;
  // spec.hs:388:1-129
  reg [71:0] result_13 = {8'd3,   64'sd0};
  // spec.hs:266:1-104
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:239:1-55
  wire signed [63:0] winData_0;
  // spec.hs:239:1-55
  wire [7:0] winTag_0;
  wire [71:0] result_14;
  // spec.hs:76:34-42
  wire  x_4;
  // spec.hs:380:1-129
  reg [71:0] result_15 = {8'd3,   64'sd0};
  // spec.hs:380:1-129
  wire [71:0] t_1;
  wire signed [63:0] x_5;
  // spec.hs:266:1-104
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:245:1-53
  wire signed [63:0] dta_0;
  wire [7:0] result_16;
  wire [7:0] c$app_arg_3;
  // spec.hs:239:1-55
  wire [7:0] tag_1;
  wire [2:0] c$app_arg_4;
  wire  result_17;
  // spec.hs:245:1-53
  wire [7:0] tagToMatch_0;
  wire [3:0] c$app_arg_5;
  wire  result_18;
  wire [7:0] result_19;
  wire [7:0] c$app_arg_6;
  // spec.hs:239:1-55
  wire [7:0] tag_2;
  // spec.hs:266:1-104
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:245:1-53
  wire signed [63:0] dta_1;
  // spec.hs:245:1-53
  wire [7:0] tag_3;
  wire [71:0] result_20;
  // spec.hs:366:1-127
  reg [71:0] result_21 = {8'd3,   64'sd0};
  // spec.hs:366:1-127
  wire  b;
  // spec.hs:245:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_7;
  wire  result_22;
  // spec.hs:245:1-53
  wire [7:0] tagToMatch_1;
  wire [2:0] c$app_arg_8;
  wire  result_23;
  wire [3:0] c$app_arg_9;
  wire  result_24;
  wire [119:0] c$app_arg_10;
  wire [39:0] result_25;
  wire [79:0] c$app_arg_11;
  wire [39:0] result_26;
  // spec.hs:350:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_27;
  // spec.hs:350:9-81
  wire  b_0;
  // spec.hs:350:9-81
  wire [7:0] f1;
  wire [7:0] result_28;
  // spec.hs:78:34-42
  wire  x_6;
  // spec.hs:266:1-104
  wire  pOut3;
  // spec.hs:350:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_29;
  // spec.hs:350:9-81
  wire  b_1;
  // spec.hs:350:9-81
  wire [7:0] f1_0;
  wire [7:0] result_30;
  // spec.hs:77:34-42
  wire  x_7;
  // spec.hs:266:1-104
  wire  pOut2;
  // spec.hs:350:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_31;
  // spec.hs:350:9-81
  wire  b_2;
  // spec.hs:350:9-81
  wire [7:0] f1_1;
  wire [7:0] result_32;
  // spec.hs:76:34-42
  wire  x_8;
  // spec.hs:266:1-104
  wire  pOut1;
  // spec.hs:350:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_33;
  // spec.hs:350:9-81
  wire  b_3;
  // spec.hs:350:9-81
  wire [7:0] f1_2;
  wire [7:0] result_34;
  // spec.hs:75:34-42
  wire  x_9;
  // spec.hs:266:1-104
  wire  pOut0;
  // spec.hs:350:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_35;
  // spec.hs:350:9-81
  wire  b_4;
  // spec.hs:350:9-81
  wire [7:0] f1_3;
  wire [7:0] result_36;
  // spec.hs:266:1-104
  wire  pIn0_0;
  // spec.hs:266:1-104
  wire [4:0] pacings;
  // spec.hs:357:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_37;
  wire signed [63:0] result_38;
  // spec.hs:357:1-81
  wire  b_5;
  wire signed [63:0] result_39;
  wire signed [63:0] x_10;
  wire  result_40;
  // spec.hs:266:1-104
  wire  b_6;
  wire [71:0] result_41;
  reg [69:0] c$app_arg_12 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
  wire [69:0] c$case_alt;
  wire [69:0] c$case_alt_0;
  wire [69:0] c$case_alt_1;
  reg [69:0] c$case_alt_2;
  reg [69:0] c$case_alt_3;
  wire [69:0] c$case_alt_4;
  reg  c$app_arg_13 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_14 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:128:1-78
  reg [209:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,
                                                                   1'b0},
                                                                  {1'b0,
                                                                   1'b0,
                                                                   1'b0,
                                                                   1'b0,
                                                                   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:128:1-78
  wire [209:0] c$buffer_case_alt;
  // spec.hs:128:1-78
  wire [209:0] c$buffer_case_alt_0;
  // spec.hs:128:1-78
  wire [209:0] c$buffer_case_alt_1;
  // spec.hs:128:1-78
  wire [69:0] qData;
  // spec.hs:128:1-78
  wire signed [63:0] x_11;
  // spec.hs:128:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:128:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:128:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:128:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:128:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:128:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:128:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:128:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:411:1-129
  wire  qPopValid;
  // spec.hs:411:1-129
  wire  qPush;
  // spec.hs:411:1-129
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [279:0] c$buffer_case_alt_sel_alt_t_1;
  wire [279:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [268:0] result;
  wire [259:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [8:0] result_1;
  wire [4:0] result_1_4_13;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = {hasInput0,   {inputs,
                                   {pIn0,   pIn0,   pIn0,   pIn0,   pIn0}}};

  assign hasInput0 = inputs[0:0];

  assign pIn0 = hasInput0;

  assign result_3 = {{result_37 & (~ result_40),
                      {{dta_0,   result_7},   {winData_0,
                                               result_6},   {dta,   result_5},   {winData,
                                                                                  result_4}}},   pacings};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  assign iterateI_ho1_0_arg0 = x_6;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  assign c$app_arg = {x_6,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res};



  assign result_4 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  assign iterateI_ho1_0_arg0_0 = x_7;

  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_6;



  assign c$app_arg_0 = {x_7,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0};



  assign result_5 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_arg0_1;
  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  assign iterateI_ho1_0_arg0_1 = x_8;

  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_10;



  assign c$app_arg_1 = {x_8,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1};



  assign result_6 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  assign iterateI_ho1_0_arg0_2 = x_9;

  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_14;



  assign c$app_arg_2 = {x_9,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2};



  assign result_7 = c$app_arg_2[1-1:0];

  assign tagToMatch = result_25[31:24];

  assign tag = result_9[71:64];

  assign result_8 = x ? t : result_9;

  assign x = result_23;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_9_register
    if ( rst) begin
      result_9 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_9 <= result_8;
    end
  end
  // register end

  assign t = {result_26[31:24],   (x_0 + y)};

  assign x_0 = c$out0_case_alt_0;

  assign y = c$out0_case_alt;

  assign c$out0_case_alt = (result_19 == winTag) ? winData : (64'sd0);

  assign winData = $signed(result_11[63:0]);

  assign winTag = result_11[71:64];

  assign result_10 = x_1 ? t_0 : result_11;

  assign x_1 = result_18;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_11_register
    if ( rst) begin
      result_11 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_11 <= result_10;
    end
  end
  // register end

  assign t_0 = {result_25[7:0],   (x_2 + 64'sd1)};

  assign x_2 = c$out3_case_alt;

  assign c$out3_case_alt = (tag_0 == tagToMatch_0) ? dta : (64'sd0);

  assign dta = $signed(result_13[63:0]);

  assign tag_0 = result_13[71:64];

  assign result_12 = x_3 ? {result_26[15:8],
                            c$out2_case_alt} : result_13;

  assign x_3 = result_17;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_13_register
    if ( rst) begin
      result_13 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_13 <= result_12;
    end
  end
  // register end

  assign c$out2_case_alt = (result_16 == winTag_0) ? winData_0 : (64'sd0);

  assign winData_0 = $signed(result_15[63:0]);

  assign winTag_0 = result_15[71:64];

  assign result_14 = x_4 ? t_1 : result_15;

  assign x_4 = result_24;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_15_register
    if ( rst) begin
      result_15 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_15 <= result_14;
    end
  end
  // register end

  assign t_1 = {result_25[23:16],
                (x_5 + 64'sd1)};

  assign x_5 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == tagToMatch) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_9[63:0]);

  assign result_16 = (tag_1 > 8'd1) ? c$app_arg_3 : (c$app_arg_3 + 8'd2);

  assign c$app_arg_3 = tag_1 - 8'd1;

  assign tag_1 = result_26[23:16];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_16;



  assign c$app_arg_4 = {pOut2,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3};



  assign result_17 = c$app_arg_4[1-1:0];

  assign tagToMatch_0 = result_25[15:8];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_3;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_19;



  assign c$app_arg_5 = {pOut3,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_3};



  assign result_18 = c$app_arg_5[1-1:0];

  assign result_19 = (tag_2 > 8'd1) ? c$app_arg_6 : (c$app_arg_6 + 8'd2);

  assign c$app_arg_6 = tag_2 - 8'd1;

  assign tag_2 = result_26[7:0];

  assign c$out0_case_alt_0 = (tag_3 == tagToMatch_1) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_21[63:0]);

  assign tag_3 = result_21[71:64];

  assign result_20 = b ? {t_6,
                          c$ds_app_arg} : result_21;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_21_register
    if ( rst) begin
      result_21 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_21 <= result_20;
    end
  end
  // register end

  assign b = result_22;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(result_41[69:6]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_5;
  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_20;



  assign c$app_arg_7 = {pIn0_0,
                        iterateI_ho1_0_res_5};



  assign result_22 = c$app_arg_7[1-1:0];

  assign tagToMatch_1 = result_26[39:32];

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_5;
  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_22;



  assign c$app_arg_8 = {pOut0,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_5};



  assign result_23 = c$app_arg_8[1-1:0];

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_4;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_25;



  assign c$app_arg_9 = {pOut1,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_4};



  assign result_24 = c$app_arg_9[1-1:0];

  wire [39:0] iterateI_ho1_0_arg0_3;
  wire [39:0] iterateI_ho1_0_res_8;
  wire [39:0] iterateI_ho1_1_res_7;
  assign iterateI_ho1_0_arg0_3 = {t_6,   t_5,
                                  t_4,   t_3,   t_2};

  reg [39:0] c$bb_res_res_26 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_26;



  reg [39:0] c$bb_res_res_27 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_27;



  assign c$app_arg_10 = {{t_6,   t_5,   t_4,
                          t_3,   t_2},   iterateI_ho1_0_res_8,
                         iterateI_ho1_1_res_7};



  assign result_25 = c$app_arg_10[40-1:0];

  wire [39:0] iterateI_ho1_0_arg0_4;
  wire [39:0] iterateI_ho1_0_res_9;
  assign iterateI_ho1_0_arg0_4 = {t_6,   t_5,
                                  t_4,   t_3,   t_2};

  reg [39:0] c$bb_res_res_28 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_28;



  assign c$app_arg_11 = {{t_6,   t_5,   t_4,
                          t_3,   t_2},   iterateI_ho1_0_res_9};



  assign result_26 = c$app_arg_11[40-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_27;
    end
  end
  // register end

  assign result_27 = x_6 ? result_28 : t_2;

  assign b_0 = t_2 == 8'd2;

  assign f1 = t_2 + 8'd1;

  assign result_28 = b_0 ? 8'd1 : f1;

  assign x_6 = pOut3;

  assign pOut3 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_29;
    end
  end
  // register end

  assign result_29 = x_7 ? result_30 : t_3;

  assign b_1 = t_3 == 8'd2;

  assign f1_0 = t_3 + 8'd1;

  assign result_30 = b_1 ? 8'd1 : f1_0;

  assign x_7 = pOut2;

  assign pOut2 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_31;
    end
  end
  // register end

  assign result_31 = x_8 ? result_32 : t_4;

  assign b_2 = t_4 == 8'd2;

  assign f1_1 = t_4 + 8'd1;

  assign result_32 = b_2 ? 8'd1 : f1_1;

  assign x_8 = pOut1;

  assign pOut1 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_33;
    end
  end
  // register end

  assign result_33 = x_9 ? result_34 : t_5;

  assign b_3 = t_5 == 8'd2;

  assign f1_2 = t_5 + 8'd1;

  assign result_34 = b_3 ? 8'd1 : f1_2;

  assign x_9 = pOut0;

  assign pOut0 = pacings[3:3];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_35;
    end
  end
  // register end

  assign result_35 = pIn0_0 ? result_36 : t_6;

  assign b_4 = t_6 == 8'd2;

  assign f1_3 = t_6 + 8'd1;

  assign result_36 = b_4 ? 8'd1 : f1_3;

  assign pIn0_0 = pacings[4:4];

  assign pacings = result_41[4:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_38;
    end
  end
  // register end

  assign result_37 = toWait == (64'sd0);

  assign result_38 = result_40 ? (64'sd1) : result_39;

  assign b_5 = toWait > (64'sd0);

  assign result_39 = b_5 ? ((x_10 - 64'sd1)) : toWait;

  assign x_10 = toWait;

  assign result_40 = b_6 ? 1'b1 : 1'b0;

  assign b_6 = result_37 & qPopValid;

  assign result_41 = {c$app_arg_14,
                      c$app_arg_13,   c$app_arg_12};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_12_register
    if ( rst) begin
      c$app_arg_12 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_12 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0}};

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [69:0] vecArray [0:3-1];
  genvar i;
  generate
  for (i=0; i < 3; i=i+1) begin : mk_array
    assign vecArray[(3-1)-i] = buffer[i*70+:70];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_13_register
    if ( rst) begin
      c$app_arg_13 <= 1'b0;
    end else if (en) begin
      c$app_arg_13 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_11)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_14_register
    if ( rst) begin
      c$app_arg_14 <= 1'b0;
    end else if (en) begin
      c$app_arg_14 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_11 != 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,
                                                                     1'b0},
                                                                    {1'b0,
                                                                     1'b0,
                                                                     1'b0,
                                                                     1'b0,
                                                                     1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[279:70] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[279:70];

  assign qData = result_2[69:0];

  assign x_11 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_11 + 64'sd1));

  assign c$tte_rhs_0 = (x_11 == 64'sd3) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_11)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_11 - 64'sd1);

  assign result = {result_3[264:5],   {qPush,
                                       qPop,   result_41[71:71],   qPopValid,
                                       result_3[4:0]}};

  assign qPopValid = result_41[70:70];

  assign qPush = result_2[70:70];

  assign qPop = result_3[265:265];

  assign result_0 = result[268:9];

  assign result_1 = result[8:0];

  assign result_0_0 = result_0[259:195];

  assign result_0_1 = result_0[194:130];

  assign result_0_2 = result_0[129:65];

  assign result_0_3 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[8:8];

  assign result_1_1 = result_1[7:7];

  assign result_1_2 = result_1[6:6];

  assign result_1_3 = result_1[5:5];

  assign result_1_4_13 = result_1[4:0];

  assign result_1_4_0 = result_1_4_13[4:4];

  assign result_1_4_1 = result_1_4_13[3:3];

  assign result_1_4_2 = result_1_4_13[2:2];

  assign result_1_4_3 = result_1_4_13[1:1];

  assign result_1_4_4 = result_1_4_13[0:0];


endmodule


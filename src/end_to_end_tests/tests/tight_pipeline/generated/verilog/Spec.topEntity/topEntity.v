/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    );
  // spec.hs:289:9-81
  reg [7:0] t = 8'd1;
  wire [7:0] result_2;
  // spec.hs:289:9-81
  wire  b;
  // spec.hs:289:9-81
  wire [7:0] f1;
  wire [7:0] result_3;
  wire [1:0] c$app_arg;
  wire  result_4;
  // spec.hs:210:1-121
  reg [64:0] c$input0Win_case_scrut = {64'sd0,   1'b0};
  // spec.hs:299:1-122
  reg [71:0] result_5 = {8'd5,   64'sd0};
  // spec.hs:299:1-122
  wire [71:0] c$result_app_arg;
  // spec.hs:289:9-81
  reg [7:0] t_0 = 8'd1;
  wire [7:0] result_6;
  // spec.hs:289:9-81
  wire  b_0;
  // spec.hs:289:9-81
  wire [7:0] f1_0;
  wire [7:0] result_7;
  // spec.hs:289:9-81
  reg [7:0] t_1 = 8'd1;
  wire [7:0] result_8;
  // spec.hs:289:9-81
  wire  b_1;
  // spec.hs:289:9-81
  wire [7:0] f1_1;
  wire [7:0] result_9;
  // spec.hs:289:9-81
  reg [7:0] t_2 = 8'd1;
  wire [7:0] result_10;
  // spec.hs:289:9-81
  wire  b_2;
  // spec.hs:289:9-81
  wire [7:0] f1_2;
  wire [7:0] result_11;
  // spec.hs:289:9-81
  reg [7:0] t_3 = 8'd1;
  wire [7:0] result_12;
  // spec.hs:289:9-81
  wire  b_3;
  // spec.hs:289:9-81
  wire [7:0] f1_3;
  wire [7:0] result_13;
  wire [79:0] c$app_arg_0;
  wire [39:0] result_14;
  wire [119:0] c$app_arg_1;
  wire [39:0] result_15;
  wire [159:0] c$app_arg_2;
  wire [39:0] result_16;
  wire [199:0] c$app_arg_3;
  wire [39:0] result_17;
  wire [2:0] c$app_arg_4;
  wire  result_18;
  // spec.hs:210:1-121
  wire [71:0] c$out0_case_alt;
  wire [215:0] result_19;
  // spec.hs:305:1-138
  reg [215:0] result_20 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:305:1-138
  wire [215:0] t_4;
  wire signed [63:0] x;
  wire [2:0] c$app_arg_5;
  wire  result_21;
  // spec.hs:210:1-121
  wire [71:0] c$out1_case_alt;
  wire [215:0] result_22;
  // spec.hs:315:1-138
  reg [215:0] result_23 = {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:315:1-138
  wire [215:0] t_5;
  wire signed [63:0] x_0;
  wire [3:0] c$app_arg_6;
  wire  result_24;
  // spec.hs:184:1-70
  wire [224:0] c$ws_app_arg;
  // spec.hs:184:1-70
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire [71:0] result_25;
  // spec.hs:184:1-70
  wire [1:0] i;
  // spec.hs:184:1-70
  wire [11:0] ws;
  wire [143:0] result_26;
  // spec.hs:325:1-138
  reg [143:0] result_27 = {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
  // spec.hs:325:1-138
  wire [143:0] t_6;
  wire signed [63:0] x_1;
  // spec.hs:184:1-70
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:184:1-70
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire [71:0] result_28;
  // spec.hs:184:1-70
  wire [1:0] i_0;
  // spec.hs:184:1-70
  wire [11:0] ws_0;
  wire [5:0] c$app_arg_7;
  wire  result_29;
  // spec.hs:184:1-70
  wire [224:0] c$ws_app_arg_3;
  // spec.hs:184:1-70
  wire [8:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [2:0] c$case_scrut_4;
  wire [71:0] result_30;
  // spec.hs:184:1-70
  wire [1:0] i_1;
  // spec.hs:184:1-70
  wire [11:0] ws_1;
  wire [5:0] c$app_arg_8;
  wire  result_31;
  // spec.hs:184:1-70
  wire [147:0] c$ws_app_arg_5;
  // spec.hs:184:1-70
  wire [3:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [1:0] c$case_scrut_6;
  wire [71:0] result_32;
  // spec.hs:184:1-70
  wire [0:0] i_2;
  // spec.hs:184:1-70
  wire [5:0] ws_2;
  wire [5:0] c$app_arg_9;
  wire  result_33;
  wire [4:0] c$app_arg_10;
  wire  result_34;
  // spec.hs:184:1-70
  wire [224:0] c$ws_app_arg_7;
  // spec.hs:184:1-70
  wire [8:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [2:0] c$case_scrut_8;
  wire [71:0] result_35;
  // spec.hs:184:1-70
  wire [1:0] i_3;
  // spec.hs:184:1-70
  wire [11:0] ws_3;
  // spec.hs:184:1-70
  wire [147:0] c$ws_app_arg_9;
  // spec.hs:184:1-70
  wire [3:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [1:0] c$case_scrut_10;
  wire [71:0] result_36;
  // spec.hs:184:1-70
  wire [0:0] i_4;
  // spec.hs:184:1-70
  wire [5:0] ws_4;
  wire [71:0] result_37;
  // spec.hs:335:1-155
  reg [71:0] result_38 = {8'd5,   64'sd0};
  // spec.hs:335:1-155
  wire [71:0] t_7;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  wire [5:0] c$app_arg_11;
  wire  result_39;
  wire [264:0] result_40;
  // spec.hs:197:1-60
  wire [7:0] tag;
  // spec.hs:197:1-60
  wire signed [63:0] dta;
  // spec.hs:210:1-121
  wire [3:0] pacings;
  // spec.hs:210:1-121
  wire [64:0] input0;
  // spec.hs:210:1-121
  wire  input0HasData;
  // spec.hs:210:1-121
  wire  p0;
  // spec.hs:210:1-121
  wire [39:0] curTags;
  // spec.hs:210:1-121
  wire [7:0] out0Level1TagIn0;
  // spec.hs:210:1-121
  wire [7:0] out0Level1TagOut0;
  // spec.hs:210:1-121
  wire [7:0] out1Level1TagOut1;
  // spec.hs:210:1-121
  wire [7:0] out2Level2TagOut0;
  // spec.hs:210:1-121
  wire [7:0] out2Level2TagOut2;
  // spec.hs:210:1-121
  wire  p2;
  // spec.hs:210:1-121
  wire [7:0] out3Level3TagOut1;
  // spec.hs:210:1-121
  wire [7:0] out3Level3TagOut2;
  // spec.hs:210:1-121
  wire [7:0] level4TagOut0;
  // spec.hs:210:1-121
  wire [7:0] level4TagOut1;
  // spec.hs:210:1-121
  wire [7:0] level4TagOut2;
  // spec.hs:210:1-121
  wire  p4;
  // spec.hs:210:1-121
  wire  p3;
  // spec.hs:210:1-121
  wire [7:0] out3Level3TagOut3;
  wire [70:0] result_41;
  reg [68:0] c$app_arg_12 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
  wire [68:0] c$case_alt;
  wire [68:0] c$case_alt_0;
  wire [68:0] c$case_alt_1;
  reg [68:0] c$case_alt_2;
  reg [68:0] c$case_alt_3;
  wire [68:0] c$case_alt_4;
  reg  c$app_arg_13 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_14 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:81:1-78
  reg [137:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},
                                                          {1'b0,   1'b0,
                                                           1'b0,   1'b0}}};
  // spec.hs:81:1-78
  wire [137:0] c$buffer_case_alt;
  // spec.hs:81:1-78
  wire [137:0] c$buffer_case_alt_0;
  // spec.hs:81:1-78
  wire [137:0] c$buffer_case_alt_1;
  // spec.hs:81:1-78
  wire [68:0] qData;
  // spec.hs:81:1-78
  wire signed [63:0] x_3;
  // spec.hs:81:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:81:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:81:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:81:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:148:1-82
  wire  hasInput0;
  // spec.hs:352:1-146
  wire  qPopValid;
  // spec.hs:352:1-146
  wire  qPop;
  wire [64:0] inputs;
  wire [287:0] t_projection;
  wire [287:0] t_projection_0;
  wire [8:0] c$vec2;
  wire [215:0] t_projection_2;
  wire [8:0] c$vec2_0;
  wire [8:0] c$vec2_1;
  wire [3:0] c$vec2_2;
  wire [8:0] c$vec2_3;
  wire [3:0] c$vec2_4;
  wire signed [63:0] c$tte_rhs;
  wire [206:0] c$buffer_case_alt_sel_alt_t_1;
  wire [206:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [267:0] result;
  wire [259:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [7:0] result_1;
  wire [3:0] result_1_4_12;

  assign inputs = {inputs_0,   inputs_1};

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_register
    if ( rst) begin
      t <= 8'd1;
    end else if (en) begin
      t <= result_2;
    end
  end
  // register end

  assign result_2 = input0HasData ? result_3 : t;

  assign b = t == 8'd4;

  assign f1 = t + 8'd1;

  assign result_3 = b ? 8'd1 : f1;

  wire  iterateI_ho1_0_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  assign c$app_arg = {input0HasData,
                      iterateI_ho1_0_res};



  assign result_4 = c$app_arg[1-1:0];

  // delay begin
  always @(posedge clk) begin : c$input0Win_case_scrut_delay
    if (en) begin
      c$input0Win_case_scrut <= input0;
    end
  end
  // delay end

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_5 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_4 ? {t,
                                        $signed(c$input0Win_case_scrut[64:1])} : result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_0_register
    if ( rst) begin
      t_0 <= 8'd1;
    end else if (en) begin
      t_0 <= result_6;
    end
  end
  // register end

  assign result_6 = p0 ? result_7 : t_0;

  assign b_0 = t_0 == 8'd4;

  assign f1_0 = t_0 + 8'd1;

  assign result_7 = b_0 ? 8'd1 : f1_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_1_register
    if ( rst) begin
      t_1 <= 8'd1;
    end else if (en) begin
      t_1 <= result_8;
    end
  end
  // register end

  assign result_8 = p2 ? result_9 : t_1;

  assign b_1 = t_1 == 8'd4;

  assign f1_1 = t_1 + 8'd1;

  assign result_9 = b_1 ? 8'd1 : f1_1;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_2_register
    if ( rst) begin
      t_2 <= 8'd1;
    end else if (en) begin
      t_2 <= result_10;
    end
  end
  // register end

  assign result_10 = p3 ? result_11 : t_2;

  assign b_2 = t_2 == 8'd4;

  assign f1_2 = t_2 + 8'd1;

  assign result_11 = b_2 ? 8'd1 : f1_2;

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_3_register
    if ( rst) begin
      t_3 <= 8'd1;
    end else if (en) begin
      t_3 <= result_12;
    end
  end
  // register end

  assign result_12 = p4 ? result_13 : t_3;

  assign b_3 = t_3 == 8'd4;

  assign f1_3 = t_3 + 8'd1;

  assign result_13 = b_3 ? 8'd1 : f1_3;

  wire [39:0] iterateI_ho1_0_res_0;
  reg [39:0] c$bb_res_res_0 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_0;



  assign c$app_arg_0 = {curTags,
                        iterateI_ho1_0_res_0};



  assign result_14 = c$app_arg_0[40-1:0];

  wire [39:0] iterateI_ho1_0_res_1;
  wire [39:0] iterateI_ho1_1_res;
  reg [39:0] c$bb_res_res_1 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_1;



  reg [39:0] c$bb_res_res_2 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_2;



  assign c$app_arg_1 = {curTags,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res};



  assign result_15 = c$app_arg_1[40-1:0];

  wire [39:0] iterateI_ho1_0_res_2;
  wire [39:0] iterateI_ho1_1_res_0;
  wire [39:0] iterateI_ho1_2_res;
  reg [39:0] c$bb_res_res_3 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_3;



  reg [39:0] c$bb_res_res_4 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_4;



  reg [39:0] c$bb_res_res_5 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_5;



  assign c$app_arg_2 = {curTags,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res};



  assign result_16 = c$app_arg_2[40-1:0];

  wire [39:0] iterateI_ho1_0_res_3;
  wire [39:0] iterateI_ho1_1_res_1;
  wire [39:0] iterateI_ho1_2_res_0;
  wire [39:0] iterateI_ho1_3_res;
  reg [39:0] c$bb_res_res_6 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= curTags;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_6;



  reg [39:0] c$bb_res_res_7 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_7;



  reg [39:0] c$bb_res_res_8 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_8;



  reg [39:0] c$bb_res_res_9 = {8'd5,   8'd5,   8'd5,   8'd5,   8'd5};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_9;



  assign c$app_arg_3 = {curTags,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res};



  assign result_17 = c$app_arg_3[40-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_2;
  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_10;



  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_11;



  assign c$app_arg_4 = {p0,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_2};



  assign result_18 = c$app_arg_4[1-1:0];

  assign c$out0_case_alt = (tag == out0Level1TagIn0) ? {tag,
                                                        dta} : {out0Level1TagIn0,   64'sd0};

  assign result_19 = result_18 ? t_4 : result_20;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_20_register
    if ( rst) begin
      result_20 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_20 <= result_19;
    end
  end
  // register end

  assign t_projection = ({result_20,{out0Level1TagOut0,   (x + 64'sd1)}});

  assign t_4 = t_projection[215:0];

  assign x = $signed(c$out0_case_alt[63:0]);

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_3;
  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_13;



  assign c$app_arg_5 = {p2,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_3};



  assign result_21 = c$app_arg_5[1-1:0];

  assign c$out1_case_alt = (tag == out0Level1TagIn0) ? {tag,
                                                        dta} : {out0Level1TagIn0,   64'sd0};

  assign result_22 = result_21 ? t_5 : result_23;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_23_register
    if ( rst) begin
      result_23 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_23 <= result_22;
    end
  end
  // register end

  assign t_projection_0 = ({result_23,{out1Level1TagOut1,   (x_0 + 64'sd10)}});

  assign t_5 = t_projection_0[215:0];

  assign x_0 = $signed(c$out1_case_alt[63:0]);

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_1;
  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_16;



  assign c$app_arg_6 = {p3,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_1};



  assign result_24 = c$app_arg_6[1-1:0];

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 3; i_5 = i_5 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_20[i_5*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_5*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_5*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_6;
  generate
  for (i_6=0; i_6 < 3; i_6 = i_6 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_6*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_6[0+:2];
    wire [2:0] c$case_alt_13;
    // spec.hs:184:1-70
    wire [7:0] t_8;
    // spec.hs:184:1-70
    wire [71:0] x_5;
    assign map_out = c$case_alt_13;

    assign c$case_alt_13 = (t_8 == out2Level2TagOut0) ? {1'b1,map_index} : map_in[2:0];

    assign t_8 = x_5[71:64];

    assign x_5 = map_in[74:3];


    assign c$ws_app_arg_0[i_6*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_7;
  generate
  for (i_7=0; i_7 < 3; i_7=i_7+1) begin : mk_array
    assign vecArray[(3-1)-i_7] = result_20[i_7*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_25 = c$case_scrut_0[2:2] ? {out2Level2TagOut0,
                                            $signed(c$case_scrut[63:0])} : {out2Level2TagOut0,
                                                                            64'sd0};

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  assign result_26 = result_24 ? t_6 : result_27;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_27_register
    if ( rst) begin
      result_27 <= {{8'd5,   64'sd0},   {8'd5,   64'sd0}};
    end else if (en) begin
      result_27 <= result_26;
    end
  end
  // register end

  assign t_projection_2 = ({result_27,{out2Level2TagOut2,   (x_1 + 64'sd1)}});

  assign t_6 = t_projection_2[143:0];

  assign x_1 = $signed(result_25[63:0]);

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_9;
  generate
  for (i_9 = 0; i_9 < 3; i_9 = i_9 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_20[i_9*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_9*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_9*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 3; i_10 = i_10 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_10*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_10[0+:2];
    wire [2:0] c$case_alt_14;
    // spec.hs:184:1-70
    wire [7:0] t_9;
    // spec.hs:184:1-70
    wire [71:0] x_6;
    assign map_out_0 = c$case_alt_14;

    assign c$case_alt_14 = (t_9 == level4TagOut0) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_9 = x_6[71:64];

    assign x_6 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_10*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_11;
  generate
  for (i_11=0; i_11 < 3; i_11=i_11+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_11] = result_20[i_11*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_28 = c$case_scrut_2[2:2] ? {level4TagOut0,
                                            $signed(c$case_scrut_1[63:0])} : {level4TagOut0,
                                                                              64'sd0};

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_21;



  assign c$app_arg_7 = {p0,
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res};



  assign result_29 = c$app_arg_7[1-1:0];

  assign c$vec2_1 = (ws_1[9-1 : 0]);

  // zipWith start
  genvar i_12;
  generate
  for (i_12 = 0; i_12 < 3; i_12 = i_12 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_23[i_12*72+:72];
    wire [2:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_12*3+:3];
    wire [74:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_12*75+:75] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 3; i_13 = i_13 + 1) begin : imap_1
    wire [2-1:0] map_index_1;
    wire [74:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_13*75+:75];
    wire [2:0] map_out_1;

    assign map_index_1 = 2'd2 - i_13[0+:2];
    wire [2:0] c$case_alt_15;
    // spec.hs:184:1-70
    wire [7:0] t_10;
    // spec.hs:184:1-70
    wire [71:0] x_7;
    assign map_out_1 = c$case_alt_15;

    assign c$case_alt_15 = (t_10 == level4TagOut1) ? {1'b1,map_index_1} : map_in_1[2:0];

    assign t_10 = x_7[71:64];

    assign x_7 = map_in_1[74:3];


    assign c$ws_app_arg_4[i_13*3+:3] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:3-1];
  genvar i_14;
  generate
  for (i_14=0; i_14 < 3; i_14=i_14+1) begin : mk_array_1
    assign vecArray_1[(3-1)-i_14] = result_23[i_14*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-2) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[12-1 -: 3];

  assign result_30 = c$case_scrut_4[2:2] ? {level4TagOut1,
                                            $signed(c$case_scrut_3[63:0])} : {level4TagOut1,
                                                                              64'sd0};

  assign i_1 = c$case_scrut_4[1:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_0;
  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_26;



  assign c$app_arg_8 = {p2,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_0};



  assign result_31 = c$app_arg_8[1-1:0];

  assign c$vec2_2 = (ws_2[4-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 2; i_15 = i_15 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_27[i_15*72+:72];
    wire [1:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_15*2+:2];
    wire [73:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_15*74+:74] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 2; i_16 = i_16 + 1) begin : imap_2
    wire [1-1:0] map_index_2;
    wire [73:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_16*74+:74];
    wire [1:0] map_out_2;

    assign map_index_2 = 1'd1 - i_16[0+:1];
    wire [1:0] c$case_alt_16;
    // spec.hs:184:1-70
    wire [7:0] t_11;
    // spec.hs:184:1-70
    wire [71:0] x_8;
    assign map_out_2 = c$case_alt_16;

    assign c$case_alt_16 = (t_11 == level4TagOut2) ? {1'b1,map_index_2} : map_in_2[1:0];

    assign t_11 = x_8[71:64];

    assign x_8 = map_in_2[73:2];


    assign c$ws_app_arg_6[i_16*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:2-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 2; i_17=i_17+1) begin : mk_array_2
    assign vecArray_2[(2-1)-i_17] = result_27[i_17*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-1) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[6-1 -: 2];

  assign result_32 = c$case_scrut_6[1:1] ? {level4TagOut2,
                                            $signed(c$case_scrut_5[63:0])} : {level4TagOut2,
                                                                              64'sd0};

  assign i_2 = c$case_scrut_6[0:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,1'bx}};

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_1;
  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_31;



  assign c$app_arg_9 = {p3,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_1};



  assign result_33 = c$app_arg_9[1-1:0];

  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_3;
  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_35;



  assign c$app_arg_10 = {p4,
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_8,
                         iterateI_ho1_2_res_5,   iterateI_ho1_3_res_3};



  assign result_34 = c$app_arg_10[1-1:0];

  assign c$vec2_3 = (ws_3[9-1 : 0]);

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 3; i_18 = i_18 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_23[i_18*72+:72];
    wire [2:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_18*3+:3];
    wire [74:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_18*75+:75] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_19;
  generate
  for (i_19=0; i_19 < 3; i_19 = i_19 + 1) begin : imap_3
    wire [2-1:0] map_index_3;
    wire [74:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_19*75+:75];
    wire [2:0] map_out_3;

    assign map_index_3 = 2'd2 - i_19[0+:2];
    wire [2:0] c$case_alt_17;
    // spec.hs:184:1-70
    wire [7:0] t_12;
    // spec.hs:184:1-70
    wire [71:0] x_9;
    assign map_out_3 = c$case_alt_17;

    assign c$case_alt_17 = (t_12 == out3Level3TagOut1) ? {1'b1,map_index_3} : map_in_3[2:0];

    assign t_12 = x_9[71:64];

    assign x_9 = map_in_3[74:3];


    assign c$ws_app_arg_8[i_19*3+:3] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:3-1];
  genvar i_20;
  generate
  for (i_20=0; i_20 < 3; i_20=i_20+1) begin : mk_array_3
    assign vecArray_3[(3-1)-i_20] = result_23[i_20*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-2) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[12-1 -: 3];

  assign result_35 = c$case_scrut_8[2:2] ? {out3Level3TagOut1,
                                            $signed(c$case_scrut_7[63:0])} : {out3Level3TagOut1,
                                                                              64'sd0};

  assign i_3 = c$case_scrut_8[1:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,2'bxx}};

  assign c$vec2_4 = (ws_4[4-1 : 0]);

  // zipWith start
  genvar i_21;
  generate
  for (i_21 = 0; i_21 < 2; i_21 = i_21 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_27[i_21*72+:72];
    wire [1:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_21*2+:2];
    wire [73:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_21*74+:74] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_22;
  generate
  for (i_22=0; i_22 < 2; i_22 = i_22 + 1) begin : imap_4
    wire [1-1:0] map_index_4;
    wire [73:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_22*74+:74];
    wire [1:0] map_out_4;

    assign map_index_4 = 1'd1 - i_22[0+:1];
    wire [1:0] c$case_alt_18;
    // spec.hs:184:1-70
    wire [7:0] t_13;
    // spec.hs:184:1-70
    wire [71:0] x_10;
    assign map_out_4 = c$case_alt_18;

    assign c$case_alt_18 = (t_13 == out3Level3TagOut2) ? {1'b1,map_index_4} : map_in_4[1:0];

    assign t_13 = x_10[71:64];

    assign x_10 = map_in_4[73:2];


    assign c$ws_app_arg_10[i_22*2+:2] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:2-1];
  genvar i_23;
  generate
  for (i_23=0; i_23 < 2; i_23=i_23+1) begin : mk_array_4
    assign vecArray_4[(2-1)-i_23] = result_27[i_23*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-1) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[6-1 -: 2];

  assign result_36 = c$case_scrut_10[1:1] ? {out3Level3TagOut2,
                                             $signed(c$case_scrut_9[63:0])} : {out3Level3TagOut2,
                                                                               64'sd0};

  assign i_4 = c$case_scrut_10[0:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,1'bx}};

  assign result_37 = result_34 ? t_7 : result_38;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_38_register
    if ( rst) begin
      result_38 <= {8'd5,   64'sd0};
    end else if (en) begin
      result_38 <= result_37;
    end
  end
  // register end

  assign t_7 = {out3Level3TagOut3,   (x_2 + y)};

  assign x_2 = $signed(result_35[63:0]);

  assign y = $signed(result_36[63:0]);

  wire  iterateI_ho1_0_res_11;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_2;
  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_40;



  assign c$app_arg_11 = {p4,
                         iterateI_ho1_0_res_11,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_6,   iterateI_ho1_3_res_4,
                         iterateI_ho1_4_res_2};



  assign result_39 = c$app_arg_11[1-1:0];

  assign result_40 = {{1'b1,
                       {{$signed(result_28[63:0]),   result_29},
                        {$signed(result_30[63:0]),   result_31},
                        {$signed(result_32[63:0]),   result_33},
                        {$signed(result_38[63:0]),   result_39}}},
                      pacings};

  assign tag = result_5[71:64];

  assign dta = $signed(result_5[63:0]);

  assign pacings = result_41[3:0];

  assign input0 = result_41[68:4];

  assign input0HasData = input0[0:0];

  assign p0 = pacings[3:3];

  assign curTags = {t,   t_0,   t_1,   t_2,
                    t_3};

  assign out0Level1TagIn0 = result_14[39:32];

  assign out0Level1TagOut0 = result_14[31:24];

  assign out1Level1TagOut1 = result_14[23:16];

  assign out2Level2TagOut0 = result_15[31:24];

  assign out2Level2TagOut2 = result_15[15:8];

  assign p2 = pacings[2:2];

  assign out3Level3TagOut1 = result_16[23:16];

  assign out3Level3TagOut2 = result_16[15:8];

  assign level4TagOut0 = result_17[31:24];

  assign level4TagOut1 = result_17[23:16];

  assign level4TagOut2 = result_17[15:8];

  assign p4 = pacings[0:0];

  assign p3 = pacings[1:1];

  assign out3Level3TagOut3 = result_16[7:0];

  assign result_41 = {c$app_arg_14,
                      c$app_arg_13,   c$app_arg_12};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_12_register
    if ( rst) begin
      c$app_arg_12 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_12 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = hasInput0 ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}};

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [68:0] vecArray_5 [0:2-1];
  genvar i_24;
  generate
  for (i_24=0; i_24 < 2; i_24=i_24+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_24] = buffer[i_24*69+:69];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_5[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_13_register
    if ( rst) begin
      c$app_arg_13 <= 1'b0;
    end else if (en) begin
      c$app_arg_13 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = hasInput0 ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_3)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_14_register
    if ( rst) begin
      c$app_arg_14 <= 1'b0;
    end else if (en) begin
      c$app_arg_14 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = hasInput0 ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_3 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0}},   {{64'sd0,   1'b0},
                                                            {1'b0,   1'b0,
                                                             1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = hasInput0 ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[206:69] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[206:69];

  assign qData = {inputs,   {hasInput0,
                             hasInput0,   hasInput0,   hasInput0}};

  assign x_3 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = hasInput0 ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_3 + 64'sd1));

  assign c$tte_rhs_0 = (x_3 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_3)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_3 - 64'sd1);

  assign result = {result_40[263:4],
                   {hasInput0,   qPop,   result_41[70:70],
                    qPopValid,   result_40[3:0]}};

  assign hasInput0 = inputs[0:0];

  assign qPopValid = result_41[69:69];

  assign qPop = result_40[264:264];

  assign result_0 = result[267:8];

  assign result_1 = result[7:0];

  assign result_0_0 = result_0[259:195];

  assign result_0_1 = result_0[194:130];

  assign result_0_2 = result_0[129:65];

  assign result_0_3 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[7:7];

  assign result_1_1 = result_1[6:6];

  assign result_1_2 = result_1[5:5];

  assign result_1_3 = result_1[4:4];

  assign result_1_4_12 = result_1[3:0];

  assign result_1_4_0 = result_1_4_12[3:3];

  assign result_1_4_1 = result_1_4_12[2:2];

  assign result_1_4_2 = result_1_4_12[1:1];

  assign result_1_4_3 = result_1_4_12[0:0];


endmodule


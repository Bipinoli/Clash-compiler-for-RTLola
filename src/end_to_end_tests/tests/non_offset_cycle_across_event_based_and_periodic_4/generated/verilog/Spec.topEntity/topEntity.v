/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0
    , input wire  inputs_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire signed [63:0] result_0_4_0
    , output wire  result_0_4_1
    , output wire signed [63:0] result_0_5_0
    , output wire  result_0_5_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3
    , output wire  result_1_4_4
    , output wire  result_1_4_5
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire signed [63:0] result_6;
  wire signed [63:0] x_1;
  reg signed [63:0] result_7 = (64'sd0);
  wire [71:0] result_8;
  // spec.hs:195:1-82
  wire  hasInput0;
  // spec.hs:195:1-82
  wire  timer0Over;
  // spec.hs:195:1-82
  wire  timer1Over;
  // spec.hs:195:1-82
  wire  timer2Over;
  wire [396:0] result_9;
  wire [6:0] c$app_arg;
  wire  result_10;
  wire [6:0] c$app_arg_0;
  wire  result_11;
  wire [6:0] c$app_arg_1;
  wire  result_12;
  wire [6:0] c$app_arg_2;
  wire  result_13;
  wire [6:0] c$app_arg_3;
  wire  result_14;
  wire [6:0] c$app_arg_4;
  wire  result_15;
  // spec.hs:268:1-46
  wire [7:0] tag;
  // spec.hs:448:1-141
  reg [71:0] result_16 = {8'd3,   64'sd0};
  // spec.hs:448:1-141
  wire [71:0] t;
  wire [71:0] result_17;
  wire signed [63:0] x_2;
  wire signed [63:0] y;
  // spec.hs:281:1-104
  wire signed [63:0] c$out4_case_alt;
  // spec.hs:268:1-46
  wire signed [63:0] dta;
  // spec.hs:268:1-46
  wire [7:0] tag_0;
  // spec.hs:440:1-123
  reg [71:0] result_18 = {8'd3,   64'sd0};
  // spec.hs:440:1-123
  wire [71:0] t_0;
  wire [71:0] result_19;
  wire signed [63:0] x_3;
  // spec.hs:281:1-104
  wire signed [63:0] c$out3_case_alt;
  // spec.hs:268:1-46
  wire signed [63:0] dta_0;
  // spec.hs:268:1-46
  wire [7:0] tag_1;
  // spec.hs:432:1-141
  reg [71:0] result_20 = {8'd3,   64'sd0};
  // spec.hs:432:1-141
  wire [71:0] t_1;
  wire [71:0] result_21;
  wire signed [63:0] x_4;
  wire signed [63:0] y_0;
  // spec.hs:281:1-104
  wire signed [63:0] c$out2_case_alt;
  // spec.hs:268:1-46
  wire signed [63:0] dta_1;
  // spec.hs:268:1-46
  wire [7:0] tag_2;
  // spec.hs:456:1-123
  reg [71:0] result_22 = {8'd3,   64'sd0};
  // spec.hs:456:1-123
  wire [71:0] c$result_app_arg;
  // spec.hs:281:1-104
  wire signed [63:0] c$out5_case_alt;
  wire [279:0] c$app_arg_5;
  wire [55:0] result_23;
  wire [5:0] c$app_arg_6;
  wire  result_24;
  // spec.hs:281:1-104
  wire signed [63:0] c$out2_case_alt_0;
  // spec.hs:268:1-46
  wire signed [63:0] dta_2;
  // spec.hs:281:1-104
  wire  c$out2_case_scrut;
  // spec.hs:268:1-46
  wire [7:0] tag_3;
  // spec.hs:424:1-141
  reg [71:0] result_25 = {8'd3,   64'sd0};
  // spec.hs:424:1-141
  wire [71:0] t_2;
  wire [71:0] result_26;
  wire signed [63:0] x_5;
  wire signed [63:0] y_1;
  // spec.hs:281:1-104
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:268:1-46
  wire signed [63:0] dta_3;
  wire [1:0] c$app_arg_7;
  wire  result_27;
  wire [4:0] c$app_arg_8;
  wire  result_28;
  // spec.hs:281:1-104
  wire signed [63:0] c$out4_case_alt_0;
  // spec.hs:260:1-53
  wire [7:0] tagToMatch;
  wire [3:0] c$app_arg_9;
  wire  result_29;
  // spec.hs:281:1-104
  wire signed [63:0] c$out1_case_alt_0;
  // spec.hs:268:1-46
  wire signed [63:0] dta_4;
  // spec.hs:268:1-46
  wire [7:0] tag_4;
  wire [4:0] c$app_arg_10;
  wire  result_30;
  // spec.hs:416:1-123
  reg [71:0] result_31 = {8'd3,   64'sd0};
  // spec.hs:416:1-123
  wire [71:0] t_3;
  wire [71:0] result_32;
  wire signed [63:0] x_6;
  // spec.hs:281:1-104
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:260:1-53
  wire signed [63:0] dta_5;
  // spec.hs:260:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:260:1-53
  wire [7:0] tag_5;
  // spec.hs:410:1-122
  reg [71:0] result_33 = {8'd3,   64'sd0};
  // spec.hs:410:1-122
  wire [71:0] c$result_app_arg_0;
  // spec.hs:260:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_11;
  wire  result_34;
  wire [2:0] c$app_arg_12;
  wire  result_35;
  wire [223:0] c$app_arg_13;
  wire [55:0] result_36;
  wire [167:0] c$app_arg_14;
  wire [55:0] result_37;
  wire [111:0] c$app_arg_15;
  wire [55:0] result_38;
  // spec.hs:394:9-81
  reg [7:0] t_4 = 8'd1;
  wire [7:0] result_39;
  // spec.hs:394:9-81
  wire  b;
  // spec.hs:394:9-81
  wire [7:0] f1;
  wire [7:0] result_40;
  // spec.hs:281:1-104
  wire  p5;
  // spec.hs:394:9-81
  reg [7:0] t_5 = 8'd1;
  wire [7:0] result_41;
  // spec.hs:394:9-81
  wire  b_0;
  // spec.hs:394:9-81
  wire [7:0] f1_0;
  wire [7:0] result_42;
  // spec.hs:281:1-104
  wire  p4;
  // spec.hs:394:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_43;
  // spec.hs:394:9-81
  wire  b_1;
  // spec.hs:394:9-81
  wire [7:0] f1_1;
  wire [7:0] result_44;
  // spec.hs:281:1-104
  wire  p3;
  // spec.hs:394:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_45;
  // spec.hs:394:9-81
  wire  b_2;
  // spec.hs:394:9-81
  wire [7:0] f1_2;
  wire [7:0] result_46;
  // spec.hs:281:1-104
  wire  p1;
  // spec.hs:394:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_47;
  // spec.hs:394:9-81
  wire  b_3;
  // spec.hs:394:9-81
  wire [7:0] f1_3;
  wire [7:0] result_48;
  // spec.hs:281:1-104
  wire  p0;
  // spec.hs:394:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_49;
  // spec.hs:394:9-81
  wire  b_4;
  // spec.hs:394:9-81
  wire [7:0] f1_4;
  wire [7:0] result_50;
  // spec.hs:281:1-104
  wire  p2;
  // spec.hs:281:1-104
  wire [5:0] pacings;
  // spec.hs:394:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_51;
  // spec.hs:394:9-81
  wire  b_5;
  // spec.hs:394:9-81
  wire [7:0] f1_5;
  wire [7:0] result_52;
  // spec.hs:281:1-104
  wire  input0HasData;
  // spec.hs:281:1-104
  wire [64:0] inputs_2;
  // spec.hs:401:1-81
  reg signed [63:0] toWait = (64'sd0);
  wire  result_53;
  wire signed [63:0] result_54;
  // spec.hs:401:1-81
  wire  b_6;
  wire signed [63:0] result_55;
  wire signed [63:0] x_7;
  wire  result_56;
  // spec.hs:281:1-104
  wire  b_7;
  wire [72:0] result_57;
  reg [70:0] c$app_arg_16 = {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
  wire [70:0] c$case_alt;
  wire [70:0] c$case_alt_0;
  wire [70:0] c$case_alt_1;
  reg [70:0] c$case_alt_2;
  reg [70:0] c$case_alt_3;
  wire [70:0] c$case_alt_4;
  reg  c$app_arg_17 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_18 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:126:1-78
  reg [425:0] buffer = {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
 {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
  // spec.hs:126:1-78
  wire [425:0] c$buffer_case_alt;
  // spec.hs:126:1-78
  wire [425:0] c$buffer_case_alt_0;
  // spec.hs:126:1-78
  wire [425:0] c$buffer_case_alt_1;
  // spec.hs:126:1-78
  wire [70:0] qData;
  // spec.hs:126:1-78
  wire signed [63:0] x_8;
  // spec.hs:126:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:126:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:126:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:126:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:126:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:126:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:126:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:126:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:471:1-129
  wire  qPopValid;
  // spec.hs:471:1-129
  wire  qPush;
  // spec.hs:471:1-129
  wire  qPop;
  wire [64:0] inputs;
  wire signed [63:0] c$tte_rhs;
  wire [496:0] c$buffer_case_alt_sel_alt_t_1;
  wire [496:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [399:0] result;
  wire [389:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [64:0] result_0_4;
  wire [64:0] result_0_5;
  wire [9:0] result_1;
  wire [5:0] result_1_4;

  assign inputs = {inputs_0,   inputs_1};

  assign result_2 = timer2Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer1Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = timer0Over ? (64'sd2000) : ((x_1 + 64'sd2000));

  assign x_1 = result_7;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_7_register
    if ( rst) begin
      result_7 <= (64'sd0);
    end else if (en) begin
      result_7 <= result_6;
    end
  end
  // register end

  assign result_8 = {hasInput0 | (timer0Over | (timer1Over | timer2Over)),
                     {inputs,   {hasInput0,   timer0Over,
                                 hasInput0,   timer1Over,   hasInput0,
                                 timer2Over}}};

  assign hasInput0 = inputs[0:0];

  assign timer0Over = result_7 >= (64'sd1000000);

  assign timer1Over = result_5 >= (64'sd2000000);

  assign timer2Over = result_3 >= (64'sd4000000);

  assign result_9 = {{result_53 & (~ result_56),
                      {{dta_4,   result_15},   {dta_2,   result_14},
                       {dta_0,   result_13},   {dta,   result_12},
                       {dta_3,   result_11},   {dta_1,
                                                result_10}}},   pacings};

  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  assign c$app_arg = {p5,   iterateI_ho1_0_res,
                      iterateI_ho1_1_res,   iterateI_ho1_2_res,
                      iterateI_ho1_3_res,   iterateI_ho1_4_res,
                      iterateI_ho1_5_res};



  assign result_10 = c$app_arg[1-1:0];

  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  wire  iterateI_ho1_5_res_0;
  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_5;



  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_4_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_10;



  assign c$app_arg_0 = {p4,
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0,   iterateI_ho1_5_res_0};



  assign result_11 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  wire  iterateI_ho1_5_res_1;
  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_15;



  reg  c$bb_res_res_16 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_4_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_16;



  assign c$app_arg_1 = {p3,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1,   iterateI_ho1_5_res_1};



  assign result_12 = c$app_arg_1[1-1:0];

  wire  iterateI_ho1_0_res_2;
  wire  iterateI_ho1_1_res_2;
  wire  iterateI_ho1_2_res_2;
  wire  iterateI_ho1_3_res_2;
  wire  iterateI_ho1_4_res_2;
  wire  iterateI_ho1_5_res_2;
  reg  c$bb_res_res_17 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_17;



  reg  c$bb_res_res_18 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_18;



  reg  c$bb_res_res_19 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_19;



  reg  c$bb_res_res_20 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_20;



  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_4_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_22;



  assign c$app_arg_2 = {p2,
                        iterateI_ho1_0_res_2,   iterateI_ho1_1_res_2,
                        iterateI_ho1_2_res_2,   iterateI_ho1_3_res_2,
                        iterateI_ho1_4_res_2,   iterateI_ho1_5_res_2};



  assign result_13 = c$app_arg_2[1-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_3;
  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_26;



  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_28;



  assign c$app_arg_3 = {p1,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_3};



  assign result_14 = c$app_arg_3[1-1:0];

  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_4;
  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_33;



  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_34;



  assign c$app_arg_4 = {p0,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4,   iterateI_ho1_5_res_4};



  assign result_15 = c$app_arg_4[1-1:0];

  assign tag = result_16[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_16_register
    if ( rst) begin
      result_16 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_16 <= result_17;
    end
  end
  // register end

  assign t = {result_37[15:8],   (x_2 + y)};

  assign result_17 = result_29 ? t : result_16;

  assign x_2 = c$out4_case_alt;

  assign y = c$out4_case_alt_0;

  assign c$out4_case_alt = (tag_0 == 8'd3) ? (64'sd0) : dta;

  assign dta = $signed(result_18[63:0]);

  assign tag_0 = result_18[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_18_register
    if ( rst) begin
      result_18 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_18 <= result_19;
    end
  end
  // register end

  assign t_0 = {result_36[23:16],
                (x_3 + 64'sd1)};

  assign result_19 = result_28 ? t_0 : result_18;

  assign x_3 = c$out3_case_alt;

  assign c$out3_case_alt = (tag_1 == 8'd3) ? (64'sd3) : dta_0;

  assign dta_0 = $signed(result_20[63:0]);

  assign tag_1 = result_20[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_20_register
    if ( rst) begin
      result_20 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_20 <= result_21;
    end
  end
  // register end

  assign t_1 = {t_9,   (x_4 + y_0)};

  assign result_21 = result_27 ? t_1 : result_20;

  assign x_4 = c$out2_case_alt_0;

  assign y_0 = c$out2_case_alt;

  assign c$out2_case_alt = (tag_2 == 8'd3) ? (64'sd1) : dta_1;

  assign dta_1 = $signed(result_22[63:0]);

  assign tag_2 = result_22[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_22_register
    if ( rst) begin
      result_22 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_22 <= c$result_app_arg;
    end
  end
  // register end

  assign c$result_app_arg = result_24 ? {result_23[7:0],
                                         c$out5_case_alt} : result_22;

  assign c$out5_case_alt = c$out2_case_scrut ? (64'sd10) : dta_2;

  wire [55:0] iterateI_ho1_0_arg0;
  wire [55:0] iterateI_ho1_0_res_5;
  wire [55:0] iterateI_ho1_1_res_5;
  wire [55:0] iterateI_ho1_2_res_5;
  wire [55:0] iterateI_ho1_3_res_5;
  assign iterateI_ho1_0_arg0 = {t_10,   t_8,
                                t_7,   t_9,   t_6,   t_5,   t_4};

  reg [55:0] c$bb_res_res_35 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_35;



  reg [55:0] c$bb_res_res_36 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_36;



  reg [55:0] c$bb_res_res_37 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_37;



  reg [55:0] c$bb_res_res_38 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_38;



  assign c$app_arg_5 = {{t_10,   t_8,   t_7,
                         t_9,   t_6,   t_5,   t_4},
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5};



  assign result_23 = c$app_arg_5[56-1:0];

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_5;
  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= p5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_40;



  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_43;



  assign c$app_arg_6 = {p5,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_5};



  assign result_24 = c$app_arg_6[1-1:0];

  assign c$out2_case_alt_0 = c$out2_case_scrut ? (64'sd0) : dta_2;

  assign dta_2 = $signed(result_25[63:0]);

  assign c$out2_case_scrut = tag_3 == 8'd3;

  assign tag_3 = result_25[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_25 <= result_26;
    end
  end
  // register end

  assign t_2 = {result_36[39:32],   (x_5 + y_1)};

  assign result_26 = result_30 ? t_2 : result_25;

  assign x_5 = c$out1_case_alt_0;

  assign y_1 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == 8'd3) ? (64'sd1) : dta_3;

  assign dta_3 = $signed(result_16[63:0]);

  wire  iterateI_ho1_0_res_7;
  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= p2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_44;



  assign c$app_arg_7 = {p2,
                        iterateI_ho1_0_res_7};



  assign result_27 = c$app_arg_7[1-1:0];

  wire  iterateI_ho1_0_res_8;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  wire  iterateI_ho1_3_res_7;
  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= p3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_47;



  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_2_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_48;



  assign c$app_arg_8 = {p3,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7,   iterateI_ho1_3_res_7};



  assign result_28 = c$app_arg_8[1-1:0];

  assign c$out4_case_alt_0 = (tag_4 == tagToMatch) ? dta_4 : (64'sd0);

  assign tagToMatch = result_37[47:40];

  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_8;
  wire  iterateI_ho1_2_res_8;
  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= p4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_50;



  reg  c$bb_res_res_51 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_51;



  assign c$app_arg_9 = {p4,
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8};



  assign result_29 = c$app_arg_9[1-1:0];

  assign c$out1_case_alt_0 = (tag_4 == 8'd3) ? (64'sd0) : dta_4;

  assign dta_4 = $signed(result_31[63:0]);

  assign tag_4 = result_31[71:64];

  wire  iterateI_ho1_0_res_10;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  wire  iterateI_ho1_3_res_8;
  reg  c$bb_res_res_52 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= p1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_52;



  reg  c$bb_res_res_53 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_53;



  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_2_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_55;



  assign c$app_arg_10 = {p1,
                         iterateI_ho1_0_res_10,   iterateI_ho1_1_res_9,
                         iterateI_ho1_2_res_9,   iterateI_ho1_3_res_8};



  assign result_30 = c$app_arg_10[1-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_31_register
    if ( rst) begin
      result_31 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_31 <= result_32;
    end
  end
  // register end

  assign t_3 = {result_38[47:40],
                (x_6 + 64'sd1)};

  assign result_32 = result_35 ? t_3 : result_31;

  assign x_6 = c$out0_case_alt;

  assign c$out0_case_alt = (tag_5 == tagToMatch_0) ? dta_5 : (64'sd0);

  assign dta_5 = $signed(result_33[63:0]);

  assign tagToMatch_0 = result_38[55:48];

  assign tag_5 = result_33[71:64];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_33_register
    if ( rst) begin
      result_33 <= {8'd3,   64'sd0};
    end else if (en) begin
      result_33 <= c$result_app_arg_0;
    end
  end
  // register end

  assign c$result_app_arg_0 = result_34 ? {t_10,
                                           c$ds_app_arg} : result_33;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_2[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_11;
  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= input0HasData;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_56;



  assign c$app_arg_11 = {input0HasData,
                         iterateI_ho1_0_res_11};



  assign result_34 = c$app_arg_11[1-1:0];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_10;
  reg  c$bb_res_res_57 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= p0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_57;



  reg  c$bb_res_res_58 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_58;



  assign c$app_arg_12 = {p0,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_10};



  assign result_35 = c$app_arg_12[1-1:0];

  wire [55:0] iterateI_ho1_0_arg0_0;
  wire [55:0] iterateI_ho1_0_res_13;
  wire [55:0] iterateI_ho1_1_res_11;
  wire [55:0] iterateI_ho1_2_res_10;
  assign iterateI_ho1_0_arg0_0 = {t_10,   t_8,
                                  t_7,   t_9,   t_6,   t_5,   t_4};

  reg [55:0] c$bb_res_res_59 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_59;



  reg [55:0] c$bb_res_res_60 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_0_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_60;



  reg [55:0] c$bb_res_res_61 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_61;



  assign c$app_arg_13 = {{t_10,   t_8,   t_7,
                          t_9,   t_6,   t_5,   t_4},
                         iterateI_ho1_0_res_13,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_10};



  assign result_36 = c$app_arg_13[56-1:0];

  wire [55:0] iterateI_ho1_0_arg0_1;
  wire [55:0] iterateI_ho1_0_res_14;
  wire [55:0] iterateI_ho1_1_res_12;
  assign iterateI_ho1_0_arg0_1 = {t_10,   t_8,
                                  t_7,   t_9,   t_6,   t_5,   t_4};

  reg [55:0] c$bb_res_res_62 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_62;



  reg [55:0] c$bb_res_res_63 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_63;



  assign c$app_arg_14 = {{t_10,   t_8,   t_7,
                          t_9,   t_6,   t_5,   t_4},
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_12};



  assign result_37 = c$app_arg_14[56-1:0];

  wire [55:0] iterateI_ho1_0_arg0_2;
  wire [55:0] iterateI_ho1_0_res_15;
  assign iterateI_ho1_0_arg0_2 = {t_10,   t_8,
                                  t_7,   t_9,   t_6,   t_5,   t_4};

  reg [55:0] c$bb_res_res_64 = {8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3,   8'd3};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_64;



  assign c$app_arg_15 = {{t_10,   t_8,   t_7,
                          t_9,   t_6,   t_5,   t_4},
                         iterateI_ho1_0_res_15};



  assign result_38 = c$app_arg_15[56-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_4_register
    if ( rst) begin
      t_4 <= 8'd1;
    end else if (en) begin
      t_4 <= result_39;
    end
  end
  // register end

  assign result_39 = p5 ? result_40 : t_4;

  assign b = t_4 == 8'd2;

  assign f1 = t_4 + 8'd1;

  assign result_40 = b ? 8'd1 : f1;

  assign p5 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_5_register
    if ( rst) begin
      t_5 <= 8'd1;
    end else if (en) begin
      t_5 <= result_41;
    end
  end
  // register end

  assign result_41 = p4 ? result_42 : t_5;

  assign b_0 = t_5 == 8'd2;

  assign f1_0 = t_5 + 8'd1;

  assign result_42 = b_0 ? 8'd1 : f1_0;

  assign p4 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_43;
    end
  end
  // register end

  assign result_43 = p3 ? result_44 : t_6;

  assign b_1 = t_6 == 8'd2;

  assign f1_1 = t_6 + 8'd1;

  assign result_44 = b_1 ? 8'd1 : f1_1;

  assign p3 = pacings[2:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_45;
    end
  end
  // register end

  assign result_45 = p1 ? result_46 : t_7;

  assign b_2 = t_7 == 8'd2;

  assign f1_2 = t_7 + 8'd1;

  assign result_46 = b_2 ? 8'd1 : f1_2;

  assign p1 = pacings[4:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_47;
    end
  end
  // register end

  assign result_47 = p0 ? result_48 : t_8;

  assign b_3 = t_8 == 8'd2;

  assign f1_3 = t_8 + 8'd1;

  assign result_48 = b_3 ? 8'd1 : f1_3;

  assign p0 = pacings[5:5];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_49;
    end
  end
  // register end

  assign result_49 = p2 ? result_50 : t_9;

  assign b_4 = t_9 == 8'd2;

  assign f1_4 = t_9 + 8'd1;

  assign result_50 = b_4 ? 8'd1 : f1_4;

  assign p2 = pacings[3:3];

  assign pacings = result_57[5:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_51;
    end
  end
  // register end

  assign result_51 = input0HasData ? result_52 : t_10;

  assign b_5 = t_10 == 8'd2;

  assign f1_5 = t_10 + 8'd1;

  assign result_52 = b_5 ? 8'd1 : f1_5;

  assign input0HasData = inputs_2[0:0];

  assign inputs_2 = result_57[70:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : toWait_register
    if ( rst) begin
      toWait <= (64'sd0);
    end else if (en) begin
      toWait <= result_54;
    end
  end
  // register end

  assign result_53 = toWait == (64'sd0);

  assign result_54 = result_56 ? (64'sd4) : result_55;

  assign b_6 = toWait > (64'sd0);

  assign result_55 = b_6 ? ((x_7 - 64'sd1)) : toWait;

  assign x_7 = toWait;

  assign result_56 = b_7 ? 1'b1 : 1'b0;

  assign b_7 = result_53 & qPopValid;

  assign result_57 = {c$app_arg_18,
                      c$app_arg_17,   c$app_arg_16};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_16_register
    if ( rst) begin
      c$app_arg_16 <= {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (en) begin
      c$app_arg_16 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{64'sd0,
                                                1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0}};

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_3 = {{64'sd0,   1'b0},
                               {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [70:0] vecArray [0:6-1];
  genvar i;
  generate
  for (i=0; i < 6; i=i+1) begin : mk_array
    assign vecArray[(6-1)-i] = buffer[i*71+:71];
  end
  endgenerate
  assign c$case_alt_4 = vecArray[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_17_register
    if ( rst) begin
      c$app_arg_17 <= 1'b0;
    end else if (en) begin
      c$app_arg_17 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_18_register
    if ( rst) begin
      c$app_arg_18 <= 1'b0;
    end else if (en) begin
      c$app_arg_18 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_8 != 64'sd6) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}},
   {{64'sd0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[496:71] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[496:71];

  assign qData = result_8[70:0];

  assign x_8 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_8 + 64'sd1));

  assign c$tte_rhs_0 = (x_8 == 64'sd6) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_8)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_8 - 64'sd1);

  assign result = {result_9[395:6],   {qPush,
                                       qPop,   result_57[72:72],   qPopValid,
                                       result_9[5:0]}};

  assign qPopValid = result_57[71:71];

  assign qPush = result_8[71:71];

  assign qPop = result_9[396:396];

  assign result_0 = result[399:10];

  assign result_1 = result[9:0];

  assign result_0_0 = result_0[389:325];

  assign result_0_1 = result_0[324:260];

  assign result_0_2 = result_0[259:195];

  assign result_0_3 = result_0[194:130];

  assign result_0_4 = result_0[129:65];

  assign result_0_5 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_0_4_0 = $signed(result_0_4[64:1]);

  assign result_0_4_1 = result_0_4[0:0];

  assign result_0_5_0 = $signed(result_0_5[64:1]);

  assign result_0_5_1 = result_0_5[0:0];

  assign result_1_0 = result_1[9:9];

  assign result_1_1 = result_1[8:8];

  assign result_1_2 = result_1[7:7];

  assign result_1_3 = result_1[6:6];

  assign result_1_4 = result_1[5:0];

  assign result_1_4_0 = result_1_4[5:5];

  assign result_1_4_1 = result_1_4[4:4];

  assign result_1_4_2 = result_1_4[3:3];

  assign result_1_4_3 = result_1_4[2:2];

  assign result_1_4_4 = result_1_4[1:1];

  assign result_1_4_5 = result_1_4[0:0];


endmodule


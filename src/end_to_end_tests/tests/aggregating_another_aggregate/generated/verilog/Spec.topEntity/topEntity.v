/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  clk // clock
    , input wire  rst // reset
    , input wire  en // enable
    , input wire signed [63:0] inputs_0_0
    , input wire  inputs_0_1
    , input wire signed [63:0] inputs_1_0
    , input wire  inputs_1_1
    , input wire signed [63:0] inputs_2_0
    , input wire  inputs_2_1

      // Outputs
    , output wire signed [63:0] result_0_0_0
    , output wire  result_0_0_1
    , output wire signed [63:0] result_0_1_0
    , output wire  result_0_1_1
    , output wire signed [63:0] result_0_2_0
    , output wire  result_0_2_1
    , output wire signed [63:0] result_0_3_0
    , output wire  result_0_3_1
    , output wire  result_1_0
    , output wire  result_1_1
    , output wire  result_1_2
    , output wire  result_1_3
    , output wire  result_1_4_0
    , output wire  result_1_4_1
    , output wire  result_1_4_2
    , output wire  result_1_4_3_0
    , output wire  result_1_4_3_1
    , output wire  result_1_4_4_0
    , output wire  result_1_4_4_1
    , output wire  result_1_4_5
    , output wire  result_1_4_6
    , output wire  result_1_5_0
    , output wire  result_1_5_1
    , output wire  result_1_5_2
    );
  wire signed [63:0] result_2;
  wire signed [63:0] x;
  reg signed [63:0] result_3 = (64'sd0);
  wire signed [63:0] result_4;
  wire signed [63:0] x_0;
  reg signed [63:0] result_5 = (64'sd0);
  wire [207:0] result_6;
  // spec.hs:239:1-82
  wire  pIn0;
  // spec.hs:239:1-82
  wire  pIn1;
  // spec.hs:239:1-82
  wire  pIn2;
  // spec.hs:239:1-82
  wire  timer0Over;
  // spec.hs:239:1-82
  wire  timer1Over;
  wire [272:0] result_7;
  wire [7:0] c$app_arg;
  wire  result_8;
  wire [71:0] result_9;
  // spec.hs:507:1-138
  reg [71:0] result_10 = {8'd23,   64'sd0};
  // spec.hs:507:1-138
  wire  b;
  // spec.hs:507:1-138
  wire [71:0] t;
  wire signed [63:0] ds;
  wire signed [63:0] x_1;
  // spec.hs:564:1-158
  wire signed [63:0] y;
  // spec.hs:564:1-158
  wire signed [63:0] x_2;
  // spec.hs:564:1-158
  wire [703:0] win;
  // spec.hs:564:1-158
  reg [711:0] window = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [711:0] result_11;
  // spec.hs:564:1-158
  wire [711:0] t_0;
  wire [703:0] result_12;
  // spec.hs:564:1-158
  wire [703:0] c$t_case_alt;
  // spec.hs:564:1-158
  wire [703:0] c$t_case_alt_0;
  // spec.hs:564:1-158
  wire [703:0] lastBucketUpdated;
  // spec.hs:564:1-158
  wire  b_0;
  // spec.hs:295:1-63
  wire [224:0] c$ws_app_arg;
  // spec.hs:295:1-63
  wire [8:0] c$ws_app_arg_0;
  wire [71:0] c$case_scrut;
  wire [2:0] c$case_scrut_0;
  wire signed [63:0] result_13;
  // spec.hs:295:1-63
  wire [1:0] i;
  // spec.hs:295:1-63
  wire [11:0] ws;
  wire [5:0] c$app_arg_0;
  wire  result_14;
  wire [5:0] c$app_arg_1;
  wire  result_15;
  wire [479:0] c$app_arg_2;
  wire [79:0] result_16;
  wire [6:0] c$app_arg_3;
  wire  result_17;
  // spec.hs:295:1-63
  wire [224:0] c$ws_app_arg_1;
  // spec.hs:295:1-63
  wire [8:0] c$ws_app_arg_2;
  wire [71:0] c$case_scrut_1;
  wire [2:0] c$case_scrut_2;
  wire signed [63:0] result_18;
  // spec.hs:295:1-63
  wire [1:0] i_0;
  // spec.hs:295:1-63
  wire [11:0] ws_0;
  wire [7:0] c$app_arg_4;
  wire  result_19;
  // spec.hs:295:1-63
  wire [379:0] c$ws_app_arg_3;
  // spec.hs:295:1-63
  wire [19:0] c$ws_app_arg_4;
  wire [71:0] c$case_scrut_3;
  wire [3:0] c$case_scrut_4;
  wire signed [63:0] result_20;
  // spec.hs:295:1-63
  wire [2:0] i_1;
  // spec.hs:295:1-63
  wire [23:0] ws_1;
  wire [7:0] c$app_arg_5;
  wire  result_21;
  // spec.hs:295:1-63
  wire [379:0] c$ws_app_arg_5;
  // spec.hs:295:1-63
  wire [19:0] c$ws_app_arg_6;
  wire [71:0] c$case_scrut_5;
  wire [3:0] c$case_scrut_6;
  wire signed [63:0] result_22;
  // spec.hs:295:1-63
  wire [2:0] i_2;
  // spec.hs:295:1-63
  wire [23:0] ws_2;
  wire [7:0] c$app_arg_6;
  wire  result_23;
  wire [215:0] result_24;
  // spec.hs:494:1-173
  reg [215:0] result_25 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
  // spec.hs:494:1-173
  wire  b_1;
  // spec.hs:494:1-173
  wire [215:0] t_1;
  wire signed [63:0] ds_0;
  wire signed [63:0] ds1;
  wire signed [63:0] x_3;
  wire signed [63:0] y_0;
  // spec.hs:546:1-158
  wire signed [63:0] y_1;
  // spec.hs:546:1-158
  wire signed [63:0] x_4;
  // spec.hs:546:1-158
  wire [1343:0] win_0;
  // spec.hs:546:1-158
  reg [1351:0] window_0 = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [1351:0] result_26;
  // spec.hs:546:1-158
  wire [1351:0] t_2;
  wire [1343:0] result_27;
  // spec.hs:546:1-158
  wire [1343:0] c$t_case_alt_1;
  // spec.hs:546:1-158
  wire [1343:0] c$t_case_alt_2;
  // spec.hs:546:1-158
  wire [1343:0] lastBucketUpdated_0;
  // spec.hs:546:1-158
  wire  b_2;
  // spec.hs:546:1-158
  wire  c$b_case_alt;
  // spec.hs:103:34-42
  wire  x1;
  // spec.hs:103:34-42
  wire  x0;
  // spec.hs:295:1-63
  wire [379:0] c$ws_app_arg_7;
  // spec.hs:295:1-63
  wire [19:0] c$ws_app_arg_8;
  wire [71:0] c$case_scrut_7;
  wire [3:0] c$case_scrut_8;
  wire signed [63:0] result_28;
  // spec.hs:295:1-63
  wire [2:0] i_3;
  // spec.hs:295:1-63
  wire [23:0] ws_3;
  wire [3:0] c$app_arg_7;
  wire  result_29;
  wire [7:0] c$app_arg_8;
  wire [1:0] result_30;
  // spec.hs:528:1-158
  wire signed [63:0] y_2;
  // spec.hs:528:1-158
  wire signed [63:0] x_5;
  // spec.hs:528:1-158
  wire [703:0] win_1;
  // spec.hs:528:1-158
  reg [711:0] window_1 = {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
           64'sd0,   64'sd0,   64'sd0,   64'sd0}};
  wire [711:0] result_31;
  // spec.hs:528:1-158
  wire [711:0] t_3;
  wire [703:0] result_32;
  // spec.hs:528:1-158
  wire [703:0] c$t_case_alt_3;
  // spec.hs:528:1-158
  wire [703:0] c$t_case_alt_4;
  // spec.hs:528:1-158
  wire [703:0] lastBucketUpdated_1;
  // spec.hs:528:1-158
  wire  b_3;
  // spec.hs:528:1-158
  wire  c$b_case_alt_0;
  // spec.hs:102:34-42
  wire  x1_0;
  // spec.hs:102:34-42
  wire  x0_0;
  // spec.hs:295:1-63
  wire [379:0] c$ws_app_arg_9;
  // spec.hs:295:1-63
  wire [19:0] c$ws_app_arg_10;
  wire [71:0] c$case_scrut_9;
  wire [3:0] c$case_scrut_10;
  wire signed [63:0] result_33;
  // spec.hs:295:1-63
  wire [2:0] i_4;
  // spec.hs:295:1-63
  wire [23:0] ws_4;
  wire [3:0] c$app_arg_9;
  wire  result_34;
  // spec.hs:329:1-112
  wire [2:0] slides;
  wire [7:0] c$app_arg_10;
  wire [1:0] result_35;
  wire [319:0] c$app_arg_11;
  wire [79:0] result_36;
  wire [4:0] c$app_arg_12;
  wire  result_37;
  wire [359:0] result_38;
  // spec.hs:103:34-42
  wire  x0_1;
  // spec.hs:103:34-42
  wire  x1_1;
  // spec.hs:485:1-155
  reg [359:0] result_39 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                 64'sd0},
 {8'd23,   64'sd0}};
  // spec.hs:485:1-155
  wire [359:0] t_4;
  wire signed [63:0] x_6;
  wire signed [63:0] y_3;
  // spec.hs:329:1-112
  wire signed [63:0] c$out1_case_alt;
  // spec.hs:308:1-53
  wire signed [63:0] dta;
  // spec.hs:308:1-53
  wire [7:0] tag;
  // spec.hs:308:1-53
  wire [7:0] tagToMatch;
  wire [71:0] result_40;
  // spec.hs:470:1-127
  reg [71:0] result_41 = {8'd23,   64'sd0};
  // spec.hs:470:1-127
  wire  b_4;
  // spec.hs:308:1-53
  reg signed [63:0] c$ds_app_arg = (64'sd0);
  wire [1:0] c$app_arg_13;
  wire  result_42;
  wire [5:0] c$app_arg_14;
  wire [1:0] result_43;
  wire [359:0] result_44;
  // spec.hs:102:34-42
  wire  x0_2;
  // spec.hs:102:34-42
  wire  x1_2;
  // spec.hs:476:1-155
  reg [359:0] result_45 = {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                 64'sd0},
 {8'd23,   64'sd0}};
  // spec.hs:476:1-155
  wire [359:0] t_5;
  wire signed [63:0] x_7;
  wire signed [63:0] y_4;
  // spec.hs:329:1-112
  wire signed [63:0] c$out0_case_alt;
  // spec.hs:308:1-53
  wire signed [63:0] dta_0;
  // spec.hs:308:1-53
  wire [7:0] tag_0;
  // spec.hs:308:1-53
  wire [7:0] tagToMatch_0;
  // spec.hs:329:1-112
  wire signed [63:0] c$out0_case_alt_0;
  // spec.hs:308:1-53
  wire signed [63:0] dta_1;
  // spec.hs:308:1-53
  wire [7:0] tagToMatch_1;
  // spec.hs:308:1-53
  wire [7:0] tag_1;
  wire [71:0] result_46;
  // spec.hs:460:1-127
  reg [71:0] result_47 = {8'd23,   64'sd0};
  // spec.hs:460:1-127
  wire  b_5;
  // spec.hs:308:1-53
  reg signed [63:0] c$ds_app_arg_0 = (64'sd0);
  wire [1:0] c$app_arg_15;
  wire  result_48;
  wire [5:0] c$app_arg_16;
  wire [1:0] result_49;
  wire [71:0] result_50;
  // spec.hs:465:1-127
  reg [71:0] result_51 = {8'd23,   64'sd0};
  // spec.hs:465:1-127
  wire  b_6;
  // spec.hs:329:1-112
  reg signed [63:0] c$input1Win_app_arg = (64'sd0);
  // spec.hs:329:1-112
  wire [194:0] inputs_3;
  wire [1:0] c$app_arg_17;
  wire  result_52;
  wire [559:0] c$app_arg_18;
  wire [79:0] result_53;
  wire [399:0] c$app_arg_19;
  wire [79:0] result_54;
  wire [239:0] c$app_arg_20;
  wire [79:0] result_55;
  wire [159:0] c$app_arg_21;
  wire [79:0] result_56;
  // spec.hs:450:9-81
  reg [7:0] t_6 = 8'd1;
  wire [7:0] result_57;
  // spec.hs:450:9-81
  wire  b_7;
  // spec.hs:450:9-81
  wire [7:0] f1;
  wire [7:0] result_58;
  // spec.hs:329:1-112
  wire  pOut3;
  // spec.hs:450:9-81
  reg [7:0] t_7 = 8'd1;
  wire [7:0] result_59;
  // spec.hs:450:9-81
  wire  b_8;
  // spec.hs:450:9-81
  wire [7:0] f1_0;
  wire [7:0] result_60;
  // spec.hs:329:1-112
  wire  pOut2;
  // spec.hs:450:9-81
  reg [7:0] t_8 = 8'd1;
  wire [7:0] result_61;
  // spec.hs:450:9-81
  wire  b_9;
  // spec.hs:450:9-81
  wire [7:0] f1_1;
  wire [7:0] result_62;
  // spec.hs:329:1-112
  wire  c$ds5_case_alt;
  // spec.hs:103:34-42
  wire  x1_3;
  // spec.hs:103:34-42
  wire  x0_3;
  // spec.hs:329:1-112
  wire [1:0] pOut1;
  // spec.hs:450:9-81
  reg [7:0] t_9 = 8'd1;
  wire [7:0] result_63;
  // spec.hs:450:9-81
  wire  b_10;
  // spec.hs:450:9-81
  wire [7:0] f1_2;
  wire [7:0] result_64;
  // spec.hs:329:1-112
  wire  c$ds4_case_alt;
  // spec.hs:102:34-42
  wire  x1_4;
  // spec.hs:102:34-42
  wire  x0_4;
  // spec.hs:329:1-112
  wire [1:0] pOut0;
  // spec.hs:450:9-81
  reg [7:0] t_10 = 8'd1;
  wire [7:0] result_65;
  // spec.hs:450:9-81
  wire  b_11;
  // spec.hs:450:9-81
  wire [7:0] f1_3;
  wire [7:0] result_66;
  // spec.hs:329:1-112
  wire  pIn2_0;
  // spec.hs:450:9-81
  reg [7:0] t_11 = 8'd1;
  wire [7:0] result_67;
  // spec.hs:450:9-81
  wire  b_12;
  // spec.hs:450:9-81
  wire [7:0] f1_4;
  wire [7:0] result_68;
  // spec.hs:329:1-112
  wire  pIn1_0;
  // spec.hs:450:9-81
  reg [7:0] t_12 = 8'd1;
  wire [7:0] result_69;
  // spec.hs:450:9-81
  wire  b_13;
  // spec.hs:450:9-81
  wire [7:0] f1_5;
  wire [7:0] result_70;
  // spec.hs:329:1-112
  wire  pIn0_0;
  // spec.hs:329:1-112
  wire [8:0] pacings;
  wire [208:0] result_71;
  reg [206:0] c$app_arg_22 = {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                1'b0},   {1'b0,
                                                                          1'b0,
                                                                          1'b0,
                                                                          {1'b0,
                                                                           1'b0},
                                                                          {1'b0,
                                                                           1'b0},
                                                                          1'b0,
                                                                          1'b0}};
  wire [206:0] c$case_alt;
  wire [206:0] c$case_alt_0;
  wire [206:0] c$case_alt_1;
  reg [206:0] c$case_alt_2;
  reg [206:0] c$case_alt_3;
  wire [206:0] c$case_alt_4;
  reg  c$app_arg_23 = 1'b0;
  wire  c$case_alt_5;
  wire  c$case_alt_6;
  wire  c$case_alt_7;
  wire  c$case_alt_8;
  reg  c$case_alt_9;
  reg  c$app_arg_24 = 1'b0;
  wire  c$case_alt_10;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  // spec.hs:170:1-78
  reg [413:0] buffer = {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                 1'b0},
  {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},   1'b0,   1'b0}},
 {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                 1'b0},
  {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},   1'b0,   1'b0}}};
  // spec.hs:170:1-78
  wire [413:0] c$buffer_case_alt;
  // spec.hs:170:1-78
  wire [413:0] c$buffer_case_alt_0;
  // spec.hs:170:1-78
  wire [413:0] c$buffer_case_alt_1;
  // spec.hs:170:1-78
  wire [206:0] qData;
  // spec.hs:170:1-78
  wire signed [63:0] x_8;
  // spec.hs:170:1-78
  reg signed [63:0] cursor = (64'sd0);
  // spec.hs:170:1-78
  wire signed [63:0] c$cursor_case_alt;
  // spec.hs:170:1-78
  wire signed [63:0] c$cursor_case_alt_0;
  // spec.hs:170:1-78
  wire signed [63:0] c$cursor_case_alt_1;
  // spec.hs:170:1-78
  wire  c$cursor_case_scrut;
  // spec.hs:170:1-78
  wire signed [63:0] c$cursor_case_alt_2;
  // spec.hs:170:1-78
  reg signed [63:0] c$cursor_case_alt_3;
  // spec.hs:170:1-78
  wire signed [63:0] c$cursor_case_alt_4;
  // spec.hs:587:1-136
  wire  qPopValid;
  // spec.hs:587:1-136
  wire  qPush;
  // spec.hs:587:1-136
  wire  qPop;
  wire [194:0] inputs;
  wire [703:0] c$vec;
  wire signed [63:0] x_projection_11;
  wire [767:0] c$t_case_alt_sel_alt_t_0;
  wire [767:0] c$t_case_alt_sel_alt_f_0;
  wire [8:0] c$vec2;
  wire [8:0] c$vec2_0;
  wire [19:0] c$vec2_1;
  wire [19:0] c$vec2_2;
  wire [287:0] t_projection_3;
  wire [703:0] c$vec_0;
  wire [1343:0] c$vec_1;
  wire signed [63:0] x_projection_45;
  wire [1407:0] c$t_case_alt_sel_alt_t_3;
  wire [1407:0] c$t_case_alt_sel_alt_f_3;
  wire [19:0] c$vec2_3;
  wire signed [63:0] x_projection_47;
  wire [767:0] c$t_case_alt_sel_alt_t_6;
  wire [767:0] c$t_case_alt_sel_alt_f_6;
  wire [19:0] c$vec2_4;
  wire [431:0] t_projection_6;
  wire [431:0] t_projection_7;
  wire signed [63:0] c$tte_rhs;
  wire [620:0] c$buffer_case_alt_sel_alt_t_1;
  wire [620:0] c$buffer_case_alt_sel_alt_f_2;
  wire signed [63:0] c$tte_rhs_0;
  wire [275:0] result;
  wire [259:0] result_0;
  wire [64:0] result_0_0;
  wire [64:0] result_0_1;
  wire [64:0] result_0_2;
  wire [64:0] result_0_3;
  wire [15:0] result_1;
  wire [8:0] result_1_4_15;
  wire [1:0] result_1_4_3;
  wire [1:0] result_1_4_4;
  wire [2:0] result_1_5_21;

  assign inputs = {{inputs_0_0,   inputs_0_1},
                   {inputs_1_0,   inputs_1_1},   {inputs_2_0,
                                                  inputs_2_1}};

  assign result_2 = timer1Over ? (64'sd2000) : ((x + 64'sd2000));

  assign x = result_3;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_3_register
    if ( rst) begin
      result_3 <= (64'sd0);
    end else if (en) begin
      result_3 <= result_2;
    end
  end
  // register end

  assign result_4 = timer0Over ? (64'sd2000) : ((x_0 + 64'sd2000));

  assign x_0 = result_5;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_5_register
    if ( rst) begin
      result_5 <= (64'sd0);
    end else if (en) begin
      result_5 <= result_4;
    end
  end
  // register end

  assign result_6 = {inputs[130:130] | (inputs[65:65] | (inputs[0:0] | (timer0Over | timer1Over))),
                     {inputs,   {timer0Over,   timer0Over,
                                 timer1Over},   {pIn0,   pIn1,   pIn2,   {pIn0,
                                                                          pIn1},   {pIn1,   pIn2},   timer0Over,
                                                 timer1Over}}};

  assign pIn0 = inputs[130:130];

  assign pIn1 = inputs[65:65];

  assign pIn2 = inputs[0:0];

  assign timer0Over = result_5 >= (64'sd1000000);

  assign timer1Over = result_3 >= (64'sd2000000);

  assign result_7 = {{1'b1,   {{result_22,
                                result_23},   {result_20,   result_21},
                               {result_18,   result_19},
                               {$signed(result_10[63:0]),   result_8}}},
                     {pacings,   slides}};

  wire  iterateI_ho1_0_arg0;
  wire  iterateI_ho1_0_res;
  wire  iterateI_ho1_1_res;
  wire  iterateI_ho1_2_res;
  wire  iterateI_ho1_3_res;
  wire  iterateI_ho1_4_res;
  wire  iterateI_ho1_5_res;
  wire  iterateI_ho1_6_res;
  assign iterateI_ho1_0_arg0 = pOut3;

  reg  c$bb_res_res = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_delay
    if (en) begin
      c$bb_res_res <= iterateI_ho1_0_arg0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res = c$bb_res_res;



  reg  c$bb_res_res_0 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_0_delay
    if (en) begin
      c$bb_res_res_0 <= iterateI_ho1_0_res;
    end
  end
  // delay end

  assign iterateI_ho1_1_res = c$bb_res_res_0;



  reg  c$bb_res_res_1 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_1_delay
    if (en) begin
      c$bb_res_res_1 <= iterateI_ho1_1_res;
    end
  end
  // delay end

  assign iterateI_ho1_2_res = c$bb_res_res_1;



  reg  c$bb_res_res_2 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_2_delay
    if (en) begin
      c$bb_res_res_2 <= iterateI_ho1_2_res;
    end
  end
  // delay end

  assign iterateI_ho1_3_res = c$bb_res_res_2;



  reg  c$bb_res_res_3 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_3_delay
    if (en) begin
      c$bb_res_res_3 <= iterateI_ho1_3_res;
    end
  end
  // delay end

  assign iterateI_ho1_4_res = c$bb_res_res_3;



  reg  c$bb_res_res_4 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_4_delay
    if (en) begin
      c$bb_res_res_4 <= iterateI_ho1_4_res;
    end
  end
  // delay end

  assign iterateI_ho1_5_res = c$bb_res_res_4;



  reg  c$bb_res_res_5 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_5_delay
    if (en) begin
      c$bb_res_res_5 <= iterateI_ho1_5_res;
    end
  end
  // delay end

  assign iterateI_ho1_6_res = c$bb_res_res_5;



  assign c$app_arg = {pOut3,
                      iterateI_ho1_0_res,   iterateI_ho1_1_res,
                      iterateI_ho1_2_res,   iterateI_ho1_3_res,
                      iterateI_ho1_4_res,   iterateI_ho1_5_res,
                      iterateI_ho1_6_res};



  assign result_8 = c$app_arg[1-1:0];

  assign result_9 = b ? t : result_10;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_10_register
    if ( rst) begin
      result_10 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_10 <= result_9;
    end
  end
  // register end

  assign b = result_17;

  assign t = {result_16[31:24],   (x_1 + 64'sd1)};

  assign c$vec = window[703:0];

  wire [639:0] vec;
  wire signed [63:0] acc_4_0;
  wire signed [63:0] acc_1;
  wire signed [63:0] acc_2;
  wire signed [63:0] acc_3;
  wire signed [63:0] acc_4;
  wire signed [63:0] acc_5;
  wire signed [63:0] acc_6;
  wire signed [63:0] acc_7;
  wire signed [63:0] acc_8;
  wire signed [63:0] acc_9;
  wire signed [63:0] acc_10;
  wire signed [63:0] acc_1_0;
  wire signed [63:0] acc_1_1;
  wire signed [63:0] acc_1_2;
  wire signed [63:0] acc_1_3;
  wire signed [63:0] acc_2_0;
  wire signed [63:0] acc_2_1;
  wire signed [63:0] acc_3_0;
  wire signed [63:0] acc_1_4;
  assign ds = acc_4_0;

  assign vec = (c$vec[640-1 : 0]);

  assign acc_1 = $signed(vec[639:576]);

  assign acc_2 = $signed(vec[575:512]);

  assign acc_3 = $signed(vec[511:448]);

  assign acc_4 = $signed(vec[447:384]);

  assign acc_5 = $signed(vec[383:320]);

  assign acc_6 = $signed(vec[319:256]);

  assign acc_7 = $signed(vec[255:192]);

  assign acc_8 = $signed(vec[191:128]);

  assign acc_9 = $signed(vec[127:64]);

  assign acc_10 = $signed(vec[63:0]);

  wire signed [63:0] x_10;
  wire signed [63:0] y_5;
  wire signed [63:0] c$case_alt_13;
  assign acc_1_0 = c$case_alt_13;

  assign x_10 = acc_1;

  assign y_5 = acc_2;

  assign c$case_alt_13 = (x_10 + y_5);



  wire signed [63:0] x_11;
  wire signed [63:0] y_6;
  wire signed [63:0] c$case_alt_14;
  assign acc_1_1 = c$case_alt_14;

  assign x_11 = acc_3;

  assign y_6 = acc_4;

  assign c$case_alt_14 = (x_11 + y_6);



  wire signed [63:0] x_12;
  wire signed [63:0] y_7;
  wire signed [63:0] c$case_alt_15;
  assign acc_1_2 = c$case_alt_15;

  assign x_12 = acc_5;

  assign y_7 = acc_6;

  assign c$case_alt_15 = (x_12 + y_7);



  wire signed [63:0] x_13;
  wire signed [63:0] y_8;
  wire signed [63:0] c$case_alt_16;
  assign acc_1_3 = c$case_alt_16;

  assign x_13 = acc_7;

  assign y_8 = acc_8;

  assign c$case_alt_16 = (x_13 + y_8);



  wire signed [63:0] x_14;
  wire signed [63:0] y_9;
  wire signed [63:0] c$case_alt_17;
  assign acc_1_4 = c$case_alt_17;

  assign x_14 = acc_9;

  assign y_9 = acc_10;

  assign c$case_alt_17 = (x_14 + y_9);



  wire signed [63:0] x_15;
  wire signed [63:0] y_10;
  wire signed [63:0] c$case_alt_18;
  assign acc_2_0 = c$case_alt_18;

  assign x_15 = acc_1_0;

  assign y_10 = acc_1_1;

  assign c$case_alt_18 = (x_15 + y_10);



  wire signed [63:0] x_16;
  wire signed [63:0] y_11;
  wire signed [63:0] c$case_alt_19;
  assign acc_2_1 = c$case_alt_19;

  assign x_16 = acc_1_2;

  assign y_11 = acc_1_3;

  assign c$case_alt_19 = (x_16 + y_11);



  wire signed [63:0] x_17;
  wire signed [63:0] y_12;
  wire signed [63:0] c$case_alt_20;
  assign acc_3_0 = c$case_alt_20;

  assign x_17 = acc_2_0;

  assign y_12 = acc_2_1;

  assign c$case_alt_20 = (x_17 + y_12);



  wire signed [63:0] x_18;
  wire signed [63:0] y_13;
  wire signed [63:0] c$case_alt_21;
  assign acc_4_0 = c$case_alt_21;

  assign x_18 = acc_3_0;

  assign y_13 = acc_1_4;

  assign c$case_alt_21 = (x_18 + y_13);





  assign x_1 = ds;

  assign y = result_13;

  assign x_projection_11 = $signed(win[704-1 -: 64]);

  assign x_2 = x_projection_11;

  assign win = window[703:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_register
    if ( rst) begin
      window <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window <= result_11;
    end
  end
  // register end

  assign result_11 = b_0 ? t_0 : window;

  assign t_0 = {result_54[7:0],   result_12};

  assign result_12 = result_14 ? c$t_case_alt : c$t_case_alt_0;

  assign c$t_case_alt_sel_alt_t_0 = ({64'sd0,lastBucketUpdated});

  assign c$t_case_alt_sel_alt_f_0 = ({64'sd0,win});

  assign c$t_case_alt = result_15 ? c$t_case_alt_sel_alt_t_0[767:64] : c$t_case_alt_sel_alt_f_0[767:64];

  assign c$t_case_alt_0 = result_15 ? lastBucketUpdated : win;

  // vector replace begin
  genvar i_5;
  generate
  for (i_5=0;i_5<11;i_5=i_5+1) begin : vector_replace
    assign lastBucketUpdated[(10-i_5)*64+:64] = (64'sd0) == i_5 ? ((x_2 + y)) : win[(10-i_5)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_0 = result_15 | result_14;

  assign c$vec2 = (ws[9-1 : 0]);

  // zipWith start
  genvar i_6;
  generate
  for (i_6 = 0; i_6 < 3; i_6 = i_6 + 1) begin : zipWith
    wire [71:0] zipWith_in1;
    assign zipWith_in1 = result_25[i_6*72+:72];
    wire [2:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_6*3+:3];
    wire [74:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg[i_6*75+:75] = c$n;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 3; i_7 = i_7 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [74:0] map_in;
    assign map_in = c$ws_app_arg[i_7*75+:75];
    wire [2:0] map_out;

    assign map_index = 2'd2 - i_7[0+:2];
    wire [2:0] c$case_alt_22;
    // spec.hs:295:1-63
    wire [7:0] t_14;
    // spec.hs:295:1-63
    wire [71:0] x_19;
    assign map_out = c$case_alt_22;

    assign c$case_alt_22 = (t_14 == result_54[39:32]) ? {1'b1,map_index} : map_in[2:0];

    assign t_14 = x_19[71:64];

    assign x_19 = map_in[74:3];


    assign c$ws_app_arg_0[i_7*3+:3] = map_out;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray [0:3-1];
  genvar i_8;
  generate
  for (i_8=0; i_8 < 3; i_8=i_8+1) begin : mk_array
    assign vecArray[(3-1)-i_8] = result_25[i_8*72+:72];
  end
  endgenerate
  assign c$case_scrut = vecArray[($unsigned({{(64-2) {1'b0}},i}))];
  // index end

  assign c$case_scrut_0 = ws[12-1 -: 3];

  assign result_13 = c$case_scrut_0[2:2] ? $signed(c$case_scrut[63:0]) : (64'sd0);

  assign i = c$case_scrut_0[1:0];

  assign ws = {c$ws_app_arg_0,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_0;
  wire  iterateI_ho1_0_res_0;
  wire  iterateI_ho1_1_res_0;
  wire  iterateI_ho1_2_res_0;
  wire  iterateI_ho1_3_res_0;
  wire  iterateI_ho1_4_res_0;
  assign iterateI_ho1_0_arg0_0 = slides[0:0];

  reg  c$bb_res_res_6 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_6_delay
    if (en) begin
      c$bb_res_res_6 <= iterateI_ho1_0_arg0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_0 = c$bb_res_res_6;



  reg  c$bb_res_res_7 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_7_delay
    if (en) begin
      c$bb_res_res_7 <= iterateI_ho1_0_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_0 = c$bb_res_res_7;



  reg  c$bb_res_res_8 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_8_delay
    if (en) begin
      c$bb_res_res_8 <= iterateI_ho1_1_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_0 = c$bb_res_res_8;



  reg  c$bb_res_res_9 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_9_delay
    if (en) begin
      c$bb_res_res_9 <= iterateI_ho1_2_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_0 = c$bb_res_res_9;



  reg  c$bb_res_res_10 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_10_delay
    if (en) begin
      c$bb_res_res_10 <= iterateI_ho1_3_res_0;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_0 = c$bb_res_res_10;



  assign c$app_arg_0 = {slides[0:0],
                        iterateI_ho1_0_res_0,   iterateI_ho1_1_res_0,
                        iterateI_ho1_2_res_0,   iterateI_ho1_3_res_0,
                        iterateI_ho1_4_res_0};



  assign result_14 = c$app_arg_0[1-1:0];

  wire  iterateI_ho1_0_res_1;
  wire  iterateI_ho1_1_res_1;
  wire  iterateI_ho1_2_res_1;
  wire  iterateI_ho1_3_res_1;
  wire  iterateI_ho1_4_res_1;
  reg  c$bb_res_res_11 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_11_delay
    if (en) begin
      c$bb_res_res_11 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_1 = c$bb_res_res_11;



  reg  c$bb_res_res_12 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_12_delay
    if (en) begin
      c$bb_res_res_12 <= iterateI_ho1_0_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_1 = c$bb_res_res_12;



  reg  c$bb_res_res_13 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_13_delay
    if (en) begin
      c$bb_res_res_13 <= iterateI_ho1_1_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_1 = c$bb_res_res_13;



  reg  c$bb_res_res_14 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_14_delay
    if (en) begin
      c$bb_res_res_14 <= iterateI_ho1_2_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_1 = c$bb_res_res_14;



  reg  c$bb_res_res_15 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_15_delay
    if (en) begin
      c$bb_res_res_15 <= iterateI_ho1_3_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_1 = c$bb_res_res_15;



  assign c$app_arg_1 = {pOut2,
                        iterateI_ho1_0_res_1,   iterateI_ho1_1_res_1,
                        iterateI_ho1_2_res_1,   iterateI_ho1_3_res_1,
                        iterateI_ho1_4_res_1};



  assign result_15 = c$app_arg_1[1-1:0];

  wire [79:0] iterateI_ho1_0_arg0_1;
  wire [79:0] iterateI_ho1_0_res_2;
  wire [79:0] iterateI_ho1_1_res_2;
  wire [79:0] iterateI_ho1_2_res_2;
  wire [79:0] iterateI_ho1_3_res_2;
  wire [79:0] iterateI_ho1_4_res_2;
  assign iterateI_ho1_0_arg0_1 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_16 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_16_delay
    if (en) begin
      c$bb_res_res_16 <= iterateI_ho1_0_arg0_1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_2 = c$bb_res_res_16;



  reg [79:0] c$bb_res_res_17 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_17_delay
    if (en) begin
      c$bb_res_res_17 <= iterateI_ho1_0_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_2 = c$bb_res_res_17;



  reg [79:0] c$bb_res_res_18 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_18_delay
    if (en) begin
      c$bb_res_res_18 <= iterateI_ho1_1_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_2 = c$bb_res_res_18;



  reg [79:0] c$bb_res_res_19 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_19_delay
    if (en) begin
      c$bb_res_res_19 <= iterateI_ho1_2_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_2 = c$bb_res_res_19;



  reg [79:0] c$bb_res_res_20 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_20_delay
    if (en) begin
      c$bb_res_res_20 <= iterateI_ho1_3_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_2 = c$bb_res_res_20;



  assign c$app_arg_2 = {{t_12,   t_11,   t_10,
                         t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                         t_7},   iterateI_ho1_0_res_2,
                        iterateI_ho1_1_res_2,   iterateI_ho1_2_res_2,
                        iterateI_ho1_3_res_2,   iterateI_ho1_4_res_2};



  assign result_16 = c$app_arg_2[80-1:0];

  wire  iterateI_ho1_0_res_3;
  wire  iterateI_ho1_1_res_3;
  wire  iterateI_ho1_2_res_3;
  wire  iterateI_ho1_3_res_3;
  wire  iterateI_ho1_4_res_3;
  wire  iterateI_ho1_5_res_0;
  reg  c$bb_res_res_21 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_21_delay
    if (en) begin
      c$bb_res_res_21 <= pOut3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_3 = c$bb_res_res_21;



  reg  c$bb_res_res_22 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_22_delay
    if (en) begin
      c$bb_res_res_22 <= iterateI_ho1_0_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_3 = c$bb_res_res_22;



  reg  c$bb_res_res_23 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_23_delay
    if (en) begin
      c$bb_res_res_23 <= iterateI_ho1_1_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_3 = c$bb_res_res_23;



  reg  c$bb_res_res_24 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_24_delay
    if (en) begin
      c$bb_res_res_24 <= iterateI_ho1_2_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_3 = c$bb_res_res_24;



  reg  c$bb_res_res_25 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_25_delay
    if (en) begin
      c$bb_res_res_25 <= iterateI_ho1_3_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_3 = c$bb_res_res_25;



  reg  c$bb_res_res_26 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_26_delay
    if (en) begin
      c$bb_res_res_26 <= iterateI_ho1_4_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_0 = c$bb_res_res_26;



  assign c$app_arg_3 = {pOut3,
                        iterateI_ho1_0_res_3,   iterateI_ho1_1_res_3,
                        iterateI_ho1_2_res_3,   iterateI_ho1_3_res_3,
                        iterateI_ho1_4_res_3,   iterateI_ho1_5_res_0};



  assign result_17 = c$app_arg_3[1-1:0];

  assign c$vec2_0 = (ws_0[9-1 : 0]);

  // zipWith start
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 3; i_10 = i_10 + 1) begin : zipWith_0
    wire [71:0] zipWith_in1_0;
    assign zipWith_in1_0 = result_25[i_10*72+:72];
    wire [2:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_10*3+:3];
    wire [74:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_1[i_10*75+:75] = c$n_0;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_11;
  generate
  for (i_11=0; i_11 < 3; i_11 = i_11 + 1) begin : imap_0
    wire [2-1:0] map_index_0;
    wire [74:0] map_in_0;
    assign map_in_0 = c$ws_app_arg_1[i_11*75+:75];
    wire [2:0] map_out_0;

    assign map_index_0 = 2'd2 - i_11[0+:2];
    wire [2:0] c$case_alt_23;
    // spec.hs:295:1-63
    wire [7:0] t_15;
    // spec.hs:295:1-63
    wire [71:0] x_20;
    assign map_out_0 = c$case_alt_23;

    assign c$case_alt_23 = (t_15 == result_53[39:32]) ? {1'b1,map_index_0} : map_in_0[2:0];

    assign t_15 = x_20[71:64];

    assign x_20 = map_in_0[74:3];


    assign c$ws_app_arg_2[i_11*3+:3] = map_out_0;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_0 [0:3-1];
  genvar i_12;
  generate
  for (i_12=0; i_12 < 3; i_12=i_12+1) begin : mk_array_0
    assign vecArray_0[(3-1)-i_12] = result_25[i_12*72+:72];
  end
  endgenerate
  assign c$case_scrut_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},i_0}))];
  // index end

  assign c$case_scrut_2 = ws_0[12-1 -: 3];

  assign result_18 = c$case_scrut_2[2:2] ? $signed(c$case_scrut_1[63:0]) : (64'sd0);

  assign i_0 = c$case_scrut_2[1:0];

  assign ws_0 = {c$ws_app_arg_2,{1'b0,2'bxx}};

  wire  iterateI_ho1_0_arg0_2;
  wire  iterateI_ho1_0_res_4;
  wire  iterateI_ho1_1_res_4;
  wire  iterateI_ho1_2_res_4;
  wire  iterateI_ho1_3_res_4;
  wire  iterateI_ho1_4_res_4;
  wire  iterateI_ho1_5_res_1;
  wire  iterateI_ho1_6_res_0;
  assign iterateI_ho1_0_arg0_2 = pOut2;

  reg  c$bb_res_res_27 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_27_delay
    if (en) begin
      c$bb_res_res_27 <= iterateI_ho1_0_arg0_2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_4 = c$bb_res_res_27;



  reg  c$bb_res_res_28 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_28_delay
    if (en) begin
      c$bb_res_res_28 <= iterateI_ho1_0_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_4 = c$bb_res_res_28;



  reg  c$bb_res_res_29 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_29_delay
    if (en) begin
      c$bb_res_res_29 <= iterateI_ho1_1_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_4 = c$bb_res_res_29;



  reg  c$bb_res_res_30 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_30_delay
    if (en) begin
      c$bb_res_res_30 <= iterateI_ho1_2_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_4 = c$bb_res_res_30;



  reg  c$bb_res_res_31 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_31_delay
    if (en) begin
      c$bb_res_res_31 <= iterateI_ho1_3_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_4 = c$bb_res_res_31;



  reg  c$bb_res_res_32 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_32_delay
    if (en) begin
      c$bb_res_res_32 <= iterateI_ho1_4_res_4;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_1 = c$bb_res_res_32;



  reg  c$bb_res_res_33 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_33_delay
    if (en) begin
      c$bb_res_res_33 <= iterateI_ho1_5_res_1;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_0 = c$bb_res_res_33;



  assign c$app_arg_4 = {pOut2,
                        iterateI_ho1_0_res_4,   iterateI_ho1_1_res_4,
                        iterateI_ho1_2_res_4,   iterateI_ho1_3_res_4,
                        iterateI_ho1_4_res_4,   iterateI_ho1_5_res_1,
                        iterateI_ho1_6_res_0};



  assign result_19 = c$app_arg_4[1-1:0];

  assign c$vec2_1 = (ws_1[20-1 : 0]);

  // zipWith start
  genvar i_13;
  generate
  for (i_13 = 0; i_13 < 5; i_13 = i_13 + 1) begin : zipWith_1
    wire [71:0] zipWith_in1_1;
    assign zipWith_in1_1 = result_39[i_13*72+:72];
    wire [3:0] zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_13*4+:4];
    wire [75:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_3[i_13*76+:76] = c$n_1;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_14;
  generate
  for (i_14=0; i_14 < 5; i_14 = i_14 + 1) begin : imap_1
    wire [3-1:0] map_index_1;
    wire [75:0] map_in_1;
    assign map_in_1 = c$ws_app_arg_3[i_14*76+:76];
    wire [3:0] map_out_1;

    assign map_index_1 = 3'd4 - i_14[0+:3];
    wire [3:0] c$case_alt_24;
    // spec.hs:295:1-63
    wire [7:0] t_16;
    // spec.hs:295:1-63
    wire [71:0] x_21;
    assign map_out_1 = c$case_alt_24;

    assign c$case_alt_24 = (t_16 == result_53[47:40]) ? {1'b1,map_index_1} : map_in_1[3:0];

    assign t_16 = x_21[71:64];

    assign x_21 = map_in_1[75:4];


    assign c$ws_app_arg_4[i_14*4+:4] = map_out_1;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_1 [0:5-1];
  genvar i_15;
  generate
  for (i_15=0; i_15 < 5; i_15=i_15+1) begin : mk_array_1
    assign vecArray_1[(5-1)-i_15] = result_39[i_15*72+:72];
  end
  endgenerate
  assign c$case_scrut_3 = vecArray_1[($unsigned({{(64-3) {1'b0}},i_1}))];
  // index end

  assign c$case_scrut_4 = ws_1[24-1 -: 4];

  assign result_20 = c$case_scrut_4[3:3] ? $signed(c$case_scrut_3[63:0]) : (64'sd0);

  assign i_1 = c$case_scrut_4[2:0];

  assign ws_1 = {c$ws_app_arg_4,{1'b0,3'bxxx}};

  wire  iterateI_ho1_0_res_5;
  wire  iterateI_ho1_1_res_5;
  wire  iterateI_ho1_2_res_5;
  wire  iterateI_ho1_3_res_5;
  wire  iterateI_ho1_4_res_5;
  wire  iterateI_ho1_5_res_2;
  wire  iterateI_ho1_6_res_1;
  reg  c$bb_res_res_34 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_34_delay
    if (en) begin
      c$bb_res_res_34 <= c$ds5_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_5 = c$bb_res_res_34;



  reg  c$bb_res_res_35 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_35_delay
    if (en) begin
      c$bb_res_res_35 <= iterateI_ho1_0_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_5 = c$bb_res_res_35;



  reg  c$bb_res_res_36 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_36_delay
    if (en) begin
      c$bb_res_res_36 <= iterateI_ho1_1_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_5 = c$bb_res_res_36;



  reg  c$bb_res_res_37 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_37_delay
    if (en) begin
      c$bb_res_res_37 <= iterateI_ho1_2_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_5 = c$bb_res_res_37;



  reg  c$bb_res_res_38 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_38_delay
    if (en) begin
      c$bb_res_res_38 <= iterateI_ho1_3_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_5 = c$bb_res_res_38;



  reg  c$bb_res_res_39 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_39_delay
    if (en) begin
      c$bb_res_res_39 <= iterateI_ho1_4_res_5;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_2 = c$bb_res_res_39;



  reg  c$bb_res_res_40 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_40_delay
    if (en) begin
      c$bb_res_res_40 <= iterateI_ho1_5_res_2;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_1 = c$bb_res_res_40;



  assign c$app_arg_5 = {c$ds5_case_alt,
                        iterateI_ho1_0_res_5,   iterateI_ho1_1_res_5,
                        iterateI_ho1_2_res_5,   iterateI_ho1_3_res_5,
                        iterateI_ho1_4_res_5,   iterateI_ho1_5_res_2,
                        iterateI_ho1_6_res_1};



  assign result_21 = c$app_arg_5[1-1:0];

  assign c$vec2_2 = (ws_2[20-1 : 0]);

  // zipWith start
  genvar i_16;
  generate
  for (i_16 = 0; i_16 < 5; i_16 = i_16 + 1) begin : zipWith_2
    wire [71:0] zipWith_in1_2;
    assign zipWith_in1_2 = result_45[i_16*72+:72];
    wire [3:0] zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_16*4+:4];
    wire [75:0] c$n_2;
    assign c$n_2 = {zipWith_in1_2,   zipWith_in2_2};


    assign c$ws_app_arg_5[i_16*76+:76] = c$n_2;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_17;
  generate
  for (i_17=0; i_17 < 5; i_17 = i_17 + 1) begin : imap_2
    wire [3-1:0] map_index_2;
    wire [75:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_5[i_17*76+:76];
    wire [3:0] map_out_2;

    assign map_index_2 = 3'd4 - i_17[0+:3];
    wire [3:0] c$case_alt_25;
    // spec.hs:295:1-63
    wire [7:0] t_17;
    // spec.hs:295:1-63
    wire [71:0] x_22;
    assign map_out_2 = c$case_alt_25;

    assign c$case_alt_25 = (t_17 == result_53[55:48]) ? {1'b1,map_index_2} : map_in_2[3:0];

    assign t_17 = x_22[71:64];

    assign x_22 = map_in_2[75:4];


    assign c$ws_app_arg_6[i_17*4+:4] = map_out_2;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_2 [0:5-1];
  genvar i_18;
  generate
  for (i_18=0; i_18 < 5; i_18=i_18+1) begin : mk_array_2
    assign vecArray_2[(5-1)-i_18] = result_45[i_18*72+:72];
  end
  endgenerate
  assign c$case_scrut_5 = vecArray_2[($unsigned({{(64-3) {1'b0}},i_2}))];
  // index end

  assign c$case_scrut_6 = ws_2[24-1 -: 4];

  assign result_22 = c$case_scrut_6[3:3] ? $signed(c$case_scrut_5[63:0]) : (64'sd0);

  assign i_2 = c$case_scrut_6[2:0];

  assign ws_2 = {c$ws_app_arg_6,{1'b0,3'bxxx}};

  wire  iterateI_ho1_0_res_6;
  wire  iterateI_ho1_1_res_6;
  wire  iterateI_ho1_2_res_6;
  wire  iterateI_ho1_3_res_6;
  wire  iterateI_ho1_4_res_6;
  wire  iterateI_ho1_5_res_3;
  wire  iterateI_ho1_6_res_2;
  reg  c$bb_res_res_41 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_41_delay
    if (en) begin
      c$bb_res_res_41 <= c$ds4_case_alt;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_6 = c$bb_res_res_41;



  reg  c$bb_res_res_42 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_42_delay
    if (en) begin
      c$bb_res_res_42 <= iterateI_ho1_0_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_6 = c$bb_res_res_42;



  reg  c$bb_res_res_43 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_43_delay
    if (en) begin
      c$bb_res_res_43 <= iterateI_ho1_1_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_6 = c$bb_res_res_43;



  reg  c$bb_res_res_44 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_44_delay
    if (en) begin
      c$bb_res_res_44 <= iterateI_ho1_2_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_6 = c$bb_res_res_44;



  reg  c$bb_res_res_45 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_45_delay
    if (en) begin
      c$bb_res_res_45 <= iterateI_ho1_3_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_6 = c$bb_res_res_45;



  reg  c$bb_res_res_46 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_46_delay
    if (en) begin
      c$bb_res_res_46 <= iterateI_ho1_4_res_6;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_3 = c$bb_res_res_46;



  reg  c$bb_res_res_47 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_47_delay
    if (en) begin
      c$bb_res_res_47 <= iterateI_ho1_5_res_3;
    end
  end
  // delay end

  assign iterateI_ho1_6_res_2 = c$bb_res_res_47;



  assign c$app_arg_6 = {c$ds4_case_alt,
                        iterateI_ho1_0_res_6,   iterateI_ho1_1_res_6,
                        iterateI_ho1_2_res_6,   iterateI_ho1_3_res_6,
                        iterateI_ho1_4_res_6,   iterateI_ho1_5_res_3,
                        iterateI_ho1_6_res_2};



  assign result_23 = c$app_arg_6[1-1:0];

  assign result_24 = b_1 ? t_1 : result_25;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_25_register
    if ( rst) begin
      result_25 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0}};
    end else if (en) begin
      result_25 <= result_24;
    end
  end
  // register end

  assign b_1 = result_37;

  assign t_projection_3 = ({result_25,{result_36[39:32],   (x_3 + y_0)}});

  assign t_1 = t_projection_3[215:0];

  assign c$vec_0 = window_1[703:0];

  wire [639:0] vec_0;
  wire signed [63:0] acc_4_0_8;
  wire signed [63:0] acc_0_6;
  wire signed [63:0] acc_0_7;
  wire signed [63:0] acc_0_8;
  wire signed [63:0] acc_0_9;
  wire signed [63:0] acc_0_10;
  wire signed [63:0] acc_0_11;
  wire signed [63:0] acc_0_12;
  wire signed [63:0] acc_0_13;
  wire signed [63:0] acc_0_14;
  wire signed [63:0] acc_0_15;
  wire signed [63:0] acc_1_0_0;
  wire signed [63:0] acc_1_1_1;
  wire signed [63:0] acc_1_2_2;
  wire signed [63:0] acc_1_3_3;
  wire signed [63:0] acc_2_0_5;
  wire signed [63:0] acc_2_1_6;
  wire signed [63:0] acc_3_0_7;
  wire signed [63:0] acc_1_4_4;
  assign ds_0 = acc_4_0_8;

  assign vec_0 = (c$vec_0[640-1 : 0]);

  assign acc_0_6 = $signed(vec_0[639:576]);

  assign acc_0_7 = $signed(vec_0[575:512]);

  assign acc_0_8 = $signed(vec_0[511:448]);

  assign acc_0_9 = $signed(vec_0[447:384]);

  assign acc_0_10 = $signed(vec_0[383:320]);

  assign acc_0_11 = $signed(vec_0[319:256]);

  assign acc_0_12 = $signed(vec_0[255:192]);

  assign acc_0_13 = $signed(vec_0[191:128]);

  assign acc_0_14 = $signed(vec_0[127:64]);

  assign acc_0_15 = $signed(vec_0[63:0]);

  wire signed [63:0] x_23;
  wire signed [63:0] y_15;
  wire signed [63:0] c$case_alt_26;
  assign acc_1_0_0 = c$case_alt_26;

  assign x_23 = acc_0_6;

  assign y_15 = acc_0_7;

  assign c$case_alt_26 = (x_23 + y_15);



  wire signed [63:0] x_24;
  wire signed [63:0] y_16;
  wire signed [63:0] c$case_alt_27;
  assign acc_1_1_1 = c$case_alt_27;

  assign x_24 = acc_0_8;

  assign y_16 = acc_0_9;

  assign c$case_alt_27 = (x_24 + y_16);



  wire signed [63:0] x_25;
  wire signed [63:0] y_17;
  wire signed [63:0] c$case_alt_28;
  assign acc_1_2_2 = c$case_alt_28;

  assign x_25 = acc_0_10;

  assign y_17 = acc_0_11;

  assign c$case_alt_28 = (x_25 + y_17);



  wire signed [63:0] x_26;
  wire signed [63:0] y_18;
  wire signed [63:0] c$case_alt_29;
  assign acc_1_3_3 = c$case_alt_29;

  assign x_26 = acc_0_12;

  assign y_18 = acc_0_13;

  assign c$case_alt_29 = (x_26 + y_18);



  wire signed [63:0] x_27;
  wire signed [63:0] y_19;
  wire signed [63:0] c$case_alt_30;
  assign acc_1_4_4 = c$case_alt_30;

  assign x_27 = acc_0_14;

  assign y_19 = acc_0_15;

  assign c$case_alt_30 = (x_27 + y_19);



  wire signed [63:0] x_28;
  wire signed [63:0] y_20;
  wire signed [63:0] c$case_alt_31;
  assign acc_2_0_5 = c$case_alt_31;

  assign x_28 = acc_1_0_0;

  assign y_20 = acc_1_1_1;

  assign c$case_alt_31 = (x_28 + y_20);



  wire signed [63:0] x_29;
  wire signed [63:0] y_21;
  wire signed [63:0] c$case_alt_32;
  assign acc_2_1_6 = c$case_alt_32;

  assign x_29 = acc_1_2_2;

  assign y_21 = acc_1_3_3;

  assign c$case_alt_32 = (x_29 + y_21);



  wire signed [63:0] x_30;
  wire signed [63:0] y_22;
  wire signed [63:0] c$case_alt_33;
  assign acc_3_0_7 = c$case_alt_33;

  assign x_30 = acc_2_0_5;

  assign y_22 = acc_2_1_6;

  assign c$case_alt_33 = (x_30 + y_22);



  wire signed [63:0] x_31;
  wire signed [63:0] y_23;
  wire signed [63:0] c$case_alt_34;
  assign acc_4_0_8 = c$case_alt_34;

  assign x_31 = acc_3_0_7;

  assign y_23 = acc_1_4_4;

  assign c$case_alt_34 = (x_31 + y_23);





  assign c$vec_1 = window_0[1343:0];

  wire [1279:0] vec_1;
  wire signed [63:0] acc_5_0;
  wire signed [63:0] acc_0_17;
  wire signed [63:0] acc_0_18;
  wire signed [63:0] acc_0_19;
  wire signed [63:0] acc_0_20;
  wire signed [63:0] acc_0_21;
  wire signed [63:0] acc_0_22;
  wire signed [63:0] acc_0_23;
  wire signed [63:0] acc_0_24;
  wire signed [63:0] acc_0_25;
  wire signed [63:0] acc_0_26;
  wire signed [63:0] acc_0_27;
  wire signed [63:0] acc_0_28;
  wire signed [63:0] acc_0_29;
  wire signed [63:0] acc_0_30;
  wire signed [63:0] acc_0_31;
  wire signed [63:0] acc_0_32;
  wire signed [63:0] acc_0_33;
  wire signed [63:0] acc_0_34;
  wire signed [63:0] acc_0_35;
  wire signed [63:0] acc_0_36;
  wire signed [63:0] acc_1_0_9;
  wire signed [63:0] acc_1_1_10;
  wire signed [63:0] acc_1_2_11;
  wire signed [63:0] acc_1_3_12;
  wire signed [63:0] acc_1_4_13;
  wire signed [63:0] acc_1_5;
  wire signed [63:0] acc_1_6;
  wire signed [63:0] acc_1_7;
  wire signed [63:0] acc_1_8;
  wire signed [63:0] acc_1_9;
  wire signed [63:0] acc_2_0_14;
  wire signed [63:0] acc_2_1_15;
  wire signed [63:0] acc_2_2;
  wire signed [63:0] acc_2_3;
  wire signed [63:0] acc_3_0_16;
  wire signed [63:0] acc_3_1;
  wire signed [63:0] acc_4_0_17;
  wire signed [63:0] acc_2_4;
  assign ds1 = acc_5_0;

  assign vec_1 = (c$vec_1[1280-1 : 0]);

  assign acc_0_17 = $signed(vec_1[1279:1216]);

  assign acc_0_18 = $signed(vec_1[1215:1152]);

  assign acc_0_19 = $signed(vec_1[1151:1088]);

  assign acc_0_20 = $signed(vec_1[1087:1024]);

  assign acc_0_21 = $signed(vec_1[1023:960]);

  assign acc_0_22 = $signed(vec_1[959:896]);

  assign acc_0_23 = $signed(vec_1[895:832]);

  assign acc_0_24 = $signed(vec_1[831:768]);

  assign acc_0_25 = $signed(vec_1[767:704]);

  assign acc_0_26 = $signed(vec_1[703:640]);

  assign acc_0_27 = $signed(vec_1[639:576]);

  assign acc_0_28 = $signed(vec_1[575:512]);

  assign acc_0_29 = $signed(vec_1[511:448]);

  assign acc_0_30 = $signed(vec_1[447:384]);

  assign acc_0_31 = $signed(vec_1[383:320]);

  assign acc_0_32 = $signed(vec_1[319:256]);

  assign acc_0_33 = $signed(vec_1[255:192]);

  assign acc_0_34 = $signed(vec_1[191:128]);

  assign acc_0_35 = $signed(vec_1[127:64]);

  assign acc_0_36 = $signed(vec_1[63:0]);

  wire signed [63:0] x_32;
  wire signed [63:0] y_24;
  wire signed [63:0] c$case_alt_35;
  assign acc_1_0_9 = c$case_alt_35;

  assign x_32 = acc_0_17;

  assign y_24 = acc_0_18;

  assign c$case_alt_35 = (x_32 + y_24);



  wire signed [63:0] x_33;
  wire signed [63:0] y_25;
  wire signed [63:0] c$case_alt_36;
  assign acc_1_1_10 = c$case_alt_36;

  assign x_33 = acc_0_19;

  assign y_25 = acc_0_20;

  assign c$case_alt_36 = (x_33 + y_25);



  wire signed [63:0] x_34;
  wire signed [63:0] y_26;
  wire signed [63:0] c$case_alt_37;
  assign acc_1_2_11 = c$case_alt_37;

  assign x_34 = acc_0_21;

  assign y_26 = acc_0_22;

  assign c$case_alt_37 = (x_34 + y_26);



  wire signed [63:0] x_35;
  wire signed [63:0] y_27;
  wire signed [63:0] c$case_alt_38;
  assign acc_1_3_12 = c$case_alt_38;

  assign x_35 = acc_0_23;

  assign y_27 = acc_0_24;

  assign c$case_alt_38 = (x_35 + y_27);



  wire signed [63:0] x_36;
  wire signed [63:0] y_28;
  wire signed [63:0] c$case_alt_39;
  assign acc_1_4_13 = c$case_alt_39;

  assign x_36 = acc_0_25;

  assign y_28 = acc_0_26;

  assign c$case_alt_39 = (x_36 + y_28);



  wire signed [63:0] x_37;
  wire signed [63:0] y_29;
  wire signed [63:0] c$case_alt_40;
  assign acc_1_5 = c$case_alt_40;

  assign x_37 = acc_0_27;

  assign y_29 = acc_0_28;

  assign c$case_alt_40 = (x_37 + y_29);



  wire signed [63:0] x_38;
  wire signed [63:0] y_30;
  wire signed [63:0] c$case_alt_41;
  assign acc_1_6 = c$case_alt_41;

  assign x_38 = acc_0_29;

  assign y_30 = acc_0_30;

  assign c$case_alt_41 = (x_38 + y_30);



  wire signed [63:0] x_39;
  wire signed [63:0] y_31;
  wire signed [63:0] c$case_alt_42;
  assign acc_1_7 = c$case_alt_42;

  assign x_39 = acc_0_31;

  assign y_31 = acc_0_32;

  assign c$case_alt_42 = (x_39 + y_31);



  wire signed [63:0] x_40;
  wire signed [63:0] y_32;
  wire signed [63:0] c$case_alt_43;
  assign acc_1_8 = c$case_alt_43;

  assign x_40 = acc_0_33;

  assign y_32 = acc_0_34;

  assign c$case_alt_43 = (x_40 + y_32);



  wire signed [63:0] x_41;
  wire signed [63:0] y_33;
  wire signed [63:0] c$case_alt_44;
  assign acc_1_9 = c$case_alt_44;

  assign x_41 = acc_0_35;

  assign y_33 = acc_0_36;

  assign c$case_alt_44 = (x_41 + y_33);



  wire signed [63:0] x_42;
  wire signed [63:0] y_34;
  wire signed [63:0] c$case_alt_45;
  assign acc_2_0_14 = c$case_alt_45;

  assign x_42 = acc_1_0_9;

  assign y_34 = acc_1_1_10;

  assign c$case_alt_45 = (x_42 + y_34);



  wire signed [63:0] x_43;
  wire signed [63:0] y_35;
  wire signed [63:0] c$case_alt_46;
  assign acc_2_1_15 = c$case_alt_46;

  assign x_43 = acc_1_2_11;

  assign y_35 = acc_1_3_12;

  assign c$case_alt_46 = (x_43 + y_35);



  wire signed [63:0] x_44;
  wire signed [63:0] y_36;
  wire signed [63:0] c$case_alt_47;
  assign acc_2_2 = c$case_alt_47;

  assign x_44 = acc_1_4_13;

  assign y_36 = acc_1_5;

  assign c$case_alt_47 = (x_44 + y_36);



  wire signed [63:0] x_45;
  wire signed [63:0] y_37;
  wire signed [63:0] c$case_alt_48;
  assign acc_2_3 = c$case_alt_48;

  assign x_45 = acc_1_6;

  assign y_37 = acc_1_7;

  assign c$case_alt_48 = (x_45 + y_37);



  wire signed [63:0] x_46;
  wire signed [63:0] y_38;
  wire signed [63:0] c$case_alt_49;
  assign acc_2_4 = c$case_alt_49;

  assign x_46 = acc_1_8;

  assign y_38 = acc_1_9;

  assign c$case_alt_49 = (x_46 + y_38);



  wire signed [63:0] x_47;
  wire signed [63:0] y_39;
  wire signed [63:0] c$case_alt_50;
  assign acc_3_0_16 = c$case_alt_50;

  assign x_47 = acc_2_0_14;

  assign y_39 = acc_2_1_15;

  assign c$case_alt_50 = (x_47 + y_39);



  wire signed [63:0] x_48;
  wire signed [63:0] y_40;
  wire signed [63:0] c$case_alt_51;
  assign acc_3_1 = c$case_alt_51;

  assign x_48 = acc_2_2;

  assign y_40 = acc_2_3;

  assign c$case_alt_51 = (x_48 + y_40);



  wire signed [63:0] x_49;
  wire signed [63:0] y_41;
  wire signed [63:0] c$case_alt_52;
  assign acc_4_0_17 = c$case_alt_52;

  assign x_49 = acc_3_0_16;

  assign y_41 = acc_3_1;

  assign c$case_alt_52 = (x_49 + y_41);



  wire signed [63:0] x_50;
  wire signed [63:0] y_42;
  wire signed [63:0] c$case_alt_53;
  assign acc_5_0 = c$case_alt_53;

  assign x_50 = acc_4_0_17;

  assign y_42 = acc_2_4;

  assign c$case_alt_53 = (x_50 + y_42);





  assign x_3 = ds_0;

  assign y_0 = ds1;

  assign y_1 = result_28;

  assign x_projection_45 = $signed(win_0[1344-1 -: 64]);

  assign x_4 = x_projection_45;

  assign win_0 = window_0[1343:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_0_register
    if ( rst) begin
      window_0 <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_0 <= result_26;
    end
  end
  // register end

  assign result_26 = b_2 ? t_2 : window_0;

  assign t_2 = {result_55[15:8],   result_27};

  assign result_27 = result_29 ? c$t_case_alt_1 : c$t_case_alt_2;

  assign c$t_case_alt_sel_alt_t_3 = ({64'sd0,lastBucketUpdated_0});

  assign c$t_case_alt_sel_alt_f_3 = ({64'sd0,win_0});

  assign c$t_case_alt_1 = c$b_case_alt ? c$t_case_alt_sel_alt_t_3[1407:64] : c$t_case_alt_sel_alt_f_3[1407:64];

  assign c$t_case_alt_2 = c$b_case_alt ? lastBucketUpdated_0 : win_0;

  // vector replace begin
  genvar i_19;
  generate
  for (i_19=0;i_19<21;i_19=i_19+1) begin : vector_replace_0
    assign lastBucketUpdated_0[(20-i_19)*64+:64] = (64'sd0) == i_19 ? ((x_4 + y_1)) : win_0[(20-i_19)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_2 = c$b_case_alt | result_29;

  assign c$b_case_alt = x0 & x1;

  assign x1 = result_30[0:0];

  assign x0 = result_30[1:1];

  assign c$vec2_3 = (ws_3[20-1 : 0]);

  // zipWith start
  genvar i_20;
  generate
  for (i_20 = 0; i_20 < 5; i_20 = i_20 + 1) begin : zipWith_3
    wire [71:0] zipWith_in1_3;
    assign zipWith_in1_3 = result_39[i_20*72+:72];
    wire [3:0] zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_20*4+:4];
    wire [75:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_7[i_20*76+:76] = c$n_3;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 5; i_21 = i_21 + 1) begin : imap_3
    wire [3-1:0] map_index_3;
    wire [75:0] map_in_3;
    assign map_in_3 = c$ws_app_arg_7[i_21*76+:76];
    wire [3:0] map_out_3;

    assign map_index_3 = 3'd4 - i_21[0+:3];
    wire [3:0] c$case_alt_54;
    // spec.hs:295:1-63
    wire [7:0] t_18;
    // spec.hs:295:1-63
    wire [71:0] x_51;
    assign map_out_3 = c$case_alt_54;

    assign c$case_alt_54 = (t_18 == result_55[47:40]) ? {1'b1,map_index_3} : map_in_3[3:0];

    assign t_18 = x_51[71:64];

    assign x_51 = map_in_3[75:4];


    assign c$ws_app_arg_8[i_21*4+:4] = map_out_3;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_3 [0:5-1];
  genvar i_22;
  generate
  for (i_22=0; i_22 < 5; i_22=i_22+1) begin : mk_array_3
    assign vecArray_3[(5-1)-i_22] = result_39[i_22*72+:72];
  end
  endgenerate
  assign c$case_scrut_7 = vecArray_3[($unsigned({{(64-3) {1'b0}},i_3}))];
  // index end

  assign c$case_scrut_8 = ws_3[24-1 -: 4];

  assign result_28 = c$case_scrut_8[3:3] ? $signed(c$case_scrut_7[63:0]) : (64'sd0);

  assign i_3 = c$case_scrut_8[2:0];

  assign ws_3 = {c$ws_app_arg_8,{1'b0,3'bxxx}};

  wire  iterateI_ho1_0_arg0_3;
  wire  iterateI_ho1_0_res_7;
  wire  iterateI_ho1_1_res_7;
  wire  iterateI_ho1_2_res_7;
  assign iterateI_ho1_0_arg0_3 = slides[1:1];

  reg  c$bb_res_res_48 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_48_delay
    if (en) begin
      c$bb_res_res_48 <= iterateI_ho1_0_arg0_3;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_7 = c$bb_res_res_48;



  reg  c$bb_res_res_49 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_49_delay
    if (en) begin
      c$bb_res_res_49 <= iterateI_ho1_0_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_7 = c$bb_res_res_49;



  reg  c$bb_res_res_50 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_50_delay
    if (en) begin
      c$bb_res_res_50 <= iterateI_ho1_1_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_7 = c$bb_res_res_50;



  assign c$app_arg_7 = {slides[1:1],
                        iterateI_ho1_0_res_7,   iterateI_ho1_1_res_7,
                        iterateI_ho1_2_res_7};



  assign result_29 = c$app_arg_7[1-1:0];

  wire [1:0] iterateI_ho1_0_res_8;
  wire [1:0] iterateI_ho1_1_res_8;
  wire [1:0] iterateI_ho1_2_res_8;
  reg [1:0] c$bb_res_res_51 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_51_delay
    if (en) begin
      c$bb_res_res_51 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_8 = c$bb_res_res_51;



  reg [1:0] c$bb_res_res_52 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_52_delay
    if (en) begin
      c$bb_res_res_52 <= iterateI_ho1_0_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_8 = c$bb_res_res_52;



  reg [1:0] c$bb_res_res_53 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_53_delay
    if (en) begin
      c$bb_res_res_53 <= iterateI_ho1_1_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_8 = c$bb_res_res_53;



  assign c$app_arg_8 = {pOut1,
                        iterateI_ho1_0_res_8,   iterateI_ho1_1_res_8,
                        iterateI_ho1_2_res_8};



  assign result_30 = c$app_arg_8[2-1:0];

  assign y_2 = result_33;

  assign x_projection_47 = $signed(win_1[704-1 -: 64]);

  assign x_5 = x_projection_47;

  assign win_1 = window_1[703:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : window_1_register
    if ( rst) begin
      window_1 <= {8'd23,   {64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,   64'sd0,
             64'sd0,   64'sd0,   64'sd0,   64'sd0}};
    end else if (en) begin
      window_1 <= result_31;
    end
  end
  // register end

  assign result_31 = b_3 ? t_3 : window_1;

  assign t_3 = {result_55[23:16],   result_32};

  assign result_32 = result_34 ? c$t_case_alt_3 : c$t_case_alt_4;

  assign c$t_case_alt_sel_alt_t_6 = ({64'sd0,lastBucketUpdated_1});

  assign c$t_case_alt_sel_alt_f_6 = ({64'sd0,win_1});

  assign c$t_case_alt_3 = c$b_case_alt_0 ? c$t_case_alt_sel_alt_t_6[767:64] : c$t_case_alt_sel_alt_f_6[767:64];

  assign c$t_case_alt_4 = c$b_case_alt_0 ? lastBucketUpdated_1 : win_1;

  // vector replace begin
  genvar i_23;
  generate
  for (i_23=0;i_23<11;i_23=i_23+1) begin : vector_replace_1
    assign lastBucketUpdated_1[(10-i_23)*64+:64] = (64'sd0) == i_23 ? ((x_5 + y_2)) : win_1[(10-i_23)*64+:64];
  end
  endgenerate
  // vector replace end

  assign b_3 = c$b_case_alt_0 | result_34;

  assign c$b_case_alt_0 = x0_0 & x1_0;

  assign x1_0 = result_35[0:0];

  assign x0_0 = result_35[1:1];

  assign c$vec2_4 = (ws_4[20-1 : 0]);

  // zipWith start
  genvar i_24;
  generate
  for (i_24 = 0; i_24 < 5; i_24 = i_24 + 1) begin : zipWith_4
    wire [71:0] zipWith_in1_4;
    assign zipWith_in1_4 = result_45[i_24*72+:72];
    wire [3:0] zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_4[i_24*4+:4];
    wire [75:0] c$n_4;
    assign c$n_4 = {zipWith_in1_4,   zipWith_in2_4};


    assign c$ws_app_arg_9[i_24*76+:76] = c$n_4;
  end
  endgenerate
  // zipWith end

  // imap begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 5; i_25 = i_25 + 1) begin : imap_4
    wire [3-1:0] map_index_4;
    wire [75:0] map_in_4;
    assign map_in_4 = c$ws_app_arg_9[i_25*76+:76];
    wire [3:0] map_out_4;

    assign map_index_4 = 3'd4 - i_25[0+:3];
    wire [3:0] c$case_alt_55;
    // spec.hs:295:1-63
    wire [7:0] t_19;
    // spec.hs:295:1-63
    wire [71:0] x_52;
    assign map_out_4 = c$case_alt_55;

    assign c$case_alt_55 = (t_19 == result_55[55:48]) ? {1'b1,map_index_4} : map_in_4[3:0];

    assign t_19 = x_52[71:64];

    assign x_52 = map_in_4[75:4];


    assign c$ws_app_arg_10[i_25*4+:4] = map_out_4;
  end
  endgenerate
  // imap end

  // index begin
  wire [71:0] vecArray_4 [0:5-1];
  genvar i_26;
  generate
  for (i_26=0; i_26 < 5; i_26=i_26+1) begin : mk_array_4
    assign vecArray_4[(5-1)-i_26] = result_45[i_26*72+:72];
  end
  endgenerate
  assign c$case_scrut_9 = vecArray_4[($unsigned({{(64-3) {1'b0}},i_4}))];
  // index end

  assign c$case_scrut_10 = ws_4[24-1 -: 4];

  assign result_33 = c$case_scrut_10[3:3] ? $signed(c$case_scrut_9[63:0]) : (64'sd0);

  assign i_4 = c$case_scrut_10[2:0];

  assign ws_4 = {c$ws_app_arg_10,{1'b0,3'bxxx}};

  wire  iterateI_ho1_0_arg0_4;
  wire  iterateI_ho1_0_res_9;
  wire  iterateI_ho1_1_res_9;
  wire  iterateI_ho1_2_res_9;
  assign iterateI_ho1_0_arg0_4 = slides[2:2];

  reg  c$bb_res_res_54 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_54_delay
    if (en) begin
      c$bb_res_res_54 <= iterateI_ho1_0_arg0_4;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_9 = c$bb_res_res_54;



  reg  c$bb_res_res_55 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_55_delay
    if (en) begin
      c$bb_res_res_55 <= iterateI_ho1_0_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_9 = c$bb_res_res_55;



  reg  c$bb_res_res_56 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_56_delay
    if (en) begin
      c$bb_res_res_56 <= iterateI_ho1_1_res_9;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_9 = c$bb_res_res_56;



  assign c$app_arg_9 = {slides[2:2],
                        iterateI_ho1_0_res_9,   iterateI_ho1_1_res_9,
                        iterateI_ho1_2_res_9};



  assign result_34 = c$app_arg_9[1-1:0];

  assign slides = result_71[11:9];

  wire [1:0] iterateI_ho1_0_res_10;
  wire [1:0] iterateI_ho1_1_res_10;
  wire [1:0] iterateI_ho1_2_res_10;
  reg [1:0] c$bb_res_res_57 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_57_delay
    if (en) begin
      c$bb_res_res_57 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_10 = c$bb_res_res_57;



  reg [1:0] c$bb_res_res_58 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_58_delay
    if (en) begin
      c$bb_res_res_58 <= iterateI_ho1_0_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_10 = c$bb_res_res_58;



  reg [1:0] c$bb_res_res_59 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_59_delay
    if (en) begin
      c$bb_res_res_59 <= iterateI_ho1_1_res_10;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_10 = c$bb_res_res_59;



  assign c$app_arg_10 = {pOut0,
                         iterateI_ho1_0_res_10,
                         iterateI_ho1_1_res_10,
                         iterateI_ho1_2_res_10};



  assign result_35 = c$app_arg_10[2-1:0];

  wire [79:0] iterateI_ho1_0_arg0_5;
  wire [79:0] iterateI_ho1_0_res_11;
  wire [79:0] iterateI_ho1_1_res_11;
  wire [79:0] iterateI_ho1_2_res_11;
  assign iterateI_ho1_0_arg0_5 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_60 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_60_delay
    if (en) begin
      c$bb_res_res_60 <= iterateI_ho1_0_arg0_5;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_11 = c$bb_res_res_60;



  reg [79:0] c$bb_res_res_61 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_61_delay
    if (en) begin
      c$bb_res_res_61 <= iterateI_ho1_0_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_11 = c$bb_res_res_61;



  reg [79:0] c$bb_res_res_62 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_62_delay
    if (en) begin
      c$bb_res_res_62 <= iterateI_ho1_1_res_11;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_11 = c$bb_res_res_62;



  assign c$app_arg_11 = {{t_12,   t_11,   t_10,
                          t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                          t_7},   iterateI_ho1_0_res_11,
                         iterateI_ho1_1_res_11,
                         iterateI_ho1_2_res_11};



  assign result_36 = c$app_arg_11[80-1:0];

  wire  iterateI_ho1_0_res_12;
  wire  iterateI_ho1_1_res_12;
  wire  iterateI_ho1_2_res_12;
  wire  iterateI_ho1_3_res_7;
  reg  c$bb_res_res_63 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_63_delay
    if (en) begin
      c$bb_res_res_63 <= pOut2;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_12 = c$bb_res_res_63;



  reg  c$bb_res_res_64 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_64_delay
    if (en) begin
      c$bb_res_res_64 <= iterateI_ho1_0_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_12 = c$bb_res_res_64;



  reg  c$bb_res_res_65 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_65_delay
    if (en) begin
      c$bb_res_res_65 <= iterateI_ho1_1_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_12 = c$bb_res_res_65;



  reg  c$bb_res_res_66 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_66_delay
    if (en) begin
      c$bb_res_res_66 <= iterateI_ho1_2_res_12;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_7 = c$bb_res_res_66;



  assign c$app_arg_12 = {pOut2,
                         iterateI_ho1_0_res_12,
                         iterateI_ho1_1_res_12,
                         iterateI_ho1_2_res_12,   iterateI_ho1_3_res_7};



  assign result_37 = c$app_arg_12[1-1:0];

  assign result_38 = (x0_1 & x1_1) ? t_4 : result_39;

  assign x0_1 = result_43[1:1];

  assign x1_1 = result_43[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_39_register
    if ( rst) begin
      result_39 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                   64'sd0},
   {8'd23,   64'sd0}};
    end else if (en) begin
      result_39 <= result_38;
    end
  end
  // register end

  assign t_projection_6 = ({result_39,{result_56[47:40],   (x_6 + y_3)}});

  assign t_4 = t_projection_6[359:0];

  assign x_6 = c$out0_case_alt;

  assign y_3 = c$out1_case_alt;

  assign c$out1_case_alt = (tag == tagToMatch) ? dta : (64'sd0);

  assign dta = $signed(result_41[63:0]);

  assign tag = result_41[71:64];

  assign tagToMatch = result_56[63:56];

  assign result_40 = b_4 ? {t_10,
                            c$ds_app_arg} : result_41;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_41_register
    if ( rst) begin
      result_41 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_41 <= result_40;
    end
  end
  // register end

  assign b_4 = result_42;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_delay
    if (en) begin
      c$ds_app_arg <= $signed(inputs_3[64:1]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_13;
  reg  c$bb_res_res_67 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_67_delay
    if (en) begin
      c$bb_res_res_67 <= pIn2_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_13 = c$bb_res_res_67;



  assign c$app_arg_13 = {pIn2_0,
                         iterateI_ho1_0_res_13};



  assign result_42 = c$app_arg_13[1-1:0];

  wire [1:0] iterateI_ho1_0_res_14;
  wire [1:0] iterateI_ho1_1_res_13;
  reg [1:0] c$bb_res_res_68 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_68_delay
    if (en) begin
      c$bb_res_res_68 <= pOut1;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_14 = c$bb_res_res_68;



  reg [1:0] c$bb_res_res_69 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_69_delay
    if (en) begin
      c$bb_res_res_69 <= iterateI_ho1_0_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_13 = c$bb_res_res_69;



  assign c$app_arg_14 = {pOut1,
                         iterateI_ho1_0_res_14,
                         iterateI_ho1_1_res_13};



  assign result_43 = c$app_arg_14[2-1:0];

  assign result_44 = (x0_2 & x1_2) ? t_5 : result_45;

  assign x0_2 = result_49[1:1];

  assign x1_2 = result_49[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_45_register
    if ( rst) begin
      result_45 <= {{8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,   64'sd0},   {8'd23,
                                                                   64'sd0},
   {8'd23,   64'sd0}};
    end else if (en) begin
      result_45 <= result_44;
    end
  end
  // register end

  assign t_projection_7 = ({result_45,{result_56[55:48],   (x_7 + y_4)}});

  assign t_5 = t_projection_7[359:0];

  assign x_7 = c$out0_case_alt_0;

  assign y_4 = c$out0_case_alt;

  assign c$out0_case_alt = (tag_0 == tagToMatch_0) ? dta_0 : (64'sd0);

  assign dta_0 = $signed(result_51[63:0]);

  assign tag_0 = result_51[71:64];

  assign tagToMatch_0 = result_56[71:64];

  assign c$out0_case_alt_0 = (tag_1 == tagToMatch_1) ? dta_1 : (64'sd0);

  assign dta_1 = $signed(result_47[63:0]);

  assign tagToMatch_1 = result_56[79:72];

  assign tag_1 = result_47[71:64];

  assign result_46 = b_5 ? {t_12,
                            c$ds_app_arg_0} : result_47;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_47_register
    if ( rst) begin
      result_47 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_47 <= result_46;
    end
  end
  // register end

  assign b_5 = result_48;

  // delay begin
  always @(posedge clk) begin : c$ds_app_arg_0_delay
    if (en) begin
      c$ds_app_arg_0 <= $signed(inputs_3[194:131]);
    end
  end
  // delay end

  wire  iterateI_ho1_0_res_15;
  reg  c$bb_res_res_70 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_70_delay
    if (en) begin
      c$bb_res_res_70 <= pIn0_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_15 = c$bb_res_res_70;



  assign c$app_arg_15 = {pIn0_0,
                         iterateI_ho1_0_res_15};



  assign result_48 = c$app_arg_15[1-1:0];

  wire [1:0] iterateI_ho1_0_res_16;
  wire [1:0] iterateI_ho1_1_res_14;
  reg [1:0] c$bb_res_res_71 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_71_delay
    if (en) begin
      c$bb_res_res_71 <= pOut0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_16 = c$bb_res_res_71;



  reg [1:0] c$bb_res_res_72 = {1'b0,   1'b0};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_72_delay
    if (en) begin
      c$bb_res_res_72 <= iterateI_ho1_0_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_14 = c$bb_res_res_72;



  assign c$app_arg_16 = {pOut0,
                         iterateI_ho1_0_res_16,
                         iterateI_ho1_1_res_14};



  assign result_49 = c$app_arg_16[2-1:0];

  assign result_50 = b_6 ? {t_11,
                            c$input1Win_app_arg} : result_51;

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_51_register
    if ( rst) begin
      result_51 <= {8'd23,   64'sd0};
    end else if (en) begin
      result_51 <= result_50;
    end
  end
  // register end

  assign b_6 = result_52;

  // delay begin
  always @(posedge clk) begin : c$input1Win_app_arg_delay
    if (en) begin
      c$input1Win_app_arg <= $signed(inputs_3[129:66]);
    end
  end
  // delay end

  assign inputs_3 = result_71[206:12];

  wire  iterateI_ho1_0_res_17;
  reg  c$bb_res_res_73 = 1'b0;
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_73_delay
    if (en) begin
      c$bb_res_res_73 <= pIn1_0;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_17 = c$bb_res_res_73;



  assign c$app_arg_17 = {pIn1_0,
                         iterateI_ho1_0_res_17};



  assign result_52 = c$app_arg_17[1-1:0];

  wire [79:0] iterateI_ho1_0_arg0_6;
  wire [79:0] iterateI_ho1_0_res_18;
  wire [79:0] iterateI_ho1_1_res_15;
  wire [79:0] iterateI_ho1_2_res_13;
  wire [79:0] iterateI_ho1_3_res_8;
  wire [79:0] iterateI_ho1_4_res_7;
  wire [79:0] iterateI_ho1_5_res_4;
  assign iterateI_ho1_0_arg0_6 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_74 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_74_delay
    if (en) begin
      c$bb_res_res_74 <= iterateI_ho1_0_arg0_6;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_18 = c$bb_res_res_74;



  reg [79:0] c$bb_res_res_75 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_75_delay
    if (en) begin
      c$bb_res_res_75 <= iterateI_ho1_0_res_18;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_15 = c$bb_res_res_75;



  reg [79:0] c$bb_res_res_76 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_76_delay
    if (en) begin
      c$bb_res_res_76 <= iterateI_ho1_1_res_15;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_13 = c$bb_res_res_76;



  reg [79:0] c$bb_res_res_77 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_77_delay
    if (en) begin
      c$bb_res_res_77 <= iterateI_ho1_2_res_13;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_8 = c$bb_res_res_77;



  reg [79:0] c$bb_res_res_78 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_78_delay
    if (en) begin
      c$bb_res_res_78 <= iterateI_ho1_3_res_8;
    end
  end
  // delay end

  assign iterateI_ho1_4_res_7 = c$bb_res_res_78;



  reg [79:0] c$bb_res_res_79 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_79_delay
    if (en) begin
      c$bb_res_res_79 <= iterateI_ho1_4_res_7;
    end
  end
  // delay end

  assign iterateI_ho1_5_res_4 = c$bb_res_res_79;



  assign c$app_arg_18 = {{t_12,   t_11,   t_10,
                          t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                          t_7},   iterateI_ho1_0_res_18,
                         iterateI_ho1_1_res_15,
                         iterateI_ho1_2_res_13,   iterateI_ho1_3_res_8,
                         iterateI_ho1_4_res_7,   iterateI_ho1_5_res_4};



  assign result_53 = c$app_arg_18[80-1:0];

  wire [79:0] iterateI_ho1_0_arg0_7;
  wire [79:0] iterateI_ho1_0_res_19;
  wire [79:0] iterateI_ho1_1_res_16;
  wire [79:0] iterateI_ho1_2_res_14;
  wire [79:0] iterateI_ho1_3_res_9;
  assign iterateI_ho1_0_arg0_7 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_80 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_80_delay
    if (en) begin
      c$bb_res_res_80 <= iterateI_ho1_0_arg0_7;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_19 = c$bb_res_res_80;



  reg [79:0] c$bb_res_res_81 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_81_delay
    if (en) begin
      c$bb_res_res_81 <= iterateI_ho1_0_res_19;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_16 = c$bb_res_res_81;



  reg [79:0] c$bb_res_res_82 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_82_delay
    if (en) begin
      c$bb_res_res_82 <= iterateI_ho1_1_res_16;
    end
  end
  // delay end

  assign iterateI_ho1_2_res_14 = c$bb_res_res_82;



  reg [79:0] c$bb_res_res_83 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_83_delay
    if (en) begin
      c$bb_res_res_83 <= iterateI_ho1_2_res_14;
    end
  end
  // delay end

  assign iterateI_ho1_3_res_9 = c$bb_res_res_83;



  assign c$app_arg_19 = {{t_12,   t_11,   t_10,
                          t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                          t_7},   iterateI_ho1_0_res_19,
                         iterateI_ho1_1_res_16,
                         iterateI_ho1_2_res_14,   iterateI_ho1_3_res_9};



  assign result_54 = c$app_arg_19[80-1:0];

  wire [79:0] iterateI_ho1_0_arg0_8;
  wire [79:0] iterateI_ho1_0_res_20;
  wire [79:0] iterateI_ho1_1_res_17;
  assign iterateI_ho1_0_arg0_8 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_84 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_84_delay
    if (en) begin
      c$bb_res_res_84 <= iterateI_ho1_0_arg0_8;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_20 = c$bb_res_res_84;



  reg [79:0] c$bb_res_res_85 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_85_delay
    if (en) begin
      c$bb_res_res_85 <= iterateI_ho1_0_res_20;
    end
  end
  // delay end

  assign iterateI_ho1_1_res_17 = c$bb_res_res_85;



  assign c$app_arg_20 = {{t_12,   t_11,   t_10,
                          t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                          t_7},   iterateI_ho1_0_res_20,
                         iterateI_ho1_1_res_17};



  assign result_55 = c$app_arg_20[80-1:0];

  wire [79:0] iterateI_ho1_0_arg0_9;
  wire [79:0] iterateI_ho1_0_res_21;
  assign iterateI_ho1_0_arg0_9 = {t_12,   t_11,
                                  t_10,   t_9,   t_8,   t_7,   t_6,   t_9,
                                  t_8,   t_7};

  reg [79:0] c$bb_res_res_86 = {8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,   8'd23,
   8'd23};
  // delay begin
  always @(posedge clk) begin : c$bb_res_res_86_delay
    if (en) begin
      c$bb_res_res_86 <= iterateI_ho1_0_arg0_9;
    end
  end
  // delay end

  assign iterateI_ho1_0_res_21 = c$bb_res_res_86;



  assign c$app_arg_21 = {{t_12,   t_11,   t_10,
                          t_9,   t_8,   t_7,   t_6,   t_9,   t_8,
                          t_7},   iterateI_ho1_0_res_21};



  assign result_56 = c$app_arg_21[80-1:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_6_register
    if ( rst) begin
      t_6 <= 8'd1;
    end else if (en) begin
      t_6 <= result_57;
    end
  end
  // register end

  assign result_57 = pOut3 ? result_58 : t_6;

  assign b_7 = t_6 == 8'd22;

  assign f1 = t_6 + 8'd1;

  assign result_58 = b_7 ? 8'd1 : f1;

  assign pOut3 = pacings[0:0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_7_register
    if ( rst) begin
      t_7 <= 8'd1;
    end else if (en) begin
      t_7 <= result_59;
    end
  end
  // register end

  assign result_59 = pOut2 ? result_60 : t_7;

  assign b_8 = t_7 == 8'd22;

  assign f1_0 = t_7 + 8'd1;

  assign result_60 = b_8 ? 8'd1 : f1_0;

  assign pOut2 = pacings[1:1];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_8_register
    if ( rst) begin
      t_8 <= 8'd1;
    end else if (en) begin
      t_8 <= result_61;
    end
  end
  // register end

  assign result_61 = c$ds5_case_alt ? result_62 : t_8;

  assign b_9 = t_8 == 8'd22;

  assign f1_1 = t_8 + 8'd1;

  assign result_62 = b_9 ? 8'd1 : f1_1;

  assign c$ds5_case_alt = x0_3 & x1_3;

  assign x1_3 = pOut1[0:0];

  assign x0_3 = pOut1[1:1];

  assign pOut1 = pacings[3:2];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_9_register
    if ( rst) begin
      t_9 <= 8'd1;
    end else if (en) begin
      t_9 <= result_63;
    end
  end
  // register end

  assign result_63 = c$ds4_case_alt ? result_64 : t_9;

  assign b_10 = t_9 == 8'd22;

  assign f1_2 = t_9 + 8'd1;

  assign result_64 = b_10 ? 8'd1 : f1_2;

  assign c$ds4_case_alt = x0_4 & x1_4;

  assign x1_4 = pOut0[0:0];

  assign x0_4 = pOut0[1:1];

  assign pOut0 = pacings[5:4];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_10_register
    if ( rst) begin
      t_10 <= 8'd1;
    end else if (en) begin
      t_10 <= result_65;
    end
  end
  // register end

  assign result_65 = pIn2_0 ? result_66 : t_10;

  assign b_11 = t_10 == 8'd22;

  assign f1_3 = t_10 + 8'd1;

  assign result_66 = b_11 ? 8'd1 : f1_3;

  assign pIn2_0 = pacings[6:6];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_11_register
    if ( rst) begin
      t_11 <= 8'd1;
    end else if (en) begin
      t_11 <= result_67;
    end
  end
  // register end

  assign result_67 = pIn1_0 ? result_68 : t_11;

  assign b_12 = t_11 == 8'd22;

  assign f1_4 = t_11 + 8'd1;

  assign result_68 = b_12 ? 8'd1 : f1_4;

  assign pIn1_0 = pacings[7:7];

  // register begin
  always @(posedge clk or  posedge  rst) begin : t_12_register
    if ( rst) begin
      t_12 <= 8'd1;
    end else if (en) begin
      t_12 <= result_69;
    end
  end
  // register end

  assign result_69 = pIn0_0 ? result_70 : t_12;

  assign b_13 = t_12 == 8'd22;

  assign f1_5 = t_12 + 8'd1;

  assign result_70 = b_13 ? 8'd1 : f1_5;

  assign pIn0_0 = pacings[8:8];

  assign pacings = result_71[8:0];

  assign result_71 = {c$app_arg_24,
                      c$app_arg_23,   c$app_arg_22};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_22_register
    if ( rst) begin
      c$app_arg_22 <= {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                  1'b0},   {1'b0,
                                                                            1'b0,
                                                                            1'b0,
                                                                            {1'b0,
                                                                             1'b0},
                                                                            {1'b0,
                                                                             1'b0},
                                                                            1'b0,
                                                                            1'b0}};
    end else if (en) begin
      c$app_arg_22 <= c$case_alt;
    end
  end
  // register end

  assign c$case_alt = qPush ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = qPop ? c$case_alt_2 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   {1'b0,   1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},
                                                {1'b0,   1'b0},   1'b0,   1'b0}};

  assign c$case_alt_1 = qPop ? c$case_alt_3 : {{{64'sd0,
                                                 1'b0},   {64'sd0,   1'b0},   {64'sd0,
                                                                               1'b0}},   {1'b0,   1'b0,   1'b0},
                                               {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},
                                                {1'b0,   1'b0},   1'b0,   1'b0}};

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_2 = qData;
      default : c$case_alt_2 = c$case_alt_4;
    endcase
  end

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_3 = {{{64'sd0,   1'b0},
                                {64'sd0,   1'b0},   {64'sd0,   1'b0}},
                               {1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,
                                                          1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},
                                                          1'b0,   1'b0}};
      default : c$case_alt_3 = c$case_alt_4;
    endcase
  end

  // index begin
  wire [206:0] vecArray_5 [0:2-1];
  genvar i_27;
  generate
  for (i_27=0; i_27 < 2; i_27=i_27+1) begin : mk_array_5
    assign vecArray_5[(2-1)-i_27] = buffer[i_27*207+:207];
  end
  endgenerate
  assign c$case_alt_4 = vecArray_5[c$cursor_case_alt_4];
  // index end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_23_register
    if ( rst) begin
      c$app_arg_23 <= 1'b0;
    end else if (en) begin
      c$app_arg_23 <= c$case_alt_5;
    end
  end
  // register end

  assign c$case_alt_5 = qPush ? c$case_alt_6 : c$case_alt_7;

  assign c$case_alt_6 = qPop ? 1'b1 : c$case_alt_8;

  assign c$case_alt_7 = qPop ? c$case_alt_9 : c$case_alt_8;

  assign c$case_alt_8 = qPop ? ({1 {1'bx}}) : 1'b0;

  always @(*) begin
    case(x_8)
      64'sd0 : c$case_alt_9 = 1'b0;
      default : c$case_alt_9 = 1'b1;
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_24_register
    if ( rst) begin
      c$app_arg_24 <= 1'b0;
    end else if (en) begin
      c$app_arg_24 <= c$case_alt_10;
    end
  end
  // register end

  assign c$case_alt_10 = qPush ? c$case_alt_11 : 1'b0;

  assign c$case_alt_11 = qPop ? 1'b1 : c$case_alt_12;

  assign c$tte_rhs = (x_8 != 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_alt_12 = c$tte_rhs[0];

  // register begin
  always @(posedge clk or  posedge  rst) begin : buffer_register
    if ( rst) begin
      buffer <= {{{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                   1'b0},
    {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},   1'b0,   1'b0}},
   {{{64'sd0,   1'b0},   {64'sd0,   1'b0},   {64'sd0,   1'b0}},   {1'b0,   1'b0,
                                                                   1'b0},
    {1'b0,   1'b0,   1'b0,   {1'b0,   1'b0},   {1'b0,   1'b0},   1'b0,   1'b0}}};
    end else if (en) begin
      buffer <= c$buffer_case_alt;
    end
  end
  // register end

  assign c$buffer_case_alt = qPush ? c$buffer_case_alt_0 : buffer;

  assign c$buffer_case_alt_sel_alt_t_1 = ({qData,buffer});

  assign c$buffer_case_alt_0 = qPop ? c$buffer_case_alt_sel_alt_t_1[620:207] : c$buffer_case_alt_1;

  assign c$buffer_case_alt_sel_alt_f_2 = ({qData,buffer});

  assign c$buffer_case_alt_1 = c$cursor_case_scrut ? buffer : c$buffer_case_alt_sel_alt_f_2[620:207];

  assign qData = result_6[206:0];

  assign x_8 = cursor;

  // register begin
  always @(posedge clk or  posedge  rst) begin : cursor_register
    if ( rst) begin
      cursor <= (64'sd0);
    end else if (en) begin
      cursor <= c$cursor_case_alt;
    end
  end
  // register end

  assign c$cursor_case_alt = qPush ? c$cursor_case_alt_0 : c$cursor_case_alt_2;

  assign c$cursor_case_alt_0 = qPop ? cursor : c$cursor_case_alt_1;

  assign c$cursor_case_alt_1 = c$cursor_case_scrut ? cursor : ((x_8 + 64'sd1));

  assign c$tte_rhs_0 = (x_8 == 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$cursor_case_scrut = c$tte_rhs_0[0];

  assign c$cursor_case_alt_2 = qPop ? c$cursor_case_alt_3 : cursor;

  always @(*) begin
    case(x_8)
      64'sd0 : c$cursor_case_alt_3 = 64'sd0;
      default : c$cursor_case_alt_3 = c$cursor_case_alt_4;
    endcase
  end

  assign c$cursor_case_alt_4 = (x_8 - 64'sd1);

  assign result = {result_7[271:12],   {qPush,
                                        qPop,   result_71[208:208],   qPopValid,
                                        result_7[11:3],   result_7[2:0]}};

  assign qPopValid = result_71[207:207];

  assign qPush = result_6[207:207];

  assign qPop = result_7[272:272];

  assign result_0 = result[275:16];

  assign result_1 = result[15:0];

  assign result_0_0 = result_0[259:195];

  assign result_0_1 = result_0[194:130];

  assign result_0_2 = result_0[129:65];

  assign result_0_3 = result_0[64:0];

  assign result_0_0_0 = $signed(result_0_0[64:1]);

  assign result_0_0_1 = result_0_0[0:0];

  assign result_0_1_0 = $signed(result_0_1[64:1]);

  assign result_0_1_1 = result_0_1[0:0];

  assign result_0_2_0 = $signed(result_0_2[64:1]);

  assign result_0_2_1 = result_0_2[0:0];

  assign result_0_3_0 = $signed(result_0_3[64:1]);

  assign result_0_3_1 = result_0_3[0:0];

  assign result_1_0 = result_1[15:15];

  assign result_1_1 = result_1[14:14];

  assign result_1_2 = result_1[13:13];

  assign result_1_3 = result_1[12:12];

  assign result_1_4_15 = result_1[11:3];

  assign result_1_5_21 = result_1[2:0];

  assign result_1_4_0 = result_1_4_15[8:8];

  assign result_1_4_1 = result_1_4_15[7:7];

  assign result_1_4_2 = result_1_4_15[6:6];

  assign result_1_4_3 = result_1_4_15[5:4];

  assign result_1_4_4 = result_1_4_15[3:2];

  assign result_1_4_5 = result_1_4_15[1:1];

  assign result_1_4_6 = result_1_4_15[0:0];

  assign result_1_4_3_0 = result_1_4_3[1:1];

  assign result_1_4_3_1 = result_1_4_3[0:0];

  assign result_1_4_4_0 = result_1_4_4[1:1];

  assign result_1_4_4_1 = result_1_4_4[0:0];

  assign result_1_5_0 = result_1_5_21[2:2];

  assign result_1_5_1 = result_1_5_21[1:1];

  assign result_1_5_2 = result_1_5_21[0:0];


endmodule

